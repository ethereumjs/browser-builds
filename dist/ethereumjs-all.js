(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.EthJS = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/* Copyright (c) 2013 Rod Vagg, MIT License */

function AbstractChainedBatch(db) {
  this._db = db;
  this._operations = [];
  this._written = false;
}

AbstractChainedBatch.prototype._checkWritten = function () {
  if (this._written) throw new Error('write() already called on this batch');
};

AbstractChainedBatch.prototype.put = function (key, value) {
  this._checkWritten();

  var err = this._db._checkKey(key, 'key', this._db._isBuffer);
  if (err) throw err;

  if (!this._db._isBuffer(key)) key = String(key);
  if (!this._db._isBuffer(value)) value = String(value);

  if (typeof this._put == 'function') this._put(key, value);else this._operations.push({ type: 'put', key: key, value: value });

  return this;
};

AbstractChainedBatch.prototype.del = function (key) {
  this._checkWritten();

  var err = this._db._checkKey(key, 'key', this._db._isBuffer);
  if (err) throw err;

  if (!this._db._isBuffer(key)) key = String(key);

  if (typeof this._del == 'function') this._del(key);else this._operations.push({ type: 'del', key: key });

  return this;
};

AbstractChainedBatch.prototype.clear = function () {
  this._checkWritten();

  this._operations = [];

  if (typeof this._clear == 'function') this._clear();

  return this;
};

AbstractChainedBatch.prototype.write = function (options, callback) {
  this._checkWritten();

  if (typeof options == 'function') callback = options;
  if (typeof callback != 'function') throw new Error('write() requires a callback argument');
  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) != 'object') options = {};

  this._written = true;

  if (typeof this._write == 'function') return this._write(callback);

  if (typeof this._db._batch == 'function') return this._db._batch(this._operations, options, callback);

  process.nextTick(callback);
};

module.exports = AbstractChainedBatch;

}).call(this,require('_process'))
},{"_process":213}],2:[function(require,module,exports){
(function (process){
'use strict';

/* Copyright (c) 2013 Rod Vagg, MIT License */

function AbstractIterator(db) {
  this.db = db;
  this._ended = false;
  this._nexting = false;
}

AbstractIterator.prototype.next = function (callback) {
  var self = this;

  if (typeof callback != 'function') throw new Error('next() requires a callback argument');

  if (self._ended) return callback(new Error('cannot call next() after end()'));
  if (self._nexting) return callback(new Error('cannot call next() before previous next() has completed'));

  self._nexting = true;
  if (typeof self._next == 'function') {
    return self._next(function () {
      self._nexting = false;
      callback.apply(null, arguments);
    });
  }

  process.nextTick(function () {
    self._nexting = false;
    callback();
  });
};

AbstractIterator.prototype.end = function (callback) {
  if (typeof callback != 'function') throw new Error('end() requires a callback argument');

  if (this._ended) return callback(new Error('end() already called on iterator'));

  this._ended = true;

  if (typeof this._end == 'function') return this._end(callback);

  process.nextTick(callback);
};

module.exports = AbstractIterator;

}).call(this,require('_process'))
},{"_process":213}],3:[function(require,module,exports){
(function (Buffer,process){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/* Copyright (c) 2013 Rod Vagg, MIT License */

var xtend = require('xtend'),
    AbstractIterator = require('./abstract-iterator'),
    AbstractChainedBatch = require('./abstract-chained-batch');

function AbstractLevelDOWN(location) {
  if (!arguments.length || location === undefined) throw new Error('constructor requires at least a location argument');

  if (typeof location != 'string') throw new Error('constructor requires a location string argument');

  this.location = location;
  this.status = 'new';
}

AbstractLevelDOWN.prototype.open = function (options, callback) {
  var self = this,
      oldStatus = this.status;

  if (typeof options == 'function') callback = options;

  if (typeof callback != 'function') throw new Error('open() requires a callback argument');

  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) != 'object') options = {};

  options.createIfMissing = options.createIfMissing != false;
  options.errorIfExists = !!options.errorIfExists;

  if (typeof this._open == 'function') {
    this.status = 'opening';
    this._open(options, function (err) {
      if (err) {
        self.status = oldStatus;
        return callback(err);
      }
      self.status = 'open';
      callback();
    });
  } else {
    this.status = 'open';
    process.nextTick(callback);
  }
};

AbstractLevelDOWN.prototype.close = function (callback) {
  var self = this,
      oldStatus = this.status;

  if (typeof callback != 'function') throw new Error('close() requires a callback argument');

  if (typeof this._close == 'function') {
    this.status = 'closing';
    this._close(function (err) {
      if (err) {
        self.status = oldStatus;
        return callback(err);
      }
      self.status = 'closed';
      callback();
    });
  } else {
    this.status = 'closed';
    process.nextTick(callback);
  }
};

AbstractLevelDOWN.prototype.get = function (key, options, callback) {
  var err;

  if (typeof options == 'function') callback = options;

  if (typeof callback != 'function') throw new Error('get() requires a callback argument');

  if (err = this._checkKey(key, 'key', this._isBuffer)) return callback(err);

  if (!this._isBuffer(key)) key = String(key);

  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) != 'object') options = {};

  options.asBuffer = options.asBuffer != false;

  if (typeof this._get == 'function') return this._get(key, options, callback);

  process.nextTick(function () {
    callback(new Error('NotFound'));
  });
};

AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
  var err;

  if (typeof options == 'function') callback = options;

  if (typeof callback != 'function') throw new Error('put() requires a callback argument');

  if (err = this._checkKey(key, 'key', this._isBuffer)) return callback(err);

  if (!this._isBuffer(key)) key = String(key);

  // coerce value to string in node, don't touch it in browser
  // (indexeddb can store any JS type)
  if (value != null && !this._isBuffer(value) && !process.browser) value = String(value);

  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) != 'object') options = {};

  if (typeof this._put == 'function') return this._put(key, value, options, callback);

  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.del = function (key, options, callback) {
  var err;

  if (typeof options == 'function') callback = options;

  if (typeof callback != 'function') throw new Error('del() requires a callback argument');

  if (err = this._checkKey(key, 'key', this._isBuffer)) return callback(err);

  if (!this._isBuffer(key)) key = String(key);

  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) != 'object') options = {};

  if (typeof this._del == 'function') return this._del(key, options, callback);

  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
  if (!arguments.length) return this._chainedBatch();

  if (typeof options == 'function') callback = options;

  if (typeof array == 'function') callback = array;

  if (typeof callback != 'function') throw new Error('batch(array) requires a callback argument');

  if (!Array.isArray(array)) return callback(new Error('batch(array) requires an array argument'));

  if (!options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) != 'object') options = {};

  var i = 0,
      l = array.length,
      e,
      err;

  for (; i < l; i++) {
    e = array[i];
    if ((typeof e === 'undefined' ? 'undefined' : _typeof(e)) != 'object') continue;

    if (err = this._checkKey(e.type, 'type', this._isBuffer)) return callback(err);

    if (err = this._checkKey(e.key, 'key', this._isBuffer)) return callback(err);
  }

  if (typeof this._batch == 'function') return this._batch(array, options, callback);

  process.nextTick(callback);
};

//TODO: remove from here, not a necessary primitive
AbstractLevelDOWN.prototype.approximateSize = function (start, end, callback) {
  if (start == null || end == null || typeof start == 'function' || typeof end == 'function') {
    throw new Error('approximateSize() requires valid `start`, `end` and `callback` arguments');
  }

  if (typeof callback != 'function') throw new Error('approximateSize() requires a callback argument');

  if (!this._isBuffer(start)) start = String(start);

  if (!this._isBuffer(end)) end = String(end);

  if (typeof this._approximateSize == 'function') return this._approximateSize(start, end, callback);

  process.nextTick(function () {
    callback(null, 0);
  });
};

AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
  var self = this;

  options = xtend(options);['start', 'end', 'gt', 'gte', 'lt', 'lte'].forEach(function (o) {
    if (options[o] && self._isBuffer(options[o]) && options[o].length === 0) delete options[o];
  });

  options.reverse = !!options.reverse;
  options.keys = options.keys != false;
  options.values = options.values != false;
  options.limit = 'limit' in options ? options.limit : -1;
  options.keyAsBuffer = options.keyAsBuffer != false;
  options.valueAsBuffer = options.valueAsBuffer != false;

  return options;
};

AbstractLevelDOWN.prototype.iterator = function (options) {
  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) != 'object') options = {};

  options = this._setupIteratorOptions(options);

  if (typeof this._iterator == 'function') return this._iterator(options);

  return new AbstractIterator(this);
};

AbstractLevelDOWN.prototype._chainedBatch = function () {
  return new AbstractChainedBatch(this);
};

AbstractLevelDOWN.prototype._isBuffer = function (obj) {
  return Buffer.isBuffer(obj);
};

AbstractLevelDOWN.prototype._checkKey = function (obj, type) {

  if (obj === null || obj === undefined) return new Error(type + ' cannot be `null` or `undefined`');

  if (this._isBuffer(obj)) {
    if (obj.length === 0) return new Error(type + ' cannot be an empty Buffer');
  } else if (String(obj) === '') return new Error(type + ' cannot be an empty String');
};

module.exports = AbstractLevelDOWN;

}).call(this,{"isBuffer":require("../is-buffer/index.js")},require('_process'))
},{"../is-buffer/index.js":161,"./abstract-chained-batch":1,"./abstract-iterator":2,"_process":213,"xtend":263}],4:[function(require,module,exports){
'use strict';

exports.AbstractLevelDOWN = require('./abstract-leveldown');
exports.AbstractIterator = require('./abstract-iterator');
exports.AbstractChainedBatch = require('./abstract-chained-batch');
exports.isLevelDOWN = require('./is-leveldown');

},{"./abstract-chained-batch":1,"./abstract-iterator":2,"./abstract-leveldown":3,"./is-leveldown":5}],5:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var AbstractLevelDOWN = require('./abstract-leveldown');

function isLevelDOWN(db) {
  if (!db || (typeof db === 'undefined' ? 'undefined' : _typeof(db)) !== 'object') return false;
  return Object.keys(AbstractLevelDOWN.prototype).filter(function (name) {
    // TODO remove approximateSize check when method is gone
    return name[0] != '_' && name != 'approximateSize';
  }).every(function (name) {
    return typeof db[name] == 'function';
  });
}

module.exports = isLevelDOWN;

},{"./abstract-leveldown":3}],6:[function(require,module,exports){
(function (Buffer){
"use strict";

(function () {
    var root = this;
    var previous_mymodule = root.mymodule;

    var createBuffer = null,
        convertBytesToString,
        convertStringToBytes = null;

    var slowCreateBuffer = function slowCreateBuffer(arg) {

        // Passed in a single number, the length to pre-allocate
        if (typeof arg === 'number') {
            var result = [];
            for (var i = 0; i < arg; i++) {
                result.push(0);
            }
            return result;
        } else {
            // Make sure they are passing sensible data
            for (var i = 0; i < arg.length; i++) {
                if (arg[i] < 0 || arg[i] >= 256 || typeof arg[i] !== 'number') {
                    throw new Error('invalid byte at index ' + i + '(' + arg[i] + ')');
                }
            }

            // Most array-like things should support this
            if (arg.slice) {
                return arg.slice(0);
            }

            // Something *weird*; copy it into an array (see PR#2)
            var result = [];
            for (var i = 0; i < arg.length; i++) {
                result.push(arg[i]);
            }
            return result;
        }
    };

    if (typeof Buffer === 'undefined') {
        createBuffer = slowCreateBuffer;

        Array.prototype.copy = function (targetArray, targetStart, sourceStart, sourceEnd) {
            if (targetStart == null) {
                targetStart = 0;
            }
            if (sourceStart == null) {
                sourceStart = 0;
            }
            if (sourceEnd == null) {
                sourceEnd = this.length;
            }
            for (var i = sourceStart; i < sourceEnd; i++) {
                targetArray[targetStart++] = this[i];
            }
        };

        convertStringToBytes = function convertStringToBytes(text, encoding) {

            // "utf8", "utf-8", "utf 8", etc
            if (encoding == null || encoding.toLowerCase().replace(/ |-/g, "") == 'utf8') {
                var result = [],
                    i = 0;
                text = encodeURI(text);
                while (i < text.length) {
                    var c = text.charCodeAt(i++);

                    // if it is a % sign, encode the following 2 bytes as a hex value
                    if (c === 37) {
                        result.push(parseInt(text.substr(i, 2), 16));
                        i += 2;

                        // otherwise, just the actual byte
                    } else {
                        result.push(c);
                    }
                }

                return result;

                // "hex"
            } else if (encoding.toLowerCase() == 'hex') {
                var result = [];
                for (var i = 0; i < text.length; i += 2) {
                    result.push(parseInt(text.substr(i, 2), 16));
                }

                return result;
            }

            // @TODO: Base64...

            return null;
        };

        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
        var Hex = '0123456789abcdef';
        convertBytesToString = function convertBytesToString(bytes, encoding) {

            // "utf8", "utf-8", "utf 8", etc
            if (encoding == null || encoding.toLowerCase().replace(/ |-/g, "") == 'utf8') {
                var result = [],
                    i = 0;

                while (i < bytes.length) {
                    var c = bytes[i];

                    if (c < 128) {
                        result.push(String.fromCharCode(c));
                        i++;
                    } else if (c > 191 && c < 224) {
                        result.push(String.fromCharCode((c & 0x1f) << 6 | bytes[i + 1] & 0x3f));
                        i += 2;
                    } else {
                        result.push(String.fromCharCode((c & 0x0f) << 12 | (bytes[i + 1] & 0x3f) << 6 | bytes[i + 2] & 0x3f));
                        i += 3;
                    }
                }

                return result.join('');

                // "hex"
            } else if (encoding.toLowerCase() == 'hex') {
                var result = [];
                for (var i = 0; i < bytes.length; i++) {
                    var v = bytes[i];
                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                }
                return result.join('');
            }

            return result;
        };
    } else {
        createBuffer = function createBuffer(arg) {
            return new Buffer(arg);
        };
        convertStringToBytes = function convertStringToBytes(text, encoding) {
            return new Buffer(text, encoding);
        };

        convertBytesToString = function convertBytesToString(bytes, encoding) {
            return new Buffer(bytes).toString(encoding);
        };
    }

    // Number of rounds by keysize
    var numberOfRounds = { 16: 10, 24: 12, 32: 14 };

    // Round constant words
    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

    // S-box and Inverse S-box (S is for Substitution)
    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
    var Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

    // Transformations for encryption
    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

    // Transformations for decryption
    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

    // Transformations for decryption key expansion
    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

    function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
            result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
        }
        return result;
    }

    var AES = function AES(key) {
        this.key = createBuffer(key);
        this._prepare();
    };

    AES.prototype._prepare = function () {

        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
            throw new Error('invalid key size (must be length 16, 24 or 32)');
        }

        // encryption round keys
        this._Ke = [];

        // decryption round keys
        this._Kd = [];

        for (var i = 0; i <= rounds; i++) {
            this._Ke.push([0, 0, 0, 0]);
            this._Kd.push([0, 0, 0, 0]);
        }

        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;

        // convert the key into ints
        var tk = convertToInt32(this.key);

        // copy values into round key arrays
        var index;
        for (var i = 0; i < KC; i++) {
            index = i >> 2;
            this._Ke[index][i % 4] = tk[i];
            this._Kd[rounds - index][i % 4] = tk[i];
        }

        // key expansion (fips-197 section 5.2)
        var rconpointer = 0;
        var t = KC,
            tt;
        while (t < roundKeyCount) {
            tt = tk[KC - 1];
            tk[0] ^= S[tt >> 16 & 0xFF] << 24 ^ S[tt >> 8 & 0xFF] << 16 ^ S[tt & 0xFF] << 8 ^ S[tt >> 24 & 0xFF] ^ rcon[rconpointer] << 24;
            rconpointer += 1;

            // key expansion (for non-256 bit)
            if (KC != 8) {
                for (var i = 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }

                // key expansion for 256-bit keys is "slightly different" (fips-197)
            } else {
                for (var i = 1; i < KC / 2; i++) {
                    tk[i] ^= tk[i - 1];
                }
                tt = tk[KC / 2 - 1];

                tk[KC / 2] ^= S[tt & 0xFF] ^ S[tt >> 8 & 0xFF] << 8 ^ S[tt >> 16 & 0xFF] << 16 ^ S[tt >> 24 & 0xFF] << 24;

                for (var i = KC / 2 + 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }
            }

            // copy values into round key arrays
            var i = 0,
                r,
                c;
            while (i < KC && t < roundKeyCount) {
                r = t >> 2;
                c = t % 4;
                this._Ke[r][c] = tk[i];
                this._Kd[rounds - r][c] = tk[i++];
                t++;
            }
        }

        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
        for (var r = 1; r < rounds; r++) {
            for (var c = 0; c < 4; c++) {
                tt = this._Kd[r][c];
                this._Kd[r][c] = U1[tt >> 24 & 0xFF] ^ U2[tt >> 16 & 0xFF] ^ U3[tt >> 8 & 0xFF] ^ U4[tt & 0xFF];
            }
        }
    };

    AES.prototype.encrypt = function (plaintext) {
        if (plaintext.length != 16) {
            return new Error('plaintext must be a block of size 16');
        }

        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Ke[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = T1[t[i] >> 24 & 0xff] ^ T2[t[(i + 1) % 4] >> 16 & 0xff] ^ T3[t[(i + 2) % 4] >> 8 & 0xff] ^ T4[t[(i + 3) % 4] & 0xff] ^ this._Ke[r][i];
            }
            t = a.slice(0);
        }

        // the last round is special
        var result = createBuffer(16),
            tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Ke[rounds][i];
            result[4 * i] = (S[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;
            result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;
            result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;
            result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;
        }

        return result;
    };

    AES.prototype.decrypt = function (ciphertext) {
        if (ciphertext.length != 16) {
            return new Error('ciphertext must be a block of size 16');
        }

        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Kd[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = T5[t[i] >> 24 & 0xff] ^ T6[t[(i + 3) % 4] >> 16 & 0xff] ^ T7[t[(i + 2) % 4] >> 8 & 0xff] ^ T8[t[(i + 1) % 4] & 0xff] ^ this._Kd[r][i];
            }
            t = a.slice(0);
        }

        // the last round is special
        var result = createBuffer(16),
            tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Kd[rounds][i];
            result[4 * i] = (Si[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;
            result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;
            result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;
            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;
        }

        return result;
    };

    /**
     *  Mode Of Operation - Electonic Codebook (ECB)
     */
    var ModeOfOperationECB = function ModeOfOperationECB(key) {
        this.description = "Electronic Code Block";
        this.name = "ecb";

        this._aes = new AES(key);
    };

    ModeOfOperationECB.prototype.encrypt = function (plaintext) {
        return this._aes.encrypt(plaintext);
    };

    ModeOfOperationECB.prototype.decrypt = function (ciphertext, encoding) {
        return this._aes.decrypt(ciphertext);
    };

    /**
     *  Mode Of Operation - Cipher Block Chaining (CBC)
     */
    var ModeOfOperationCBC = function ModeOfOperationCBC(key, iv) {
        this.description = "Cipher Block Chaining";
        this.name = "cbc";

        if (iv === null) {
            iv = createBuffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        } else if (iv.length != 16) {
            return new Error('initialation vector iv must be of length 16');
        }

        this._lastCipherblock = createBuffer(iv);

        this._aes = new AES(key);
    };

    ModeOfOperationCBC.prototype.encrypt = function (plaintext) {
        if (plaintext.length != 16) {
            return new Error('plaintext must be a block of size 16');
        }

        var precipherblock = createBuffer(plaintext);
        for (var i = 0; i < 16; i++) {
            precipherblock[i] ^= this._lastCipherblock[i];
        }

        this._lastCipherblock = this._aes.encrypt(precipherblock);

        return this._lastCipherblock;
    };

    ModeOfOperationCBC.prototype.decrypt = function (ciphertext) {
        if (ciphertext.length != 16) {
            return new Error('ciphertext must be a block of size 16');
        }

        var plaintext = this._aes.decrypt(ciphertext);
        for (var i = 0; i < 16; i++) {
            plaintext[i] ^= this._lastCipherblock[i];
        }

        ciphertext.copy(this._lastCipherblock);

        return plaintext;
    };

    /**
     *  Mode Of Operation - Cipher Feedback (CFB)
     */
    var ModeOfOperationCFB = function ModeOfOperationCFB(key, iv, segmentSize) {
        this.description = "Cipher Feedback";
        this.name = "cfb";

        if (iv === null) {
            iv = createBuffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        } else if (iv.length != 16) {
            return new Error('initialation vector iv must be of length 16');
        }

        if (!segmentSize) {
            segmentSize = 1;
        }

        this.segmentSize = segmentSize;

        this._shiftRegister = createBuffer(iv);

        this._aes = new AES(key);
    };

    ModeOfOperationCFB.prototype.encrypt = function (plaintext) {
        if (plaintext.length % this.segmentSize != 0) {
            return new Error('plaintext must be a block of size module segmentSize (' + this.segmentSize + ')');
        }

        var encrypted = createBuffer(plaintext);

        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for (var j = 0; j < this.segmentSize; j++) {
                encrypted[i + j] ^= xorSegment[j];
            }

            // Shift the register
            this._shiftRegister.copy(this._shiftRegister, 0, this.segmentSize);
            encrypted.copy(this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return encrypted;
    };

    ModeOfOperationCFB.prototype.decrypt = function (ciphertext) {
        if (ciphertext.length % this.segmentSize != 0) {
            return new Error('ciphertext must be a block of size module segmentSize (' + this.segmentSize + ')');
        }

        var plaintext = createBuffer(ciphertext);

        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);

            for (var j = 0; j < this.segmentSize; j++) {
                plaintext[i + j] ^= xorSegment[j];
            }

            // Shift the register
            this._shiftRegister.copy(this._shiftRegister, 0, this.segmentSize);
            ciphertext.copy(this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return plaintext;
    };

    /**
     *  Mode Of Operation - Output Feedback (OFB)
     */
    var ModeOfOperationOFB = function ModeOfOperationOFB(key, iv) {
        this.description = "Output Feedback";
        this.name = "ofb";

        if (iv === null) {
            iv = createBuffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        } else if (iv.length != 16) {
            return new Error('initialation vector iv must be of length 16');
        }

        this._lastPrecipher = createBuffer(iv);
        this._lastPrecipherIndex = 16;

        this._aes = new AES(key);
    };

    ModeOfOperationOFB.prototype.encrypt = function (plaintext) {
        var encrypted = createBuffer(plaintext);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._lastPrecipherIndex === 16) {
                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                this._lastPrecipherIndex = 0;
            }
            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }

        return encrypted;
    };

    // Decryption is symetric
    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;

    /**
     *  Counter object for CTR common mode of operation
     */
    var Counter = function Counter(initialValue) {
        if (initialValue === null || initialValue === undefined) {
            initialValue = 1;
        }

        if (typeof initialValue === 'number') {
            this._counter = createBuffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            this.setValue(initialValue);
        } else {
            this.setBytes(initialValue);
        }
    };

    Counter.prototype.setValue = function (value) {
        if (typeof value !== 'number') {
            throw new Error('value must be a number');
        }

        for (var index = 15; index >= 0; --index) {
            this._counter[index] = value % 256;
            value = value >> 8;
        }
    };

    Counter.prototype.setBytes = function (bytes) {
        if (bytes.length != 16) {
            throw new Error('invalid counter bytes size (must be 16)');
        }
        this._counter = createBuffer(bytes);
    };

    Counter.prototype.increment = function () {
        for (var i = 15; i >= 0; i--) {
            if (this._counter[i] === 255) {
                this._counter[i] = 0;
            } else {
                this._counter[i]++;
                break;
            }
        }
    };

    /**
     *  Mode Of Operation - Counter (CTR)
     */
    var ModeOfOperationCTR = function ModeOfOperationCTR(key, counter) {
        this.description = "Counter";
        this.name = "ctr";

        if (counter === null) {
            counter = new Counter();
        }

        this._counter = counter;

        this._remainingCounter = null;
        this._remainingCounterIndex = 16;

        this._aes = new AES(key);
    };

    ModeOfOperationCTR.prototype.encrypt = function (plaintext) {
        var encrypted = createBuffer(plaintext);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._remainingCounterIndex === 16) {
                this._remainingCounter = this._aes.encrypt(this._counter._counter);
                this._remainingCounterIndex = 0;
                this._counter.increment();
            }
            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }

        return encrypted;
    };

    // Decryption is symetric
    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;

    // The bsic modes of operation as a map
    var ModeOfOperation = {
        ecb: ModeOfOperationECB,
        cbc: ModeOfOperationCBC,
        cfb: ModeOfOperationCFB,
        ofb: ModeOfOperationOFB,
        ctr: ModeOfOperationCTR
    };

    ///////////////////////
    // Exports


    // The block cipher
    var aesjs = {
        AES: AES,
        Counter: Counter,
        ModeOfOperation: ModeOfOperation,
        util: {
            convertBytesToString: convertBytesToString,
            convertStringToBytes: convertStringToBytes,
            _slowCreateBuffer: slowCreateBuffer
        }
    };

    if (typeof exports !== 'undefined') {
        exports.AES = AES;
        exports.Counter = Counter;
        exports.ModeOfOperation = ModeOfOperation;
        exports.util = {
            convertBytesToString: convertBytesToString,
            convertStringToBytes: convertStringToBytes,
            _slowCreateBuffer: slowCreateBuffer
        };
        /*
        if(typeof module !== 'undefined' && module.exports) {
            exports = module.exports = export;
        }
        exports.mymodule = mymodule;
        */
    } else {
        root.aesjs = aesjs;
    }
}).call(undefined);

}).call(this,require("buffer").Buffer)
},{"buffer":62}],7:[function(require,module,exports){
'use strict';

var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":8,"./asn1/base":10,"./asn1/constants":14,"./asn1/decoders":16,"./asn1/encoders":19,"bn.js":30}],8:[function(require,module,exports){
'use strict';

var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext('(function ' + this.name + '(entity) {\n' + '  this._initNamed(entity);\n' + '})');
  } catch (e) {
    named = function named(entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":7,"inherits":160,"vm":262}],9:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);else return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function (item) {
      if (!(item instanceof EncoderBuffer)) item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)));
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out) out = new Buffer(this.length);
  if (!offset) offset = 0;

  if (this.length === 0) return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function (item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number') out[offset] = this.value;else if (typeof this.value === 'string') out.write(this.value, offset);else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":10,"buffer":62,"inherits":160}],10:[function(require,module,exports){
'use strict';

var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":9,"./node":11,"./reporter":12}],11:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var DecoderBuffer = require('../base').DecoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = ['seq', 'seqof', 'set', 'setof', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str', 'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'];

// Public methods list
var methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any', 'contains'].concat(tags);

// Overrided methods list
var overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit', 'contains'];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function (prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function (method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function (child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function (arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function (arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function (child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function (arg) {
      if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) !== 'object' || arg.constructor !== Object) return arg;

      var res = {};
      Object.keys(arg).forEach(function (key) {
        if (key == (key | 0)) key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function (method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function (tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0) this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function (key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null) prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null) tag = state.explicit;else if (state.implicit !== null) tag = state.implicit;else if (state.tag !== null) tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null) this._decodeGeneric(state.tag, input, options);else this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present)) return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present) prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit)) return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any) var save = input.save();
      var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
      if (input.isError(body)) return body;

      if (state.any) result = input.raw(save);else input = body;
    }

    if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) result = result;else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);else result = this._decodeChoice(input, options);

    if (input.isError(result)) return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present) result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);else if (prevKey !== null) input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set') return null;
  if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);else if (tag === 'objid') return this._decodeObjid(input, null, null, options);else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);else if (tag === 'null_') return this._decodeNull(input, options);else if (tag === 'bool') return this._decodeBool(input, options);else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function (key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value)) return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match) return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data) return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined) return;

  if (this._skipDefault(result, reporter, parent)) return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null) data = state['default'];else return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function (child) {
      if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);

      if (child._baseState.key === null) return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function (child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function (item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null) reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag)) return this._encodeStr(data, tag);else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);else if (tag === 'objid') return this._encodeObjid(data, null, null);else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);else if (tag === 'null_') return this._encodeNull();else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);else if (tag === 'bool') return this._encodeBool(data);else throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return (/^[0-9 ]*$/.test(str)
  );
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return (/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str)
  );
};

},{"../base":10,"minimalistic-assert":201}],12:[function(require,module,exports){
'use strict';

var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null) state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function (elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial) throw err;

  if (!inherited) state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial) return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":160}],13:[function(require,module,exports){
'use strict';

var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":14}],14:[function(require,module,exports){
'use strict';

var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function (key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key) key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":13}],15:[function(require,module,exports){
'use strict';

var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer)) data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty()) return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;

  var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len)) return len;

  if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res)) return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag)) return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len)) return len;

    var res;
    if (tag.primitive || len !== null) res = buffer.skip(len);else res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res)) return res;

    if (tag.tagStr === 'end') break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd)) return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd) break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused)) return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' + 'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' + 'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80) identifiers.push(ident);

  var first = identifiers[0] / 40 | 0;
  var second = identifiers[0] % 40;

  if (relative) result = identifiers;else result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined) tmp = values[result.join('.')];
    if (tmp !== undefined) result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70) year = 2000 + year;else year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res)) return res;else return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values) res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag)) return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct)) return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len)) return len;

  // Indefinite form
  if (!primitive && len === 0x80) return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num >= 4) return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j)) return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":7,"inherits":160}],16:[function(require,module,exports){
'use strict';

var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":15,"./pem":17}],17:[function(require,module,exports){
'use strict';

var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null) continue;

    if (match[2] !== label) continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN') break;
      start = i;
    } else {
      if (match[1] !== 'END') break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":15,"buffer":62,"inherits":160}],18:[function(require,module,exports){
'use strict';

var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([header, content]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8) {
    lenOctets++;
  }var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8) {
    header[i] = j & 0xff;
  }return this._createEncoderBuffer([header, content]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([str.unused | 0, str.data]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' + 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' + 'only latin upper and lower case letters, ' + 'digits, space, apostrophe, left and rigth ' + 'parenthesis, plus sign, comma, hyphen, ' + 'dot, slash, colon, equal sign, ' + 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values) return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++) {
      id[i] |= 0;
    }
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++) {
      id[i] |= 0;
    }
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' + 'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7) {
      size++;
    }
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0) {
      objid[offset--] = 0x80 | ident & 0x7f;
    }
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10) return '0' + num;else return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [two(date.getFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else if (tag === 'utctime') {
    str = [two(date.getFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values) return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0) size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0) out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80) return this._createEncoderBuffer(num);

  if (num < 0x100) return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8) {
    size++;
  }var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if (out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null) return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length) return false;

  for (i = 0; i < data.length; i++) {
    if (data[i] !== state.defaultBuffer[i]) return false;
  }return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof') tag = 'seq';else if (tag === 'setof') tag = 'set';

  if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;else return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive) res |= 0x20;

  res |= der.tagClassByName[cls || 'universal'] << 6;

  return res;
}

},{"../../asn1":7,"buffer":62,"inherits":160}],19:[function(require,module,exports){
'use strict';

var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":18,"./pem":20}],20:[function(require,module,exports){
'use strict';

var inherits = require('inherits');

var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = ['-----BEGIN ' + options.label + '-----'];
  for (var i = 0; i < p.length; i += 64) {
    out.push(p.slice(i, i + 64));
  }out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":18,"inherits":160}],21:[function(require,module,exports){
'use strict';

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && !isFinite(value)) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' + self.operator + ' ' + truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b)) return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b)) {
    return a === b;
  }
  var aIsArgs = isArguments(a),
      bIsArgs = isArguments(b);
  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  var ka = objectKeys(a),
      kb = objectKeys(b),
      key,
      i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length) return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i]) return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function (block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function (block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function (err) {
  if (err) {
    throw err;
  }
};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":259}],22:[function(require,module,exports){
'use strict';

module.exports = require('./lib/AsyncEventEmitter');

},{"./lib/AsyncEventEmitter":23}],23:[function(require,module,exports){
'use strict';

var EventEmitter = require('events').EventEmitter,
    util = require('util'),
    async = require('async'),
    AsyncEventEmitter;

module.exports = exports = AsyncEventEmitter = function AsyncEventEmitter() {
  EventEmitter.call(this);
};

util.inherits(AsyncEventEmitter, EventEmitter);

/* Public methods
============================================================================= */

AsyncEventEmitter.prototype.emit = function (event, data, callback) {
  var self = this,
      listeners = self._events[event] || [];

  // Optional data argument
  if (!callback && typeof data === 'function') {
    callback = data;
    data = undefined;
  }

  // Special treatment of internal newListener and removeListener events
  if (event === 'newListener' || event === 'removeListener') {
    data = {
      event: data,
      fn: callback
    };

    callback = undefined;
  }

  // A single listener is just a function not an array...
  listeners = Array.isArray(listeners) ? listeners : [listeners];

  async.eachSeries(listeners, function (fn, next) {
    var err;

    // Support synchronous functions
    if (fn.length < 2) {
      try {
        fn.call(self, data);
      } catch (e) {
        err = e;
      }

      return next(err);
    }

    // Async
    fn.call(self, data, next);
  }, callback);

  return self;
};

AsyncEventEmitter.prototype.once = function (type, listener) {
  var self = this,
      _g2;

  if (typeof listener !== 'function') {
    throw new TypeError('listener must be a function');
  }

  // Hack to support set arity
  if (listener.length >= 2) {
    _g2 = function g(e, next) {
      self.removeListener(type, _g2);
      listener(e, next);
    };
  } else {
    _g2 = function _g(e) {
      self.removeListener(type, _g2);
      listener(e);
    };
  }

  _g2.listener = listener;
  self.on(type, _g2);

  return self;
};

AsyncEventEmitter.prototype.first = function (event, listener) {
  var listeners = this._events[event] || [];

  // Contract
  if (typeof listener !== 'function') {
    throw new TypeError('listener must be a function');
  }

  // Listeners are not always an array
  if (!Array.isArray(listeners)) {
    this._events[event] = listeners = [listeners];
  }

  listeners.unshift(listener);

  return this;
};

AsyncEventEmitter.prototype.at = function (event, index, listener) {
  var listeners = this._events[event] || [];

  // Contract
  if (typeof listener !== 'function') {
    throw new TypeError('listener must be a function');
  }
  if (typeof index !== 'number' || index < 0) {
    throw new TypeError('index must be a non-negative integer');
  }

  // Listeners are not always an array
  if (!Array.isArray(listeners)) {
    this._events[event] = listeners = [listeners];
  }

  listeners.splice(index, 0, listener);

  return this;
};

AsyncEventEmitter.prototype.before = function (event, target, listener) {
  return this._beforeOrAfter(event, target, listener);
};

AsyncEventEmitter.prototype.after = function (event, target, listener) {
  return this._beforeOrAfter(event, target, listener, 'after');
};

/* Private methods
============================================================================= */

AsyncEventEmitter.prototype._beforeOrAfter = function (event, target, listener, beforeOrAfter) {
  var listeners = this._events[event] || [],
      i,
      index,
      add = beforeOrAfter === 'after' ? 1 : 0;

  // Contract
  if (typeof listener !== 'function') {
    throw new TypeError('listener must be a function');
  }
  if (typeof target !== 'function') {
    throw new TypeError('target must be a function');
  }

  // Listeners are not always an array
  if (!Array.isArray(listeners)) {
    this._events[event] = listeners = [listeners];
  }

  index = listeners.length;

  for (i = listeners.length; i--;) {
    if (listeners[i] === target) {
      index = i + add;
      break;
    }
  }

  listeners.splice(index, 0, listener);

  return this;
};

},{"async":24,"events":148,"util":259}],24:[function(require,module,exports){
(function (process){
'use strict';

/*global setImmediate: false, setTimeout: false, console: false */
(function () {

    var async = {};

    // global on the server, window in the browser
    var root, previous_async;

    root = this;
    if (root != null) {
        previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        var called = false;
        return function () {
            if (called) throw new Error("Callback was already called.");
            called = true;
            fn.apply(root, arguments);
        };
    }

    //// cross-browser compatiblity functions ////

    var _each = function _each(arr, iterator) {
        if (arr.forEach) {
            return arr.forEach(iterator);
        }
        for (var i = 0; i < arr.length; i += 1) {
            iterator(arr[i], i, arr);
        }
    };

    var _map = function _map(arr, iterator) {
        if (arr.map) {
            return arr.map(iterator);
        }
        var results = [];
        _each(arr, function (x, i, a) {
            results.push(iterator(x, i, a));
        });
        return results;
    };

    var _reduce = function _reduce(arr, iterator, memo) {
        if (arr.reduce) {
            return arr.reduce(iterator, memo);
        }
        _each(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    };

    var _keys = function _keys(obj) {
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////
    if (typeof process === 'undefined' || !process.nextTick) {
        if (typeof setImmediate === 'function') {
            async.nextTick = function (fn) {
                // not a direct alias for IE10 compatibility
                setImmediate(fn);
            };
            async.setImmediate = async.nextTick;
        } else {
            async.nextTick = function (fn) {
                setTimeout(fn, 0);
            };
            async.setImmediate = async.nextTick;
        }
    } else {
        async.nextTick = process.nextTick;
        if (typeof setImmediate !== 'undefined') {
            async.setImmediate = function (fn) {
                // not a direct alias for IE10 compatibility
                setImmediate(fn);
            };
        } else {
            async.setImmediate = async.nextTick;
        }
    }

    async.each = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        _each(arr, function (x) {
            iterator(x, only_once(function (err) {
                if (err) {
                    callback(err);
                    callback = function callback() {};
                } else {
                    completed += 1;
                    if (completed >= arr.length) {
                        callback(null);
                    }
                }
            }));
        });
    };
    async.forEach = async.each;

    async.eachSeries = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        var iterate = function iterate() {
            iterator(arr[completed], function (err) {
                if (err) {
                    callback(err);
                    callback = function callback() {};
                } else {
                    completed += 1;
                    if (completed >= arr.length) {
                        callback(null);
                    } else {
                        iterate();
                    }
                }
            });
        };
        iterate();
    };
    async.forEachSeries = async.eachSeries;

    async.eachLimit = function (arr, limit, iterator, callback) {
        var fn = _eachLimit(limit);
        fn.apply(null, [arr, iterator, callback]);
    };
    async.forEachLimit = async.eachLimit;

    var _eachLimit = function _eachLimit(limit) {

        return function (arr, iterator, callback) {
            callback = callback || function () {};
            if (!arr.length || limit <= 0) {
                return callback();
            }
            var completed = 0;
            var started = 0;
            var running = 0;

            (function replenish() {
                if (completed >= arr.length) {
                    return callback();
                }

                while (running < limit && started < arr.length) {
                    started += 1;
                    running += 1;
                    iterator(arr[started - 1], function (err) {
                        if (err) {
                            callback(err);
                            callback = function callback() {};
                        } else {
                            completed += 1;
                            running -= 1;
                            if (completed >= arr.length) {
                                callback();
                            } else {
                                replenish();
                            }
                        }
                    });
                }
            })();
        };
    };

    var doParallel = function doParallel(fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.each].concat(args));
        };
    };
    var doParallelLimit = function doParallelLimit(limit, fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [_eachLimit(limit)].concat(args));
        };
    };
    var doSeries = function doSeries(fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.eachSeries].concat(args));
        };
    };

    var _asyncMap = function _asyncMap(eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return { index: i, value: x };
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (err, v) {
                results[x.index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    };
    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = function (arr, limit, iterator, callback) {
        return _mapLimit(limit)(arr, iterator, callback);
    };

    var _mapLimit = function _mapLimit(limit) {
        return doParallelLimit(limit, _asyncMap);
    };

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.reduce = function (arr, memo, iterator, callback) {
        async.eachSeries(arr, function (x, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };
    // inject alias
    async.inject = async.reduce;
    // foldl alias
    async.foldl = async.reduce;

    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, function (x) {
            return x;
        }).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };
    // foldr alias
    async.foldr = async.reduceRight;

    var _filter = function _filter(eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return { index: i, value: x };
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.filter = doParallel(_filter);
    async.filterSeries = doSeries(_filter);
    // select alias
    async.select = async.filter;
    async.selectSeries = async.filterSeries;

    var _reject = function _reject(eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return { index: i, value: x };
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (!v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.reject = doParallel(_reject);
    async.rejectSeries = doSeries(_reject);

    var _detect = function _detect(eachfn, arr, iterator, main_callback) {
        eachfn(arr, function (x, callback) {
            iterator(x, function (result) {
                if (result) {
                    main_callback(x);
                    main_callback = function main_callback() {};
                } else {
                    callback();
                }
            });
        }, function (err) {
            main_callback();
        });
    };
    async.detect = doParallel(_detect);
    async.detectSeries = doSeries(_detect);

    async.some = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (v) {
                    main_callback(true);
                    main_callback = function main_callback() {};
                }
                callback();
            });
        }, function (err) {
            main_callback(false);
        });
    };
    // any alias
    async.any = async.some;

    async.every = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (!v) {
                    main_callback(false);
                    main_callback = function main_callback() {};
                }
                callback();
            });
        }, function (err) {
            main_callback(true);
        });
    };
    // all alias
    async.all = async.every;

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                } else {
                    callback(null, { value: x, criteria: criteria });
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            } else {
                var fn = function fn(left, right) {
                    var a = left.criteria,
                        b = right.criteria;
                    return a < b ? -1 : a > b ? 1 : 0;
                };
                callback(null, _map(results.sort(fn), function (x) {
                    return x.value;
                }));
            }
        });
    };

    async.auto = function (tasks, callback) {
        callback = callback || function () {};
        var keys = _keys(tasks);
        if (!keys.length) {
            return callback(null);
        }

        var results = {};

        var listeners = [];
        var addListener = function addListener(fn) {
            listeners.unshift(fn);
        };
        var removeListener = function removeListener(fn) {
            for (var i = 0; i < listeners.length; i += 1) {
                if (listeners[i] === fn) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        var taskComplete = function taskComplete() {
            _each(listeners.slice(0), function (fn) {
                fn();
            });
        };

        addListener(function () {
            if (_keys(results).length === keys.length) {
                callback(null, results);
                callback = function callback() {};
            }
        });

        _each(keys, function (k) {
            var task = tasks[k] instanceof Function ? [tasks[k]] : tasks[k];
            var taskCallback = function taskCallback(err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _each(_keys(results), function (rkey) {
                        safeResults[rkey] = results[rkey];
                    });
                    safeResults[k] = args;
                    callback(err, safeResults);
                    // stop subsequent errors hitting callback multiple times
                    callback = function callback() {};
                } else {
                    results[k] = args;
                    async.setImmediate(taskComplete);
                }
            };
            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
            var ready = function ready() {
                return _reduce(requires, function (a, x) {
                    return a && results.hasOwnProperty(x);
                }, true) && !results.hasOwnProperty(k);
            };
            if (ready()) {
                task[task.length - 1](taskCallback, results);
            } else {
                var listener = function listener() {
                    if (ready()) {
                        removeListener(listener);
                        task[task.length - 1](taskCallback, results);
                    }
                };
                addListener(listener);
            }
        });
    };

    async.waterfall = function (tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor !== Array) {
            var err = new Error('First argument to waterfall must be an array of functions');
            return callback(err);
        }
        if (!tasks.length) {
            return callback();
        }
        var wrapIterator = function wrapIterator(iterator) {
            return function (err) {
                if (err) {
                    callback.apply(null, arguments);
                    callback = function callback() {};
                } else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    } else {
                        args.push(callback);
                    }
                    async.setImmediate(function () {
                        iterator.apply(null, args);
                    });
                }
            };
        };
        wrapIterator(async.iterator(tasks))();
    };

    var _parallel = function _parallel(eachfn, tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            eachfn.map(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        } else {
            var results = {};
            eachfn.each(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.parallel = function (tasks, callback) {
        _parallel({ map: async.map, each: async.each }, tasks, callback);
    };

    async.parallelLimit = function (tasks, limit, callback) {
        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
    };

    async.series = function (tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            async.mapSeries(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        } else {
            var results = {};
            async.eachSeries(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.iterator = function (tasks) {
        var makeCallback = function makeCallback(index) {
            var fn = function fn() {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            };
            fn.next = function () {
                return index < tasks.length - 1 ? makeCallback(index + 1) : null;
            };
            return fn;
        };
        return makeCallback(0);
    };

    async.apply = function (fn) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(null, args.concat(Array.prototype.slice.call(arguments)));
        };
    };

    var _concat = function _concat(eachfn, arr, fn, callback) {
        var r = [];
        eachfn(arr, function (x, cb) {
            fn(x, function (err, y) {
                r = r.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, r);
        });
    };
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        if (test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.whilst(test, iterator, callback);
            });
        } else {
            callback();
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            if (test()) {
                async.doWhilst(iterator, test, callback);
            } else {
                callback();
            }
        });
    };

    async.until = function (test, iterator, callback) {
        if (!test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.until(test, iterator, callback);
            });
        } else {
            callback();
        }
    };

    async.doUntil = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            if (!test()) {
                async.doUntil(iterator, test, callback);
            } else {
                callback();
            }
        });
    };

    async.queue = function (worker, concurrency) {
        if (concurrency === undefined) {
            concurrency = 1;
        }
        function _insert(q, data, pos, callback) {
            if (data.constructor !== Array) {
                data = [data];
            }
            _each(data, function (task) {
                var item = {
                    data: task,
                    callback: typeof callback === 'function' ? callback : null
                };

                if (pos) {
                    q.tasks.unshift(item);
                } else {
                    q.tasks.push(item);
                }

                if (q.saturated && q.tasks.length === concurrency) {
                    q.saturated();
                }
                async.setImmediate(q.process);
            });
        }

        var workers = 0;
        var q = {
            tasks: [],
            concurrency: concurrency,
            saturated: null,
            empty: null,
            drain: null,
            push: function push(data, callback) {
                _insert(q, data, false, callback);
            },
            unshift: function unshift(data, callback) {
                _insert(q, data, true, callback);
            },
            process: function process() {
                if (workers < q.concurrency && q.tasks.length) {
                    var task = q.tasks.shift();
                    if (q.empty && q.tasks.length === 0) {
                        q.empty();
                    }
                    workers += 1;
                    var next = function next() {
                        workers -= 1;
                        if (task.callback) {
                            task.callback.apply(task, arguments);
                        }
                        if (q.drain && q.tasks.length + workers === 0) {
                            q.drain();
                        }
                        q.process();
                    };
                    var cb = only_once(next);
                    worker(task.data, cb);
                }
            },
            length: function length() {
                return q.tasks.length;
            },
            running: function running() {
                return workers;
            }
        };
        return q;
    };

    async.cargo = function (worker, payload) {
        var working = false,
            tasks = [];

        var cargo = {
            tasks: tasks,
            payload: payload,
            saturated: null,
            empty: null,
            drain: null,
            push: function push(data, callback) {
                if (data.constructor !== Array) {
                    data = [data];
                }
                _each(data, function (task) {
                    tasks.push({
                        data: task,
                        callback: typeof callback === 'function' ? callback : null
                    });
                    if (cargo.saturated && tasks.length === payload) {
                        cargo.saturated();
                    }
                });
                async.setImmediate(cargo.process);
            },
            process: function process() {
                if (working) return;
                if (tasks.length === 0) {
                    if (cargo.drain) cargo.drain();
                    return;
                }

                var ts = typeof payload === 'number' ? tasks.splice(0, payload) : tasks.splice(0);

                var ds = _map(ts, function (task) {
                    return task.data;
                });

                if (cargo.empty) cargo.empty();
                working = true;
                worker(ds, function () {
                    working = false;

                    var args = arguments;
                    _each(ts, function (data) {
                        if (data.callback) {
                            data.callback.apply(null, args);
                        }
                    });

                    process();
                });
            },
            length: function length() {
                return tasks.length;
            },
            running: function running() {
                return working;
            }
        };
        return cargo;
    };

    var _console_fn = function _console_fn(name) {
        return function (fn) {
            var args = Array.prototype.slice.call(arguments, 1);
            fn.apply(null, args.concat([function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (typeof console !== 'undefined') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    } else if (console[name]) {
                        _each(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            }]));
        };
    };
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        hasher = hasher || function (x) {
            return x;
        };
        var memoized = function memoized() {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (key in memo) {
                callback.apply(null, memo[key]);
            } else if (key in queues) {
                queues[key].push(callback);
            } else {
                queues[key] = [callback];
                fn.apply(null, args.concat([function () {
                    memo[key] = arguments;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                        q[i].apply(null, arguments);
                    }
                }]));
            }
        };
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
        return function () {
            return (fn.unmemoized || fn).apply(null, arguments);
        };
    };

    async.times = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.map(counter, iterator, callback);
    };

    async.timesSeries = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.mapSeries(counter, iterator, callback);
    };

    async.compose = function () /* functions... */{
        var fns = Array.prototype.reverse.call(arguments);
        return function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([function () {
                    var err = arguments[0];
                    var nextargs = Array.prototype.slice.call(arguments, 1);
                    cb(err, nextargs);
                }]));
            }, function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        };
    };

    var _applyEach = function _applyEach(eachfn, fns /*args...*/) {
        var go = function go() {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            return eachfn(fns, function (fn, cb) {
                fn.apply(that, args.concat([cb]));
            }, callback);
        };
        if (arguments.length > 2) {
            var args = Array.prototype.slice.call(arguments, 2);
            return go.apply(this, args);
        } else {
            return go;
        }
    };
    async.applyEach = doParallel(_applyEach);
    async.applyEachSeries = doSeries(_applyEach);

    async.forever = function (fn, callback) {
        function next(err) {
            if (err) {
                if (callback) {
                    return callback(err);
                }
                throw err;
            }
            fn(next);
        }
        next();
    };

    // AMD / RequireJS
    if (typeof define !== 'undefined' && define.amd) {
        define([], function () {
            return async;
        });
    }
    // Node.js
    else if (typeof module !== 'undefined' && module.exports) {
            module.exports = async;
        }
        // included directly via <script> tag
        else {
                root.async = async;
            }
})();

}).call(this,require('_process'))
},{"_process":213}],25:[function(require,module,exports){
(function (process,global){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*!
 * async
 * https://github.com/caolan/async
 *
 * Copyright 2010-2014 Caolan McMahon
 * Released under the MIT license
 */
(function () {

    var async = {};
    function noop() {}
    function identity(v) {
        return v;
    }
    function toBool(v) {
        return !!v;
    }
    function notId(v) {
        return !v;
    }

    // global on the server, window in the browser
    var previous_async;

    // Establish the root object, `window` (`self`) in the browser, `global`
    // on the server, or `this` in some virtual machines. We use `self`
    // instead of `window` for `WebWorker` support.
    var root = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object' && self.self === self && self || (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global.global === global && global || this;

    if (root != null) {
        previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        return function () {
            if (fn === null) throw new Error("Callback was already called.");
            fn.apply(this, arguments);
            fn = null;
        };
    }

    function _once(fn) {
        return function () {
            if (fn === null) return;
            fn.apply(this, arguments);
            fn = null;
        };
    }

    //// cross-browser compatiblity functions ////

    var _toString = Object.prototype.toString;

    var _isArray = Array.isArray || function (obj) {
        return _toString.call(obj) === '[object Array]';
    };

    // Ported from underscore.js isObject
    var _isObject = function _isObject(obj) {
        var type = typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
        return type === 'function' || type === 'object' && !!obj;
    };

    function _isArrayLike(arr) {
        return _isArray(arr) ||
        // has a positive integer length property
        typeof arr.length === "number" && arr.length >= 0 && arr.length % 1 === 0;
    }

    function _arrayEach(arr, iterator) {
        var index = -1,
            length = arr.length;

        while (++index < length) {
            iterator(arr[index], index, arr);
        }
    }

    function _map(arr, iterator) {
        var index = -1,
            length = arr.length,
            result = Array(length);

        while (++index < length) {
            result[index] = iterator(arr[index], index, arr);
        }
        return result;
    }

    function _range(count) {
        return _map(Array(count), function (v, i) {
            return i;
        });
    }

    function _reduce(arr, iterator, memo) {
        _arrayEach(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    }

    function _forEachOf(object, iterator) {
        _arrayEach(_keys(object), function (key) {
            iterator(object[key], key);
        });
    }

    function _indexOf(arr, item) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === item) return i;
        }
        return -1;
    }

    var _keys = Object.keys || function (obj) {
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    function _keyIterator(coll) {
        var i = -1;
        var len;
        var keys;
        if (_isArrayLike(coll)) {
            len = coll.length;
            return function next() {
                i++;
                return i < len ? i : null;
            };
        } else {
            keys = _keys(coll);
            len = keys.length;
            return function next() {
                i++;
                return i < len ? keys[i] : null;
            };
        }
    }

    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
    // This accumulates the arguments passed into an array, after a given index.
    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).
    function _restParam(func, startIndex) {
        startIndex = startIndex == null ? func.length - 1 : +startIndex;
        return function () {
            var length = Math.max(arguments.length - startIndex, 0);
            var rest = Array(length);
            for (var index = 0; index < length; index++) {
                rest[index] = arguments[index + startIndex];
            }
            switch (startIndex) {
                case 0:
                    return func.call(this, rest);
                case 1:
                    return func.call(this, arguments[0], rest);
            }
            // Currently unused but handle cases outside of the switch statement:
            // var args = Array(startIndex + 1);
            // for (index = 0; index < startIndex; index++) {
            //     args[index] = arguments[index];
            // }
            // args[startIndex] = rest;
            // return func.apply(this, args);
        };
    }

    function _withoutIndex(iterator) {
        return function (value, index, callback) {
            return iterator(value, callback);
        };
    }

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////

    // capture the global reference to guard against fakeTimer mocks
    var _setImmediate = typeof setImmediate === 'function' && setImmediate;

    var _delay = _setImmediate ? function (fn) {
        // not a direct alias for IE10 compatibility
        _setImmediate(fn);
    } : function (fn) {
        setTimeout(fn, 0);
    };

    if ((typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' && typeof process.nextTick === 'function') {
        async.nextTick = process.nextTick;
    } else {
        async.nextTick = _delay;
    }
    async.setImmediate = _setImmediate ? _delay : async.nextTick;

    async.forEach = async.each = function (arr, iterator, callback) {
        return async.eachOf(arr, _withoutIndex(iterator), callback);
    };

    async.forEachSeries = async.eachSeries = function (arr, iterator, callback) {
        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);
    };

    async.forEachLimit = async.eachLimit = function (arr, limit, iterator, callback) {
        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);
    };

    async.forEachOf = async.eachOf = function (object, iterator, callback) {
        callback = _once(callback || noop);
        object = object || [];

        var iter = _keyIterator(object);
        var key,
            completed = 0;

        while ((key = iter()) != null) {
            completed += 1;
            iterator(object[key], key, only_once(done));
        }

        if (completed === 0) callback(null);

        function done(err) {
            completed--;
            if (err) {
                callback(err);
            }
            // Check key is null in case iterator isn't exhausted
            // and done resolved synchronously.
            else if (key === null && completed <= 0) {
                    callback(null);
                }
        }
    };

    async.forEachOfSeries = async.eachOfSeries = function (obj, iterator, callback) {
        callback = _once(callback || noop);
        obj = obj || [];
        var nextKey = _keyIterator(obj);
        var key = nextKey();
        function iterate() {
            var sync = true;
            if (key === null) {
                return callback(null);
            }
            iterator(obj[key], key, only_once(function (err) {
                if (err) {
                    callback(err);
                } else {
                    key = nextKey();
                    if (key === null) {
                        return callback(null);
                    } else {
                        if (sync) {
                            async.setImmediate(iterate);
                        } else {
                            iterate();
                        }
                    }
                }
            }));
            sync = false;
        }
        iterate();
    };

    async.forEachOfLimit = async.eachOfLimit = function (obj, limit, iterator, callback) {
        _eachOfLimit(limit)(obj, iterator, callback);
    };

    function _eachOfLimit(limit) {

        return function (obj, iterator, callback) {
            callback = _once(callback || noop);
            obj = obj || [];
            var nextKey = _keyIterator(obj);
            if (limit <= 0) {
                return callback(null);
            }
            var done = false;
            var running = 0;
            var errored = false;

            (function replenish() {
                if (done && running <= 0) {
                    return callback(null);
                }

                while (running < limit && !errored) {
                    var key = nextKey();
                    if (key === null) {
                        done = true;
                        if (running <= 0) {
                            callback(null);
                        }
                        return;
                    }
                    running += 1;
                    iterator(obj[key], key, only_once(function (err) {
                        running -= 1;
                        if (err) {
                            callback(err);
                            errored = true;
                        } else {
                            replenish();
                        }
                    }));
                }
            })();
        };
    }

    function doParallel(fn) {
        return function (obj, iterator, callback) {
            return fn(async.eachOf, obj, iterator, callback);
        };
    }
    function doParallelLimit(fn) {
        return function (obj, limit, iterator, callback) {
            return fn(_eachOfLimit(limit), obj, iterator, callback);
        };
    }
    function doSeries(fn) {
        return function (obj, iterator, callback) {
            return fn(async.eachOfSeries, obj, iterator, callback);
        };
    }

    function _asyncMap(eachfn, arr, iterator, callback) {
        callback = _once(callback || noop);
        arr = arr || [];
        var results = _isArrayLike(arr) ? [] : {};
        eachfn(arr, function (value, index, callback) {
            iterator(value, function (err, v) {
                results[index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    }

    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = doParallelLimit(_asyncMap);

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.inject = async.foldl = async.reduce = function (arr, memo, iterator, callback) {
        async.eachOfSeries(arr, function (x, i, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };

    async.foldr = async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, identity).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };

    async.transform = function (arr, memo, iterator, callback) {
        if (arguments.length === 3) {
            callback = iterator;
            iterator = memo;
            memo = _isArray(arr) ? [] : {};
        }

        async.eachOf(arr, function (v, k, cb) {
            iterator(memo, v, k, cb);
        }, function (err) {
            callback(err, memo);
        });
    };

    function _filter(eachfn, arr, iterator, callback) {
        var results = [];
        eachfn(arr, function (x, index, callback) {
            iterator(x, function (v) {
                if (v) {
                    results.push({ index: index, value: x });
                }
                callback();
            });
        }, function () {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    }

    async.select = async.filter = doParallel(_filter);

    async.selectLimit = async.filterLimit = doParallelLimit(_filter);

    async.selectSeries = async.filterSeries = doSeries(_filter);

    function _reject(eachfn, arr, iterator, callback) {
        _filter(eachfn, arr, function (value, cb) {
            iterator(value, function (v) {
                cb(!v);
            });
        }, callback);
    }
    async.reject = doParallel(_reject);
    async.rejectLimit = doParallelLimit(_reject);
    async.rejectSeries = doSeries(_reject);

    function _createTester(eachfn, check, getResult) {
        return function (arr, limit, iterator, cb) {
            function done() {
                if (cb) cb(getResult(false, void 0));
            }
            function iteratee(x, _, callback) {
                if (!cb) return callback();
                iterator(x, function (v) {
                    if (cb && check(v)) {
                        cb(getResult(true, x));
                        cb = iterator = false;
                    }
                    callback();
                });
            }
            if (arguments.length > 3) {
                eachfn(arr, limit, iteratee, done);
            } else {
                cb = iterator;
                iterator = limit;
                eachfn(arr, iteratee, done);
            }
        };
    }

    async.any = async.some = _createTester(async.eachOf, toBool, identity);

    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);

    async.all = async.every = _createTester(async.eachOf, notId, notId);

    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);

    function _findGetResult(v, x) {
        return x;
    }
    async.detect = _createTester(async.eachOf, identity, _findGetResult);
    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);
    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                } else {
                    callback(null, { value: x, criteria: criteria });
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            } else {
                callback(null, _map(results.sort(comparator), function (x) {
                    return x.value;
                }));
            }
        });

        function comparator(left, right) {
            var a = left.criteria,
                b = right.criteria;
            return a < b ? -1 : a > b ? 1 : 0;
        }
    };

    async.auto = function (tasks, concurrency, callback) {
        if (typeof arguments[1] === 'function') {
            // concurrency is optional, shift the args.
            callback = concurrency;
            concurrency = null;
        }
        callback = _once(callback || noop);
        var keys = _keys(tasks);
        var remainingTasks = keys.length;
        if (!remainingTasks) {
            return callback(null);
        }
        if (!concurrency) {
            concurrency = remainingTasks;
        }

        var results = {};
        var runningTasks = 0;

        var hasError = false;

        var listeners = [];
        function addListener(fn) {
            listeners.unshift(fn);
        }
        function removeListener(fn) {
            var idx = _indexOf(listeners, fn);
            if (idx >= 0) listeners.splice(idx, 1);
        }
        function taskComplete() {
            remainingTasks--;
            _arrayEach(listeners.slice(0), function (fn) {
                fn();
            });
        }

        addListener(function () {
            if (!remainingTasks) {
                callback(null, results);
            }
        });

        _arrayEach(keys, function (k) {
            if (hasError) return;
            var task = _isArray(tasks[k]) ? tasks[k] : [tasks[k]];
            var taskCallback = _restParam(function (err, args) {
                runningTasks--;
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _forEachOf(results, function (val, rkey) {
                        safeResults[rkey] = val;
                    });
                    safeResults[k] = args;
                    hasError = true;

                    callback(err, safeResults);
                } else {
                    results[k] = args;
                    async.setImmediate(taskComplete);
                }
            });
            var requires = task.slice(0, task.length - 1);
            // prevent dead-locks
            var len = requires.length;
            var dep;
            while (len--) {
                if (!(dep = tasks[requires[len]])) {
                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));
                }
                if (_isArray(dep) && _indexOf(dep, k) >= 0) {
                    throw new Error('Has cyclic dependencies');
                }
            }
            function ready() {
                return runningTasks < concurrency && _reduce(requires, function (a, x) {
                    return a && results.hasOwnProperty(x);
                }, true) && !results.hasOwnProperty(k);
            }
            if (ready()) {
                runningTasks++;
                task[task.length - 1](taskCallback, results);
            } else {
                addListener(listener);
            }
            function listener() {
                if (ready()) {
                    runningTasks++;
                    removeListener(listener);
                    task[task.length - 1](taskCallback, results);
                }
            }
        });
    };

    async.retry = function (times, task, callback) {
        var DEFAULT_TIMES = 5;
        var DEFAULT_INTERVAL = 0;

        var attempts = [];

        var opts = {
            times: DEFAULT_TIMES,
            interval: DEFAULT_INTERVAL
        };

        function parseTimes(acc, t) {
            if (typeof t === 'number') {
                acc.times = parseInt(t, 10) || DEFAULT_TIMES;
            } else if ((typeof t === 'undefined' ? 'undefined' : _typeof(t)) === 'object') {
                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;
                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;
            } else {
                throw new Error('Unsupported argument type for \'times\': ' + (typeof t === 'undefined' ? 'undefined' : _typeof(t)));
            }
        }

        var length = arguments.length;
        if (length < 1 || length > 3) {
            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');
        } else if (length <= 2 && typeof times === 'function') {
            callback = task;
            task = times;
        }
        if (typeof times !== 'function') {
            parseTimes(opts, times);
        }
        opts.callback = callback;
        opts.task = task;

        function wrappedTask(wrappedCallback, wrappedResults) {
            function retryAttempt(task, finalAttempt) {
                return function (seriesCallback) {
                    task(function (err, result) {
                        seriesCallback(!err || finalAttempt, { err: err, result: result });
                    }, wrappedResults);
                };
            }

            function retryInterval(interval) {
                return function (seriesCallback) {
                    setTimeout(function () {
                        seriesCallback(null);
                    }, interval);
                };
            }

            while (opts.times) {

                var finalAttempt = !(opts.times -= 1);
                attempts.push(retryAttempt(opts.task, finalAttempt));
                if (!finalAttempt && opts.interval > 0) {
                    attempts.push(retryInterval(opts.interval));
                }
            }

            async.series(attempts, function (done, data) {
                data = data[data.length - 1];
                (wrappedCallback || opts.callback)(data.err, data.result);
            });
        }

        // If a callback is passed, run this as a controll flow
        return opts.callback ? wrappedTask() : wrappedTask;
    };

    async.waterfall = function (tasks, callback) {
        callback = _once(callback || noop);
        if (!_isArray(tasks)) {
            var err = new Error('First argument to waterfall must be an array of functions');
            return callback(err);
        }
        if (!tasks.length) {
            return callback();
        }
        function wrapIterator(iterator) {
            return _restParam(function (err, args) {
                if (err) {
                    callback.apply(null, [err].concat(args));
                } else {
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    } else {
                        args.push(callback);
                    }
                    ensureAsync(iterator).apply(null, args);
                }
            });
        }
        wrapIterator(async.iterator(tasks))();
    };

    function _parallel(eachfn, tasks, callback) {
        callback = callback || noop;
        var results = _isArrayLike(tasks) ? [] : {};

        eachfn(tasks, function (task, key, callback) {
            task(_restParam(function (err, args) {
                if (args.length <= 1) {
                    args = args[0];
                }
                results[key] = args;
                callback(err);
            }));
        }, function (err) {
            callback(err, results);
        });
    }

    async.parallel = function (tasks, callback) {
        _parallel(async.eachOf, tasks, callback);
    };

    async.parallelLimit = function (tasks, limit, callback) {
        _parallel(_eachOfLimit(limit), tasks, callback);
    };

    async.series = function (tasks, callback) {
        _parallel(async.eachOfSeries, tasks, callback);
    };

    async.iterator = function (tasks) {
        function makeCallback(index) {
            function fn() {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            }
            fn.next = function () {
                return index < tasks.length - 1 ? makeCallback(index + 1) : null;
            };
            return fn;
        }
        return makeCallback(0);
    };

    async.apply = _restParam(function (fn, args) {
        return _restParam(function (callArgs) {
            return fn.apply(null, args.concat(callArgs));
        });
    });

    function _concat(eachfn, arr, fn, callback) {
        var result = [];
        eachfn(arr, function (x, index, cb) {
            fn(x, function (err, y) {
                result = result.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, result);
        });
    }
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        callback = callback || noop;
        if (test()) {
            var next = _restParam(function (err, args) {
                if (err) {
                    callback(err);
                } else if (test.apply(this, args)) {
                    iterator(next);
                } else {
                    callback.apply(null, [null].concat(args));
                }
            });
            iterator(next);
        } else {
            callback(null);
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        var calls = 0;
        return async.whilst(function () {
            return ++calls <= 1 || test.apply(this, arguments);
        }, iterator, callback);
    };

    async.until = function (test, iterator, callback) {
        return async.whilst(function () {
            return !test.apply(this, arguments);
        }, iterator, callback);
    };

    async.doUntil = function (iterator, test, callback) {
        return async.doWhilst(iterator, function () {
            return !test.apply(this, arguments);
        }, callback);
    };

    async.during = function (test, iterator, callback) {
        callback = callback || noop;

        var next = _restParam(function (err, args) {
            if (err) {
                callback(err);
            } else {
                args.push(check);
                test.apply(this, args);
            }
        });

        var check = function check(err, truth) {
            if (err) {
                callback(err);
            } else if (truth) {
                iterator(next);
            } else {
                callback(null);
            }
        };

        test(check);
    };

    async.doDuring = function (iterator, test, callback) {
        var calls = 0;
        async.during(function (next) {
            if (calls++ < 1) {
                next(null, true);
            } else {
                test.apply(this, arguments);
            }
        }, iterator, callback);
    };

    function _queue(worker, concurrency, payload) {
        if (concurrency == null) {
            concurrency = 1;
        } else if (concurrency === 0) {
            throw new Error('Concurrency must not be zero');
        }
        function _insert(q, data, pos, callback) {
            if (callback != null && typeof callback !== "function") {
                throw new Error("task callback must be a function");
            }
            q.started = true;
            if (!_isArray(data)) {
                data = [data];
            }
            if (data.length === 0 && q.idle()) {
                // call drain immediately if there are no tasks
                return async.setImmediate(function () {
                    q.drain();
                });
            }
            _arrayEach(data, function (task) {
                var item = {
                    data: task,
                    callback: callback || noop
                };

                if (pos) {
                    q.tasks.unshift(item);
                } else {
                    q.tasks.push(item);
                }

                if (q.tasks.length === q.concurrency) {
                    q.saturated();
                }
            });
            async.setImmediate(q.process);
        }
        function _next(q, tasks) {
            return function () {
                workers -= 1;

                var removed = false;
                var args = arguments;
                _arrayEach(tasks, function (task) {
                    _arrayEach(_workersList, function (worker, index) {
                        if (worker === task && !removed) {
                            _workersList.splice(index, 1);
                            removed = true;
                        }
                    });

                    task.callback.apply(task, args);
                });
                if (q.tasks.length + workers === 0) {
                    q.drain();
                }
                q.process();
            };
        }

        var workers = 0;
        var _workersList = [];
        var q = {
            tasks: [],
            concurrency: concurrency,
            payload: payload,
            saturated: noop,
            empty: noop,
            drain: noop,
            started: false,
            paused: false,
            push: function push(data, callback) {
                _insert(q, data, false, callback);
            },
            kill: function kill() {
                q.drain = noop;
                q.tasks = [];
            },
            unshift: function unshift(data, callback) {
                _insert(q, data, true, callback);
            },
            process: function process() {
                while (!q.paused && workers < q.concurrency && q.tasks.length) {

                    var tasks = q.payload ? q.tasks.splice(0, q.payload) : q.tasks.splice(0, q.tasks.length);

                    var data = _map(tasks, function (task) {
                        return task.data;
                    });

                    if (q.tasks.length === 0) {
                        q.empty();
                    }
                    workers += 1;
                    _workersList.push(tasks[0]);
                    var cb = only_once(_next(q, tasks));
                    worker(data, cb);
                }
            },
            length: function length() {
                return q.tasks.length;
            },
            running: function running() {
                return workers;
            },
            workersList: function workersList() {
                return _workersList;
            },
            idle: function idle() {
                return q.tasks.length + workers === 0;
            },
            pause: function pause() {
                q.paused = true;
            },
            resume: function resume() {
                if (q.paused === false) {
                    return;
                }
                q.paused = false;
                var resumeCount = Math.min(q.concurrency, q.tasks.length);
                // Need to call q.process once per concurrent
                // worker to preserve full concurrency after pause
                for (var w = 1; w <= resumeCount; w++) {
                    async.setImmediate(q.process);
                }
            }
        };
        return q;
    }

    async.queue = function (worker, concurrency) {
        var q = _queue(function (items, cb) {
            worker(items[0], cb);
        }, concurrency, 1);

        return q;
    };

    async.priorityQueue = function (worker, concurrency) {

        function _compareTasks(a, b) {
            return a.priority - b.priority;
        }

        function _binarySearch(sequence, item, compare) {
            var beg = -1,
                end = sequence.length - 1;
            while (beg < end) {
                var mid = beg + (end - beg + 1 >>> 1);
                if (compare(item, sequence[mid]) >= 0) {
                    beg = mid;
                } else {
                    end = mid - 1;
                }
            }
            return beg;
        }

        function _insert(q, data, priority, callback) {
            if (callback != null && typeof callback !== "function") {
                throw new Error("task callback must be a function");
            }
            q.started = true;
            if (!_isArray(data)) {
                data = [data];
            }
            if (data.length === 0) {
                // call drain immediately if there are no tasks
                return async.setImmediate(function () {
                    q.drain();
                });
            }
            _arrayEach(data, function (task) {
                var item = {
                    data: task,
                    priority: priority,
                    callback: typeof callback === 'function' ? callback : noop
                };

                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

                if (q.tasks.length === q.concurrency) {
                    q.saturated();
                }
                async.setImmediate(q.process);
            });
        }

        // Start with a normal queue
        var q = async.queue(worker, concurrency);

        // Override push to accept second parameter representing priority
        q.push = function (data, priority, callback) {
            _insert(q, data, priority, callback);
        };

        // Remove unshift function
        delete q.unshift;

        return q;
    };

    async.cargo = function (worker, payload) {
        return _queue(worker, 1, payload);
    };

    function _console_fn(name) {
        return _restParam(function (fn, args) {
            fn.apply(null, args.concat([_restParam(function (err, args) {
                if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) === 'object') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    } else if (console[name]) {
                        _arrayEach(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            })]));
        });
    }
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        var has = Object.prototype.hasOwnProperty;
        hasher = hasher || identity;
        var memoized = _restParam(function memoized(args) {
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (has.call(memo, key)) {
                async.setImmediate(function () {
                    callback.apply(null, memo[key]);
                });
            } else if (has.call(queues, key)) {
                queues[key].push(callback);
            } else {
                queues[key] = [callback];
                fn.apply(null, args.concat([_restParam(function (args) {
                    memo[key] = args;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                        q[i].apply(null, args);
                    }
                })]));
            }
        });
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
        return function () {
            return (fn.unmemoized || fn).apply(null, arguments);
        };
    };

    function _times(mapper) {
        return function (count, iterator, callback) {
            mapper(_range(count), iterator, callback);
        };
    }

    async.times = _times(async.map);
    async.timesSeries = _times(async.mapSeries);
    async.timesLimit = function (count, limit, iterator, callback) {
        return async.mapLimit(_range(count), limit, iterator, callback);
    };

    async.seq = function () /* functions... */{
        var fns = arguments;
        return _restParam(function (args) {
            var that = this;

            var callback = args[args.length - 1];
            if (typeof callback == 'function') {
                args.pop();
            } else {
                callback = noop;
            }

            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {
                    cb(err, nextargs);
                })]));
            }, function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        });
    };

    async.compose = function () /* functions... */{
        return async.seq.apply(null, Array.prototype.reverse.call(arguments));
    };

    function _applyEach(eachfn) {
        return _restParam(function (fns, args) {
            var go = _restParam(function (args) {
                var that = this;
                var callback = args.pop();
                return eachfn(fns, function (fn, _, cb) {
                    fn.apply(that, args.concat([cb]));
                }, callback);
            });
            if (args.length) {
                return go.apply(this, args);
            } else {
                return go;
            }
        });
    }

    async.applyEach = _applyEach(async.eachOf);
    async.applyEachSeries = _applyEach(async.eachOfSeries);

    async.forever = function (fn, callback) {
        var done = only_once(callback || noop);
        var task = ensureAsync(fn);
        function next(err) {
            if (err) {
                return done(err);
            }
            task(next);
        }
        next();
    };

    function ensureAsync(fn) {
        return _restParam(function (args) {
            var callback = args.pop();
            args.push(function () {
                var innerArgs = arguments;
                if (sync) {
                    async.setImmediate(function () {
                        callback.apply(null, innerArgs);
                    });
                } else {
                    callback.apply(null, innerArgs);
                }
            });
            var sync = true;
            fn.apply(this, args);
            sync = false;
        });
    }

    async.ensureAsync = ensureAsync;

    async.constant = _restParam(function (values) {
        var args = [null].concat(values);
        return function (callback) {
            return callback.apply(this, args);
        };
    });

    async.wrapSync = async.asyncify = function asyncify(func) {
        return _restParam(function (args) {
            var callback = args.pop();
            var result;
            try {
                result = func.apply(this, args);
            } catch (e) {
                return callback(e);
            }
            // if result is Promise object
            if (_isObject(result) && typeof result.then === "function") {
                result.then(function (value) {
                    callback(null, value);
                })["catch"](function (err) {
                    callback(err.message ? err : new Error(err));
                });
            } else {
                callback(null, result);
            }
        });
    };

    // Node.js
    if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
        module.exports = async;
    }
    // AMD / RequireJS
    else if (typeof define === 'function' && define.amd) {
            define([], function () {
                return async;
            });
        }
        // included directly via <script> tag
        else {
                root.async = async;
            }
})();

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":213}],26:[function(require,module,exports){
'use strict';

// base-x encoding
// Forked from https://github.com/cryptocoinjs/bs58
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc

module.exports = function base(ALPHABET) {
  var ALPHABET_MAP = {};
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);

  // pre-compute lookup table
  for (var i = 0; i < ALPHABET.length; i++) {
    ALPHABET_MAP[ALPHABET.charAt(i)] = i;
  }

  function encode(source) {
    if (source.length === 0) return '';

    var digits = [0];
    for (var i = 0; i < source.length; ++i) {
      for (var j = 0, carry = source[i]; j < digits.length; ++j) {
        carry += digits[j] << 8;
        digits[j] = carry % BASE;
        carry = carry / BASE | 0;
      }

      while (carry > 0) {
        digits.push(carry % BASE);
        carry = carry / BASE | 0;
      }
    }

    // deal with leading zeros
    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
      digits.push(0);
    }

    // convert digits to a string
    for (var ii = 0, jj = digits.length - 1; ii <= jj; ++ii, --jj) {
      var tmp = ALPHABET[digits[ii]];
      digits[ii] = ALPHABET[digits[jj]];
      digits[jj] = tmp;
    }

    return digits.join('');
  }

  function decode(string) {
    if (string.length === 0) return [];

    var bytes = [0];
    for (var i = 0; i < string.length; i++) {
      var value = ALPHABET_MAP[string[i]];
      if (value === undefined) throw new Error('Non-base' + BASE + ' character');

      for (var j = 0, carry = value; j < bytes.length; ++j) {
        carry += bytes[j] * BASE;
        bytes[j] = carry & 0xff;
        carry >>= 8;
      }

      while (carry > 0) {
        bytes.push(carry & 0xff);
        carry >>= 8;
      }
    }

    // deal with leading zeros
    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {
      bytes.push(0);
    }

    return bytes.reverse();
  }

  return {
    encode: encode,
    decode: decode
  };
};

},{}],27:[function(require,module,exports){
'use strict';

exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

function init() {
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
}

init();

function toByteArray(b64) {
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('');
}

},{}],28:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*! bignumber.js v2.4.0 https://github.com/MikeMcl/bignumber.js/LICENCE */

;(function (globalObj) {
    'use strict';

    /*
      bignumber.js v2.4.0
      A JavaScript library for arbitrary-precision arithmetic.
      https://github.com/MikeMcl/bignumber.js
      Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>
      MIT Expat Licence
    */

    var BigNumber,
        cryptoObj,
        parseNumeric,
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        mathceil = Math.ceil,
        mathfloor = Math.floor,
        notBool = ' not a boolean or binary digit',
        roundingMode = 'rounding mode',
        tooManyDigits = 'number type has more than 15 significant digits',
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
        BASE = 1e14,
        LOG_BASE = 14,
        MAX_SAFE_INTEGER = 0x1fffffffffffff,
        // 2^53 - 1
    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
        SQRT_BASE = 1e7,


    /*
     * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
     * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
     * exception is thrown (if ERRORS is true).
     */
    MAX = 1E9; // 0 to MAX_INT32

    if (typeof crypto != 'undefined') cryptoObj = crypto;

    /*
     * Create and return a BigNumber constructor.
     */
    function constructorFactory(configObj) {
        var div,


        // id tracks the caller function, so its name can be included in error messages.
        id = 0,
            P = BigNumber.prototype,
            ONE = new BigNumber(1),


        /********************************* EDITABLE DEFAULTS **********************************/

        /*
         * The default values below must be integers within the inclusive ranges stated.
         * The values can also be changed at run-time using BigNumber.config.
         */

        // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20,
            // 0 to MAX

        /*
         * The rounding mode used when rounding to the above decimal places, and when using
         * toExponential, toFixed, toFormat and toPrecision, and round (default value).
         * UP         0 Away from zero.
         * DOWN       1 Towards zero.
         * CEIL       2 Towards +Infinity.
         * FLOOR      3 Towards -Infinity.
         * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
         * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
         * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
         * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
         * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
         */
        ROUNDING_MODE = 4,
            // 0 to 8

        // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7,
            // 0 to -MAX

        // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21,
            // 0 to MAX

        // RANGE : [MIN_EXP, MAX_EXP]

        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -1e7,
            // -1 to -MAX

        // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 1e7,
            // 1 to MAX

        // Whether BigNumber Errors are ever thrown.
        ERRORS = true,
            // true or false

        // Change to intValidatorNoErrors if ERRORS is false.
        isValidInt = intValidatorWithErrors,
            // intValidatorWithErrors/intValidatorNoErrors

        // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false,
            // true or false

        /*
         * The modulo mode used when calculating the modulus: a mod n.
         * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
         * The remainder (r) is calculated as: r = a - n * q.
         *
         * UP        0 The remainder is positive if the dividend is negative, else is negative.
         * DOWN      1 The remainder has the same sign as the dividend.
         *             This modulo mode is commonly known as 'truncated division' and is
         *             equivalent to (a % n) in JavaScript.
         * FLOOR     3 The remainder has the same sign as the divisor (Python %).
         * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
         * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
         *             The remainder is always positive.
         *
         * The truncated division, floored division, Euclidian division and IEEE 754 remainder
         * modes are commonly used for the modulus operation.
         * Although the other rounding modes can also be used, they may not give useful results.
         */
        MODULO_MODE = 1,
            // 0 to 9

        // The maximum number of significant digits of the result of the toPower operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 100,
            // 0 to MAX

        // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = {
            decimalSeparator: '.',
            groupSeparator: ',',
            groupSize: 3,
            secondaryGroupSize: 0,
            fractionGroupSeparator: '\xA0', // non-breaking space
            fractionGroupSize: 0
        };

        /******************************************************************************************/

        // CONSTRUCTOR


        /*
         * The BigNumber constructor and exported function.
         * Create and return a new instance of a BigNumber object.
         *
         * n {number|string|BigNumber} A numeric value.
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
         */
        function BigNumber(n, b) {
            var c,
                e,
                i,
                num,
                len,
                str,
                x = this;

            // Enable constructor usage without new.
            if (!(x instanceof BigNumber)) {

                // 'BigNumber() constructor call without new: {n}'
                if (ERRORS) raise(26, 'constructor call without new', n);
                return new BigNumber(n, b);
            }

            // 'new BigNumber() base not an integer: {b}'
            // 'new BigNumber() base out of range: {b}'
            if (b == null || !isValidInt(b, 2, 64, id, 'base')) {

                // Duplicate.
                if (n instanceof BigNumber) {
                    x.s = n.s;
                    x.e = n.e;
                    x.c = (n = n.c) ? n.slice() : n;
                    id = 0;
                    return;
                }

                if ((num = typeof n == 'number') && n * 0 == 0) {
                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;

                    // Fast path for integers.
                    if (n === ~~n) {
                        for (e = 0, i = n; i >= 10; i /= 10, e++) {}
                        x.e = e;
                        x.c = [n];
                        id = 0;
                        return;
                    }

                    str = n + '';
                } else {
                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);
                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                }
            } else {
                b = b | 0;
                str = n + '';

                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
                // Allow exponential notation to be used with base 10 argument.
                if (b == 10) {
                    x = new BigNumber(n instanceof BigNumber ? n : str);
                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                }

                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                // Any number in exponential form will fail due to the [Ee][+-].
                if ((num = typeof n == 'number') && n * 0 != 0 || !new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') + '(?:\\.' + c + ')?$', b < 37 ? 'i' : '').test(str)) {
                    return parseNumeric(x, str, num, b);
                }

                if (num) {
                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;

                    if (ERRORS && str.replace(/^0\.0*|\./, '').length > 15) {

                        // 'new BigNumber() number type has more than 15 significant digits: {n}'
                        raise(id, tooManyDigits, n);
                    }

                    // Prevent later check for length on converted number.
                    num = false;
                } else {
                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                }

                str = convertBase(str, 10, b, x.s);
            }

            // Decimal point?
            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

            // Exponential form?
            if ((i = str.search(/e/i)) > 0) {

                // Determine exponent.
                if (e < 0) e = i;
                e += +str.slice(i + 1);
                str = str.substring(0, i);
            } else if (e < 0) {

                // Integer.
                e = str.length;
            }

            // Determine leading zeros.
            for (i = 0; str.charCodeAt(i) === 48; i++) {}

            // Determine trailing zeros.
            for (len = str.length; str.charCodeAt(--len) === 48;) {}
            str = str.slice(i, len + 1);

            if (str) {
                len = str.length;

                // Disallow numbers with over 15 significant digits if number type.
                // 'new BigNumber() number type has more than 15 significant digits: {n}'
                if (num && ERRORS && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {
                    raise(id, tooManyDigits, x.s * n);
                }

                e = e - i - 1;

                // Overflow?
                if (e > MAX_EXP) {

                    // Infinity.
                    x.c = x.e = null;

                    // Underflow?
                } else if (e < MIN_EXP) {

                    // Zero.
                    x.c = [x.e = 0];
                } else {
                    x.e = e;
                    x.c = [];

                    // Transform base

                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = (e + 1) % LOG_BASE;
                    if (e < 0) i += LOG_BASE;

                    if (i < len) {
                        if (i) x.c.push(+str.slice(0, i));

                        for (len -= LOG_BASE; i < len;) {
                            x.c.push(+str.slice(i, i += LOG_BASE));
                        }

                        str = str.slice(i);
                        i = LOG_BASE - str.length;
                    } else {
                        i -= len;
                    }

                    for (; i--; str += '0') {}
                    x.c.push(+str);
                }
            } else {

                // Zero.
                x.c = [x.e = 0];
            }

            id = 0;
        }

        // CONSTRUCTOR PROPERTIES


        BigNumber.another = constructorFactory;

        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;

        /*
         * Configure infrequently-changing library-wide settings.
         *
         * Accept an object or an argument list, with one or many of the following properties or
         * parameters respectively:
         *
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
         *   ERRORS          {boolean|number}   true, false, 1 or 0
         *   CRYPTO          {boolean|number}   true, false, 1 or 0
         *   MODULO_MODE     {number}           0 to 9 inclusive
         *   POW_PRECISION   {number}           0 to MAX inclusive
         *   FORMAT          {object}           See BigNumber.prototype.toFormat
         *      decimalSeparator       {string}
         *      groupSeparator         {string}
         *      groupSize              {number}
         *      secondaryGroupSize     {number}
         *      fractionGroupSeparator {string}
         *      fractionGroupSize      {number}
         *
         * (The values assigned to the above FORMAT object properties are not checked for validity.)
         *
         * E.g.
         * BigNumber.config(20, 4) is equivalent to
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
         *
         * Ignore properties/parameters set to null or undefined.
         * Return an object with the properties current values.
         */
        BigNumber.config = function () {
            var v,
                p,
                i = 0,
                r = {},
                a = arguments,
                o = a[0],
                has = o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) == 'object' ? function () {
                if (o.hasOwnProperty(p)) return (v = o[p]) != null;
            } : function () {
                if (a.length > i) return (v = a[i++]) != null;
            };

            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
            // 'config() DECIMAL_PLACES not an integer: {v}'
            // 'config() DECIMAL_PLACES out of range: {v}'
            if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {
                DECIMAL_PLACES = v | 0;
            }
            r[p] = DECIMAL_PLACES;

            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
            // 'config() ROUNDING_MODE not an integer: {v}'
            // 'config() ROUNDING_MODE out of range: {v}'
            if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {
                ROUNDING_MODE = v | 0;
            }
            r[p] = ROUNDING_MODE;

            // EXPONENTIAL_AT {number|number[]}
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
            // 'config() EXPONENTIAL_AT not an integer: {v}'
            // 'config() EXPONENTIAL_AT out of range: {v}'
            if (has(p = 'EXPONENTIAL_AT')) {

                if (isArray(v)) {
                    if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {
                        TO_EXP_NEG = v[0] | 0;
                        TO_EXP_POS = v[1] | 0;
                    }
                } else if (isValidInt(v, -MAX, MAX, 2, p)) {
                    TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);
                }
            }
            r[p] = [TO_EXP_NEG, TO_EXP_POS];

            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
            // 'config() RANGE not an integer: {v}'
            // 'config() RANGE cannot be zero: {v}'
            // 'config() RANGE out of range: {v}'
            if (has(p = 'RANGE')) {

                if (isArray(v)) {
                    if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {
                        MIN_EXP = v[0] | 0;
                        MAX_EXP = v[1] | 0;
                    }
                } else if (isValidInt(v, -MAX, MAX, 2, p)) {
                    if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);else if (ERRORS) raise(2, p + ' cannot be zero', v);
                }
            }
            r[p] = [MIN_EXP, MAX_EXP];

            // ERRORS {boolean|number} true, false, 1 or 0.
            // 'config() ERRORS not a boolean or binary digit: {v}'
            if (has(p = 'ERRORS')) {

                if (v === !!v || v === 1 || v === 0) {
                    id = 0;
                    isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;
                } else if (ERRORS) {
                    raise(2, p + notBool, v);
                }
            }
            r[p] = ERRORS;

            // CRYPTO {boolean|number} true, false, 1 or 0.
            // 'config() CRYPTO not a boolean or binary digit: {v}'
            // 'config() crypto unavailable: {crypto}'
            if (has(p = 'CRYPTO')) {

                if (v === !!v || v === 1 || v === 0) {
                    CRYPTO = !!(v && cryptoObj);
                    if (v && !CRYPTO && ERRORS) raise(2, 'crypto unavailable', cryptoObj);
                } else if (ERRORS) {
                    raise(2, p + notBool, v);
                }
            }
            r[p] = CRYPTO;

            // MODULO_MODE {number} Integer, 0 to 9 inclusive.
            // 'config() MODULO_MODE not an integer: {v}'
            // 'config() MODULO_MODE out of range: {v}'
            if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {
                MODULO_MODE = v | 0;
            }
            r[p] = MODULO_MODE;

            // POW_PRECISION {number} Integer, 0 to MAX inclusive.
            // 'config() POW_PRECISION not an integer: {v}'
            // 'config() POW_PRECISION out of range: {v}'
            if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {
                POW_PRECISION = v | 0;
            }
            r[p] = POW_PRECISION;

            // FORMAT {object}
            // 'config() FORMAT not an object: {v}'
            if (has(p = 'FORMAT')) {

                if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) == 'object') {
                    FORMAT = v;
                } else if (ERRORS) {
                    raise(2, p + ' not an object', v);
                }
            }
            r[p] = FORMAT;

            return r;
        };

        /*
         * Return a new BigNumber whose value is the maximum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.max = function () {
            return maxOrMin(arguments, P.lt);
        };

        /*
         * Return a new BigNumber whose value is the minimum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.min = function () {
            return maxOrMin(arguments, P.gt);
        };

        /*
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
         * zeros are produced).
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         *
         * 'random() decimal places not an integer: {dp}'
         * 'random() decimal places out of range: {dp}'
         * 'random() crypto unavailable: {crypto}'
         */
        BigNumber.random = function () {
            var pow2_53 = 0x20000000000000;

            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
            // Check if Math.random() produces more than 32 bits of randomness.
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
            var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {
                return mathfloor(Math.random() * pow2_53);
            } : function () {
                return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
            };

            return function (dp) {
                var a,
                    b,
                    e,
                    k,
                    v,
                    i = 0,
                    c = [],
                    rand = new BigNumber(ONE);

                dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;
                k = mathceil(dp / LOG_BASE);

                if (CRYPTO) {

                    // Browsers supporting crypto.getRandomValues.
                    if (cryptoObj && cryptoObj.getRandomValues) {

                        a = cryptoObj.getRandomValues(new Uint32Array(k *= 2));

                        for (; i < k;) {

                            // 53 bits:
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                            //                                     11111 11111111 11111111
                            // 0x20000 is 2^21.
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                            // Rejection sampling:
                            // 0 <= v < 9007199254740992
                            // Probability that v >= 9e15, is
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                            if (v >= 9e15) {
                                b = cryptoObj.getRandomValues(new Uint32Array(2));
                                a[i] = b[0];
                                a[i + 1] = b[1];
                            } else {

                                // 0 <= v <= 8999999999999999
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 2;
                            }
                        }
                        i = k / 2;

                        // Node.js supporting crypto.randomBytes.
                    } else if (cryptoObj && cryptoObj.randomBytes) {

                        // buffer
                        a = cryptoObj.randomBytes(k *= 7);

                        for (; i < k;) {

                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                            // 0x100000000 is 2^32, 0x1000000 is 2^24
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                            // 0 <= v < 9007199254740992
                            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                            if (v >= 9e15) {
                                cryptoObj.randomBytes(7).copy(a, i);
                            } else {

                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 7;
                            }
                        }
                        i = k / 7;
                    } else if (ERRORS) {
                        raise(14, 'crypto unavailable', cryptoObj);
                    }
                }

                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
                if (!i) {

                    for (; i < k;) {
                        v = random53bitInt();
                        if (v < 9e15) c[i++] = v % 1e14;
                    }
                }

                k = c[--i];
                dp %= LOG_BASE;

                // Convert trailing digits to zeros according to dp.
                if (k && dp) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor(k / v) * v;
                }

                // Remove trailing elements which are zero.
                for (; c[i] === 0; c.pop(), i--) {}

                // Zero?
                if (i < 0) {
                    c = [e = 0];
                } else {

                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for (e = -1; c[0] === 0; c.shift(), e -= LOG_BASE) {}

                    // Count the digits of the first element of c to determine leading zeros, and...
                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++) {}

                    // adjust the exponent accordingly.
                    if (i < LOG_BASE) e -= LOG_BASE - i;
                }

                rand.e = e;
                rand.c = c;
                return rand;
            };
        }();

        // PRIVATE FUNCTIONS


        // Convert a numeric string of baseIn to a numeric string of baseOut.
        function convertBase(str, baseOut, baseIn, sign) {
            var d,
                e,
                k,
                r,
                x,
                xc,
                y,
                i = str.indexOf('.'),
                dp = DECIMAL_PLACES,
                rm = ROUNDING_MODE;

            if (baseIn < 37) str = str.toLowerCase();

            // Non-integer.
            if (i >= 0) {
                k = POW_PRECISION;

                // Unlimited precision.
                POW_PRECISION = 0;
                str = str.replace('.', '');
                y = new BigNumber(baseIn);
                x = y.pow(str.length - i);
                POW_PRECISION = k;

                // Convert str as if an integer, then restore the fraction part by dividing the
                // result by its base raised to a power.
                y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);
                y.e = y.c.length;
            }

            // Convert the number as integer.
            xc = toBaseOut(str, baseIn, baseOut);
            e = k = xc.length;

            // Remove trailing zeros.
            for (; xc[--k] == 0; xc.pop()) {}
            if (!xc[0]) return '0';

            if (i < 0) {
                --e;
            } else {
                x.c = xc;
                x.e = e;

                // sign is needed for correct rounding.
                x.s = sign;
                x = div(x, y, dp, rm, baseOut);
                xc = x.c;
                r = x.r;
                e = x.e;
            }

            d = e + dp + 1;

            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
            i = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;

            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));

            if (d < 1 || !xc[0]) {

                // 1^-dp or 0.
                str = r ? toFixedPoint('1', -dp) : '0';
            } else {
                xc.length = d;

                if (r) {

                    // Rounding up may mean the previous digit has to be rounded up and so on.
                    for (--baseOut; ++xc[--d] > baseOut;) {
                        xc[d] = 0;

                        if (!d) {
                            ++e;
                            xc.unshift(1);
                        }
                    }
                }

                // Determine trailing zeros.
                for (k = xc.length; !xc[--k];) {}

                // E.g. [4, 11, 15] becomes 4bf.
                for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++])) {}
                str = toFixedPoint(str, e);
            }

            // The caller will add the sign.
            return str;
        }

        // Perform division in the specified base. Called by div and convertBase.
        div = function () {

            // Assume non-zero x and k.
            function multiply(x, k, base) {
                var m,
                    temp,
                    xlo,
                    xhi,
                    carry = 0,
                    i = x.length,
                    klo = k % SQRT_BASE,
                    khi = k / SQRT_BASE | 0;

                for (x = x.slice(); i--;) {
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                    x[i] = temp % base;
                }

                if (carry) x.unshift(carry);

                return x;
            }

            function compare(a, b, aL, bL) {
                var i, cmp;

                if (aL != bL) {
                    cmp = aL > bL ? 1 : -1;
                } else {

                    for (i = cmp = 0; i < aL; i++) {

                        if (a[i] != b[i]) {
                            cmp = a[i] > b[i] ? 1 : -1;
                            break;
                        }
                    }
                }
                return cmp;
            }

            function subtract(a, b, aL, base) {
                var i = 0;

                // Subtract b from a.
                for (; aL--;) {
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                }

                // Remove leading zeros.
                for (; !a[0] && a.length > 1; a.shift()) {}
            }

            // x: dividend, y: divisor.
            return function (x, y, dp, rm, base) {
                var cmp,
                    e,
                    i,
                    more,
                    n,
                    prod,
                    prodL,
                    q,
                    qc,
                    rem,
                    remL,
                    rem0,
                    xi,
                    xL,
                    yc0,
                    yL,
                    yz,
                    s = x.s == y.s ? 1 : -1,
                    xc = x.c,
                    yc = y.c;

                // Either NaN, Infinity or 0?
                if (!xc || !xc[0] || !yc || !yc[0]) {

                    return new BigNumber(

                    // Return NaN if either NaN, or both Infinity or 0.
                    !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                    // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                    xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
                }

                q = new BigNumber(s);
                qc = q.c = [];
                e = x.e - y.e;
                s = dp + e + 1;

                if (!base) {
                    base = BASE;
                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                    s = s / LOG_BASE | 0;
                }

                // Result exponent may be one less then the current value of e.
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                for (i = 0; yc[i] == (xc[i] || 0); i++) {}
                if (yc[i] > (xc[i] || 0)) e--;

                if (s < 0) {
                    qc.push(1);
                    more = true;
                } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;

                    // Normalise xc and yc so highest order digit of yc is >= base / 2.

                    n = mathfloor(base / (yc[0] + 1));

                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
                    if (n > 1) {
                        yc = multiply(yc, n, base);
                        xc = multiply(xc, n, base);
                        yL = yc.length;
                        xL = xc.length;
                    }

                    xi = yL;
                    rem = xc.slice(0, yL);
                    remL = rem.length;

                    // Add zeros to make remainder as long as divisor.
                    for (; remL < yL; rem[remL++] = 0) {}
                    yz = yc.slice();
                    yz.unshift(0);
                    yc0 = yc[0];
                    if (yc[1] >= base / 2) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

                    do {
                        n = 0;

                        // Compare divisor and remainder.
                        cmp = compare(yc, rem, yL, remL);

                        // If divisor < remainder.
                        if (cmp < 0) {

                            // Calculate trial digit, n.

                            rem0 = rem[0];
                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                            // n is how many times the divisor goes into the current remainder.
                            n = mathfloor(rem0 / yc0);

                            //  Algorithm:
                            //  1. product = divisor * trial digit (n)
                            //  2. if product > remainder: product -= divisor, n--
                            //  3. remainder -= product
                            //  4. if product was < remainder at 2:
                            //    5. compare new remainder and divisor
                            //    6. If remainder > divisor: remainder -= divisor, n++

                            if (n > 1) {

                                // n may be > base only when base is 3.
                                if (n >= base) n = base - 1;

                                // product = divisor * trial digit.
                                prod = multiply(yc, n, base);
                                prodL = prod.length;
                                remL = rem.length;

                                // Compare product and remainder.
                                // If product > remainder.
                                // Trial digit n too high.
                                // n is 1 too high about 5% of the time, and is not known to have
                                // ever been more than 1 too high.
                                while (compare(prod, rem, prodL, remL) == 1) {
                                    n--;

                                    // Subtract divisor from product.
                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                    prodL = prod.length;
                                    cmp = 1;
                                }
                            } else {

                                // n is 0 or 1, cmp is -1.
                                // If n is 0, there is no need to compare yc and rem again below,
                                // so change cmp to 1 to avoid it.
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                if (n == 0) {

                                    // divisor < remainder, so n must be at least 1.
                                    cmp = n = 1;
                                }

                                // product = divisor
                                prod = yc.slice();
                                prodL = prod.length;
                            }

                            if (prodL < remL) prod.unshift(0);

                            // Subtract product from remainder.
                            subtract(rem, prod, remL, base);
                            remL = rem.length;

                            // If product was < remainder.
                            if (cmp == -1) {

                                // Compare divisor and new remainder.
                                // If divisor < new remainder, subtract divisor from remainder.
                                // Trial digit n too low.
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.
                                while (compare(yc, rem, yL, remL) < 1) {
                                    n++;

                                    // Subtract divisor from remainder.
                                    subtract(rem, yL < remL ? yz : yc, remL, base);
                                    remL = rem.length;
                                }
                            }
                        } else if (cmp === 0) {
                            n++;
                            rem = [0];
                        } // else cmp === 1 and n will be 0

                        // Add the next digit, n, to the result array.
                        qc[i++] = n;

                        // Update the remainder.
                        if (rem[0]) {
                            rem[remL++] = xc[xi] || 0;
                        } else {
                            rem = [xc[xi]];
                            remL = 1;
                        }
                    } while ((xi++ < xL || rem[0] != null) && s--);

                    more = rem[0] != null;

                    // Leading zero?
                    if (!qc[0]) qc.shift();
                }

                if (base == BASE) {

                    // To calculate q.e, first get the number of digits of qc[0].
                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) {}
                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

                    // Caller is convertBase.
                } else {
                    q.e = e;
                    q.r = +more;
                }

                return q;
            };
        }();

        /*
         * Return a string representing the value of BigNumber n in fixed-point or exponential
         * notation rounded to the specified decimal places or significant digits.
         *
         * n is a BigNumber.
         * i is the index of the last digit required (i.e. the digit that may be rounded up).
         * rm is the rounding mode.
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
         */
        function format(n, i, rm, caller) {
            var c0, e, ne, len, str;

            rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;

            if (!n.c) return n.toString();
            c0 = n.c[0];
            ne = n.e;

            if (i == null) {
                str = coeffToString(n.c);
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);
            } else {
                n = round(new BigNumber(n), i, rm);

                // n.e may have changed if the value was rounded up.
                e = n.e;

                str = coeffToString(n.c);
                len = str.length;

                // toPrecision returns exponential notation if the number of significant digits
                // specified is less than the number of digits necessary to represent the integer
                // part of the value in fixed-point notation.

                // Exponential notation.
                if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {

                    // Append zeros?
                    for (; len < i; str += '0', len++) {}
                    str = toExponential(str, e);

                    // Fixed-point notation.
                } else {
                    i -= ne;
                    str = toFixedPoint(str, e);

                    // Append zeros?
                    if (e + 1 > len) {
                        if (--i > 0) for (str += '.'; i--; str += '0') {}
                    } else {
                        i += e - len;
                        if (i > 0) {
                            if (e + 1 == len) str += '.';
                            for (; i--; str += '0') {}
                        }
                    }
                }
            }

            return n.s < 0 && c0 ? '-' + str : str;
        }

        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
            var m,
                n,
                i = 0;

            if (isArray(args[0])) args = args[0];
            m = new BigNumber(args[0]);

            for (; ++i < args.length;) {
                n = new BigNumber(args[i]);

                // If any number is NaN, return NaN.
                if (!n.s) {
                    m = n;
                    break;
                } else if (method.call(m, n)) {
                    m = n;
                }
            }

            return m;
        }

        /*
         * Return true if n is an integer in range, otherwise throw.
         * Use for argument validation when ERRORS is true.
         */
        function intValidatorWithErrors(n, min, max, caller, name) {
            if (n < min || n > max || n != truncate(n)) {
                raise(caller, (name || 'decimal places') + (n < min || n > max ? ' out of range' : ' not an integer'), n);
            }

            return true;
        }

        /*
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
         * Called by minus, plus and times.
         */
        function normalise(n, c, e) {
            var i = 1,
                j = c.length;

            // Remove trailing zeros.
            for (; !c[--j]; c.pop()) {}

            // Calculate the base 10 exponent. First get the number of digits of c[0].
            for (j = c[0]; j >= 10; j /= 10, i++) {}

            // Overflow?
            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

                // Infinity.
                n.c = n.e = null;

                // Underflow?
            } else if (e < MIN_EXP) {

                // Zero.
                n.c = [n.e = 0];
            } else {
                n.e = e;
                n.c = c;
            }

            return n;
        }

        // Handle values that fail the validity test in BigNumber.
        parseNumeric = function () {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                dotAfter = /^([^.]+)\.$/,
                dotBefore = /^\.([^.]+)$/,
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

            return function (x, str, num, b) {
                var base,
                    s = num ? str : str.replace(whitespaceOrPlus, '');

                // No exception on ±Infinity or NaN.
                if (isInfinityOrNaN.test(s)) {
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                } else {
                    if (!num) {

                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                        s = s.replace(basePrefix, function (m, p1, p2) {
                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                            return !b || b == base ? p1 : m;
                        });

                        if (b) {
                            base = b;

                            // E.g. '1.' to '1', '.1' to '0.1'
                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                        }

                        if (str != s) return new BigNumber(s, base);
                    }

                    // 'new BigNumber() not a number: {n}'
                    // 'new BigNumber() not a base {b} number: {n}'
                    if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);
                    x.s = null;
                }

                x.c = x.e = null;
                id = 0;
            };
        }();

        // Throw a BigNumber Error.
        function raise(caller, msg, val) {
            var error = new Error(['new BigNumber', // 0
            'cmp', // 1
            'config', // 2
            'div', // 3
            'divToInt', // 4
            'eq', // 5
            'gt', // 6
            'gte', // 7
            'lt', // 8
            'lte', // 9
            'minus', // 10
            'mod', // 11
            'plus', // 12
            'precision', // 13
            'random', // 14
            'round', // 15
            'shift', // 16
            'times', // 17
            'toDigits', // 18
            'toExponential', // 19
            'toFixed', // 20
            'toFormat', // 21
            'toFraction', // 22
            'pow', // 23
            'toPrecision', // 24
            'toString', // 25
            'BigNumber' // 26
            ][caller] + '() ' + msg + ': ' + val);

            error.name = 'BigNumber Error';
            id = 0;
            throw error;
        }

        /*
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
         * If r is truthy, it is known that there are more digits after the rounding digit.
         */
        function round(x, sd, rm, r) {
            var d,
                i,
                j,
                k,
                n,
                ni,
                rd,
                xc = x.c,
                pows10 = POWS_TEN;

            // if x is not Infinity or NaN...
            if (xc) {

                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                // n is a base 1e14 number, the value of the element of array x.c containing rd.
                // ni is the index of n within x.c.
                // d is the number of digits of n.
                // i is the index of rd within n including leading zeros.
                // j is the actual index of rd within n (if < 0, rd is a leading zero).
                out: {

                    // Get the number of digits of the first element of xc.
                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) {}
                    i = sd - d;

                    // If the rounding digit is in the first element of xc...
                    if (i < 0) {
                        i += LOG_BASE;
                        j = sd;
                        n = xc[ni = 0];

                        // Get the rounding digit at index j of n.
                        rd = n / pows10[d - j - 1] % 10 | 0;
                    } else {
                        ni = mathceil((i + 1) / LOG_BASE);

                        if (ni >= xc.length) {

                            if (r) {

                                // Needed by sqrt.
                                for (; xc.length <= ni; xc.push(0)) {}
                                n = rd = 0;
                                d = 1;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + 1;
                            } else {
                                break out;
                            }
                        } else {
                            n = k = xc[ni];

                            // Get the number of digits of n.
                            for (d = 1; k >= 10; k /= 10, d++) {}

                            // Get the index of rd within n.
                            i %= LOG_BASE;

                            // Get the index of rd within n, adjusted for leading zeros.
                            // The number of leading zeros of n is given by LOG_BASE - d.
                            j = i - LOG_BASE + d;

                            // Get the rounding digit at index j of n.
                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                        }
                    }

                    r = r || sd < 0 ||

                    // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

                    r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                    // Check whether the digit to the left of the rounding digit is odd.
                    (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));

                    if (sd < 1 || !xc[0]) {
                        xc.length = 0;

                        if (r) {

                            // Convert sd to decimal places.
                            sd -= x.e + 1;

                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                            x.e = -sd || 0;
                        } else {

                            // Zero.
                            xc[0] = x.e = 0;
                        }

                        return x;
                    }

                    // Remove excess digits.
                    if (i == 0) {
                        xc.length = ni;
                        k = 1;
                        ni--;
                    } else {
                        xc.length = ni + 1;
                        k = pows10[LOG_BASE - i];

                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                        // j > 0 means i > number of leading zeros of n.
                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                    }

                    // Round up?
                    if (r) {

                        for (;;) {

                            // If the digit to be rounded up is in the first element of xc...
                            if (ni == 0) {

                                // i will be the length of xc[0] before k is added.
                                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) {}
                                j = xc[0] += k;
                                for (k = 1; j >= 10; j /= 10, k++) {}

                                // if i != k the length has increased.
                                if (i != k) {
                                    x.e++;
                                    if (xc[0] == BASE) xc[0] = 1;
                                }

                                break;
                            } else {
                                xc[ni] += k;
                                if (xc[ni] != BASE) break;
                                xc[ni--] = 0;
                                k = 1;
                            }
                        }
                    }

                    // Remove trailing zeros.
                    for (i = xc.length; xc[--i] === 0; xc.pop()) {}
                }

                // Overflow? Infinity.
                if (x.e > MAX_EXP) {
                    x.c = x.e = null;

                    // Underflow? Zero.
                } else if (x.e < MIN_EXP) {
                    x.c = [x.e = 0];
                }
            }

            return x;
        }

        // PROTOTYPE/INSTANCE METHODS


        /*
         * Return a new BigNumber whose value is the absolute value of this BigNumber.
         */
        P.absoluteValue = P.abs = function () {
            var x = new BigNumber(this);
            if (x.s < 0) x.s = 1;
            return x;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of Infinity.
         */
        P.ceil = function () {
            return round(new BigNumber(this), this.e + 1, 2);
        };

        /*
         * Return
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
         * 0 if they have the same value,
         * or null if the value of either is NaN.
         */
        P.comparedTo = P.cmp = function (y, b) {
            id = 1;
            return compare(this, new BigNumber(y, b));
        };

        /*
         * Return the number of decimal places of the value of this BigNumber, or null if the value
         * of this BigNumber is ±Infinity or NaN.
         */
        P.decimalPlaces = P.dp = function () {
            var n,
                v,
                c = this.c;

            if (!c) return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

            // Subtract the number of trailing zeros of the last number.
            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) {}
            if (n < 0) n = 0;

            return n;
        };

        /*
         *  n / 0 = I
         *  n / N = N
         *  n / I = 0
         *  0 / n = 0
         *  0 / 0 = N
         *  0 / N = N
         *  0 / I = 0
         *  N / n = N
         *  N / 0 = N
         *  N / N = N
         *  N / I = N
         *  I / n = I
         *  I / 0 = I
         *  I / N = N
         *  I / I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.dividedBy = P.div = function (y, b) {
            id = 3;
            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };

        /*
         * Return a new BigNumber whose value is the integer part of dividing the value of this
         * BigNumber by the value of BigNumber(y, b).
         */
        P.dividedToIntegerBy = P.divToInt = function (y, b) {
            id = 4;
            return div(this, new BigNumber(y, b), 0, 1);
        };

        /*
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.equals = P.eq = function (y, b) {
            id = 5;
            return compare(this, new BigNumber(y, b)) === 0;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of -Infinity.
         */
        P.floor = function () {
            return round(new BigNumber(this), this.e + 1, 3);
        };

        /*
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.greaterThan = P.gt = function (y, b) {
            id = 6;
            return compare(this, new BigNumber(y, b)) > 0;
        };

        /*
         * Return true if the value of this BigNumber is greater than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */
        P.greaterThanOrEqualTo = P.gte = function (y, b) {
            id = 7;
            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
        };

        /*
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
         */
        P.isFinite = function () {
            return !!this.c;
        };

        /*
         * Return true if the value of this BigNumber is an integer, otherwise return false.
         */
        P.isInteger = P.isInt = function () {
            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };

        /*
         * Return true if the value of this BigNumber is NaN, otherwise returns false.
         */
        P.isNaN = function () {
            return !this.s;
        };

        /*
         * Return true if the value of this BigNumber is negative, otherwise returns false.
         */
        P.isNegative = P.isNeg = function () {
            return this.s < 0;
        };

        /*
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
         */
        P.isZero = function () {
            return !!this.c && this.c[0] == 0;
        };

        /*
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.lessThan = P.lt = function (y, b) {
            id = 8;
            return compare(this, new BigNumber(y, b)) < 0;
        };

        /*
         * Return true if the value of this BigNumber is less than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */
        P.lessThanOrEqualTo = P.lte = function (y, b) {
            id = 9;
            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
        };

        /*
         *  n - 0 = n
         *  n - N = N
         *  n - I = -I
         *  0 - n = -n
         *  0 - 0 = 0
         *  0 - N = N
         *  0 - I = -I
         *  N - n = N
         *  N - 0 = N
         *  N - N = N
         *  N - I = N
         *  I - n = I
         *  I - 0 = I
         *  I - N = N
         *  I - I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
         * BigNumber(y, b).
         */
        P.minus = P.sub = function (y, b) {
            var i,
                j,
                t,
                xLTy,
                x = this,
                a = x.s;

            id = 10;
            y = new BigNumber(y, b);
            b = y.s;

            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);

            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.plus(y);
            }

            var xe = x.e / LOG_BASE,
                ye = y.e / LOG_BASE,
                xc = x.c,
                yc = y.c;

            if (!xe || !ye) {

                // Either Infinity?
                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

                // Either zero?
                if (!xc[0] || !yc[0]) {

                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

                    // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                    ROUNDING_MODE == 3 ? -0 : 0);
                }
            }

            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();

            // Determine which is the bigger number.
            if (a = xe - ye) {

                if (xLTy = a < 0) {
                    a = -a;
                    t = xc;
                } else {
                    ye = xe;
                    t = yc;
                }

                t.reverse();

                // Prepend zeros to equalise exponents.
                for (b = a; b--; t.push(0)) {}
                t.reverse();
            } else {

                // Exponents equal. Check digit by digit.
                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

                for (a = b = 0; b < j; b++) {

                    if (xc[b] != yc[b]) {
                        xLTy = xc[b] < yc[b];
                        break;
                    }
                }
            }

            // x < y? Point xc to the array of the bigger number.
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

            b = (j = yc.length) - (i = xc.length);

            // Append zeros to xc if shorter.
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
            if (b > 0) for (; b--; xc[i++] = 0) {}
            b = BASE - 1;

            // Subtract yc from xc.
            for (; j > a;) {

                if (xc[--j] < yc[j]) {
                    for (i = j; i && !xc[--i]; xc[i] = b) {}
                    --xc[i];
                    xc[j] += BASE;
                }

                xc[j] -= yc[j];
            }

            // Remove leading zeros and adjust exponent accordingly.
            for (; xc[0] == 0; xc.shift(), --ye) {}

            // Zero?
            if (!xc[0]) {

                // Following IEEE 754 (2008) 6.3,
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                y.s = ROUNDING_MODE == 3 ? -1 : 1;
                y.c = [y.e = 0];
                return y;
            }

            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
            // for finite x and y.
            return normalise(y, xc, ye);
        };

        /*
         *   n % 0 =  N
         *   n % N =  N
         *   n % I =  n
         *   0 % n =  0
         *  -0 % n = -0
         *   0 % 0 =  N
         *   0 % N =  N
         *   0 % I =  0
         *   N % n =  N
         *   N % 0 =  N
         *   N % N =  N
         *   N % I =  N
         *   I % n =  N
         *   I % 0 =  N
         *   I % N =  N
         *   I % I =  N
         *
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
         */
        P.modulo = P.mod = function (y, b) {
            var q,
                s,
                x = this;

            id = 11;
            y = new BigNumber(y, b);

            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
            if (!x.c || !y.s || y.c && !y.c[0]) {
                return new BigNumber(NaN);

                // Return x if y is Infinity or x is zero.
            } else if (!y.c || x.c && !x.c[0]) {
                return new BigNumber(x);
            }

            if (MODULO_MODE == 9) {

                // Euclidian division: q = sign(y) * floor(x / abs(y))
                // r = x - qy    where  0 <= r < abs(y)
                s = y.s;
                y.s = 1;
                q = div(x, y, 0, 3);
                y.s = s;
                q.s *= s;
            } else {
                q = div(x, y, 0, MODULO_MODE);
            }

            return x.minus(q.times(y));
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber negated,
         * i.e. multiplied by -1.
         */
        P.negated = P.neg = function () {
            var x = new BigNumber(this);
            x.s = -x.s || null;
            return x;
        };

        /*
         *  n + 0 = n
         *  n + N = N
         *  n + I = I
         *  0 + n = n
         *  0 + 0 = 0
         *  0 + N = N
         *  0 + I = I
         *  N + n = N
         *  N + 0 = N
         *  N + N = N
         *  N + I = N
         *  I + n = I
         *  I + 0 = I
         *  I + N = N
         *  I + I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
         * BigNumber(y, b).
         */
        P.plus = P.add = function (y, b) {
            var t,
                x = this,
                a = x.s;

            id = 12;
            y = new BigNumber(y, b);
            b = y.s;

            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);

            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.minus(y);
            }

            var xe = x.e / LOG_BASE,
                ye = y.e / LOG_BASE,
                xc = x.c,
                yc = y.c;

            if (!xe || !ye) {

                // Return ±Infinity if either ±Infinity.
                if (!xc || !yc) return new BigNumber(a / 0);

                // Either zero?
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
            }

            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();

            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
            if (a = xe - ye) {
                if (a > 0) {
                    ye = xe;
                    t = yc;
                } else {
                    a = -a;
                    t = xc;
                }

                t.reverse();
                for (; a--; t.push(0)) {}
                t.reverse();
            }

            a = xc.length;
            b = yc.length;

            // Point xc to the longer array, and b to the shorter length.
            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
            for (a = 0; b;) {
                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                xc[b] %= BASE;
            }

            if (a) {
                xc.unshift(a);
                ++ye;
            }

            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
            // ye = MAX_EXP + 1 possible
            return normalise(y, xc, ye);
        };

        /*
         * Return the number of significant digits of the value of this BigNumber.
         *
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
         */
        P.precision = P.sd = function (z) {
            var n,
                v,
                x = this,
                c = x.c;

            // 'precision() argument not a boolean or binary digit: {z}'
            if (z != null && z !== !!z && z !== 1 && z !== 0) {
                if (ERRORS) raise(13, 'argument' + notBool, z);
                if (z != !!z) z = null;
            }

            if (!c) return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;

            if (v = c[v]) {

                // Subtract the number of trailing zeros of the last element.
                for (; v % 10 == 0; v /= 10, n--) {}

                // Add the number of digits of the first element.
                for (v = c[0]; v >= 10; v /= 10, n++) {}
            }

            if (z && x.e + 1 > n) n = x.e + 1;

            return n;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
         * omitted.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'round() decimal places out of range: {dp}'
         * 'round() decimal places not an integer: {dp}'
         * 'round() rounding mode not an integer: {rm}'
         * 'round() rounding mode out of range: {rm}'
         */
        P.round = function (dp, rm) {
            var n = new BigNumber(this);

            if (dp == null || isValidInt(dp, 0, MAX, 15)) {
                round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);
            }

            return n;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
         *
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         *
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
         * otherwise.
         *
         * 'shift() argument not an integer: {k}'
         * 'shift() argument out of range: {k}'
         */
        P.shift = function (k) {
            var n = this;
            return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument')

            // k < 1e+21, or truncate(k) will produce exponential notation.
            ? n.times('1e' + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);
        };

        /*
         *  sqrt(-n) =  N
         *  sqrt( N) =  N
         *  sqrt(-I) =  N
         *  sqrt( I) =  I
         *  sqrt( 0) =  0
         *  sqrt(-0) = -0
         *
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.squareRoot = P.sqrt = function () {
            var m,
                n,
                r,
                rep,
                t,
                x = this,
                c = x.c,
                s = x.s,
                e = x.e,
                dp = DECIMAL_PLACES + 4,
                half = new BigNumber('0.5');

            // Negative/NaN/Infinity/zero?
            if (s !== 1 || !c || !c[0]) {
                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            }

            // Initial estimate.
            s = Math.sqrt(+x);

            // Math.sqrt underflow/overflow?
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
            if (s == 0 || s == 1 / 0) {
                n = coeffToString(c);
                if ((n.length + e) % 2 == 0) n += '0';
                s = Math.sqrt(n);
                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

                if (s == 1 / 0) {
                    n = '1e' + e;
                } else {
                    n = s.toExponential();
                    n = n.slice(0, n.indexOf('e') + 1) + e;
                }

                r = new BigNumber(n);
            } else {
                r = new BigNumber(s + '');
            }

            // Check for zero.
            // r could be zero if MIN_EXP is changed after the this value was created.
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
            // coeffToString to throw.
            if (r.c[0]) {
                e = r.e;
                s = e + dp;
                if (s < 3) s = 0;

                // Newton-Raphson iteration.
                for (;;) {
                    t = r;
                    r = half.times(t.plus(div(x, t, dp, 1)));

                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

                        // The exponent of r may here be one less than the final result exponent,
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                        // are indexed correctly.
                        if (r.e < e) --s;
                        n = n.slice(s - 3, s + 1);

                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                        // iteration.
                        if (n == '9999' || !rep && n == '4999') {

                            // On the first iteration only, check to see if rounding up gives the
                            // exact result as the nines may infinitely repeat.
                            if (!rep) {
                                round(t, t.e + DECIMAL_PLACES + 2, 0);

                                if (t.times(t).eq(x)) {
                                    r = t;
                                    break;
                                }
                            }

                            dp += 4;
                            s += 4;
                            rep = 1;
                        } else {

                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                            // result. If not, then there are further digits and m will be truthy.
                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                                // Truncate to the first rounding digit.
                                round(r, r.e + DECIMAL_PLACES + 2, 1);
                                m = !r.times(r).eq(x);
                            }

                            break;
                        }
                    }
                }
            }

            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };

        /*
         *  n * 0 = 0
         *  n * N = N
         *  n * I = I
         *  0 * n = 0
         *  0 * 0 = 0
         *  0 * N = N
         *  0 * I = N
         *  N * n = N
         *  N * 0 = N
         *  N * N = N
         *  N * I = N
         *  I * n = I
         *  I * 0 = N
         *  I * N = N
         *  I * I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber times the value of
         * BigNumber(y, b).
         */
        P.times = P.mul = function (y, b) {
            var c,
                e,
                i,
                j,
                k,
                m,
                xcL,
                xlo,
                xhi,
                ycL,
                ylo,
                yhi,
                zc,
                base,
                sqrtBase,
                x = this,
                xc = x.c,
                yc = (id = 17, y = new BigNumber(y, b)).c;

            // Either NaN, ±Infinity or ±0?
            if (!xc || !yc || !xc[0] || !yc[0]) {

                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                    y.c = y.e = y.s = null;
                } else {
                    y.s *= x.s;

                    // Return ±Infinity if either is ±Infinity.
                    if (!xc || !yc) {
                        y.c = y.e = null;

                        // Return ±0 if either is ±0.
                    } else {
                        y.c = [0];
                        y.e = 0;
                    }
                }

                return y;
            }

            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;

            // Ensure xc points to longer array and xcL to its length.
            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

            // Initialise the result array with zeros.
            for (i = xcL + ycL, zc = []; i--; zc.push(0)) {}

            base = BASE;
            sqrtBase = SQRT_BASE;

            for (i = ycL; --i >= 0;) {
                c = 0;
                ylo = yc[i] % sqrtBase;
                yhi = yc[i] / sqrtBase | 0;

                for (k = xcL, j = i + k; j > i;) {
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                    zc[j--] = xlo % base;
                }

                zc[j] = c;
            }

            if (c) {
                ++e;
            } else {
                zc.shift();
            }

            return normalise(y, zc, e);
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toDigits() precision out of range: {sd}'
         * 'toDigits() precision not an integer: {sd}'
         * 'toDigits() rounding mode not an integer: {rm}'
         * 'toDigits() rounding mode out of range: {rm}'
         */
        P.toDigits = function (sd, rm) {
            var n = new BigNumber(this);
            sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;
            rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;
            return sd ? round(n, sd, rm) : n;
        };

        /*
         * Return a string representing the value of this BigNumber in exponential notation and
         * rounded using ROUNDING_MODE to dp fixed decimal places.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toExponential() decimal places not an integer: {dp}'
         * 'toExponential() decimal places out of range: {dp}'
         * 'toExponential() rounding mode not an integer: {rm}'
         * 'toExponential() rounding mode out of range: {rm}'
         */
        P.toExponential = function (dp, rm) {
            return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);
        };

        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounding
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
         * but e.g. (-0.00001).toFixed(0) is '-0'.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFixed() decimal places not an integer: {dp}'
         * 'toFixed() decimal places out of range: {dp}'
         * 'toFixed() rounding mode not an integer: {rm}'
         * 'toFixed() rounding mode out of range: {rm}'
         */
        P.toFixed = function (dp, rm) {
            return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);
        };

        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounded
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
         * of the FORMAT object (see BigNumber.config).
         *
         * FORMAT = {
         *      decimalSeparator : '.',
         *      groupSeparator : ',',
         *      groupSize : 3,
         *      secondaryGroupSize : 0,
         *      fractionGroupSeparator : '\xA0',    // non-breaking space
         *      fractionGroupSize : 0
         * };
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFormat() decimal places not an integer: {dp}'
         * 'toFormat() decimal places out of range: {dp}'
         * 'toFormat() rounding mode not an integer: {rm}'
         * 'toFormat() rounding mode out of range: {rm}'
         */
        P.toFormat = function (dp, rm) {
            var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);

            if (this.c) {
                var i,
                    arr = str.split('.'),
                    g1 = +FORMAT.groupSize,
                    g2 = +FORMAT.secondaryGroupSize,
                    groupSeparator = FORMAT.groupSeparator,
                    intPart = arr[0],
                    fractionPart = arr[1],
                    isNeg = this.s < 0,
                    intDigits = isNeg ? intPart.slice(1) : intPart,
                    len = intDigits.length;

                if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                if (g1 > 0 && len > 0) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr(0, i);

                    for (; i < len; i += g1) {
                        intPart += groupSeparator + intDigits.substr(i, g1);
                    }

                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = '-' + intPart;
                }

                str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;
            }

            return str;
        };

        /*
         * Return a string array representing the value of this BigNumber as a simple fraction with
         * an integer numerator and an integer denominator. The denominator will be a positive
         * non-zero value less than or equal to the specified maximum denominator. If a maximum
         * denominator is not specified, the denominator will be the lowest value necessary to
         * represent the number exactly.
         *
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
         *
         * 'toFraction() max denominator not an integer: {md}'
         * 'toFraction() max denominator out of range: {md}'
         */
        P.toFraction = function (md) {
            var arr,
                d0,
                d2,
                e,
                exp,
                n,
                n0,
                q,
                s,
                k = ERRORS,
                x = this,
                xc = x.c,
                d = new BigNumber(ONE),
                n1 = d0 = new BigNumber(ONE),
                d1 = n0 = new BigNumber(ONE);

            if (md != null) {
                ERRORS = false;
                n = new BigNumber(md);
                ERRORS = k;

                if (!(k = n.isInt()) || n.lt(ONE)) {

                    if (ERRORS) {
                        raise(22, 'max denominator ' + (k ? 'out of range' : 'not an integer'), md);
                    }

                    // ERRORS is false:
                    // If md is a finite non-integer >= 1, round it to an integer and use it.
                    md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;
                }
            }

            if (!xc) return x.toString();
            s = coeffToString(xc);

            // Determine initial denominator.
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
            md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;

            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber(s);

            // n0 = d1 = 0
            n0.c[0] = 0;

            for (;;) {
                q = div(n, d, 0, 1);
                d2 = d0.plus(q.times(d1));
                if (d2.cmp(md) == 1) break;
                d0 = d1;
                d1 = d2;
                n1 = n0.plus(q.times(d2 = n1));
                n0 = d2;
                d = n.minus(q.times(d2 = d));
                n = d2;
            }

            d2 = div(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e *= 2;

            // Determine which fraction is closer to x, n0/d0 or n1/d1
            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];

            MAX_EXP = exp;
            return arr;
        };

        /*
         * Return the value of this BigNumber converted to a number primitive.
         */
        P.toNumber = function () {
            return +this;
        };

        /*
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
         * If m is present, return the result modulo m.
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using
         * ROUNDING_MODE.
         *
         * The modular power operation works efficiently when x, n, and m are positive integers,
         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).
         *
         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         * [m] {number|string|BigNumber} The modulus.
         *
         * 'pow() exponent not an integer: {n}'
         * 'pow() exponent out of range: {n}'
         *
         * Performs 54 loop iterations for n of 9007199254740991.
         */
        P.toPower = P.pow = function (n, m) {
            var k,
                y,
                z,
                i = mathfloor(n < 0 ? -n : +n),
                x = this;

            if (m != null) {
                id = 23;
                m = new BigNumber(m);
            }

            // Pass ±Infinity to Math.pow if exponent is out of range.
            if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && !(n = NaN)) || n == 0) {
                k = Math.pow(+x, n);
                return new BigNumber(m ? k % m : k);
            }

            if (m) {
                if (n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt()) {
                    x = x.mod(m);
                } else {
                    z = m;

                    // Nullify m so only a single mod operation is performed at the end.
                    m = null;
                }
            } else if (POW_PRECISION) {

                // Truncating each coefficient array to a length of k after each multiplication
                // equates to truncating significant digits to POW_PRECISION + [28, 41],
                // i.e. there will be a minimum of 28 guard digits retained.
                // (Using + 1.5 would give [9, 21] guard digits.)
                k = mathceil(POW_PRECISION / LOG_BASE + 2);
            }

            y = new BigNumber(ONE);

            for (;;) {
                if (i % 2) {
                    y = y.times(x);
                    if (!y.c) break;
                    if (k) {
                        if (y.c.length > k) y.c.length = k;
                    } else if (m) {
                        y = y.mod(m);
                    }
                }

                i = mathfloor(i / 2);
                if (!i) break;
                x = x.times(x);
                if (k) {
                    if (x.c && x.c.length > k) x.c.length = k;
                } else if (m) {
                    x = x.mod(m);
                }
            }

            if (m) return y;
            if (n < 0) y = ONE.div(y);

            return z ? y.mod(z) : k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;
        };

        /*
         * Return a string representing the value of this BigNumber rounded to sd significant digits
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
         * necessary to represent the integer part of the value in fixed-point notation, then use
         * exponential notation.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toPrecision() precision not an integer: {sd}'
         * 'toPrecision() precision out of range: {sd}'
         * 'toPrecision() rounding mode not an integer: {rm}'
         * 'toPrecision() rounding mode out of range: {rm}'
         */
        P.toPrecision = function (sd, rm) {
            return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision') ? sd | 0 : null, rm, 24);
        };

        /*
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
         * TO_EXP_NEG, return exponential notation.
         *
         * [b] {number} Integer, 2 to 64 inclusive.
         *
         * 'toString() base not an integer: {b}'
         * 'toString() base out of range: {b}'
         */
        P.toString = function (b) {
            var str,
                n = this,
                s = n.s,
                e = n.e;

            // Infinity or NaN?
            if (e === null) {

                if (s) {
                    str = 'Infinity';
                    if (s < 0) str = '-' + str;
                } else {
                    str = 'NaN';
                }
            } else {
                str = coeffToString(n.c);

                if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);
                } else {
                    str = convertBase(toFixedPoint(str, e), b | 0, 10, s);
                }

                if (s < 0 && n.c[0]) str = '-' + str;
            }

            return str;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
         * number.
         */
        P.truncated = P.trunc = function () {
            return round(new BigNumber(this), this.e + 1, 1);
        };

        /*
         * Return as toString, but do not accept a base argument, and include the minus sign for
         * negative zero.
         */
        P.valueOf = P.toJSON = function () {
            var str,
                n = this,
                e = n.e;

            if (e === null) return n.toString();

            str = coeffToString(n.c);

            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);

            return n.s < 0 ? '-' + str : str;
        };

        // Aliases for BigDecimal methods.
        //P.add = P.plus;         // P.add included above
        //P.subtract = P.minus;   // P.sub included above
        //P.multiply = P.times;   // P.mul included above
        //P.divide = P.div;
        //P.remainder = P.mod;
        //P.compareTo = P.cmp;
        //P.negate = P.neg;


        if (configObj != null) BigNumber.config(configObj);

        return BigNumber;
    }

    // PRIVATE HELPER FUNCTIONS


    function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
    }

    // Return a coefficient array as a string of base 10 digits.
    function coeffToString(a) {
        var s,
            z,
            i = 1,
            j = a.length,
            r = a[0] + '';

        for (; i < j;) {
            s = a[i++] + '';
            z = LOG_BASE - s.length;
            for (; z--; s = '0' + s) {}
            r += s;
        }

        // Determine trailing zeros.
        for (j = r.length; r.charCodeAt(--j) === 48;) {}
        return r.slice(0, j + 1 || 1);
    }

    // Compare the value of BigNumbers x and y.
    function compare(x, y) {
        var a,
            b,
            xc = x.c,
            yc = y.c,
            i = x.s,
            j = y.s,
            k = x.e,
            l = y.e;

        // Either NaN?
        if (!i || !j) return null;

        a = xc && !xc[0];
        b = yc && !yc[0];

        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;

        // Signs differ?
        if (i != j) return i;

        a = i < 0;
        b = k == l;

        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;

        j = (k = xc.length) < (l = yc.length) ? k : l;

        // Compare digit by digit.
        for (i = 0; i < j; i++) {
            if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        } // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
    }

    /*
     * Return true if n is a valid number in range, otherwise false.
     * Use for argument validation when ERRORS is false.
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
     */
    function intValidatorNoErrors(n, min, max) {
        return (n = truncate(n)) >= min && n <= max;
    }

    function isArray(obj) {
        return Object.prototype.toString.call(obj) == '[object Array]';
    }

    /*
     * Convert string of baseIn to an array of numbers of baseOut.
     * Eg. convertBase('255', 10, 16) returns [15, 15].
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
     */
    function toBaseOut(str, baseIn, baseOut) {
        var j,
            arr = [0],
            arrL,
            i = 0,
            len = str.length;

        for (; i < len;) {
            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) {}
            arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));

            for (; j < arr.length; j++) {

                if (arr[j] > baseOut - 1) {
                    if (arr[j + 1] == null) arr[j + 1] = 0;
                    arr[j + 1] += arr[j] / baseOut | 0;
                    arr[j] %= baseOut;
                }
            }
        }

        return arr.reverse();
    }

    function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
    }

    function toFixedPoint(str, e) {
        var len, z;

        // Negative exponent?
        if (e < 0) {

            // Prepend zeros.
            for (z = '0.'; ++e; z += '0') {}
            str = z + str;

            // Positive exponent
        } else {
            len = str.length;

            // Append zeros.
            if (++e > len) {
                for (z = '0', e -= len; --e; z += '0') {}
                str += z;
            } else if (e < len) {
                str = str.slice(0, e) + '.' + str.slice(e);
            }
        }

        return str;
    }

    function truncate(n) {
        n = parseFloat(n);
        return n < 0 ? mathceil(n) : mathfloor(n);
    }

    // EXPORT


    BigNumber = constructorFactory();
    BigNumber.default = BigNumber.BigNumber = BigNumber;

    // AMD.
    if (typeof define == 'function' && define.amd) {
        define(function () {
            return BigNumber;
        });

        // Node.js and other environments that support module.exports.
    } else if (typeof module != 'undefined' && module.exports) {
        module.exports = BigNumber;

        // Split string stops browserify adding crypto shim.
        if (!cryptoObj) try {
            cryptoObj = require('cry' + 'pto');
        } catch (e) {}

        // Browser.
    } else {
        if (!globalObj) globalObj = typeof self != 'undefined' ? self : Function('return this')();
        globalObj.BigNumber = BigNumber;
    }
})(undefined);

},{}],29:[function(require,module,exports){
(function (Buffer){
'use strict';

// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
// NOTE: SIGHASH byte ignored AND restricted, truncate before use

function check(buffer) {
  if (buffer.length < 8) return false;
  if (buffer.length > 72) return false;
  if (buffer[0] !== 0x30) return false;
  if (buffer[1] !== buffer.length - 2) return false;
  if (buffer[2] !== 0x02) return false;

  var lenR = buffer[3];
  if (lenR === 0) return false;
  if (5 + lenR >= buffer.length) return false;
  if (buffer[4 + lenR] !== 0x02) return false;

  var lenS = buffer[5 + lenR];
  if (lenS === 0) return false;
  if (6 + lenR + lenS !== buffer.length) return false;

  if (buffer[4] & 0x80) return false;
  if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80)) return false;

  if (buffer[lenR + 6] & 0x80) return false;
  if (lenS > 1 && buffer[lenR + 6] === 0x00 && !(buffer[lenR + 7] & 0x80)) return false;
  return true;
}

function decode(buffer) {
  if (buffer.length < 8) throw new Error('DER sequence length is too short');
  if (buffer.length > 72) throw new Error('DER sequence length is too long');
  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence');
  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid');
  if (buffer[2] !== 0x02) throw new Error('Expected DER integer');

  var lenR = buffer[3];
  if (lenR === 0) throw new Error('R length is zero');
  if (5 + lenR >= buffer.length) throw new Error('R length is too long');
  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)');

  var lenS = buffer[5 + lenR];
  if (lenS === 0) throw new Error('S length is zero');
  if (6 + lenR + lenS !== buffer.length) throw new Error('S length is invalid');

  if (buffer[4] & 0x80) throw new Error('R value is negative');
  if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80)) throw new Error('R value excessively padded');

  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative');
  if (lenS > 1 && buffer[lenR + 6] === 0x00 && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded');

  // non-BIP66 - extract R, S values
  return {
    r: buffer.slice(4, 4 + lenR),
    s: buffer.slice(6 + lenR)
  };
}

/*
 * Expects r and s to be positive DER integers.
 *
 * The DER format uses the most significant bit as a sign bit (& 0x80).
 * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/
function encode(r, s) {
  var lenR = r.length;
  var lenS = s.length;
  if (lenR === 0) throw new Error('R length is zero');
  if (lenS === 0) throw new Error('S length is zero');
  if (lenR > 33) throw new Error('R length is too long');
  if (lenS > 33) throw new Error('S length is too long');
  if (r[0] & 0x80) throw new Error('R value is negative');
  if (s[0] & 0x80) throw new Error('S value is negative');
  if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) throw new Error('R value excessively padded');
  if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) throw new Error('S value excessively padded');

  var signature = new Buffer(6 + lenR + lenS);

  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
  signature[0] = 0x30;
  signature[1] = signature.length - 2;
  signature[2] = 0x02;
  signature[3] = r.length;
  r.copy(signature, 4);
  signature[4 + lenR] = 0x02;
  signature[5 + lenR] = s.length;
  s.copy(signature, 6 + lenR);

  return signature;
}

module.exports = {
  check: check,
  decode: decode,
  encode: encode
};

}).call(this,require("buffer").Buffer)
},{"buffer":62}],30:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

(function (module, exports) {
  'use strict';

  // Utils

  function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function TempCtor() {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN(number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buf' + 'fer').Buffer;
  } catch (e) {}

  BN.isBN = function isBN(num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && (typeof num === 'undefined' ? 'undefined' : _typeof(num)) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max(left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min(left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init(number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if ((typeof number === 'undefined' ? 'undefined' : _typeof(number)) === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber(number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray(number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex(str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

        // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

        // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex(number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= w << off & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= w << off & 0x3ffffff;
      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
    }
    this.strip();
  };

  function parseBase(str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

        // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

        // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase(number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = limbPow / base | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy(dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone() {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand(size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign() {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect() {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*
   var zeros = [];
  var groupSizes = [];
  var groupBases = [];
   var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }
   */

  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];

  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];

  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

  BN.prototype.toString = function toString(base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = ((w << off | carry) & 0xffffff).toString(16);
        carry = w >>> 24 - off & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber() {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + this.words[1] * 0x4000000;
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return this.negative !== 0 ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON() {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer(endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray(endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits(w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits(w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits(w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength() {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray(num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = bit / 26 | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits() {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength() {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos(width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos(width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg() {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg() {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg() {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor(num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or(num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor(num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand(num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and(num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand(num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor(num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor(num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor(num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn(width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn(width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn(bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = bit / 26 | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | 1 << wbit;
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd(num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

      // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
      // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add(num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub(num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

      // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub(num) {
    return this.clone().isub(num);
  };

  function smallMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = self.length + num.length | 0;
    out.length = len;
    len = len - 1 | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = r / 0x4000000 | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += r / 0x4000000 | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo(self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = mid + Math.imul(ah0, bl0) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = mid + Math.imul(ah1, bl0) | 0;
    hi = Math.imul(ah1, bh0);
    lo = lo + Math.imul(al0, bl1) | 0;
    mid = mid + Math.imul(al0, bh1) | 0;
    mid = mid + Math.imul(ah0, bl1) | 0;
    hi = hi + Math.imul(ah0, bh1) | 0;
    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = mid + Math.imul(ah2, bl0) | 0;
    hi = Math.imul(ah2, bh0);
    lo = lo + Math.imul(al1, bl1) | 0;
    mid = mid + Math.imul(al1, bh1) | 0;
    mid = mid + Math.imul(ah1, bl1) | 0;
    hi = hi + Math.imul(ah1, bh1) | 0;
    lo = lo + Math.imul(al0, bl2) | 0;
    mid = mid + Math.imul(al0, bh2) | 0;
    mid = mid + Math.imul(ah0, bl2) | 0;
    hi = hi + Math.imul(ah0, bh2) | 0;
    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = mid + Math.imul(ah3, bl0) | 0;
    hi = Math.imul(ah3, bh0);
    lo = lo + Math.imul(al2, bl1) | 0;
    mid = mid + Math.imul(al2, bh1) | 0;
    mid = mid + Math.imul(ah2, bl1) | 0;
    hi = hi + Math.imul(ah2, bh1) | 0;
    lo = lo + Math.imul(al1, bl2) | 0;
    mid = mid + Math.imul(al1, bh2) | 0;
    mid = mid + Math.imul(ah1, bl2) | 0;
    hi = hi + Math.imul(ah1, bh2) | 0;
    lo = lo + Math.imul(al0, bl3) | 0;
    mid = mid + Math.imul(al0, bh3) | 0;
    mid = mid + Math.imul(ah0, bl3) | 0;
    hi = hi + Math.imul(ah0, bh3) | 0;
    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = mid + Math.imul(ah4, bl0) | 0;
    hi = Math.imul(ah4, bh0);
    lo = lo + Math.imul(al3, bl1) | 0;
    mid = mid + Math.imul(al3, bh1) | 0;
    mid = mid + Math.imul(ah3, bl1) | 0;
    hi = hi + Math.imul(ah3, bh1) | 0;
    lo = lo + Math.imul(al2, bl2) | 0;
    mid = mid + Math.imul(al2, bh2) | 0;
    mid = mid + Math.imul(ah2, bl2) | 0;
    hi = hi + Math.imul(ah2, bh2) | 0;
    lo = lo + Math.imul(al1, bl3) | 0;
    mid = mid + Math.imul(al1, bh3) | 0;
    mid = mid + Math.imul(ah1, bl3) | 0;
    hi = hi + Math.imul(ah1, bh3) | 0;
    lo = lo + Math.imul(al0, bl4) | 0;
    mid = mid + Math.imul(al0, bh4) | 0;
    mid = mid + Math.imul(ah0, bl4) | 0;
    hi = hi + Math.imul(ah0, bh4) | 0;
    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = mid + Math.imul(ah5, bl0) | 0;
    hi = Math.imul(ah5, bh0);
    lo = lo + Math.imul(al4, bl1) | 0;
    mid = mid + Math.imul(al4, bh1) | 0;
    mid = mid + Math.imul(ah4, bl1) | 0;
    hi = hi + Math.imul(ah4, bh1) | 0;
    lo = lo + Math.imul(al3, bl2) | 0;
    mid = mid + Math.imul(al3, bh2) | 0;
    mid = mid + Math.imul(ah3, bl2) | 0;
    hi = hi + Math.imul(ah3, bh2) | 0;
    lo = lo + Math.imul(al2, bl3) | 0;
    mid = mid + Math.imul(al2, bh3) | 0;
    mid = mid + Math.imul(ah2, bl3) | 0;
    hi = hi + Math.imul(ah2, bh3) | 0;
    lo = lo + Math.imul(al1, bl4) | 0;
    mid = mid + Math.imul(al1, bh4) | 0;
    mid = mid + Math.imul(ah1, bl4) | 0;
    hi = hi + Math.imul(ah1, bh4) | 0;
    lo = lo + Math.imul(al0, bl5) | 0;
    mid = mid + Math.imul(al0, bh5) | 0;
    mid = mid + Math.imul(ah0, bl5) | 0;
    hi = hi + Math.imul(ah0, bh5) | 0;
    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = mid + Math.imul(ah6, bl0) | 0;
    hi = Math.imul(ah6, bh0);
    lo = lo + Math.imul(al5, bl1) | 0;
    mid = mid + Math.imul(al5, bh1) | 0;
    mid = mid + Math.imul(ah5, bl1) | 0;
    hi = hi + Math.imul(ah5, bh1) | 0;
    lo = lo + Math.imul(al4, bl2) | 0;
    mid = mid + Math.imul(al4, bh2) | 0;
    mid = mid + Math.imul(ah4, bl2) | 0;
    hi = hi + Math.imul(ah4, bh2) | 0;
    lo = lo + Math.imul(al3, bl3) | 0;
    mid = mid + Math.imul(al3, bh3) | 0;
    mid = mid + Math.imul(ah3, bl3) | 0;
    hi = hi + Math.imul(ah3, bh3) | 0;
    lo = lo + Math.imul(al2, bl4) | 0;
    mid = mid + Math.imul(al2, bh4) | 0;
    mid = mid + Math.imul(ah2, bl4) | 0;
    hi = hi + Math.imul(ah2, bh4) | 0;
    lo = lo + Math.imul(al1, bl5) | 0;
    mid = mid + Math.imul(al1, bh5) | 0;
    mid = mid + Math.imul(ah1, bl5) | 0;
    hi = hi + Math.imul(ah1, bh5) | 0;
    lo = lo + Math.imul(al0, bl6) | 0;
    mid = mid + Math.imul(al0, bh6) | 0;
    mid = mid + Math.imul(ah0, bl6) | 0;
    hi = hi + Math.imul(ah0, bh6) | 0;
    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = mid + Math.imul(ah7, bl0) | 0;
    hi = Math.imul(ah7, bh0);
    lo = lo + Math.imul(al6, bl1) | 0;
    mid = mid + Math.imul(al6, bh1) | 0;
    mid = mid + Math.imul(ah6, bl1) | 0;
    hi = hi + Math.imul(ah6, bh1) | 0;
    lo = lo + Math.imul(al5, bl2) | 0;
    mid = mid + Math.imul(al5, bh2) | 0;
    mid = mid + Math.imul(ah5, bl2) | 0;
    hi = hi + Math.imul(ah5, bh2) | 0;
    lo = lo + Math.imul(al4, bl3) | 0;
    mid = mid + Math.imul(al4, bh3) | 0;
    mid = mid + Math.imul(ah4, bl3) | 0;
    hi = hi + Math.imul(ah4, bh3) | 0;
    lo = lo + Math.imul(al3, bl4) | 0;
    mid = mid + Math.imul(al3, bh4) | 0;
    mid = mid + Math.imul(ah3, bl4) | 0;
    hi = hi + Math.imul(ah3, bh4) | 0;
    lo = lo + Math.imul(al2, bl5) | 0;
    mid = mid + Math.imul(al2, bh5) | 0;
    mid = mid + Math.imul(ah2, bl5) | 0;
    hi = hi + Math.imul(ah2, bh5) | 0;
    lo = lo + Math.imul(al1, bl6) | 0;
    mid = mid + Math.imul(al1, bh6) | 0;
    mid = mid + Math.imul(ah1, bl6) | 0;
    hi = hi + Math.imul(ah1, bh6) | 0;
    lo = lo + Math.imul(al0, bl7) | 0;
    mid = mid + Math.imul(al0, bh7) | 0;
    mid = mid + Math.imul(ah0, bl7) | 0;
    hi = hi + Math.imul(ah0, bh7) | 0;
    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = mid + Math.imul(ah8, bl0) | 0;
    hi = Math.imul(ah8, bh0);
    lo = lo + Math.imul(al7, bl1) | 0;
    mid = mid + Math.imul(al7, bh1) | 0;
    mid = mid + Math.imul(ah7, bl1) | 0;
    hi = hi + Math.imul(ah7, bh1) | 0;
    lo = lo + Math.imul(al6, bl2) | 0;
    mid = mid + Math.imul(al6, bh2) | 0;
    mid = mid + Math.imul(ah6, bl2) | 0;
    hi = hi + Math.imul(ah6, bh2) | 0;
    lo = lo + Math.imul(al5, bl3) | 0;
    mid = mid + Math.imul(al5, bh3) | 0;
    mid = mid + Math.imul(ah5, bl3) | 0;
    hi = hi + Math.imul(ah5, bh3) | 0;
    lo = lo + Math.imul(al4, bl4) | 0;
    mid = mid + Math.imul(al4, bh4) | 0;
    mid = mid + Math.imul(ah4, bl4) | 0;
    hi = hi + Math.imul(ah4, bh4) | 0;
    lo = lo + Math.imul(al3, bl5) | 0;
    mid = mid + Math.imul(al3, bh5) | 0;
    mid = mid + Math.imul(ah3, bl5) | 0;
    hi = hi + Math.imul(ah3, bh5) | 0;
    lo = lo + Math.imul(al2, bl6) | 0;
    mid = mid + Math.imul(al2, bh6) | 0;
    mid = mid + Math.imul(ah2, bl6) | 0;
    hi = hi + Math.imul(ah2, bh6) | 0;
    lo = lo + Math.imul(al1, bl7) | 0;
    mid = mid + Math.imul(al1, bh7) | 0;
    mid = mid + Math.imul(ah1, bl7) | 0;
    hi = hi + Math.imul(ah1, bh7) | 0;
    lo = lo + Math.imul(al0, bl8) | 0;
    mid = mid + Math.imul(al0, bh8) | 0;
    mid = mid + Math.imul(ah0, bl8) | 0;
    hi = hi + Math.imul(ah0, bh8) | 0;
    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = mid + Math.imul(ah9, bl0) | 0;
    hi = Math.imul(ah9, bh0);
    lo = lo + Math.imul(al8, bl1) | 0;
    mid = mid + Math.imul(al8, bh1) | 0;
    mid = mid + Math.imul(ah8, bl1) | 0;
    hi = hi + Math.imul(ah8, bh1) | 0;
    lo = lo + Math.imul(al7, bl2) | 0;
    mid = mid + Math.imul(al7, bh2) | 0;
    mid = mid + Math.imul(ah7, bl2) | 0;
    hi = hi + Math.imul(ah7, bh2) | 0;
    lo = lo + Math.imul(al6, bl3) | 0;
    mid = mid + Math.imul(al6, bh3) | 0;
    mid = mid + Math.imul(ah6, bl3) | 0;
    hi = hi + Math.imul(ah6, bh3) | 0;
    lo = lo + Math.imul(al5, bl4) | 0;
    mid = mid + Math.imul(al5, bh4) | 0;
    mid = mid + Math.imul(ah5, bl4) | 0;
    hi = hi + Math.imul(ah5, bh4) | 0;
    lo = lo + Math.imul(al4, bl5) | 0;
    mid = mid + Math.imul(al4, bh5) | 0;
    mid = mid + Math.imul(ah4, bl5) | 0;
    hi = hi + Math.imul(ah4, bh5) | 0;
    lo = lo + Math.imul(al3, bl6) | 0;
    mid = mid + Math.imul(al3, bh6) | 0;
    mid = mid + Math.imul(ah3, bl6) | 0;
    hi = hi + Math.imul(ah3, bh6) | 0;
    lo = lo + Math.imul(al2, bl7) | 0;
    mid = mid + Math.imul(al2, bh7) | 0;
    mid = mid + Math.imul(ah2, bl7) | 0;
    hi = hi + Math.imul(ah2, bh7) | 0;
    lo = lo + Math.imul(al1, bl8) | 0;
    mid = mid + Math.imul(al1, bh8) | 0;
    mid = mid + Math.imul(ah1, bl8) | 0;
    hi = hi + Math.imul(ah1, bh8) | 0;
    lo = lo + Math.imul(al0, bl9) | 0;
    mid = mid + Math.imul(al0, bh9) | 0;
    mid = mid + Math.imul(ah0, bl9) | 0;
    hi = hi + Math.imul(ah0, bh9) | 0;
    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = mid + Math.imul(ah9, bl1) | 0;
    hi = Math.imul(ah9, bh1);
    lo = lo + Math.imul(al8, bl2) | 0;
    mid = mid + Math.imul(al8, bh2) | 0;
    mid = mid + Math.imul(ah8, bl2) | 0;
    hi = hi + Math.imul(ah8, bh2) | 0;
    lo = lo + Math.imul(al7, bl3) | 0;
    mid = mid + Math.imul(al7, bh3) | 0;
    mid = mid + Math.imul(ah7, bl3) | 0;
    hi = hi + Math.imul(ah7, bh3) | 0;
    lo = lo + Math.imul(al6, bl4) | 0;
    mid = mid + Math.imul(al6, bh4) | 0;
    mid = mid + Math.imul(ah6, bl4) | 0;
    hi = hi + Math.imul(ah6, bh4) | 0;
    lo = lo + Math.imul(al5, bl5) | 0;
    mid = mid + Math.imul(al5, bh5) | 0;
    mid = mid + Math.imul(ah5, bl5) | 0;
    hi = hi + Math.imul(ah5, bh5) | 0;
    lo = lo + Math.imul(al4, bl6) | 0;
    mid = mid + Math.imul(al4, bh6) | 0;
    mid = mid + Math.imul(ah4, bl6) | 0;
    hi = hi + Math.imul(ah4, bh6) | 0;
    lo = lo + Math.imul(al3, bl7) | 0;
    mid = mid + Math.imul(al3, bh7) | 0;
    mid = mid + Math.imul(ah3, bl7) | 0;
    hi = hi + Math.imul(ah3, bh7) | 0;
    lo = lo + Math.imul(al2, bl8) | 0;
    mid = mid + Math.imul(al2, bh8) | 0;
    mid = mid + Math.imul(ah2, bl8) | 0;
    hi = hi + Math.imul(ah2, bh8) | 0;
    lo = lo + Math.imul(al1, bl9) | 0;
    mid = mid + Math.imul(al1, bh9) | 0;
    mid = mid + Math.imul(ah1, bl9) | 0;
    hi = hi + Math.imul(ah1, bh9) | 0;
    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = mid + Math.imul(ah9, bl2) | 0;
    hi = Math.imul(ah9, bh2);
    lo = lo + Math.imul(al8, bl3) | 0;
    mid = mid + Math.imul(al8, bh3) | 0;
    mid = mid + Math.imul(ah8, bl3) | 0;
    hi = hi + Math.imul(ah8, bh3) | 0;
    lo = lo + Math.imul(al7, bl4) | 0;
    mid = mid + Math.imul(al7, bh4) | 0;
    mid = mid + Math.imul(ah7, bl4) | 0;
    hi = hi + Math.imul(ah7, bh4) | 0;
    lo = lo + Math.imul(al6, bl5) | 0;
    mid = mid + Math.imul(al6, bh5) | 0;
    mid = mid + Math.imul(ah6, bl5) | 0;
    hi = hi + Math.imul(ah6, bh5) | 0;
    lo = lo + Math.imul(al5, bl6) | 0;
    mid = mid + Math.imul(al5, bh6) | 0;
    mid = mid + Math.imul(ah5, bl6) | 0;
    hi = hi + Math.imul(ah5, bh6) | 0;
    lo = lo + Math.imul(al4, bl7) | 0;
    mid = mid + Math.imul(al4, bh7) | 0;
    mid = mid + Math.imul(ah4, bl7) | 0;
    hi = hi + Math.imul(ah4, bh7) | 0;
    lo = lo + Math.imul(al3, bl8) | 0;
    mid = mid + Math.imul(al3, bh8) | 0;
    mid = mid + Math.imul(ah3, bl8) | 0;
    hi = hi + Math.imul(ah3, bh8) | 0;
    lo = lo + Math.imul(al2, bl9) | 0;
    mid = mid + Math.imul(al2, bh9) | 0;
    mid = mid + Math.imul(ah2, bl9) | 0;
    hi = hi + Math.imul(ah2, bh9) | 0;
    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = mid + Math.imul(ah9, bl3) | 0;
    hi = Math.imul(ah9, bh3);
    lo = lo + Math.imul(al8, bl4) | 0;
    mid = mid + Math.imul(al8, bh4) | 0;
    mid = mid + Math.imul(ah8, bl4) | 0;
    hi = hi + Math.imul(ah8, bh4) | 0;
    lo = lo + Math.imul(al7, bl5) | 0;
    mid = mid + Math.imul(al7, bh5) | 0;
    mid = mid + Math.imul(ah7, bl5) | 0;
    hi = hi + Math.imul(ah7, bh5) | 0;
    lo = lo + Math.imul(al6, bl6) | 0;
    mid = mid + Math.imul(al6, bh6) | 0;
    mid = mid + Math.imul(ah6, bl6) | 0;
    hi = hi + Math.imul(ah6, bh6) | 0;
    lo = lo + Math.imul(al5, bl7) | 0;
    mid = mid + Math.imul(al5, bh7) | 0;
    mid = mid + Math.imul(ah5, bl7) | 0;
    hi = hi + Math.imul(ah5, bh7) | 0;
    lo = lo + Math.imul(al4, bl8) | 0;
    mid = mid + Math.imul(al4, bh8) | 0;
    mid = mid + Math.imul(ah4, bl8) | 0;
    hi = hi + Math.imul(ah4, bh8) | 0;
    lo = lo + Math.imul(al3, bl9) | 0;
    mid = mid + Math.imul(al3, bh9) | 0;
    mid = mid + Math.imul(ah3, bl9) | 0;
    hi = hi + Math.imul(ah3, bh9) | 0;
    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = mid + Math.imul(ah9, bl4) | 0;
    hi = Math.imul(ah9, bh4);
    lo = lo + Math.imul(al8, bl5) | 0;
    mid = mid + Math.imul(al8, bh5) | 0;
    mid = mid + Math.imul(ah8, bl5) | 0;
    hi = hi + Math.imul(ah8, bh5) | 0;
    lo = lo + Math.imul(al7, bl6) | 0;
    mid = mid + Math.imul(al7, bh6) | 0;
    mid = mid + Math.imul(ah7, bl6) | 0;
    hi = hi + Math.imul(ah7, bh6) | 0;
    lo = lo + Math.imul(al6, bl7) | 0;
    mid = mid + Math.imul(al6, bh7) | 0;
    mid = mid + Math.imul(ah6, bl7) | 0;
    hi = hi + Math.imul(ah6, bh7) | 0;
    lo = lo + Math.imul(al5, bl8) | 0;
    mid = mid + Math.imul(al5, bh8) | 0;
    mid = mid + Math.imul(ah5, bl8) | 0;
    hi = hi + Math.imul(ah5, bh8) | 0;
    lo = lo + Math.imul(al4, bl9) | 0;
    mid = mid + Math.imul(al4, bh9) | 0;
    mid = mid + Math.imul(ah4, bl9) | 0;
    hi = hi + Math.imul(ah4, bh9) | 0;
    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = mid + Math.imul(ah9, bl5) | 0;
    hi = Math.imul(ah9, bh5);
    lo = lo + Math.imul(al8, bl6) | 0;
    mid = mid + Math.imul(al8, bh6) | 0;
    mid = mid + Math.imul(ah8, bl6) | 0;
    hi = hi + Math.imul(ah8, bh6) | 0;
    lo = lo + Math.imul(al7, bl7) | 0;
    mid = mid + Math.imul(al7, bh7) | 0;
    mid = mid + Math.imul(ah7, bl7) | 0;
    hi = hi + Math.imul(ah7, bh7) | 0;
    lo = lo + Math.imul(al6, bl8) | 0;
    mid = mid + Math.imul(al6, bh8) | 0;
    mid = mid + Math.imul(ah6, bl8) | 0;
    hi = hi + Math.imul(ah6, bh8) | 0;
    lo = lo + Math.imul(al5, bl9) | 0;
    mid = mid + Math.imul(al5, bh9) | 0;
    mid = mid + Math.imul(ah5, bl9) | 0;
    hi = hi + Math.imul(ah5, bh9) | 0;
    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = mid + Math.imul(ah9, bl6) | 0;
    hi = Math.imul(ah9, bh6);
    lo = lo + Math.imul(al8, bl7) | 0;
    mid = mid + Math.imul(al8, bh7) | 0;
    mid = mid + Math.imul(ah8, bl7) | 0;
    hi = hi + Math.imul(ah8, bh7) | 0;
    lo = lo + Math.imul(al7, bl8) | 0;
    mid = mid + Math.imul(al7, bh8) | 0;
    mid = mid + Math.imul(ah7, bl8) | 0;
    hi = hi + Math.imul(ah7, bh8) | 0;
    lo = lo + Math.imul(al6, bl9) | 0;
    mid = mid + Math.imul(al6, bh9) | 0;
    mid = mid + Math.imul(ah6, bl9) | 0;
    hi = hi + Math.imul(ah6, bh9) | 0;
    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = mid + Math.imul(ah9, bl7) | 0;
    hi = Math.imul(ah9, bh7);
    lo = lo + Math.imul(al8, bl8) | 0;
    mid = mid + Math.imul(al8, bh8) | 0;
    mid = mid + Math.imul(ah8, bl8) | 0;
    hi = hi + Math.imul(ah8, bh8) | 0;
    lo = lo + Math.imul(al7, bl9) | 0;
    mid = mid + Math.imul(al7, bh9) | 0;
    mid = mid + Math.imul(ah7, bl9) | 0;
    hi = hi + Math.imul(ah7, bh9) | 0;
    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = mid + Math.imul(ah9, bl8) | 0;
    hi = Math.imul(ah9, bh8);
    lo = lo + Math.imul(al8, bl9) | 0;
    mid = mid + Math.imul(al8, bh9) | 0;
    mid = mid + Math.imul(ah8, bl9) | 0;
    hi = hi + Math.imul(ah8, bh9) | 0;
    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = mid + Math.imul(ah9, bl9) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
        lo = lo + rword | 0;
        rword = lo & 0x3ffffff;
        ncarry = ncarry + (lo >>> 26) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo(self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo(num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM(x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT(N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin(x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << l - i - 1;
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b(ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff;carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff;carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub(N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp(x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul(num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += w / 0x4000000 | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln(num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr() {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr() {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow(num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = (this.words[i] | 0) - newCarry << r;
        this.words[i] = c | carry;
        carry = newCarry >>> 26 - r;
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln(bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - hint % 26) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = carry << 26 - r | word >>> r;
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln(bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln(bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn(bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn(bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn(bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn(bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn(num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn(num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn(num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs() {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs() {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - (right / 0x4000000 | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv(num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min(qj / bhi | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod(num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div(num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod(num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod(num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound(num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn(num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn(num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = w / num | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn(num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd(p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {}
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {}
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp(p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {}
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {}
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd(num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm(num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven() {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd() {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln(num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn(bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero() {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn(num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp(num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp(num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn(num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt(num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten(num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte(num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn(num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt(num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten(num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte(num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn(num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq(num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red(num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed() {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed(ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd(num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd(num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub(num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub(num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl(num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr() {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr() {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt() {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm() {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg() {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow(num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime(name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp() {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce(num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split(input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK(num) {
    return num.imul(this.k);
  };

  function K256() {
    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split(input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK(num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + (lo / 0x4000000 | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224() {
    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192() {
    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519() {
    // 2 ^ 255 - 19
    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK(num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime(name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red(m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1(a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2(a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red, 'red works only with red numbers');
  };

  Red.prototype.imod = function imod(a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg(a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add(a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd(a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub(a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub(a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl(a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul(a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul(a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr(a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr(a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt(a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm(a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow(a, num) {
    if (num.isZero()) return new BN(1);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = word >> j & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo(num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom(num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont(num) {
    return new Mont(num);
  };

  function Mont(m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - this.shift % 26;
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo(num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom(num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul(a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul(a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm(a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, undefined);

},{}],31:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var r;

module.exports = function rand(len) {
  if (!r) r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
  if (window.crypto && window.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.msCrypto.getRandomValues(arr);
      return arr;
    };
  } else {
    // Old junk
    Rand.prototype._rand = function () {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker
  try {
    var crypto = require('crypto');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++) {
        res[i] = this.rand.getByte();
      }return res;
    };
  }
}

},{"crypto":32}],32:[function(require,module,exports){
"use strict";

},{}],33:[function(require,module,exports){
(function (Buffer){
"use strict";

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32);
function fixup_uint32(x) {
  var ret, x_pos;
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
  return ret;
}
function scrub_vec(v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0;
  }
  return false;
}

function Global() {
  this.SBOX = [];
  this.INV_SBOX = [];
  this.SUB_MIX = [[], [], [], []];
  this.INV_SUB_MIX = [[], [], [], []];
  this.init();
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i;
  d = function () {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1);
      } else {
        _results.push(i << 1 ^ 0x11b);
      }
    }
    return _results;
  }();
  x = 0;
  xi = 0;
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
    sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
    this.SBOX[x] = sx;
    this.INV_SBOX[sx] = x;
    x2 = d[x];
    x4 = d[x2];
    x8 = d[x4];
    t = d[sx] * 0x101 ^ sx * 0x1010100;
    this.SUB_MIX[0][x] = t << 24 | t >>> 8;
    this.SUB_MIX[1][x] = t << 16 | t >>> 16;
    this.SUB_MIX[2][x] = t << 8 | t >>> 24;
    this.SUB_MIX[3][x] = t;
    t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
    this.INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
    this.INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
    this.INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
    this.INV_SUB_MIX[3][sx] = t;
    if (x === 0) {
      x = xi = 1;
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]];
      xi ^= d[d[xi]];
    }
  }
  return true;
};

var G = new Global();

AES.blockSize = 4 * 4;

AES.prototype.blockSize = AES.blockSize;

AES.keySize = 256 / 8;

AES.prototype.keySize = AES.keySize;

function bufferToArray(buf) {
  var len = buf.length / 4;
  var out = new Array(len);
  var i = -1;
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4);
  }
  return out;
}
function AES(key) {
  this._key = bufferToArray(key);
  this._doReset();
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t;
  keyWords = this._key;
  keySize = keyWords.length;
  this._nRounds = keySize + 6;
  ksRows = (this._nRounds + 1) * 4;
  this._keySchedule = [];
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], ksRow % keySize === 0 ? (t = t << 8 | t >>> 24, t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff], t ^= G.RCON[ksRow / keySize | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
  }
  this._invKeySchedule = [];
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow;
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[t >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[t >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
  }
  return true;
};

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M));
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);
  var buf = new Buffer(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[1], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[3], 12);
  return buf;
};

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M));
  var temp = [M[3], M[1]];
  M[1] = temp[0];
  M[3] = temp[1];
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);
  var buf = new Buffer(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[3], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[1], 12);
  return buf;
};

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule);
  scrub_vec(this._invKeySchedule);
  scrub_vec(this._key);
};

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3;

  s0 = M[0] ^ keySchedule[0];
  s1 = M[1] ^ keySchedule[1];
  s2 = M[2] ^ keySchedule[2];
  s3 = M[3] ^ keySchedule[3];
  ksRow = 4;
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][s1 >>> 16 & 0xff] ^ SUB_MIX[2][s2 >>> 8 & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][s2 >>> 16 & 0xff] ^ SUB_MIX[2][s3 >>> 8 & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][s3 >>> 16 & 0xff] ^ SUB_MIX[2][s0 >>> 8 & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][s0 >>> 16 & 0xff] ^ SUB_MIX[2][s1 >>> 8 & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
    s0 = t0;
    s1 = t1;
    s2 = t2;
    s3 = t3;
  }
  t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
  t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
  t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
  t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
  return [fixup_uint32(t0), fixup_uint32(t1), fixup_uint32(t2), fixup_uint32(t3)];
};

exports.AES = AES;

}).call(this,require("buffer").Buffer)
},{"buffer":62}],34:[function(require,module,exports){
(function (Buffer){
'use strict';

var aes = require('./aes');
var Transform = require('cipher-base');
var inherits = require('inherits');
var GHASH = require('./ghash');
var xor = require('buffer-xor');
inherits(StreamCipher, Transform);
module.exports = StreamCipher;

function StreamCipher(mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv);
  }
  Transform.call(this);
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])]);
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])]);
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  this._cache = new Buffer('');
  this._secCache = new Buffer('');
  this._decrypt = decrypt;
  this._alen = 0;
  this._len = 0;
  iv.copy(this._prev);
  this._mode = mode;
  var h = new Buffer(4);
  h.fill(0);
  this._ghash = new GHASH(this._cipher.encryptBlock(h));
  this._authTag = null;
  this._called = false;
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - this._alen % 16;
    if (rump < 16) {
      rump = new Buffer(rump);
      rump.fill(0);
      this._ghash.update(rump);
    }
  }
  this._called = true;
  var out = this._mode.encrypt(this, chunk);
  if (this._decrypt) {
    this._ghash.update(chunk);
  } else {
    this._ghash.update(out);
  }
  this._len += chunk.length;
  return out;
};
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data');
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data');
    }
  } else {
    this._authTag = tag;
  }
  this._cipher.scrub();
};
StreamCipher.prototype.getAuthTag = function getAuthTag() {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag;
  } else {
    throw new Error('Attempting to get auth tag in unsupported state');
  }
};
StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
  if (this._decrypt) {
    this._authTag = tag;
  } else {
    throw new Error('Attempting to set auth tag in unsupported state');
  }
};
StreamCipher.prototype.setAAD = function setAAD(buf) {
  if (!this._called) {
    this._ghash.update(buf);
    this._alen += buf.length;
  } else {
    throw new Error('Attempting to set AAD in unsupported state');
  }
};
function xorTest(a, b) {
  var out = 0;
  if (a.length !== b.length) {
    out++;
  }
  var len = Math.min(a.length, b.length);
  var i = -1;
  while (++i < len) {
    out += a[i] ^ b[i];
  }
  return out;
}

}).call(this,require("buffer").Buffer)
},{"./aes":33,"./ghash":38,"buffer":62,"buffer-xor":61,"cipher-base":63,"inherits":160}],35:[function(require,module,exports){
'use strict';

var ciphers = require('./encrypter');
exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
var deciphers = require('./decrypter');
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
var modes = require('./modes');
function getCiphers() {
  return Object.keys(modes);
}
exports.listCiphers = exports.getCiphers = getCiphers;

},{"./decrypter":36,"./encrypter":37,"./modes":39}],36:[function(require,module,exports){
(function (Buffer){
'use strict';

var aes = require('./aes');
var Transform = require('cipher-base');
var inherits = require('inherits');
var modes = require('./modes');
var StreamCipher = require('./streamCipher');
var AuthCipher = require('./authCipher');
var ebtk = require('evp_bytestokey');

inherits(Decipher, Transform);
function Decipher(mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv);
  }
  Transform.call(this);
  this._cache = new Splitter();
  this._last = void 0;
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  iv.copy(this._prev);
  this._mode = mode;
  this._autopadding = true;
}
Decipher.prototype._update = function (data) {
  this._cache.add(data);
  var chunk;
  var thing;
  var out = [];
  while (chunk = this._cache.get(this._autopadding)) {
    thing = this._mode.decrypt(this, chunk);
    out.push(thing);
  }
  return Buffer.concat(out);
};
Decipher.prototype._final = function () {
  var chunk = this._cache.flush();
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk));
  } else if (chunk) {
    throw new Error('data not multiple of block length');
  }
};
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};
function Splitter() {
  if (!(this instanceof Splitter)) {
    return new Splitter();
  }
  this.cache = new Buffer('');
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function (autoPadding) {
  var out;
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  }
  return null;
};
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache;
  }
};
function unpad(last) {
  var padded = last[15];
  var i = -1;
  while (++i < padded) {
    if (last[i + (16 - padded)] !== padded) {
      throw new Error('unable to decrypt data');
    }
  }
  if (padded === 16) {
    return;
  }
  return last.slice(0, 16 - padded);
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
};

function createDecipheriv(suite, password, iv) {
  var config = modes[suite.toLowerCase()];
  if (!config) {
    throw new TypeError('invalid suite type');
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv);
  }
  if (typeof password === 'string') {
    password = new Buffer(password);
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length);
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length);
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true);
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true);
  }
  return new Decipher(modelist[config.mode], password, iv);
}

function createDecipher(suite, password) {
  var config = modes[suite.toLowerCase()];
  if (!config) {
    throw new TypeError('invalid suite type');
  }
  var keys = ebtk(password, false, config.key, config.iv);
  return createDecipheriv(suite, keys.key, keys.iv);
}
exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;

}).call(this,require("buffer").Buffer)
},{"./aes":33,"./authCipher":34,"./modes":39,"./modes/cbc":40,"./modes/cfb":41,"./modes/cfb1":42,"./modes/cfb8":43,"./modes/ctr":44,"./modes/ecb":45,"./modes/ofb":46,"./streamCipher":47,"buffer":62,"cipher-base":63,"evp_bytestokey":149,"inherits":160}],37:[function(require,module,exports){
(function (Buffer){
'use strict';

var aes = require('./aes');
var Transform = require('cipher-base');
var inherits = require('inherits');
var modes = require('./modes');
var ebtk = require('evp_bytestokey');
var StreamCipher = require('./streamCipher');
var AuthCipher = require('./authCipher');
inherits(Cipher, Transform);
function Cipher(mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv);
  }
  Transform.call(this);
  this._cache = new Splitter();
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  iv.copy(this._prev);
  this._mode = mode;
  this._autopadding = true;
}
Cipher.prototype._update = function (data) {
  this._cache.add(data);
  var chunk;
  var thing;
  var out = [];
  while (chunk = this._cache.get()) {
    thing = this._mode.encrypt(this, chunk);
    out.push(thing);
  }
  return Buffer.concat(out);
};
Cipher.prototype._final = function () {
  var chunk = this._cache.flush();
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk);
    this._cipher.scrub();
    return chunk;
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub();
    throw new Error('data not multiple of block length');
  }
};
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};

function Splitter() {
  if (!(this instanceof Splitter)) {
    return new Splitter();
  }
  this.cache = new Buffer('');
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    return out;
  }
  return null;
};
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length;
  var padBuff = new Buffer(len);

  var i = -1;
  while (++i < len) {
    padBuff.writeUInt8(len, i);
  }
  var out = Buffer.concat([this.cache, padBuff]);
  return out;
};
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
};

function createCipheriv(suite, password, iv) {
  var config = modes[suite.toLowerCase()];
  if (!config) {
    throw new TypeError('invalid suite type');
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv);
  }
  if (typeof password === 'string') {
    password = new Buffer(password);
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length);
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length);
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv);
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv);
  }
  return new Cipher(modelist[config.mode], password, iv);
}
function createCipher(suite, password) {
  var config = modes[suite.toLowerCase()];
  if (!config) {
    throw new TypeError('invalid suite type');
  }
  var keys = ebtk(password, false, config.key, config.iv);
  return createCipheriv(suite, keys.key, keys.iv);
}

exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;

}).call(this,require("buffer").Buffer)
},{"./aes":33,"./authCipher":34,"./modes":39,"./modes/cbc":40,"./modes/cfb":41,"./modes/cfb1":42,"./modes/cfb8":43,"./modes/ctr":44,"./modes/ecb":45,"./modes/ofb":46,"./streamCipher":47,"buffer":62,"cipher-base":63,"evp_bytestokey":149,"inherits":160}],38:[function(require,module,exports){
(function (Buffer){
'use strict';

var zeros = new Buffer(16);
zeros.fill(0);
module.exports = GHASH;
function GHASH(key) {
  this.h = key;
  this.state = new Buffer(16);
  this.state.fill(0);
  this.cache = new Buffer('');
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1;
  while (++i < block.length) {
    this.state[i] ^= block[i];
  }
  this._multiply();
};

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h);
  var Zi = [0, 0, 0, 0];
  var j, xi, lsb_Vi;
  var i = -1;
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi);
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0;

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
    }
    Vi[0] = Vi[0] >>> 1;

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ 0xe1 << 24;
    }
  }
  this.state = fromArray(Zi);
};
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf]);
  var chunk;
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    this.ghash(chunk);
  }
};
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16));
  }
  this.ghash(fromArray([0, abl, 0, bl]));
  return this.state;
};

function toArray(buf) {
  return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
}
function fromArray(out) {
  out = out.map(fixup_uint32);
  var buf = new Buffer(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[1], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[3], 12);
  return buf;
}
var uint_max = Math.pow(2, 32);
function fixup_uint32(x) {
  var ret, x_pos;
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
  return ret;
}
function xor(a, b) {
  return [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2], a[3] ^ b[3]];
}

}).call(this,require("buffer").Buffer)
},{"buffer":62}],39:[function(require,module,exports){
'use strict';

exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
};
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
};
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
};
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
};
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
};
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
};
exports['aes128'] = exports['aes-128-cbc'];
exports['aes192'] = exports['aes-192-cbc'];
exports['aes256'] = exports['aes-256-cbc'];
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
};
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
};
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
};
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
};
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
};
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
};
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
};
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
};
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
};
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
};
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
};
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
};
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
};
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
};
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
};
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
};
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
};
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
};

},{}],40:[function(require,module,exports){
'use strict';

var xor = require('buffer-xor');

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev);

  self._prev = self._cipher.encryptBlock(data);
  return self._prev;
};

exports.decrypt = function (self, block) {
  var pad = self._prev;

  self._prev = block;
  var out = self._cipher.decryptBlock(block);

  return xor(out, pad);
};

},{"buffer-xor":61}],41:[function(require,module,exports){
(function (Buffer){
'use strict';

var xor = require('buffer-xor');

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('');
  var len;

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev);
      self._prev = new Buffer('');
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length;
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
      data = data.slice(len);
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
      break;
    }
  }

  return out;
};
function encryptStart(self, data, decrypt) {
  var len = data.length;
  var out = xor(data, self._cache);
  self._cache = self._cache.slice(len);
  self._prev = Buffer.concat([self._prev, decrypt ? data : out]);
  return out;
}

}).call(this,require("buffer").Buffer)
},{"buffer":62,"buffer-xor":61}],42:[function(require,module,exports){
(function (Buffer){
"use strict";

function encryptByte(self, byteParam, decrypt) {
  var pad;
  var i = -1;
  var len = 8;
  var out = 0;
  var bit, value;
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev);
    bit = byteParam & 1 << 7 - i ? 0x80 : 0;
    value = pad[0] ^ bit;
    out += (value & 0x80) >> i % 8;
    self._prev = shiftIn(self._prev, decrypt ? bit : value);
  }
  return out;
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = new Buffer(len);
  var i = -1;
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }
  return out;
};
function shiftIn(buffer, value) {
  var len = buffer.length;
  var i = -1;
  var out = new Buffer(buffer.length);
  buffer = Buffer.concat([buffer, new Buffer([value])]);
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
  }
  return out;
}

}).call(this,require("buffer").Buffer)
},{"buffer":62}],43:[function(require,module,exports){
(function (Buffer){
"use strict";

function encryptByte(self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev);
  var out = pad[0] ^ byteParam;
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])]);
  return out;
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = new Buffer(len);
  var i = -1;
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }
  return out;
};

}).call(this,require("buffer").Buffer)
},{"buffer":62}],44:[function(require,module,exports){
(function (Buffer){
'use strict';

var xor = require('buffer-xor');

function incr32(iv) {
  var len = iv.length;
  var item;
  while (len--) {
    item = iv.readUInt8(len);
    if (item === 255) {
      iv.writeUInt8(0, len);
    } else {
      item++;
      iv.writeUInt8(item, len);
      break;
    }
  }
}

function getBlock(self) {
  var out = self._cipher.encryptBlock(self._prev);
  incr32(self._prev);
  return out;
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)]);
  }
  var pad = self._cache.slice(0, chunk.length);
  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};

}).call(this,require("buffer").Buffer)
},{"buffer":62,"buffer-xor":61}],45:[function(require,module,exports){
"use strict";

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block);
};
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block);
};

},{}],46:[function(require,module,exports){
(function (Buffer){
'use strict';

var xor = require('buffer-xor');

function getBlock(self) {
  self._prev = self._cipher.encryptBlock(self._prev);
  return self._prev;
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)]);
  }

  var pad = self._cache.slice(0, chunk.length);
  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};

}).call(this,require("buffer").Buffer)
},{"buffer":62,"buffer-xor":61}],47:[function(require,module,exports){
(function (Buffer){
'use strict';

var aes = require('./aes');
var Transform = require('cipher-base');
var inherits = require('inherits');

inherits(StreamCipher, Transform);
module.exports = StreamCipher;
function StreamCipher(mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv);
  }
  Transform.call(this);
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  this._cache = new Buffer('');
  this._secCache = new Buffer('');
  this._decrypt = decrypt;
  iv.copy(this._prev);
  this._mode = mode;
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt);
};
StreamCipher.prototype._final = function () {
  this._cipher.scrub();
};

}).call(this,require("buffer").Buffer)
},{"./aes":33,"buffer":62,"cipher-base":63,"inherits":160}],48:[function(require,module,exports){
'use strict';

var ebtk = require('evp_bytestokey');
var aes = require('browserify-aes/browser');
var DES = require('browserify-des');
var desModes = require('browserify-des/modes');
var aesModes = require('browserify-aes/modes');
function createCipher(suite, password) {
  var keyLen, ivLen;
  suite = suite.toLowerCase();
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key;
    ivLen = aesModes[suite].iv;
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8;
    ivLen = desModes[suite].iv;
  } else {
    throw new TypeError('invalid suite type');
  }
  var keys = ebtk(password, false, keyLen, ivLen);
  return createCipheriv(suite, keys.key, keys.iv);
}
function createDecipher(suite, password) {
  var keyLen, ivLen;
  suite = suite.toLowerCase();
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key;
    ivLen = aesModes[suite].iv;
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8;
    ivLen = desModes[suite].iv;
  } else {
    throw new TypeError('invalid suite type');
  }
  var keys = ebtk(password, false, keyLen, ivLen);
  return createDecipheriv(suite, keys.key, keys.iv);
}

function createCipheriv(suite, key, iv) {
  suite = suite.toLowerCase();
  if (aesModes[suite]) {
    return aes.createCipheriv(suite, key, iv);
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite
    });
  } else {
    throw new TypeError('invalid suite type');
  }
}
function createDecipheriv(suite, key, iv) {
  suite = suite.toLowerCase();
  if (aesModes[suite]) {
    return aes.createDecipheriv(suite, key, iv);
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite,
      decrypt: true
    });
  } else {
    throw new TypeError('invalid suite type');
  }
}
exports.createCipher = exports.Cipher = createCipher;
exports.createCipheriv = exports.Cipheriv = createCipheriv;
exports.createDecipher = exports.Decipher = createDecipher;
exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
function getCiphers() {
  return Object.keys(desModes).concat(aes.getCiphers());
}
exports.listCiphers = exports.getCiphers = getCiphers;

},{"browserify-aes/browser":35,"browserify-aes/modes":39,"browserify-des":49,"browserify-des/modes":50,"evp_bytestokey":149}],49:[function(require,module,exports){
(function (Buffer){
'use strict';

var CipherBase = require('cipher-base');
var des = require('des.js');
var inherits = require('inherits');

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
};
modes.des = modes['des-cbc'];
modes.des3 = modes['des-ede3-cbc'];
module.exports = DES;
inherits(DES, CipherBase);
function DES(opts) {
  CipherBase.call(this);
  var modeName = opts.mode.toLowerCase();
  var mode = modes[modeName];
  var type;
  if (opts.decrypt) {
    type = 'decrypt';
  } else {
    type = 'encrypt';
  }
  var key = opts.key;
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)]);
  }
  var iv = opts.iv;
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  });
}
DES.prototype._update = function (data) {
  return new Buffer(this._des.update(data));
};
DES.prototype._final = function () {
  return new Buffer(this._des.final());
};

}).call(this,require("buffer").Buffer)
},{"buffer":62,"cipher-base":63,"des.js":75,"inherits":160}],50:[function(require,module,exports){
'use strict';

exports['des-ecb'] = {
  key: 8,
  iv: 0
};
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
};
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
};
exports['des-ede3'] = {
  key: 24,
  iv: 0
};
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
};
exports['des-ede'] = {
  key: 16,
  iv: 0
};

},{}],51:[function(require,module,exports){
(function (Buffer){
'use strict';

var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus)).redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder: r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this,require("buffer").Buffer)
},{"bn.js":30,"buffer":62,"randombytes":221}],52:[function(require,module,exports){
(function (Buffer){
'use strict';

var Sha3 = require('js-sha3');

var hashLengths = [224, 256, 384, 512];

var hash = function hash(bitcount) {
  if (bitcount !== undefined && hashLengths.indexOf(bitcount) == -1) throw new Error('Unsupported hash length');
  this.content = [];
  this.bitcount = bitcount ? 'keccak_' + bitcount : 'keccak_512';
};

hash.prototype.update = function (i) {
  if (Buffer.isBuffer(i)) this.content.push(i);else if (typeof i === 'string') this.content.push(new Buffer(i));else throw new Error('Unsupported argument to update');
  return this;
};

hash.prototype.digest = function (encoding) {
  var result = Sha3[this.bitcount](Buffer.concat(this.content));
  if (encoding === 'hex') return result;else if (encoding === 'binary' || encoding === undefined) return new Buffer(result, 'hex').toString('binary');else throw new Error('Unsupported encoding for digest: ' + encoding);
};

module.exports = {
  SHA3Hash: hash
};

}).call(this,require("buffer").Buffer)
},{"buffer":62,"js-sha3":163}],53:[function(require,module,exports){
(function (Buffer){
'use strict';

exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
};
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
};
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
};
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
};
exports['RSA-SHA1'] = {
  sign: 'rsa',
  hash: 'sha1',
  id: new Buffer('3021300906052b0e03021a05000414', 'hex')
};
exports['ecdsa-with-SHA1'] = {
  sign: 'ecdsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
};

exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
};
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
  sign: 'dsa',
  hash: 'sha224',
  id: new Buffer('', 'hex')
};
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
  sign: 'dsa',
  hash: 'sha256',
  id: new Buffer('', 'hex')
};
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
  sign: 'dsa',
  hash: 'sha384',
  id: new Buffer('', 'hex')
};
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
  sign: 'dsa',
  hash: 'sha512',
  id: new Buffer('', 'hex')
};
exports['DSA-RIPEMD160'] = {
  sign: 'dsa',
  hash: 'rmd160',
  id: new Buffer('', 'hex')
};
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
};
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
};

}).call(this,require("buffer").Buffer)
},{"buffer":62}],54:[function(require,module,exports){
(function (Buffer){
'use strict';

var _algos = require('./algos');
var createHash = require('create-hash');
var inherits = require('inherits');
var sign = require('./sign');
var stream = require('stream');
var verify = require('./verify');

var algos = {};
Object.keys(_algos).forEach(function (key) {
  algos[key] = algos[key.toLowerCase()] = _algos[key];
});

function Sign(algorithm) {
  stream.Writable.call(this);

  var data = algos[algorithm];
  if (!data) {
    throw new Error('Unknown message digest');
  }

  this._hashType = data.hash;
  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Sign, stream.Writable);

Sign.prototype._write = function _write(data, _, done) {
  this._hash.update(data);
  done();
};

Sign.prototype.update = function update(data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc);
  }

  this._hash.update(data);
  return this;
};

Sign.prototype.sign = function signMethod(key, enc) {
  this.end();
  var hash = this._hash.digest();
  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType);

  return enc ? sig.toString(enc) : sig;
};

function Verify(algorithm) {
  stream.Writable.call(this);

  var data = algos[algorithm];
  if (!data) {
    throw new Error('Unknown message digest');
  }

  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Verify, stream.Writable);

Verify.prototype._write = function _write(data, _, done) {
  this._hash.update(data);

  done();
};

Verify.prototype.update = function update(data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc);
  }

  this._hash.update(data);
  return this;
};

Verify.prototype.verify = function verifyMethod(key, sig, enc) {
  if (typeof sig === 'string') {
    sig = new Buffer(sig, enc);
  }

  this.end();
  var hash = this._hash.digest();

  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType);
};

function createSign(algorithm) {
  return new Sign(algorithm);
}

function createVerify(algorithm) {
  return new Verify(algorithm);
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
};

}).call(this,require("buffer").Buffer)
},{"./algos":53,"./sign":56,"./verify":57,"buffer":62,"create-hash":68,"inherits":160,"stream":252}],55:[function(require,module,exports){
'use strict';

exports['1.3.132.0.10'] = 'secp256k1';

exports['1.3.132.0.33'] = 'p224';

exports['1.2.840.10045.3.1.1'] = 'p192';

exports['1.2.840.10045.3.1.7'] = 'p256';

exports['1.3.132.0.34'] = 'p384';

exports['1.3.132.0.35'] = 'p521';

},{}],56:[function(require,module,exports){
(function (Buffer){
'use strict';

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac');
var crt = require('browserify-rsa');
var curves = require('./curves');
var elliptic = require('elliptic');
var parseKeys = require('parse-asn1');

var BN = require('bn.js');
var EC = elliptic.ec;

function sign(hash, key, hashType, signType) {
  var priv = parseKeys(key);
  if (priv.curve) {
    if (signType !== 'ecdsa') throw new Error('wrong private key type');

    return ecSign(hash, priv);
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong private key type');
    }
    return dsaSign(hash, priv, hashType);
  } else {
    if (signType !== 'rsa') throw new Error('wrong private key type');
  }

  var len = priv.modulus.byteLength();
  var pad = [0, 1];
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff);
  }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }

  var out = crt(pad, priv);
  return out;
}

function ecSign(hash, priv) {
  var curveId = curves[priv.curve.join('.')];
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));

  var curve = new EC(curveId);
  var key = curve.genKeyPair();

  key._importPrivate(priv.privateKey);
  var out = key.sign(hash);

  return new Buffer(out.toDER());
}

function dsaSign(hash, priv, algo) {
  var x = priv.params.priv_key;
  var p = priv.params.p;
  var q = priv.params.q;
  var g = priv.params.g;
  var r = new BN(0);
  var k;
  var H = bits2int(hash, q).mod(q);
  var s = false;
  var kv = getKey(x, q, hash, algo);
  while (s === false) {
    k = makeKey(q, kv, algo);
    r = makeR(g, k, p, q);
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
    if (!s.cmpn(0)) {
      s = false;
      r = new BN(0);
    }
  }
  return toDER(r, s);
}

function toDER(r, s) {
  r = r.toArray();
  s = s.toArray();

  // Pad values
  if (r[0] & 0x80) {
    r = [0].concat(r);
  }
  // Pad values
  if (s[0] & 0x80) {
    s = [0].concat(s);
  }

  var total = r.length + s.length + 4;
  var res = [0x30, total, 0x02, r.length];
  res = res.concat(r, [0x02, s.length], s);
  return new Buffer(res);
}

function getKey(x, q, hash, algo) {
  x = new Buffer(x.toArray());
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length);
    zeros.fill(0);
    x = Buffer.concat([zeros, x]);
  }
  var hlen = hash.length;
  var hbits = bits2octets(hash, q);
  var v = new Buffer(hlen);
  v.fill(1);
  var k = new Buffer(hlen);
  k.fill(0);
  k = createHmac(algo, k).update(v).update(new Buffer([0])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  k = createHmac(algo, k).update(v).update(new Buffer([1])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  return {
    k: k,
    v: v
  };
}

function bits2int(obits, q) {
  var bits = new BN(obits);
  var shift = (obits.length << 3) - q.bitLength();
  if (shift > 0) {
    bits.ishrn(shift);
  }
  return bits;
}

function bits2octets(bits, q) {
  bits = bits2int(bits, q);
  bits = bits.mod(q);
  var out = new Buffer(bits.toArray());
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length);
    zeros.fill(0);
    out = Buffer.concat([zeros, out]);
  }
  return out;
}

function makeKey(q, kv, algo) {
  var t, k;

  do {
    t = new Buffer('');

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      t = Buffer.concat([t, kv.v]);
    }

    k = bits2int(t, q);
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([0])).digest();
    kv.v = createHmac(algo, kv.k).update(kv.v).digest();
  } while (k.cmp(q) !== -1);

  return k;
}

function makeR(g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}

module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;

}).call(this,require("buffer").Buffer)
},{"./curves":55,"bn.js":30,"browserify-rsa":51,"buffer":62,"create-hmac":71,"elliptic":85,"parse-asn1":209}],57:[function(require,module,exports){
(function (Buffer){
'use strict';

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var curves = require('./curves');
var elliptic = require('elliptic');
var parseKeys = require('parse-asn1');

var BN = require('bn.js');
var EC = elliptic.ec;

function verify(sig, hash, key, signType) {
  var pub = parseKeys(key);
  if (pub.type === 'ec') {
    if (signType !== 'ecdsa') {
      throw new Error('wrong public key type');
    }
    return ecVerify(sig, hash, pub);
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong public key type');
    }
    return dsaVerify(sig, hash, pub);
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong public key type');
    }
  }
  var len = pub.modulus.byteLength();
  var pad = [1];
  var padNum = 0;
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff);
    padNum++;
  }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }
  pad = new Buffer(pad);
  var red = BN.mont(pub.modulus);
  sig = new BN(sig).toRed(red);

  sig = sig.redPow(new BN(pub.publicExponent));

  sig = new Buffer(sig.fromRed().toArray());
  var out = 0;
  if (padNum < 8) {
    out = 1;
  }
  len = Math.min(sig.length, pad.length);
  if (sig.length !== pad.length) {
    out = 1;
  }

  i = -1;
  while (++i < len) {
    out |= sig[i] ^ pad[i];
  }
  return out === 0;
}

function ecVerify(sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')];
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));

  var curve = new EC(curveId);
  var pubkey = pub.data.subjectPrivateKey.data;

  return curve.verify(hash, sig, pubkey);
}

function dsaVerify(sig, hash, pub) {
  var p = pub.data.p;
  var q = pub.data.q;
  var g = pub.data.g;
  var y = pub.data.pub_key;
  var unpacked = parseKeys.signature.decode(sig, 'der');
  var s = unpacked.s;
  var r = unpacked.r;
  checkValue(s, q);
  checkValue(r, q);
  var montp = BN.mont(p);
  var w = s.invm(q);
  var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
  return !v.cmp(r);
}

function checkValue(b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig');
  }
  if (b.cmp(q) >= q) {
    throw new Error('invalid sig');
  }
}

module.exports = verify;

}).call(this,require("buffer").Buffer)
},{"./curves":55,"bn.js":30,"buffer":62,"elliptic":85,"parse-asn1":209}],58:[function(require,module,exports){
'use strict';

// Base58 encoding/decoding
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc

var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
var ALPHABET_MAP = {};
for (var i = 0; i < ALPHABET.length; i++) {
  ALPHABET_MAP[ALPHABET.charAt(i)] = i;
}
var BASE = 58;

function encode(buffer) {
  if (buffer.length === 0) return '';

  var i,
      j,
      digits = [0];
  for (i = 0; i < buffer.length; i++) {
    for (j = 0; j < digits.length; j++) {
      digits[j] <<= 8;
    }digits[0] += buffer[i];

    var carry = 0;
    for (j = 0; j < digits.length; ++j) {
      digits[j] += carry;

      carry = digits[j] / BASE | 0;
      digits[j] %= BASE;
    }

    while (carry) {
      digits.push(carry % BASE);

      carry = carry / BASE | 0;
    }
  }

  // deal with leading zeros
  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {
    digits.push(0);
  } // convert digits to a string
  var stringOutput = "";
  for (var i = digits.length - 1; i >= 0; i--) {
    stringOutput = stringOutput + ALPHABET[digits[i]];
  }
  return stringOutput;
}

function decode(string) {
  if (string.length === 0) return [];

  var i,
      j,
      bytes = [0];
  for (i = 0; i < string.length; i++) {
    var c = string[i];
    if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character');

    for (j = 0; j < bytes.length; j++) {
      bytes[j] *= BASE;
    }bytes[0] += ALPHABET_MAP[c];

    var carry = 0;
    for (j = 0; j < bytes.length; ++j) {
      bytes[j] += carry;

      carry = bytes[j] >> 8;
      bytes[j] &= 0xff;
    }

    while (carry) {
      bytes.push(carry & 0xff);

      carry >>= 8;
    }
  }

  // deal with leading zeros
  for (i = 0; string[i] === '1' && i < string.length - 1; i++) {
    bytes.push(0);
  }return bytes.reverse();
}

module.exports = {
  encode: encode,
  decode: decode
};

},{}],59:[function(require,module,exports){
(function (Buffer){
'use strict';

var base58 = require('bs58');
var createHash = require('create-hash');

// SHA256(SHA256(buffer))
function sha256x2(buffer) {
  var tmp = createHash('sha256').update(buffer).digest();
  return createHash('sha256').update(tmp).digest();
}

// Encode a buffer as a base58-check encoded string
function encode(payload) {
  var checksum = sha256x2(payload);

  return base58.encode(Buffer.concat([payload, checksum], payload.length + 4));
}

// Decode a base58-check encoded string to a buffer
function decode(string) {
  var buffer = new Buffer(base58.decode(string));

  var payload = buffer.slice(0, -4);
  var checksum = buffer.slice(-4);
  var newChecksum = sha256x2(payload);

  if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) throw new Error('Invalid checksum');

  return payload;
}

module.exports = {
  encode: encode,
  decode: decode
};

}).call(this,require("buffer").Buffer)
},{"bs58":58,"buffer":62,"create-hash":68}],60:[function(require,module,exports){
(function (global){
'use strict';

var buffer = require('buffer');
var Buffer = buffer.Buffer;
var SlowBuffer = buffer.SlowBuffer;
var MAX_LEN = buffer.kMaxLength || 2147483647;
exports.alloc = function alloc(size, fill, encoding) {
  if (typeof Buffer.alloc === 'function') {
    return Buffer.alloc(size, fill, encoding);
  }
  if (typeof encoding === 'number') {
    throw new TypeError('encoding must not be number');
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  var enc = encoding;
  var _fill = fill;
  if (_fill === undefined) {
    enc = undefined;
    _fill = 0;
  }
  var buf = new Buffer(size);
  if (typeof _fill === 'string') {
    var fillBuf = new Buffer(_fill, enc);
    var flen = fillBuf.length;
    var i = -1;
    while (++i < size) {
      buf[i] = fillBuf[i % flen];
    }
  } else {
    buf.fill(_fill);
  }
  return buf;
};
exports.allocUnsafe = function allocUnsafe(size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    return Buffer.allocUnsafe(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new Buffer(size);
};
exports.from = function from(value, encodingOrOffset, length) {
  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
    return Buffer.from(value, encodingOrOffset, length);
  }
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof value === 'string') {
    return new Buffer(value, encodingOrOffset);
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    var offset = encodingOrOffset;
    if (arguments.length === 1) {
      return new Buffer(value);
    }
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    var len = length;
    if (typeof len === 'undefined') {
      len = value.byteLength - offset;
    }
    if (offset >= value.byteLength) {
      throw new RangeError('\'offset\' is out of bounds');
    }
    if (len > value.byteLength - offset) {
      throw new RangeError('\'length\' is out of bounds');
    }
    return new Buffer(value.slice(offset, offset + len));
  }
  if (Buffer.isBuffer(value)) {
    var out = new Buffer(value.length);
    value.copy(out, 0, 0, value.length);
    return out;
  }
  if (value) {
    if (Array.isArray(value) || typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer || 'length' in value) {
      return new Buffer(value);
    }
    if (value.type === 'Buffer' && Array.isArray(value.data)) {
      return new Buffer(value.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
};
exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
  if (typeof Buffer.allocUnsafeSlow === 'function') {
    return Buffer.allocUnsafeSlow(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size >= MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new SlowBuffer(size);
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"buffer":62}],61:[function(require,module,exports){
(function (Buffer){
"use strict";

module.exports = function xor(a, b) {
  var length = Math.min(a.length, b.length);
  var buffer = new Buffer(length);

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i];
  }

  return buffer;
};

}).call(this,require("buffer").Buffer)
},{"buffer":62}],62:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict';

var base64 = require('base64-js');
var ieee754 = require('ieee754');
var isArray = require('isarray');

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {
        return 42;
      } };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0;

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;

        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":27,"ieee754":158,"isarray":162}],63:[function(require,module,exports){
(function (Buffer){
'use strict';

var Transform = require('stream').Transform;
var inherits = require('inherits');
var StringDecoder = require('string_decoder').StringDecoder;
module.exports = CipherBase;
inherits(CipherBase, Transform);
function CipherBase(hashMode) {
  Transform.call(this);
  this.hashMode = typeof hashMode === 'string';
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest;
  } else {
    this.final = this._finalOrDigest;
  }
  this._decoder = null;
  this._encoding = null;
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc);
  }
  var outData = this._update(data);
  if (this.hashMode) {
    return this;
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc);
  }
  return outData;
};

CipherBase.prototype.setAutoPadding = function () {};

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state');
};

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state');
};

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state');
};

CipherBase.prototype._transform = function (data, _, next) {
  var err;
  try {
    if (this.hashMode) {
      this._update(data);
    } else {
      this.push(this._update(data));
    }
  } catch (e) {
    err = e;
  } finally {
    next(err);
  }
};
CipherBase.prototype._flush = function (done) {
  var err;
  try {
    this.push(this._final());
  } catch (e) {
    err = e;
  } finally {
    done(err);
  }
};
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('');
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true);
  }
  return outData;
};

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc);
    this._encoding = enc;
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings');
  }
  var out = this._decoder.write(value);
  if (fin) {
    out += this._decoder.end();
  }
  return out;
};

}).call(this,require("buffer").Buffer)
},{"buffer":62,"inherits":160,"stream":252,"string_decoder":253}],64:[function(require,module,exports){
(function (Buffer){
'use strict';

var base58 = require('bs58');
var createHash = require('create-hash');

function encode(payload, version) {
  if (Array.isArray(payload) || payload instanceof Uint8Array) {
    payload = new Buffer(payload);
  }

  var buf;
  if (version != null) {
    if (typeof version === 'number') {
      version = new Buffer([version]);
    }
    buf = Buffer.concat([version, payload]);
  } else {
    buf = payload;
  }

  var checksum = sha256x2(buf).slice(0, 4);
  var result = Buffer.concat([buf, checksum]);
  return base58.encode(result);
}

function decode(base58str, version) {
  var arr = base58.decode(base58str);
  var buf = new Buffer(arr);
  var versionLength;

  if (version == null) {
    versionLength = 0;
  } else {
    if (typeof version === 'number') version = new Buffer([version]);

    versionLength = version.length;
    var versionCompare = buf.slice(0, versionLength);
    if (versionCompare.toString('hex') !== version.toString('hex')) {
      throw new Error('Invalid version');
    }
  }

  var checksum = buf.slice(-4);
  var endPos = buf.length - 4;
  var bytes = buf.slice(0, endPos);

  var newChecksum = sha256x2(bytes).slice(0, 4);
  if (checksum.toString('hex') !== newChecksum.toString('hex')) {
    throw new Error('Invalid checksum');
  }

  return bytes.slice(versionLength);
}

function isValid(base58str, version) {
  try {
    decode(base58str, version);
  } catch (e) {
    return false;
  }

  return true;
}

function createEncoder(version) {
  return function (payload) {
    return encode(payload, version);
  };
}

function createDecoder(version) {
  return function (base58str) {
    return decode(base58str, version);
  };
}

function createValidator(version) {
  return function (base58str) {
    return isValid(base58str, version);
  };
}

function sha256x2(buffer) {
  var sha = createHash('sha256').update(buffer).digest();
  return createHash('sha256').update(sha).digest();
}

module.exports = {
  encode: encode,
  decode: decode,
  isValid: isValid,
  createEncoder: createEncoder,
  createDecoder: createDecoder,
  createValidator: createValidator
};

}).call(this,require("buffer").Buffer)
},{"bs58":58,"buffer":62,"create-hash":68}],65:[function(require,module,exports){
'use strict';

!function (globals) {
  'use strict';

  var convertHex = {
    bytesToHex: function bytesToHex(bytes) {
      /*if (typeof bytes.byteLength != 'undefined') {
        var newBytes = []
         if (typeof bytes.buffer != 'undefined')
          bytes = new DataView(bytes.buffer)
        else
          bytes = new DataView(bytes)
         for (var i = 0; i < bytes.byteLength; ++i) {
          newBytes.push(bytes.getUint8(i))
        }
        bytes = newBytes
      }*/
      return arrBytesToHex(bytes);
    },
    hexToBytes: function hexToBytes(hex) {
      if (hex.length % 2 === 1) throw new Error("hexToBytes can't have a string with an odd number of characters.");
      if (hex.indexOf('0x') === 0) hex = hex.slice(2);
      return hex.match(/../g).map(function (x) {
        return parseInt(x, 16);
      });
    }
  };

  // PRIVATE

  function arrBytesToHex(bytes) {
    return bytes.map(function (x) {
      return padLeft(x.toString(16), 2);
    }).join('');
  }

  function padLeft(orig, len) {
    if (orig.length > len) return orig;
    return Array(len - orig.length + 1).join('0') + orig;
  }

  if (typeof module !== 'undefined' && module.exports) {
    //CommonJS
    module.exports = convertHex;
  } else {
    globals.convertHex = convertHex;
  }
}(undefined);

},{}],66:[function(require,module,exports){
(function (Buffer){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":161}],67:[function(require,module,exports){
(function (Buffer){
'use strict';

var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	},
	secp384r1: {
		name: 'p384',
		byteLength: 48
	},
	secp521r1: {
		name: 'p521',
		byteLength: 66
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key[0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

}).call(this,require("buffer").Buffer)
},{"bn.js":30,"buffer":62,"elliptic":85}],68:[function(require,module,exports){
(function (Buffer){
'use strict';

var inherits = require('inherits');
var md5 = require('./md5');
var rmd160 = require('ripemd160');
var sha = require('sha.js');

var Base = require('cipher-base');

function HashNoConstructor(hash) {
  Base.call(this, 'digest');

  this._hash = hash;
  this.buffers = [];
}

inherits(HashNoConstructor, Base);

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data);
};

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers);
  var r = this._hash(buf);
  this.buffers = null;

  return r;
};

function Hash(hash) {
  Base.call(this, 'digest');

  this._hash = hash;
}

inherits(Hash, Base);

Hash.prototype._update = function (data) {
  this._hash.update(data);
};

Hash.prototype._final = function () {
  return this._hash.digest();
};

module.exports = function createHash(alg) {
  alg = alg.toLowerCase();
  if ('md5' === alg) return new HashNoConstructor(md5);
  if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160);

  return new Hash(sha(alg));
};

}).call(this,require("buffer").Buffer)
},{"./md5":70,"buffer":62,"cipher-base":63,"inherits":160,"ripemd160":233,"sha.js":245}],69:[function(require,module,exports){
(function (Buffer){
'use strict';

var intSize = 4;
var zeroBuffer = new Buffer(intSize);zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if (buf.length % intSize !== 0) {
    var len = buf.length + (intSize - buf.length % intSize);
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;

}).call(this,require("buffer").Buffer)
},{"buffer":62}],70:[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[(len + 64 >>> 9 << 4) + 14] = len;

  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);
}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t) {
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}
function md5_ff(a, b, c, d, x, s, t) {
  return md5_cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t) {
  return md5_cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t) {
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t) {
  return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y) {
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xFFFF;
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};

},{"./helpers":69}],71:[function(require,module,exports){
(function (Buffer){
'use strict';

var createHash = require('create-hash/browser');
var inherits = require('inherits');

var Transform = require('stream').Transform;

var ZEROS = new Buffer(128);
ZEROS.fill(0);

function Hmac(alg, key) {
  Transform.call(this);
  alg = alg.toLowerCase();
  if (typeof key === 'string') {
    key = new Buffer(key);
  }

  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

  this._alg = alg;
  this._key = key;

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest();
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = this._ipad = new Buffer(blocksize);
  var opad = this._opad = new Buffer(blocksize);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  this._hash = createHash(alg).update(ipad);
}

inherits(Hmac, Transform);

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc);

  return this;
};

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data);

  next();
};

Hmac.prototype._flush = function (next) {
  this.push(this.digest());

  next();
};

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest();

  return createHash(this._alg).update(this._opad).update(h).digest(enc);
};

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key);
};

}).call(this,require("buffer").Buffer)
},{"buffer":62,"create-hash/browser":68,"inherits":160,"stream":252}],72:[function(require,module,exports){
'use strict';

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');
exports.createHash = exports.Hash = require('create-hash');
exports.createHmac = exports.Hmac = require('create-hmac');

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')));
exports.getHashes = function () {
  return hashes;
};

var p = require('pbkdf2');
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;

var aes = require('browserify-cipher');['Cipher', 'createCipher', 'Cipheriv', 'createCipheriv', 'Decipher', 'createDecipher', 'Decipheriv', 'createDecipheriv', 'getCiphers', 'listCiphers'].forEach(function (key) {
  exports[key] = aes[key];
});

var dh = require('diffie-hellman');['DiffieHellmanGroup', 'createDiffieHellmanGroup', 'getDiffieHellman', 'createDiffieHellman', 'DiffieHellman'].forEach(function (key) {
  exports[key] = dh[key];
});

var sign = require('browserify-sign');['createSign', 'Sign', 'createVerify', 'Verify'].forEach(function (key) {
  exports[key] = sign[key];
});

exports.createECDH = require('create-ecdh');

var publicEncrypt = require('public-encrypt');['publicEncrypt', 'privateEncrypt', 'publicDecrypt', 'privateDecrypt'].forEach(function (key) {
  exports[key] = publicEncrypt[key];
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;['createCredentials'].forEach(function (name) {
  exports[name] = function () {
    throw new Error(['sorry, ' + name + ' is not implemented yet', 'we accept pull requests', 'https://github.com/crypto-browserify/crypto-browserify'].join('\n'));
  };
});

},{"browserify-cipher":48,"browserify-sign":54,"browserify-sign/algos":53,"create-ecdh":67,"create-hash":68,"create-hmac":71,"diffie-hellman":81,"pbkdf2":210,"public-encrypt":215,"randombytes":221}],73:[function(require,module,exports){
'use strict';

var util = require('util'),
    AbstractIterator = require('abstract-leveldown').AbstractIterator;

function DeferredIterator(options) {
  AbstractIterator.call(this, options);

  this._options = options;
  this._iterator = null;
  this._operations = [];
}

util.inherits(DeferredIterator, AbstractIterator);

DeferredIterator.prototype.setDb = function (db) {
  var it = this._iterator = db.iterator(this._options);
  this._operations.forEach(function (op) {
    it[op.method].apply(it, op.args);
  });
};

DeferredIterator.prototype._operation = function (method, args) {
  if (this._iterator) return this._iterator[method].apply(this._iterator, args);
  this._operations.push({ method: method, args: args });
};

'next end'.split(' ').forEach(function (m) {
  DeferredIterator.prototype['_' + m] = function () {
    this._operation(m, arguments);
  };
});

module.exports = DeferredIterator;

},{"abstract-leveldown":4,"util":259}],74:[function(require,module,exports){
(function (Buffer,process){
'use strict';

var util = require('util'),
    AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN,
    DeferredIterator = require('./deferred-iterator');

function DeferredLevelDOWN(location) {
  AbstractLevelDOWN.call(this, typeof location == 'string' ? location : ''); // optional location, who cares?
  this._db = undefined;
  this._operations = [];
  this._iterators = [];
}

util.inherits(DeferredLevelDOWN, AbstractLevelDOWN);

// called by LevelUP when we have a real DB to take its place
DeferredLevelDOWN.prototype.setDb = function (db) {
  this._db = db;
  this._operations.forEach(function (op) {
    db[op.method].apply(db, op.args);
  });
  this._iterators.forEach(function (it) {
    it.setDb(db);
  });
};

DeferredLevelDOWN.prototype._open = function (options, callback) {
  return process.nextTick(callback);
};

// queue a new deferred operation
DeferredLevelDOWN.prototype._operation = function (method, args) {
  if (this._db) return this._db[method].apply(this._db, args);
  this._operations.push({ method: method, args: args });
};

// deferrables
'put get del batch approximateSize'.split(' ').forEach(function (m) {
  DeferredLevelDOWN.prototype['_' + m] = function () {
    this._operation(m, arguments);
  };
});

DeferredLevelDOWN.prototype._isBuffer = function (obj) {
  return Buffer.isBuffer(obj);
};

DeferredLevelDOWN.prototype._iterator = function (options) {
  if (this._db) return this._db.iterator.apply(this._db, arguments);
  var it = new DeferredIterator(options);
  this._iterators.push(it);
  return it;
};

module.exports = DeferredLevelDOWN;
module.exports.DeferredIterator = DeferredIterator;

}).call(this,{"isBuffer":require("../is-buffer/index.js")},require('_process'))
},{"../is-buffer/index.js":161,"./deferred-iterator":73,"_process":213,"abstract-leveldown":4,"util":259}],75:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":76,"./des/cipher":77,"./des/des":78,"./des/ede":79,"./des/utils":80}],76:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++) {
    this.iv[i] = iv[i];
  }
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++) {
      iv[i] ^= inp[inOff + i];
    }superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++) {
      iv[i] = out[outOff + i];
    }
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++) {
      out[outOff + i] ^= iv[i];
    }for (var i = 0; i < this.blockSize; i++) {
      iv[i] = inp[inOff + i];
    }
  }
};

},{"inherits":160,"minimalistic-assert":201}],77:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0) return [];

  if (this.type === 'decrypt') return this._updateDecrypt(data);else return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++) {
    this.buffer[this.bufferOff + i] = data[off + i];
  }this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = (this.bufferOff + data.length) / this.blockSize | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - (data.length - inputOff) % this.blockSize;
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++) {
    this.buffer[this.bufferOff] = data[inputOff];
  }return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer) first = this.update(buffer);

  var last;
  if (this.type === 'encrypt') last = this._finalEncrypt();else last = this._finalDecrypt();

  if (first) return first.concat(last);else return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0) return false;

  while (off < buffer.length) {
    buffer[off++] = 0;
  }return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff)) return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":201}],78:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);else this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++) {
    buffer[i] = value;
  }return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++) {
    assert.equal(buffer[i], pad);
  }return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"../des":75,"inherits":160,"minimalistic-assert":201}],79:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [DES.create({ type: 'encrypt', key: k1 }), DES.create({ type: 'decrypt', key: k2 }), DES.create({ type: 'encrypt', key: k3 })];
  } else {
    this.ciphers = [DES.create({ type: 'decrypt', key: k3 }), DES.create({ type: 'encrypt', key: k2 }), DES.create({ type: 'decrypt', key: k1 })];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"../des":75,"inherits":160,"minimalistic-assert":201}],80:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = value >>> 16 & 0xff;
  bytes[2 + off] = value >>> 8 & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inL >>> j + i & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= inR >>> j + i & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= inL >>> j + i & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
      outL <<= 1;
      outL |= inL >>> j + i & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= inR >>> j + i & 1;
      outR <<= 1;
      outR |= inL >>> j + i & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >> j + i & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inL >> j + i & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= inR >> j + i & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= inR >> j + i & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= inL >> j + i & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= inL >> j + i & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return num << shift & 0xfffffff | num >>> 28 - shift;
};

var pc2table = [
// inL => outL
14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26,

// inR => outR
15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= inL >>> pc2table[i] & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= inR >>> pc2table[i] & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = (r & 1) << 5 | r >>> 27;
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= r >>> i & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= r >>> i & 0x3f;
    outR <<= 6;
  }
  outR |= (r & 0x1f) << 1 | r >>> 31;

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = inL >>> 18 - i * 6 & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = inR >>> 18 - i * 6 & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= num >>> permuteTable[i] & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size) {
    str = '0' + str;
  }var out = [];
  for (var i = 0; i < size; i += group) {
    out.push(str.slice(i, i + group));
  }return out.join(' ');
};

},{}],81:[function(require,module,exports){
(function (Buffer){
'use strict';

var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes.json');

var DH = require('./lib/dh');

function getDiffieHellman(mod) {
  var prime = new Buffer(primes[mod].prime, 'hex');
  var gen = new Buffer(primes[mod].gen, 'hex');

  return new DH(prime, gen);
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
};

function createDiffieHellman(prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator);
  }

  enc = enc || 'binary';
  genc = genc || 'binary';
  generator = generator || new Buffer([2]);

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc);
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true);
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc);
  }

  return new DH(prime, generator, true);
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

}).call(this,require("buffer").Buffer)
},{"./lib/dh":82,"./lib/generatePrime":83,"./lib/primes.json":84,"buffer":62}],82:[function(require,module,exports){
(function (Buffer){
'use strict';

var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function get() {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this,require("buffer").Buffer)
},{"./generatePrime":83,"bn.js":30,"buffer":62,"miller-rabin":200,"randombytes":221}],83:[function(require,module,exports){
'use strict';

var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null) return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++) {
      if (k % res[j] === 0) break;
    }if (i !== j && res[j] <= sqrt) continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++) {
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }
  }return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }
}

},{"bn.js":30,"miller-rabin":200,"randombytes":221}],84:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],85:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":101,"./elliptic/curve":88,"./elliptic/curves":91,"./elliptic/ec":92,"./elliptic/eddsa":95,"./elliptic/hmac-drbg":98,"./elliptic/utils":100,"brorand":31}],86:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--) {
      nafW = (nafW << 1) + naf[k];
    }repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--) {
      k++;
    }if (i >= 0) k++;
    acc = acc.dblp(k);

    if (i < 0) break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
    } else {
      // J +- J
      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [points[a], /* 1 */
    null, /* 3 */
    null, /* 5 */
    points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [-3, /* -1 -1 */
    -1, /* -1 0 */
    -5, /* -1 1 */
    -7, /* 0 -1 */
    0, /* 0 0 */
    7, /* 0 1 */
    5, /* 1 -1 */
    1, /* 1 0 */
    3 /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0) zero = false;
      }
      if (!zero) break;
      k++;
      i--;
    }
    if (i >= 0) k++;
    acc = acc.dblp(k);
    if (i < 0) break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();

      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++) {
    wnd[i] = null;
  }if (jacobianResult) return acc;else return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq() /*other*/{
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);

    var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

  return [0x04].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed) return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed) return false;

  var doubles = this.precomputed.doubles;
  if (!doubles) return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;

  var doubles = [this];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++) {
      acc = acc.dbl();
    }doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;

  var res = [this];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++) {
    res[i] = res[i - 1].add(dbl);
  }return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++) {
    r = r.dbl();
  }return r;
};

},{"../../elliptic":85,"bn.js":30}],87:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC) return num;else return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red) x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red) y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');

  if (x.isOdd() !== odd) x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity()) return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 && this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this;

  // Double in extended coordinates
  if (this.curve.extended) return this._extDbl();else return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity()) return p;
  if (p.isInfinity()) return this;

  if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne) return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t) this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0) return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
  return false;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":85,"../curve":88,"bn.js":30,"inherits":160}],88:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":86,"./edwards":87,"./mont":89,"./short":90}],89:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) {
    bits.push(t.andln(1));
  }for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../../elliptic":85,"../curve":88,"bn.js":30,"inherits":160}],90:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function (vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [l1, l2];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [{ a: a1, b: b1 }, { a: a2, b: b2 }];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red) x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf) return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo) return;

  var pre = this.precomputed;
  if (pre && pre.beta) return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function endoMul(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed) return [this.x, this.y];

  return [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string') obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2]) return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [res].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [res].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf) return p;

  // P + O = P
  if (p.inf) return this;

  // P + P = 2P
  if (this.eq(p)) return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p)) return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf) return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0) return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf) return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function negate(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf) return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red) this.x = this.x.toRed(this.curve.red);
  if (!this.y.red) this.y = this.y.toRed(this.curve.red);
  if (!this.z.red) this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity()) return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity()) return p;

  // P + O = P
  if (p.isInfinity()) return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity()) return p.toJ();

  // P + O = P
  if (p.isInfinity()) return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0) return this;
  if (this.isInfinity()) return this;
  if (!pow) return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++) {
      r = r.dbl();
    }return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow) jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this;

  if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA) return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine') return this.eq(p.toJ());

  if (this === p) return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0) return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
  return false;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":85,"../curve":88,"bn.js":30,"inherits":160}],91:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short') this.curve = new elliptic.curve.short(options);else if (options.type === 'edwards') this.curve = new elliptic.curve.edwards(options);else this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function get() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '0',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: ['9']
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

  // 4/5
  '6666666666666666666666666666666666666666666666666666666666666658']
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [{
    a: '3086d221a7d46bcde86c90e49284eb15',
    b: '-e4437ed6010e88286f547fa90abfe4c3'
  }, {
    a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
    b: '3086d221a7d46bcde86c90e49284eb15'
  }],

  gRed: false,
  g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
});

},{"../elliptic":85,"./precomputed/secp256k1":99,"hash.js":151}],92:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC)) return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve) options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options) options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0) continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0) msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if ((typeof enc === 'undefined' ? 'undefined' : _typeof(enc)) === 'object') {
    options = enc;
    enc = null;
  }
  if (!options) options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity()) continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0) continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0) continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity()) return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null) return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q)) return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":85,"./key":93,"./signature":94,"bn.js":30}],93:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv) this._importPrivate(options.priv, options.privEnc);
  if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair) return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair) return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity()) return { result: false, reason: 'Invalid public key' };
  if (!pub.validate()) return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity()) return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub) this.pub = this.ec.g.mul(this.priv);

  if (!enc) return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"bn.js":30}],94:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature) return options;

  if (this._importDER(options, enc)) return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len + p.place !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && r[1] & 0x80) {
    r = r.slice(1);
  }
  if (s[0] === 0 && s[1] & 0x80) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r);
  // Pad values
  if (s[0] & 0x80) s = [0].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [0x02];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [0x30];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../../elliptic":85,"bn.js":30}],95:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA)) return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++) {
    hash.update(arguments[i]);
  }return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature) return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../../elliptic":85,"./key":96,"./signature":97,"hash.js":151}],96:[function(require,module,exports){
'use strict';

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair) return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair) return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../../elliptic":85}],97:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if ((typeof sig === 'undefined' ? 'undefined' : _typeof(sig)) !== 'object') sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R)) this._R = sig.R;
  if (sig.S instanceof BN) this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../../elliptic":85,"bn.js":30}],98:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000; // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac().update(this.V).update([0x00]);
  if (seed) kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed) return;

  this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval) throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":85,"hash.js":151}],99:[function(require,module,exports){
'use strict';

module.exports = {
  doubles: {
    step: 4,
    points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
  },
  naf: {
    wnd: 7,
    points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
  }
};

},{}],100:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');

utils.assert = function assert(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }return res;
  }
  if (!enc) {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi) res.push(hi, lo);else res.push(lo);
    }
  } else if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0) msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2) {
      res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex') return toHex(arr);else return arr;
};

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << w + 1;
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;
    for (var i = 1; i < shift; i++) {
      naf.push(0);
    }k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [[], []];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = k1.andln(3) + d1 & 3;
    var m24 = k2.andln(3) + d2 & 3;
    if (m14 === 3) m14 = -1;
    if (m24 === 3) m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = k1.andln(7) + d1 & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = k2.andln(7) + d2 & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1) d1 = 1 - d1;
    if (2 * d2 === u2 + 1) d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;

},{"bn.js":30}],101:[function(require,module,exports){
module.exports={
  "_args": [
    [
      {
        "raw": "elliptic@^6.0.0",
        "scope": null,
        "escapedName": "elliptic",
        "name": "elliptic",
        "rawSpec": "^6.0.0",
        "spec": ">=6.0.0 <7.0.0",
        "type": "range"
      },
      "/Users/pelleb/code/browser-builds/node_modules/browserify-sign"
    ]
  ],
  "_from": "elliptic@>=6.0.0 <7.0.0",
  "_id": "elliptic@6.3.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/elliptic",
  "_nodeVersion": "6.3.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/elliptic-6.3.2.tgz_1473938837205_0.3108903462998569"
  },
  "_npmUser": {
    "name": "indutny",
    "email": "fedor@indutny.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "elliptic@^6.0.0",
    "scope": null,
    "escapedName": "elliptic",
    "name": "elliptic",
    "rawSpec": "^6.0.0",
    "spec": ">=6.0.0 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/browserify-sign",
    "/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.3.2.tgz",
  "_shasum": "e4c81e0829cf0a65ab70e998b8232723b5c1bc48",
  "_shrinkwrap": null,
  "_spec": "elliptic@^6.0.0",
  "_where": "/Users/pelleb/code/browser-builds/node_modules/browserify-sign",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "inherits": "^2.0.1"
  },
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^2.11.3",
    "grunt": "^0.4.5",
    "grunt-browserify": "^5.0.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^8.6.2",
    "istanbul": "^0.4.2",
    "jscs": "^2.9.0",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "e4c81e0829cf0a65ab70e998b8232723b5c1bc48",
    "tarball": "https://registry.npmjs.org/elliptic/-/elliptic-6.3.2.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "cbace4683a4a548dc0306ef36756151a20299cd5",
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "maintainers": [
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    }
  ],
  "name": "elliptic",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.3.2"
}

},{}],102:[function(require,module,exports){
'use strict';

var prr = require('prr');

function init(type, message, cause) {
  prr(this, {
    type: type,
    name: type
    // can be passed just a 'cause'
    , cause: typeof message != 'string' ? message : cause,
    message: !!message && typeof message != 'string' ? message.message : message

  }, 'ewr');
}

// generic prototype, not intended to be actually used - helpful for `instanceof`
function CustomError(message, cause) {
  Error.call(this);
  if (Error.captureStackTrace) Error.captureStackTrace(this, arguments.callee);
  init.call(this, 'CustomError', message, cause);
}

CustomError.prototype = new Error();

function createError(errno, type, proto) {
  var err = function err(message, cause) {
    init.call(this, type, message, cause);
    //TODO: the specificity here is stupid, errno should be available everywhere
    if (type == 'FilesystemError') {
      this.code = this.cause.code;
      this.path = this.cause.path;
      this.errno = this.cause.errno;
      this.message = (errno.errno[this.cause.errno] ? errno.errno[this.cause.errno].description : this.cause.message) + (this.cause.path ? ' [' + this.cause.path + ']' : '');
    }
    Error.call(this);
    if (Error.captureStackTrace) Error.captureStackTrace(this, arguments.callee);
  };
  err.prototype = !!proto ? new proto() : new CustomError();
  return err;
}

module.exports = function (errno) {
  var ce = function ce(type, proto) {
    return createError(errno, type, proto);
  };
  return {
    CustomError: CustomError,
    FilesystemError: ce('FilesystemError'),
    createError: ce
  };
};

},{"prr":104}],103:[function(require,module,exports){
'use strict';

var all = module.exports.all = [{
  errno: -2,
  code: 'ENOENT',
  description: 'no such file or directory'
}, {
  errno: -1,
  code: 'UNKNOWN',
  description: 'unknown error'
}, {
  errno: 0,
  code: 'OK',
  description: 'success'
}, {
  errno: 1,
  code: 'EOF',
  description: 'end of file'
}, {
  errno: 2,
  code: 'EADDRINFO',
  description: 'getaddrinfo error'
}, {
  errno: 3,
  code: 'EACCES',
  description: 'permission denied'
}, {
  errno: 4,
  code: 'EAGAIN',
  description: 'resource temporarily unavailable'
}, {
  errno: 5,
  code: 'EADDRINUSE',
  description: 'address already in use'
}, {
  errno: 6,
  code: 'EADDRNOTAVAIL',
  description: 'address not available'
}, {
  errno: 7,
  code: 'EAFNOSUPPORT',
  description: 'address family not supported'
}, {
  errno: 8,
  code: 'EALREADY',
  description: 'connection already in progress'
}, {
  errno: 9,
  code: 'EBADF',
  description: 'bad file descriptor'
}, {
  errno: 10,
  code: 'EBUSY',
  description: 'resource busy or locked'
}, {
  errno: 11,
  code: 'ECONNABORTED',
  description: 'software caused connection abort'
}, {
  errno: 12,
  code: 'ECONNREFUSED',
  description: 'connection refused'
}, {
  errno: 13,
  code: 'ECONNRESET',
  description: 'connection reset by peer'
}, {
  errno: 14,
  code: 'EDESTADDRREQ',
  description: 'destination address required'
}, {
  errno: 15,
  code: 'EFAULT',
  description: 'bad address in system call argument'
}, {
  errno: 16,
  code: 'EHOSTUNREACH',
  description: 'host is unreachable'
}, {
  errno: 17,
  code: 'EINTR',
  description: 'interrupted system call'
}, {
  errno: 18,
  code: 'EINVAL',
  description: 'invalid argument'
}, {
  errno: 19,
  code: 'EISCONN',
  description: 'socket is already connected'
}, {
  errno: 20,
  code: 'EMFILE',
  description: 'too many open files'
}, {
  errno: 21,
  code: 'EMSGSIZE',
  description: 'message too long'
}, {
  errno: 22,
  code: 'ENETDOWN',
  description: 'network is down'
}, {
  errno: 23,
  code: 'ENETUNREACH',
  description: 'network is unreachable'
}, {
  errno: 24,
  code: 'ENFILE',
  description: 'file table overflow'
}, {
  errno: 25,
  code: 'ENOBUFS',
  description: 'no buffer space available'
}, {
  errno: 26,
  code: 'ENOMEM',
  description: 'not enough memory'
}, {
  errno: 27,
  code: 'ENOTDIR',
  description: 'not a directory'
}, {
  errno: 28,
  code: 'EISDIR',
  description: 'illegal operation on a directory'
}, {
  errno: 29,
  code: 'ENONET',
  description: 'machine is not on the network'
}, {
  errno: 31,
  code: 'ENOTCONN',
  description: 'socket is not connected'
}, {
  errno: 32,
  code: 'ENOTSOCK',
  description: 'socket operation on non-socket'
}, {
  errno: 33,
  code: 'ENOTSUP',
  description: 'operation not supported on socket'
}, {
  errno: 34,
  code: 'ENOENT',
  description: 'no such file or directory'
}, {
  errno: 35,
  code: 'ENOSYS',
  description: 'function not implemented'
}, {
  errno: 36,
  code: 'EPIPE',
  description: 'broken pipe'
}, {
  errno: 37,
  code: 'EPROTO',
  description: 'protocol error'
}, {
  errno: 38,
  code: 'EPROTONOSUPPORT',
  description: 'protocol not supported'
}, {
  errno: 39,
  code: 'EPROTOTYPE',
  description: 'protocol wrong type for socket'
}, {
  errno: 40,
  code: 'ETIMEDOUT',
  description: 'connection timed out'
}, {
  errno: 41,
  code: 'ECHARSET',
  description: 'invalid Unicode character'
}, {
  errno: 42,
  code: 'EAIFAMNOSUPPORT',
  description: 'address family for hostname not supported'
}, {
  errno: 44,
  code: 'EAISERVICE',
  description: 'servname not supported for ai_socktype'
}, {
  errno: 45,
  code: 'EAISOCKTYPE',
  description: 'ai_socktype not supported'
}, {
  errno: 46,
  code: 'ESHUTDOWN',
  description: 'cannot send after transport endpoint shutdown'
}, {
  errno: 47,
  code: 'EEXIST',
  description: 'file already exists'
}, {
  errno: 48,
  code: 'ESRCH',
  description: 'no such process'
}, {
  errno: 49,
  code: 'ENAMETOOLONG',
  description: 'name too long'
}, {
  errno: 50,
  code: 'EPERM',
  description: 'operation not permitted'
}, {
  errno: 51,
  code: 'ELOOP',
  description: 'too many symbolic links encountered'
}, {
  errno: 52,
  code: 'EXDEV',
  description: 'cross-device link not permitted'
}, {
  errno: 53,
  code: 'ENOTEMPTY',
  description: 'directory not empty'
}, {
  errno: 54,
  code: 'ENOSPC',
  description: 'no space left on device'
}, {
  errno: 55,
  code: 'EIO',
  description: 'i/o error'
}, {
  errno: 56,
  code: 'EROFS',
  description: 'read-only file system'
}, {
  errno: 57,
  code: 'ENODEV',
  description: 'no such device'
}, {
  errno: 58,
  code: 'ESPIPE',
  description: 'invalid seek'
}, {
  errno: 59,
  code: 'ECANCELED',
  description: 'operation canceled'
}];

module.exports.errno = {};
module.exports.code = {};

all.forEach(function (error) {
  module.exports.errno[error.errno] = error;
  module.exports.code[error.code] = error;
});

module.exports.custom = require('./custom')(module.exports);
module.exports.create = module.exports.custom.createError;

},{"./custom":102}],104:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*!
  * prr
  * (c) 2013 Rod Vagg <rod@vagg.org>
  * https://github.com/rvagg/prr
  * License: MIT
  */

(function (name, context, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition();else context[name] = definition();
})('prr', undefined, function () {

  var setProperty = typeof Object.defineProperty == 'function' ? function (obj, key, options) {
    Object.defineProperty(obj, key, options);
    return obj;
  } : function (obj, key, options) {
    // < es5
    obj[key] = options.value;
    return obj;
  },
      makeOptions = function makeOptions(value, options) {
    var oo = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) == 'object',
        os = !oo && typeof options == 'string',
        op = function op(p) {
      return oo ? !!options[p] : os ? options.indexOf(p[0]) > -1 : false;
    };

    return {
      enumerable: op('enumerable'),
      configurable: op('configurable'),
      writable: op('writable'),
      value: value
    };
  },
      prr = function prr(obj, key, value, options) {
    var k;

    options = makeOptions(value, options);

    if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) == 'object') {
      for (k in key) {
        if (Object.hasOwnProperty.call(key, k)) {
          options.value = key[k];
          setProperty(obj, k, options);
        }
      }
      return obj;
    }

    return setProperty(obj, key, options);
  };

  return prr;
});

},{}],105:[function(require,module,exports){
module.exports={
  "genesisGasLimit": {
    "v": 5000,
    "d": "Gas limit of the Genesis block."
  },
  "genesisDifficulty": {
    "v": 17179869184,
    "d": "Difficulty of the Genesis block."
  },
  "genesisNonce": {
    "v": "0x0000000000000042",
    "d": "the geneis nonce"
  },
  "genesisExtraData": {
    "v": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
    "d": "extra data "
  },
  "genesisHash": {
    "v": "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
    "d": "genesis hash"
  },
  "genesisStateRoot": {
    "v": "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544",
    "d": "the genesis state root"
  },
  "minGasLimit": {
    "v": 5000,
    "d": "Minimum the gas limit may ever be."
  },
  "gasLimitBoundDivisor": {
    "v": 1024,
    "d": "The bound divisor of the gas limit, used in update calculations."
  },
  "minimumDifficulty": {
    "v": 131072,
    "d": "The minimum that the difficulty may ever be."
  },
  "difficultyBoundDivisor": {
    "v": 2048,
    "d": "The bound divisor of the difficulty, used in the update calculations."
  },
  "durationLimit": {
    "v": 13,
    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."
  },
  "maximumExtraDataSize": {
    "v": 32,
    "d": "Maximum size extra data may be after Genesis."
  },
  "epochDuration": {
    "v": 30000,
    "d": "Duration between proof-of-work epochs."
  },
  "stackLimit": {
    "v": 1024,
    "d": "Maximum size of VM stack allowed."
  },
  "callCreateDepth": {
    "v": 1024,
    "d": "Maximum depth of call/create stack."
  },

  "tierStepGas": {
    "v": [0, 2, 3, 5, 8, 10, 20],
    "d": "Once per operation, for a selection of them."
  },
  "expGas": {
    "v": 10,
    "d": "Once per EXP instuction."
  },
  "expByteGas": {
    "v": 10,
    "d": "Times ceil(log256(exponent)) for the EXP instruction."
  },

  "sha3Gas": {
    "v": 30,
    "d": "Once per SHA3 operation."
  },
  "sha3WordGas": {
    "v": 6,
    "d": "Once per word of the SHA3 operation's data."
  },
  "sloadGas": {
    "v": 50,
    "d": "Once per SLOAD operation."
  },
  "sstoreSetGas": {
    "v": 20000,
    "d": "Once per SSTORE operation if the zeroness changes from zero."
  },
  "sstoreResetGas": {
    "v": 5000,
    "d": "Once per SSTORE operation if the zeroness does not change from zero."
  },
  "sstoreRefundGas": {
    "v": 15000,
    "d": "Once per SSTORE operation if the zeroness changes to zero."
  },
  "jumpdestGas": {
    "v": 1,
    "d": "Refunded gas, once per SSTORE operation if the zeroness changes to zero."
  },

  "logGas": {
    "v": 375,
    "d": "Per LOG* operation."
  },
  "logDataGas": {
    "v": 8,
    "d": "Per byte in a LOG* operation's data."
  },
  "logTopicGas": {
    "v": 375,
    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."
  },

  "createGas": {
    "v": 32000,
    "d": "Once per CREATE operation & contract-creation transaction."
  },

  "callGas": {
    "v": 40,
    "d": "Once per CALL operation & message call transaction."
  },
  "callStipend": {
    "v": 2300,
    "d": "Free gas given at beginning of call."
  },
  "callValueTransferGas": {
    "v": 9000,
    "d": "Paid for CALL when the value transfor is non-zero."
  },
  "callNewAccountGas": {
    "v": 25000,
    "d": "Paid for CALL when the destination address didn't exist prior."
  },

  "suicideRefundGas": {
    "v": 24000,
    "d": "Refunded following a suicide operation."
  },

  "memoryGas": {
    "v": 3,
    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."
  },
  "quadCoeffDiv": {
    "v": 512,
    "d": "Divisor for the quadratic particle of the memory cost equation."
  },

  "createDataGas": {
    "v": 200,
    "d": ""
  },
  "txGas": {
    "v": 21000,
    "d": "Per transaction. NOTE: Not payable on data of calls between transactions."
  },
  "txCreation": {
    "v": 32000,
    "d": "the cost of creating a contract via tx"
  },
  "txDataZeroGas": {
    "v": 4,
    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."
  },
  "txDataNonZeroGas": {
    "v": 68,
    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."
  },

  "copyGas": {
    "v": 3,
    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."
  },

  "ecrecoverGas": {
    "v": 3000,
    "d": ""
  },
  "sha256Gas": {
    "v": 60,
    "d": ""
  },
  "sha256WordGas": {
    "v": 12,
    "d": ""
  },
  "ripemd160Gas": {
    "v": 600,
    "d": ""
  },
  "ripemd160WordGas": {
    "v": 120,
    "d": ""
  },
  "identityGas": {
    "v": 15,
    "d": ""
  },
  "identityWordGas": {
    "v": 3,
    "d": ""
  },
  "minerReward": {
    "v": "5000000000000000000",
    "d": "the amount a miner get rewarded for mining a block"
  },
  "ommerReward": {
    "v": "625000000000000000",
    "d": "The amount of wei a miner of an uncle block gets for being inculded in the blockchain"
  },
  "niblingReward": {
    "v": "156250000000000000",
    "d": "the amount a miner gets for inculding a uncle"
  },
  "homeSteadForkNumber": {
    "v": 1000000,
    "d": "the block that the homestead fork started at"
  },
  "timebombPeriod": {
    "v": 100000,
    "d": "Exponential difficulty timebomb period"
  },
  "freeBlockPeriod": {
    "v": 2
  }
}

},{}],106:[function(require,module,exports){
'use strict';

module.exports = require('./params.json');

},{"./params.json":105}],107:[function(require,module,exports){
'use strict';

module.exports = require('./lib/index.js');

},{"./lib/index.js":108}],108:[function(require,module,exports){
(function (Buffer){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var utils = require('ethereumjs-util');
var BN = require('bn.js');

var ABI = function ABI() {};

// Convert from short to canonical names
// FIXME: optimise or make this nicer?
function elementaryName(name) {
  if (name.startsWith('int[')) {
    return 'int256' + name.slice(3);
  } else if (name === 'int') {
    return 'int256';
  } else if (name.startsWith('uint[')) {
    return 'uint256' + name.slice(4);
  } else if (name === 'uint') {
    return 'uint256';
  } else if (name.startsWith('fixed[')) {
    return 'fixed128x128' + name.slice(5);
  } else if (name === 'fixed') {
    return 'fixed128x128';
  } else if (name.startsWith('ufixed[')) {
    return 'ufixed128x128' + name.slice(6);
  } else if (name === 'ufixed') {
    return 'ufixed128x128';
  }
  return name;
}

ABI.eventID = function (name, types) {
  // FIXME: use node.js util.format?
  var sig = name + '(' + types.map(elementaryName).join(',') + ')';
  return utils.sha3(new Buffer(sig));
};

ABI.methodID = function (name, types) {
  return ABI.eventID(name, types).slice(0, 4);
};

// Parse N from type<N>
function parseTypeN(type) {
  return parseInt(/^\D+(\d+)$/.exec(type)[1], 10);
}

// Parse N,M from type<N>x<M>
function parseTypeNxM(type) {
  var tmp = /^\D+(\d+)x(\d+)$/.exec(type);
  return [parseInt(tmp[1], 10), parseInt(tmp[2], 10)];
}

// Parse N from type[<N>]
function parseTypeArray(type) {
  var tmp = /^\w+\[(\d*)\]$/.exec(type)[1];
  if (tmp.length === 0) {
    return 0;
  } else {
    return parseInt(tmp, 10);
  }
}

function parseNumber(arg) {
  var type = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
  if (type === 'string') {
    if (utils.isHexPrefixed(arg)) {
      return new BN(utils.stripHexPrefix(arg), 16);
    } else {
      return new BN(arg, 10);
    }
  } else if (type === 'number') {
    return new BN(arg);
  } else if (arg.toArray) {
    // assume this is a BN for the moment, replace with BN.isBN soon
    return arg;
  } else {
    throw new Error('Argument is not a number');
  }
}

// someMethod(bytes,uint)
// someMethod(bytes,uint):(boolean)
function parseSignature(sig) {
  var tmp = /^(\w+)\((.+)\)$/.exec(sig);
  if (tmp.length !== 3) {
    throw new Error('Invalid method signature');
  }

  var args = /^(.+)\):\((.+)$/.exec(tmp[2]);

  if (args !== null && args.length === 3) {
    return {
      method: tmp[1],
      args: args[1].split(','),
      retargs: args[2].split(',')
    };
  } else {
    return {
      method: tmp[1],
      args: tmp[2].split(',')
    };
  }
}

// Encodes a single item (can be dynamic array)
// @returns: Buffer
function encodeSingle(type, arg) {
  var size, num, ret, i;

  if (type === 'address') {
    return encodeSingle('uint160', parseNumber(arg));
  } else if (type === 'bool') {
    return encodeSingle('uint8', arg ? 1 : 0);
  } else if (type === 'string') {
    return encodeSingle('bytes', new Buffer(arg, 'utf8'));
  } else if (type.match(/\w+\[\d+\]/)) {
    // this part handles fixed-length arrays ([2])
    // NOTE: we catch here all calls to arrays, that simplifies the rest
    if (typeof arg.length === 'undefined') {
      throw new Error('Not an array?');
    }

    size = parseTypeArray(type);
    if (size !== 0 && arg.length > size) {
      throw new Error('Elements exceed array size: ' + size);
    }

    type = type.slice(0, type.indexOf('['));

    ret = [];
    for (i in arg) {
      ret.push(encodeSingle(type, arg[i]));
    }

    return Buffer.concat(ret);
  } else if (type.match(/\w+\[\]/)) {
    // this part handles variable length ([])
    // NOTE: we catch here all calls to arrays, that simplifies the rest
    if (typeof arg.length === 'undefined') {
      throw new Error('Not an array?');
    }

    type = type.slice(0, type.indexOf('['));

    ret = [encodeSingle('uint256', arg.length)];
    for (i in arg) {
      ret.push(encodeSingle(type, arg[i]));
    }

    return Buffer.concat(ret);
  } else if (type === 'bytes') {
    arg = new Buffer(arg);

    ret = Buffer.concat([encodeSingle('uint256', arg.length), arg]);

    if (arg.length % 32 !== 0) {
      ret = Buffer.concat([ret, utils.zeros(32 - arg.length % 32)]);
    }

    return ret;
  } else if (type.startsWith('bytes')) {
    size = parseTypeN(type);
    if (size < 1 || size > 32) {
      throw new Error('Invalid bytes<N> width: ' + size);
    }

    return utils.setLengthRight(arg, 32);
  } else if (type.startsWith('uint')) {
    size = parseTypeN(type);
    if (size % 8 || size < 8 || size > 256) {
      throw new Error('Invalid uint<N> width: ' + size);
    }

    num = parseNumber(arg);
    if (num.bitLength() > size) {
      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
    }

    if (num < 0) {
      throw new Error('Supplied uint is negative');
    }

    return num.toArrayLike(Buffer, 'be', 32);
  } else if (type.startsWith('int')) {
    size = parseTypeN(type);
    if (size % 8 || size < 8 || size > 256) {
      throw new Error('Invalid int<N> width: ' + size);
    }

    num = parseNumber(arg);
    if (num.bitLength() > size) {
      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
    }

    return num.toTwos(256).toArrayLike(Buffer, 'be', 32);
  } else if (type.startsWith('ufixed')) {
    size = parseTypeNxM(type);

    num = parseNumber(arg);

    if (num < 0) {
      throw new Error('Supplied ufixed is negative');
    }

    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))));
  } else if (type.startsWith('fixed')) {
    size = parseTypeNxM(type);

    return encodeSingle('int256', parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))));
  }

  throw new Error('Unsupported or invalid type: ' + type);
}

// Decodes a single item (can be dynamic array)
// @returns: array
// FIXME: this method will need a lot of attention at checking limits and validation
function decodeSingle(type, arg) {
  var size, num, ret, i;

  if (type === 'address') {
    return decodeSingle('uint160', arg);
  } else if (type === 'bool') {
    return decodeSingle('uint8', arg).toString() === new BN(1).toString();
  } else if (type === 'string') {
    return new Buffer(decodeSingle('bytes', arg), 'utf8').toString();
  } else if (type.match(/\w+\[\d+\]/)) {
    // this part handles fixed-length arrays ([2])
    // NOTE: we catch here all calls to arrays, that simplifies the rest
    size = parseTypeArray(type);
    type = type.slice(0, type.indexOf('['));

    ret = [];
    for (i = 0; i < size; i++) {
      ret.push(decodeSingle(type, arg.slice(i * 32)));
    }

    return ret;
  } else if (type.match(/\w+\[\]/)) {
    // this part handles variable length ([])
    // NOTE: we catch here all calls to arrays, that simplifies the rest
    type = type.slice(0, type.indexOf('['));
    var count = decodeSingle('uint256', arg.slice(0, 32)).toNumber();

    ret = [];
    for (i = 1; i < count + 1; i++) {
      ret.push(decodeSingle(type, arg.slice(i * 32)));
    }

    return ret;
  } else if (type === 'bytes') {
    size = decodeSingle('uint256', arg.slice(0, 32)).toNumber();
    return arg.slice(32, 32 + size);
  } else if (type.startsWith('bytes')) {
    size = parseTypeN(type);
    if (size < 1 || size > 32) {
      throw new Error('Invalid bytes<N> width: ' + size);
    }

    return arg.slice(0, size);
  } else if (type.startsWith('uint')) {
    size = parseTypeN(type);
    if (size % 8 || size < 8 || size > 256) {
      throw new Error('Invalid uint<N> width: ' + size);
    }

    num = new BN(arg.slice(0, 32), 16, 'be');
    if (num.bitLength() > size) {
      throw new Error('Decoded int exceeds width: ' + size + ' vs ' + num.bitLength());
    }

    return num;
  } else if (type.startsWith('int')) {
    size = parseTypeN(type);
    if (size % 8 || size < 8 || size > 256) {
      throw new Error('Invalid uint<N> width: ' + size);
    }

    num = new BN(arg.slice(0, 32), 16, 'be').fromTwos(256);
    if (num.bitLength() > size) {
      throw new Error('Decoded uint exceeds width: ' + size + ' vs ' + num.bitLength());
    }

    return num;
  } else if (type.startsWith('ufixed')) {
    size = parseTypeNxM(type);
    size = new BN(2).pow(new BN(size[1]));

    num = decodeSingle('uint256', arg);
    if (!num.mod(size).isZero()) {
      throw new Error('Decimals not supported yet');
    }

    return num.div(size);
  } else if (type.startsWith('fixed')) {
    size = parseTypeNxM(type);
    size = new BN(2).pow(new BN(size[1]));

    num = decodeSingle('int256', arg);
    if (!num.mod(size).isZero()) {
      throw new Error('Decimals not supported yet');
    }

    return num.div(size);
  }

  throw new Error('Unsupported or invalid type: ' + type);
}

// Is a type dynamic?
function isDynamic(type) {
  // FIXME: handle all types? I don't think anything is missing now
  return type === 'string' || type === 'bytes' || type.match(/\w+\[\]/);
}

// Encode a method/event with arguments
// @types an array of string type names
// @args  an array of the appropriate values
ABI.rawEncode = function (types, values) {
  var output = [];
  var data = [];

  var headLength = 32 * types.length;

  for (var i in types) {
    var type = elementaryName(types[i]);
    var value = values[i];
    var cur = encodeSingle(type, value);

    // Use the head/tail method for storing dynamic data
    if (isDynamic(type)) {
      output.push(encodeSingle('uint256', headLength));
      data.push(cur);
      headLength += cur.length;
    } else {
      output.push(cur);
    }
  }

  return Buffer.concat(output.concat(data));
};

ABI.rawDecode = function (types, data) {
  var ret = [];

  data = new Buffer(data);

  var offset = 0;
  for (var i in types) {
    var type = elementaryName(types[i]);
    var cur = data.slice(offset, offset + 32);

    if (isDynamic(type)) {
      var dataOffset = decodeSingle('uint256', cur).toNumber();
      // We will read at least 32 bytes
      if (dataOffset > data.length - 32) {
        throw new Error('Invalid offset: ' + dataOffset);
      }

      cur = data.slice(dataOffset);
    } else if (type.match(/\w+\[\d+\]/)) {
      var count = parseTypeArray(type);
      if (count > 1) {
        cur = data.slice(offset, offset + count * 32);
        offset += (count - 1) * 32;
      }
    }

    ret.push(decodeSingle(type, cur));
    offset += 32;
  }

  return ret;
};

ABI.simpleEncode = function (method) {
  var args = Array.prototype.slice.call(arguments).slice(1);
  var sig = parseSignature(method);

  // FIXME: validate/convert arguments
  if (args.length !== sig.args.length) {
    throw new Error('Argument count mismatch');
  }

  return Buffer.concat([ABI.methodID(sig.method, sig.args), ABI.rawEncode(sig.args, args)]);
};

ABI.simpleDecode = function (method, data) {
  var sig = parseSignature(method);

  // FIXME: validate/convert arguments
  if (!sig.retargs) {
    throw new Error('No return values in method');
  }

  return ABI.rawDecode(sig.retargs, data);
};

function stringify(type, value) {
  if (type.startsWith('address') || type.startsWith('bytes')) {
    return '0x' + value.toString('hex');
  } else {
    return value.toString();
  }
}

ABI.stringify = function (types, values) {
  var ret = [];

  for (var i in types) {
    var type = types[i];
    var value = values[i];

    // if it is an array type, concat the items
    if (/^[^\[]+\[.*\]$/.test(type)) {
      value = value.map(function (item) {
        return stringify(type, item);
      }).join(', ');
    } else {
      value = stringify(type, value);
    }

    ret.push(value);
  }

  return ret;
};

ABI.solidityPack = function (types, values) {
  if (types.length !== values.length) {
    throw new Error('Number of types are not matching the values');
  }

  var size, num;
  var ret = [];

  for (var i = 0; i < types.length; i++) {
    var type = elementaryName(types[i]);
    var value = values[i];

    if (type === 'bytes') {
      ret.push(value);
    } else if (type === 'string') {
      ret.push(new Buffer(value, 'utf8'));
    } else if (type === 'bool') {
      ret.push(new Buffer(value ? '01' : '00', 'hex'));
    } else if (type === 'address') {
      ret.push(utils.setLengthLeft(value, 20));
    } else if (type.startsWith('bytes')) {
      size = parseTypeN(type);
      if (size < 1 || size > 32) {
        throw new Error('Invalid bytes<N> width: ' + size);
      }

      return utils.setLengthRight(value, size);
    } else if (type.startsWith('uint')) {
      size = parseTypeN(type);
      if (size % 8 || size < 8 || size > 256) {
        throw new Error('Invalid uint<N> width: ' + size);
      }

      num = parseNumber(value);
      if (num.bitLength() > size) {
        throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
      }

      ret.push(num.toArrayLike(Buffer, 'be', size / 8));
    } else if (type.startsWith('int')) {
      size = parseTypeN(type);
      if (size % 8 || size < 8 || size > 256) {
        throw new Error('Invalid int<N> width: ' + size);
      }

      num = parseNumber(value);
      if (num.bitLength() > size) {
        throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
      }

      ret.push(num.toTwos(size).toArrayLike(Buffer, 'be', size / 8));
    } else {
      // FIXME: support all other types
      throw new Error('Unsupported or invalid type: ' + type);
    }
  }

  return Buffer.concat(ret);
};

ABI.soliditySHA3 = function (types, values) {
  return utils.sha3(ABI.solidityPack(types, values));
};

ABI.soliditySHA256 = function (types, values) {
  return utils.sha256(ABI.solidityPack(types, values));
};

ABI.solidityRIPEMD160 = function (types, values) {
  return utils.ripemd160(ABI.solidityPack(types, values), true);
};

// Serpent's users are familiar with this encoding
// - s: string
// - b: bytes
// - b<N>: bytes<N>
// - i: int256
// - a: int256[]

function isNumeric(c) {
  // FIXME: is this correct? Seems to work
  return c >= '0' && c <= '9';
}

// For a "documentation" refer to https://github.com/ethereum/serpent/blob/develop/preprocess.cpp
ABI.fromSerpent = function (sig) {
  var ret = [];
  for (var i = 0; i < sig.length; i++) {
    var type = sig[i];
    if (type === 's') {
      ret.push('bytes');
    } else if (type === 'b') {
      var tmp = 'bytes';
      var j = i + 1;
      while (j < sig.length && isNumeric(sig[j])) {
        tmp += sig[j] - '0';
        j++;
      }
      i = j - 1;
      ret.push(tmp);
    } else if (type === 'i') {
      ret.push('int256');
    } else if (type === 'a') {
      ret.push('int256[]');
    } else {
      throw new Error('Unsupported or invalid type: ' + type);
    }
  }
  return ret;
};

ABI.toSerpent = function (types) {
  var ret = [];
  for (var i = 0; i < types.length; i++) {
    var type = types[i];
    if (type === 'bytes') {
      ret.push('s');
    } else if (type.startsWith('bytes')) {
      ret.push('b' + parseTypeN(type));
    } else if (type === 'int256') {
      ret.push('i');
    } else if (type === 'int256[]') {
      ret.push('a');
    } else {
      throw new Error('Unsupported or invalid type: ' + type);
    }
  }
  return ret.join('');
};

module.exports = ABI;

}).call(this,require("buffer").Buffer)
},{"bn.js":30,"buffer":62,"ethereumjs-util":120}],109:[function(require,module,exports){
(function (Buffer){
'use strict';

var ethUtil = require('ethereumjs-util');
var rlp = require('rlp');

var Account = module.exports = function (data) {
  // Define Properties
  var fields = [{
    name: 'nonce',
    default: new Buffer([])
  }, {
    name: 'balance',
    default: new Buffer([])
  }, {
    name: 'stateRoot',
    length: 32,
    default: ethUtil.SHA3_RLP
  }, {
    name: 'codeHash',
    length: 32,
    default: ethUtil.SHA3_NULL
  }];

  ethUtil.defineProperties(this, fields, data);
};

Account.prototype.serialize = function () {
  return rlp.encode(this.raw);
};

Account.prototype.isContract = function () {
  return this.codeHash.toString('hex') !== ethUtil.SHA3_NULL_S;
};

Account.prototype.getCode = function (state, cb) {
  if (!this.isContract()) {
    cb(null, new Buffer([]));
    return;
  }

  state.getRaw(this.codeHash, cb);
};

Account.prototype.setCode = function (trie, code, cb) {
  var self = this;

  this.codeHash = ethUtil.sha3(code);

  if (this.codeHash.toString('hex') === ethUtil.SHA3_NULL_S) {
    cb(null, new Buffer([]));
    return;
  }

  trie.putRaw(this.codeHash, code, function (err) {
    cb(err, self.codeHash);
  });
};

Account.prototype.getStorage = function (trie, key, cb) {
  var t = trie.copy();
  t.root = this.stateRoot;
  t.get(key, cb);
};

Account.prototype.setStorage = function (trie, key, val, cb) {
  var self = this;
  var t = trie.copy();
  t.root = self.stateRoot;
  t.put(key, val, function (err) {
    if (err) return cb();
    self.stateRoot = t.root;
    cb();
  });
};

Account.prototype.isEmpty = function () {
  return this.balance.toString('hex') === '' && this.nonce.toString('hex') === '' && this.stateRoot.toString('hex') === ethUtil.SHA3_RLP_S && this.codeHash.toString('hex') === ethUtil.SHA3_NULL_S;
};

}).call(this,require("buffer").Buffer)
},{"buffer":62,"ethereumjs-util":120,"rlp":234}],110:[function(require,module,exports){
(function (Buffer){
'use strict';

var utils = require('ethereumjs-util');
var params = require('ethereum-common');
var BN = utils.BN;
/**
 * An object that repersents the block header
 * @constructor
 * @param {Array} data raw data, deserialized
 * @prop {Buffer} parentHash the blocks' parent's hash
 * @prop {Buffer} uncleHash sha3(rlp_encode(uncle_list))
 * @prop {Buffer} coinbase the miner address
 * @prop {Buffer} stateRoot The root of a Merkle Patricia tree
 * @prop {Buffer} transactionTrie the root of a Trie containing the transactions
 * @prop {Buffer} receiptTrie the root of a Trie containing the transaction Reciept
 * @prop {Buffer} bloom
 * @prop {Buffer} difficulty
 * @prop {Buffer} number the block's height
 * @prop {Buffer} gasLimit
 * @prop {Buffer} gasUsed
 * @prop {Buffer} timestamp
 * @prop {Buffer} extraData
 * @prop {Array.<Buffer>} raw an array of buffers containing the raw blocks.
 */
var BlockHeader = module.exports = function (data) {
  var fields = [{
    name: 'parentHash',
    length: 32,
    default: utils.zeros(32)
  }, {
    name: 'uncleHash',
    default: utils.SHA3_RLP_ARRAY
  }, {
    name: 'coinbase',
    length: 20,
    default: utils.zeros(20)
  }, {
    name: 'stateRoot',
    length: 32,
    default: utils.zeros(32)
  }, {
    name: 'transactionsTrie',
    length: 32,
    default: utils.SHA3_RLP
  }, {
    name: 'receiptTrie',
    length: 32,
    default: utils.SHA3_RLP
  }, {
    name: 'bloom',
    default: utils.zeros(256)
  }, {
    name: 'difficulty',
    default: new Buffer([])
  }, {
    name: 'number',
    default: utils.intToBuffer(params.homeSteadForkNumber.v)
  }, {
    name: 'gasLimit',
    default: new Buffer('ffffffffffffff', 'hex')
  }, {
    name: 'gasUsed',
    empty: true,
    default: new Buffer([])
  }, {
    name: 'timestamp',
    default: new Buffer([])
  }, {
    name: 'extraData',
    allowZero: true,
    empty: true,
    default: new Buffer([])
  }, {
    name: 'mixHash',
    default: utils.zeros(32)
    // length: 32
  }, {
    name: 'nonce',
    default: new Buffer([]) // sha3(42)
  }];
  utils.defineProperties(this, fields, data);
};

/**
 * Returns the canoncical difficulty of the block
 * @method canonicalDifficulty
 * @param {Block} parentBlock the parent `Block` of the this header
 * @return {BN}
 */
BlockHeader.prototype.canonicalDifficulty = function (parentBlock) {
  var blockTs = new BN(this.timestamp);
  var parentTs = new BN(parentBlock.header.timestamp);
  var parentDif = new BN(parentBlock.header.difficulty);
  var minimumDifficulty = new BN(params.minimumDifficulty.v);
  var offset = parentDif.div(new BN(params.difficultyBoundDivisor.v));
  var dif;

  if (this.isHomestead()) {
    // homestead
    // 1 - (block_timestamp - parent_timestamp) // 10
    var a = blockTs.sub(parentTs).divn(10).neg().addn(1);
    var cutoff = new BN(-99);
    // MAX(cutoff, a)
    if (cutoff.cmp(a) === 1) {
      a = cutoff;
    }
    dif = parentDif.add(offset.mul(a));
  } else {
    // prehomestead
    if (parentTs.addn(params.durationLimit.v).cmp(blockTs) === 1) {
      dif = offset.add(parentDif);
    } else {
      dif = parentDif.sub(offset);
    }
  }

  var exp = new BN(this.number).divn(100000).subn(2);
  if (!exp.isNeg()) {
    dif.iadd(new BN(2).pow(exp));
  }

  if (dif.cmp(minimumDifficulty) === -1) {
    dif = minimumDifficulty;
  }

  return dif;
};

/**
 * checks that the block's `difficuly` matches the canonical difficulty
 * @method validateDifficulty
 * @param {Block} parentBlock this block's parent
 * @return {Boolean}
 */
BlockHeader.prototype.validateDifficulty = function (parentBlock) {
  var dif = this.canonicalDifficulty(parentBlock);
  return dif.cmp(new BN(this.difficulty)) === 0;
};

/**
 * Validates the gasLimit
 * @method validateGasLimit
 * @param {Block} parentBlock this block's parent
 * @returns {Boolean}
 */
BlockHeader.prototype.validateGasLimit = function (parentBlock) {
  var pGasLimit = utils.bufferToInt(parentBlock.header.gasLimit);
  var gasLimit = utils.bufferToInt(this.gasLimit);
  var a = Math.floor(pGasLimit / params.gasLimitBoundDivisor.v);
  var maxGasLimit = pGasLimit + a;
  var minGasLimit = pGasLimit - a;

  return maxGasLimit > gasLimit && minGasLimit < gasLimit && params.minGasLimit.v < gasLimit;
};

/**
 * Validates the entire block header
 * @method validate
 * @param {Blockchain} blockChain the blockchain that this block is validating against
 * @param {Bignum} [height] if this is an uncle header, this is the height of the block that is including it
 * @param {Function} cb the callback function. The callback is given an `error` if the block is invalid
 */
BlockHeader.prototype.validate = function (blockchain, height, cb) {
  var self = this;
  if (arguments.length === 2) {
    cb = height;
    height = false;
  }

  if (this.isGenesis()) {
    return cb();
  }

  // find the blocks parent
  blockchain.getBlock(self.parentHash, function (err, parentBlock) {
    if (err) {
      return cb('could not find parent block');
    }

    self.parentBlock = parentBlock;

    var number = new BN(self.number);
    if (number.cmp(new BN(parentBlock.header.number).addn(1)) !== 0) {
      return cb('invalid number');
    }

    if (height) {
      var dif = height.sub(new BN(parentBlock.header.number));
      if (!(dif.cmpn(8) === -1 && dif.cmpn(1) === 1)) {
        return cb('uncle block has a parent that is too old or to young');
      }
    }

    if (!self.validateDifficulty(parentBlock)) {
      return cb('invalid Difficulty');
    }

    if (!self.validateGasLimit(parentBlock)) {
      return cb('invalid gas limit');
    }

    if (utils.bufferToInt(parentBlock.header.number) + 1 !== utils.bufferToInt(self.number)) {
      return cb('invalid heigth');
    }

    if (utils.bufferToInt(self.timestamp) <= utils.bufferToInt(parentBlock.header.timestamp)) {
      return cb('invalid timestamp');
    }

    if (self.extraData.length > params.maximumExtraDataSize.v) {
      return cb('invalid amount of extra data');
    }

    cb();
  });
};

/**
 * Returns the sha3 hash of the blockheader
 * @method hash
 * @return {Buffer}
 */
BlockHeader.prototype.hash = function () {
  return utils.rlphash(this.raw);
};

/**
 * checks if the blockheader is a genesis header
 * @method isGenesis
 * @return {Boolean}
 */
BlockHeader.prototype.isGenesis = function () {
  return this.number.toString('hex') === '';
};

/**
 * Determines if a given block part of homestead or not
 * @method isHomestead
 * @return Boolean
 */
BlockHeader.prototype.isHomestead = function () {
  return utils.bufferToInt(this.number) >= params.homeSteadForkNumber.v;
};

}).call(this,require("buffer").Buffer)
},{"buffer":62,"ethereum-common":114,"ethereumjs-util":120}],111:[function(require,module,exports){
(function (Buffer){
'use strict';

var ethUtil = require('ethereumjs-util');
var Tx = require('ethereumjs-tx');
var Trie = require('merkle-patricia-tree');
var BN = ethUtil.BN;
var rlp = ethUtil.rlp;
var async = require('async');
var BlockHeader = require('./header');
var params = require('ethereum-common');

/**
 * Creates a new block object
 * @constructor the raw serialized or the deserialized block.
 * @param {Array|Buffer|Object} data
 * @prop {Header} header the block's header
 * @prop {Array.<Header>} uncleList an array of uncle headers
 * @prop {Array.<Buffer>} raw an array of buffers containing the raw blocks.
 */
var Block = module.exports = function (data) {
  this.transactions = [];
  this.uncleHeaders = [];
  this._inBlockChain = false;
  this.txTrie = new Trie();

  Object.defineProperty(this, 'raw', {
    get: function get() {
      return this.serialize(false);
    }
  });

  var rawTransactions, rawUncleHeaders;

  // defaults
  if (!data) {
    data = [[], [], []];
  }

  if (Buffer.isBuffer(data)) {
    data = rlp.decode(data);
  }

  if (Array.isArray(data)) {
    this.header = new BlockHeader(data[0]);
    rawTransactions = data[1];
    rawUncleHeaders = data[2];
  } else {
    this.header = new BlockHeader(data.header);
    rawTransactions = data.transactions;
    rawUncleHeaders = data.uncleHeaders;
  }

  // parse uncle headers
  for (var i = 0; i < rawUncleHeaders.length; i++) {
    this.uncleHeaders.push(new BlockHeader(rawUncleHeaders[i]));
  }

  var homestead = this.isHomestead();
  // parse transactions
  for (i = 0; i < rawTransactions.length; i++) {
    var tx = new Tx(rawTransactions[i]);
    tx._homestead = homestead;
    this.transactions.push(tx);
  }
};

/**
 * Produces a hash the RLP of the block
 * @method hash
 */
Block.prototype.hash = function () {
  return this.header.hash();
};

/**
 * Determines if a given block is the genesis block
 * @method isGenisis
 * @return Boolean
 */
Block.prototype.isGenesis = function () {
  return this.header.isGenesis();
};

/**
 * Determines if a given block part of homestead or not
 * @method isHomestead
 * @return Boolean
 */
Block.prototype.isHomestead = function () {
  return this.header.isHomestead();
};

/**
 * turns the block in to the canonical genesis block
 * @method setGenesisParams
 */
Block.prototype.setGenesisParams = function () {
  this.header.gasLimit = params.genesisGasLimit.v;
  this.header.difficulty = params.genesisDifficulty.v;
  this.header.extraData = params.genesisExtraData.v;
  this.header.nonce = params.genesisNonce.v;
  this.header.stateRoot = params.genesisStateRoot.v;
  this.header.number = new Buffer([]);
};

/**
 * Produces a serialization of the block.
 * @method serialize
 * @param {Boolean} rlpEncode whether to rlp encode the block or not
 */
Block.prototype.serialize = function (rlpEncode) {
  var raw = [this.header.raw, [], []];

  // rlpEnode defaults to true
  if (typeof rlpEncode === 'undefined') {
    rlpEncode = true;
  }

  this.transactions.forEach(function (tx) {
    raw[1].push(tx.raw);
  });

  this.uncleHeaders.forEach(function (uncle) {
    raw[2].push(uncle.raw);
  });

  return rlpEncode ? rlp.encode(raw) : raw;
};

/**
 * Generate transaction trie. The tx trie must be generated before the transaction trie can
 * be validated with `validateTransactionTrie`
 * @method genTxTrie
 * @param {Function} cb the callback
 */
Block.prototype.genTxTrie = function (cb) {
  var i = 0;
  var self = this;

  async.eachSeries(this.transactions, function (tx, done) {
    self.txTrie.put(rlp.encode(i), tx.serialize(), done);
    i++;
  }, cb);
};

/**
 * Validates the transaction trie
 * @method validateTransactionTrie
 * @return {Boolean}
 */
Block.prototype.validateTransactionsTrie = function () {
  var txT = this.header.transactionsTrie.toString('hex');
  if (this.transactions.length) {
    return txT === this.txTrie.root.toString('hex');
  } else {
    return txT === ethUtil.SHA3_RLP.toString('hex');
  }
};

/**
 * Validates the transactions
 * @method validateTransactions
 * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean
 * @return {Boolean}
 */
Block.prototype.validateTransactions = function (stringError) {
  var errors = [];

  this.transactions.forEach(function (tx, i) {
    var error = tx.validate(true);
    if (error) {
      error += ' at tx ' + i;
    }
    errors.push(error);
  });

  if (stringError === undefined || stringError === false) {
    return errors.length === 0;
  } else {
    return arrayToString(errors);
  }
};

/**
 * Validates the entire block. Returns a string to the callback if block is invalid
 * @method validate
 * @param {BlockChain} blockChain the blockchain that this block wants to be part of
 * @param {Function} cb the callback which is given a `String` if the block is not valid
 */
Block.prototype.validate = function (blockChain, cb) {
  var self = this;
  var errors = [];

  async.parallel([
  // validate uncles
  self.validateUncles.bind(self, blockChain),
  // validate block
  self.header.validate.bind(self.header, blockChain),
  // generate the transaction trie
  self.genTxTrie.bind(self)], function (err) {
    if (err) {
      errors.push(err);
    }

    if (!self.validateTransactionsTrie()) {
      errors.push('invalid transaction true');
    }

    var txErrors = self.validateTransactions(true);
    if (txErrors !== '') {
      errors.push(txErrors);
    }

    if (!self.validateUnclesHash()) {
      errors.push('invild uncle hash');
    }

    cb(arrayToString(errors));
  });
};

/**
 * Validates the uncle's hash
 * @method validateUncleHash
 * @return {Boolean}
 */
Block.prototype.validateUnclesHash = function () {
  var raw = [];
  this.uncleHeaders.forEach(function (uncle) {
    raw.push(uncle.raw);
  });

  raw = rlp.encode(raw);
  return ethUtil.sha3(raw).toString('hex') === this.header.uncleHash.toString('hex');
};

/**
 * Validates the uncles that are in the block if any. Returns a string to the callback if uncles are invalid
 * @method validateUncles
 * @param {Blockchain} blockChaina an instance of the Blockchain
 * @param {Function} cb the callback
 */
Block.prototype.validateUncles = function (blockChain, cb) {
  if (this.isGenesis()) {
    return cb();
  }

  var self = this;

  if (self.uncleHeaders.length > 2) {
    return cb('too many uncle headers');
  }

  var uncleHashes = self.uncleHeaders.map(function (header) {
    return header.hash().toString('hex');
  });

  if (!(new Set(uncleHashes).size === uncleHashes.length)) {
    return cb('dublicate unlces');
  }

  async.each(self.uncleHeaders, function (uncle, cb2) {
    var height = new BN(self.header.number);
    async.parallel([uncle.validate.bind(uncle, blockChain, height),
    // check to make sure the uncle is not already in the blockchain
    function (cb3) {
      blockChain.getDetails(uncle.hash(), function (err, blockInfo) {
        // TODO: remove uncles from BC
        if (blockInfo && blockInfo.isUncle) {
          cb3(err || 'uncle already included');
        } else {
          cb3();
        }
      });
    }], cb2);
  }, cb);
};

/**
 * Converts the block toJSON
 * @method toJSON
 * @param {Bool} labeled whether to create an labeled object or an array
 * @return {Object}
 */
Block.prototype.toJSON = function (labeled) {
  if (labeled) {
    var obj = {
      header: this.header.toJSON(true),
      transactions: [],
      uncleHeaders: []
    };

    this.transactions.forEach(function (tx) {
      obj.transactions.push(tx.toJSON(labeled));
    });

    this.uncleHeaders.forEach(function (uh) {
      obj.uncleHeaders.push(uh.toJSON());
    });
    return obj;
  } else {
    return ethUtil.baToJSON(this.raw);
  }
};

function arrayToString(array) {
  try {
    return array.reduce(function (str, err) {
      if (str) {
        str += ' ';
      }
      return str + err;
    });
  } catch (e) {
    return '';
  }
}

}).call(this,require("buffer").Buffer)
},{"./header":110,"async":25,"buffer":62,"ethereum-common":114,"ethereumjs-tx":117,"ethereumjs-util":120,"merkle-patricia-tree":194}],112:[function(require,module,exports){
module.exports=[
  {
    "ip": "52.16.188.185",
    "port": "30303",
    "id": "a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c"
  },
  {
    "ip": "54.94.239.50",
    "port": "30303",
    "id": "de471bccee3d042261d52e9bff31458daecc406142b401d4cd848f677479f73104b9fdeb090af9583d3391b7f10cb2ba9e26865dd5fca4fcdc0fb1e3b723c786"
  },
  {
    "ip": "52.74.57.123",
    "port": "30303",
    "id": "1118980bf48b0a3640bdba04e0fe78b1add18e1cd99bf22d53daac1fd9972ad650df52176e7c7d89d1114cfef2bc23a2959aa54998a46afcf7d91809f0855082"
  },
  {
    "ip": "5.1.83.226",
    "port": "30303",
    "id": "979b7fa28feeb35a4741660a16076f1943202cb72b6af70d327f053e248bab9ba81760f39d0701ef1d8f89cc1fbd2cacba0710a12cd5314d5e0c9021aa3637f9"
  }
]

},{}],113:[function(require,module,exports){
module.exports={
  "3282791d6fd713f1e94f4bfd565eaa78b3a0599d": "1337000000000000000000",
  "17961d633bcf20a7b029a7d94b7df4da2ec5427f": "229427000000000000000",
  "493a67fe23decc63b10dda75f3287695a81bd5ab": "880000000000000000000",
  "01fb8ec12425a04f813e46c54c05748ca6b29aa9": "259800000000000000000",
  "d2a030ac8952325f9e1db378a71485a24e1b07b2": "2000000000000000000000",
  "77a34907f305a54c85db09c363fde3c47e6ae21f": "985000000000000000000",
  "391a77405c09a72b5e8436237aaaf95d68da1709": "49082000000000000000",
  "00aada25ea2286709abb422d41923fd380cd04c7": "650100000000000000000",
  "acc46a2a555c74ded4a2bd094e821b97843b40c0": "1940000000000000000000",
  "de07fb5b7a464e3ba7fbe09e9acb271af5338c58": "50000000000000000000",
  "4c696be99f3a690440c3436a59a7d7e937d6ba0d": "3460000000000000000000",
  "fa33553285a973719a0d5f956ff861b2d89ed304": "20000000000000000000",
  "67cfda6e70bf7657d39059b59790e5145afdbe61": "646000000000000000000",
  "a321091d3018064279db399d2b2a88a6f440ae24": "3200000000000000000000",
  "fb3fa1ac08aba9cc3bf0fe9d483820688f65b410": "30000000000000000000000",
  "6715c14035fb57bb3d667f7b707498c41074b855": "700000000000000000000",
  "d4344f7d5cad65d17e5c2d0e7323943d6f62fe92": "267400000000000000000",
  "a3294626ec2984c43b43da4d5d8e4669b11d4b59": "1008000000000000000000",
  "656018584130db83ab0591a8128d9381666a8d0e": "63960000000000000000",
  "0fa010ce0c731d3b628e36b91f571300e49dbeab": "999800000000000000000",
  "3098b65db93ecacaf7353c48808390a223d57684": "449965000000000000000",
  "ae635bf73831119d2d29c0d04ff8f8d8d0a57a46": "1337000000000000000000",
  "0f7515ff0e808f695e0c20485ff96ed2f7b79310": "1000169000000000000000",
  "8b30c04098d7a7e6420c357ea7bfa49bac9a8a18": "8000200000000000000000",
  "64dba2d6615b8bd7571836dc75bc79d314f5ecee": "10000000000000000000000",
  "e7912d4cf4562c573ddc5b71e37310e378ef86c9": "394000000000000000000",
  "a4da34450d22ec0ffcede0004b02f7872ee0b73a": "93342000000000000000",
  "34437d1465640b136cb5841c3f934f9ba0b7097d": "173000000000000000000",
  "c652871d192422c6bc235fa063b44a7e1d43e385": "155000000000000000000",
  "a8a708e84f82db86a35502193b4c6ee9a76ebe8f": "1015200000000000000000",
  "5c3f567faff7bad1b5120022e8cbcaa82b4917b3": "2000000000000000000000",
  "dbc1d0ee2bab531140de137722cd36bdb4e47194": "200000000000000000000",
  "f59dab1bf8df11327e61f9b7a14b563a96ec3554": "6000000000000000000000",
  "456f8d746682b224679349064d1b368c7c05b176": "3700000000000000000000",
  "5f13154631466dcb1353c890932a7c97e0878e90": "6000000000000000000000",
  "f4b1626e24f30bcad9273c527fcc714b5d007b8f": "200000000000000000000",
  "a8db0b9b201453333c757f6ad9bcb555c02da93b": "2199970000000000000000",
  "a0fc7e53c5ebd27a2abdac45261f84ab3b51aefb": "3008250000000000000000",
  "1b636b7a496f044d7359596e353a104616436f6b": "360354000000000000000",
  "74bce9ec38362d6c94ccac26d5c0e13a8b3b1d40": "999954000000000000000",
  "9834682180b982d166badb9d9d1d9bbf016d87ee": "2000000000000000000000",
  "1e6e0153fc161bc05e656bbb144c7187bf4fe84d": "2000000000000000000000",
  "989c0ccff654da03aeb11af701054561d6297e1d": "4000000000000000000000",
  "78a1e254409fb1b55a7cb4dd8eba3b30c8bad9ef": "100000000000000000000",
  "9ef1896b007c32a15114fb89d73dbd47f9122b69": "4000000000000000000000",
  "33320dd90f2baa110dd334872a998f148426453c": "999972000000000000000",
  "e72e1d335cc29a96b9b1c02f003a16d971e90b9d": "1580000000000000000000",
  "0921605f99164e3bcc28f31caece78973182561d": "793744000000000000000",
  "fc00a420a36107dfd5f495128a5fe5abb2db0f34": "5960000000000000000000",
  "dfcbdf09454e1a5e4a40d3eef7c5cf1cd3de9486": "4000000000000000000000",
  "646e043d0597a664948fbb0dc15475a3a4f3a6ed": "20000000000000000000",
  "79aeb34566b974c35a5881dec020927da7df5d25": "2000000000000000000000",
  "dbadc61ed5f0460a7f18e51b2fb2614d9264a0e0": "40000000000000000000",
  "97b91efe7350c2d57e7e406bab18f3617bcde14a": "9999980000000000000000",
  "8398e07ebcb4f75ff2116de77c1c2a99f303a4cf": "500000000000000000000",
  "f02796295101674288c1d93467053d042219b794": "740000000000000000000",
  "f4ed848ec961739c2c7e352f435ba70a7cd5db38": "1970000000000000000000",
  "82485728d0e281563758c75ab27ed9e882a0002d": "147000000000000000000",
  "427ec668ac9404e895cc861511d1620a4912be98": "40000000000000000000000",
  "1bbc199e586790be87afedc849c04726745c5d7b": "4000000000000000000000",
  "10d945334ecde47beb9ca3816c173dfbbd0b5333": "1400000000000000000000",
  "1dcebcb7656df5dcaa3368a055d22f9ed6cdd940": "499800000000000000000",
  "2ac1f8d7bf721f3cfe74d20fea9b87a28aaa982c": "161000000000000000000",
  "0a47ad9059a249fc936b2662353da6905f75c2b9": "2000000000000000000000",
  "768498934e37e905f1d0e77b44b574bcf3ec4ae8": "20000000000000000000000",
  "f46b6b9c7cb552829c1d3dfd8ffb11aabae782f6": "21000000000000000000",
  "7aea25d42b2612286e99c53697c6bc4100e2dbbf": "2000000000000000000000",
  "af3615c789d0b1152ad4db25fe5dcf222804cf62": "1000000000000000000000",
  "92e6581e1da1f9b846e09347333dc818e2d2ac66": "3640000000000000000000",
  "240305727313d01e73542c775ff59d11cd35f819": "5931229000000000000000",
  "b95cfda8465ba9c2661b249fc3ab661bdfa35ff0": "318949000000000000000",
  "1b0d076817e8d68ee2df4e1da1c1142d198c4435": "1550000000000000000000",
  "93c2e64e5de5589ed25006e843196ee9b1cf0b3e": "1670000000000000000000",
  "0e2e504a2d1122b5a9feee5cb1451bf4c2ace87b": "3940000000000000000000",
  "22b96ab2cad55db100b53001f9e4db378104c807": "10000000000000000000000",
  "a927d48bb6cb814bc609cbcaa9151f5d459a27e1": "271600000000000000000",
  "5cbd8daf27ddf704cdd0d909a789ba36ed4f37b2": "13400000000000000000",
  "9adbd3bc7b0afc05d1d2eda49ff863939c48db46": "199955000000000000000",
  "ac7e03702723cb16ee27e22dd0b815dc2d5cae9f": "16000000000000000000000",
  "1e210e7047886daa52aaf70f4b991dac68e3025e": "200000000000000000000",
  "c98048687f2bfcc9bd90ed18736c57edd352b65d": "1000000000000000000000",
  "81c18c2a238ddc4cba230a072dd7dc101e620273": "1337000000000000000000",
  "cb3d766c983f192bcecac70f4ee03dd9ff714d51": "100000000000000000000",
  "44a63d18424587b9b307bfc3c364ae10cd04c713": "20000000000000000000",
  "4ab2d34f04834fbf7479649cab923d2c4725c553": "3520000000000000000000",
  "b834acf3015322c58382eeb2b79638906e88b6de": "24000000000000000000000",
  "7d551397f79a2988b064afd0efebee802c7721bc": "39400000000000000000000",
  "b537d36a70eeb8d3e5c80de815225c1158cb92c4": "1500000000000000000000",
  "805ce51297a0793b812067f017b3e7b2df9bb1f9": "100000000000000000000",
  "085ba65febe23eefc2c802666ab1262382cfc494": "400000000000000000000",
  "b1c0d08b36e184f9952a4037e3e53a667d070a4e": "1000000000000000000000",
  "83fe5a1b328bae440711beaf6aad6026eda6d220": "20000000000000000000000",
  "7fd679e5fb0da2a5d116194dcb508318edc580f3": "6560000000000000000000",
  "41ad369f758fef38a19aa3149379832c818ef2a0": "1000060000000000000000",
  "6d846dc12657e91af25008519c3e857f51707dd6": "4590000000000000000000",
  "c02d6eadeacf1b78b3ca85035c637bb1ce01f490": "4000000000000000000000",
  "826eb7cd7319b82dd07a1f3b409071d96e39677f": "1000000000000000000000",
  "4ac9905a4cb6ab1cfd62546ee5917300b87c4fde": "1015200000000000000000",
  "cf6e52e6b77480b1867efec6446d9fc3cc3577e8": "222010000000000000000",
  "2476b2bb751ce748e1a4c4ff7b230be0c15d2245": "4000000000000000000000",
  "1a505e62a74e87e577473e4f3afa16bedd3cfa52": "500000000000000000000",
  "21d02705f3f64905d80ed9147913ea8c7307d695": "1363740000000000000000",
  "7b1daf14891b8a1e1bd429d8b36b9a4aa1d9afbf": "500000000000000000000",
  "5338ef70eac9dd9af5a0503b5efad1039e67e725": "2674000000000000000000",
  "50ca86b5eb1d01874df8e5f34945d49c6c1ab848": "1000000000000000000000",
  "f3cc8bcb559465f81bfe583bd7ab0a2306453b9e": "20000000000000000000000",
  "5c323457e187761a8276e359b7b7af3f3b6e3df6": "10000000000000000000000",
  "4d82d7700c123bb919419bbaf046799c6b0e2c66": "20000000000000000000000",
  "8a66abbc2d30ce21a833b0db8e561d5105e0a72c": "699958000000000000000",
  "2ae53866fc2d14d572ab73b4a065a1188267f527": "8000000000000000000000",
  "9af5c9894c33e42c2c518e3ac670ea9505d1b53e": "18200000000000000000",
  "cba25c7a503cc8e0d04971ca05c762f9b762b48b": "500000000000000000000",
  "fda3042819af3e662900e1b92b4358eda6e92590": "118200000000000000000000",
  "9bd7c38a4210304a4d653edeff1b3ce45fce7843": "282000000000000000000",
  "edc22fb92c638e1e21ff5cf039daa6e734dafb29": "298000000000000000000",
  "a1f193a0592f1feb9fdfc90aa813784eb80471c9": "1400000000000000000000",
  "e97fde0b67716325cf0ecce8a191a3761b2c791d": "1004700000000000000000",
  "110237cf9117e767922fc4a1b78d7964da82df20": "3940000000000000000000",
  "e32f95766d57b5cd4b173289d6876f9e64558194": "100000000000000000000",
  "f2d59c8923759073d6f415aaf8eb065ff2f3b685": "7880000000000000000000",
  "c53d79f7cb9b70952fd30fce58d54b9f0b59f647": "5089200000000000000000",
  "9eb281c32719c40fdb3e216db0f37fbc73a026b7": "20000000000000000000",
  "2d6511fd7a3800b26854c7ec39c0dcb5f4c4e8e8": "399910000000000000000",
  "61ba87c77e9b596de7ba0e326fddfeec2163ef66": "200000000000000000000",
  "de1121829c9a08284087a43fbd2fc1142a3233b4": "1000000000000000000000",
  "22a25812ab56dcc423175ed1d8adacce33cd1810": "1850000000000000000000",
  "518cef27b10582b6d14f69483ddaa0dd3c87bb5c": "600000000000000000000",
  "59161749fedcf1c721f2202d13ade2abcf460b3d": "2000000000000000000000",
  "3e36c17253c11cf38974ed0db1b759160da63783": "7000000000000000000000",
  "cbfa76db04ce38fb205d37b8d377cf1380da0317": "1430000000000000000000",
  "a7e83772bc200f9006aa2a260dbaa8483dc52b30": "207730000000000000000",
  "e87eac6d602b4109c9671bf57b950c2cfdb99d55": "49932000000000000000",
  "9b06ad841dffbe4ccf46f1039fc386f3c321446e": "2000000000000000000000",
  "e0f903c1e48ac421ab48528f3d4a2648080fe043": "1015200000000000000000",
  "5d872b122e994ef27c71d7deb457bf65429eca6c": "7999973000000000000000",
  "f34083ecea385017aa40bdd35ef7effb4ce7762d": "400000000000000000000",
  "7f3709391f3fbeba3592d175c740e87a09541d02": "480000000000000000000",
  "888e94917083d152202b53163939869d271175b4": "4000000000000000000000",
  "bed4c8f006a27c1e5f7ce205de75f516bfb9f764": "16000000000000000000000",
  "b3a6bd41f9d9c3201e050b87198fbda399342210": "3622615000000000000000",
  "550aadae1221b07afea39fba2ed62e05e5b7b5f9": "20000000000000000000",
  "bcedc4267ccb89b31bb764d7211171008d94d44d": "200000000000000000000",
  "6229dcc203b1edccfdf06e87910c452a1f4d7a72": "32500000000000000000000",
  "94be3ae54f62d663b0d4cc9e1ea8fe9556ea9ebf": "23280000000000000000",
  "0e0c9d005ea016c295cd795cc9213e87febc33eb": "198000000000000000000",
  "55d057bcc04bd0f4af9642513aa5090bb3ff93fe": "1106680000000000000000",
  "ed9e030ca75cb1d29ea01d0d4cdfdccd3844b6e4": "30895000000000000000",
  "86c4ce06d9ac185bb148d96f7b7abe73f441006d": "10000000000000000000000",
  "2c04115c3e52961b0dc0b0bf31fba4546f5966fd": "200000000000000000000",
  "b959dce02e91d9db02b1bd8b7d17a9c41a97af09": "8000000000000000000000",
  "e01547ba42fcafaf93938becf7699f74290af74f": "2000000000000000000000",
  "c593d6e37d14b566643ac4135f243caa0787c182": "12000000000000000000000",
  "2c0ee134d8b36145b47beee7af8d2738dbda08e8": "201000000000000000000",
  "0ef54ac7264d2254abbb5f8b41adde875157db7c": "40000000000000000000",
  "0349634dc2a9e80c3f7721ee2b5046aeaaedfbb5": "4000000000000000000000",
  "873e49135c3391991060290aa7f6ccb8f85a78db": "20000000000000000000",
  "05236d4c90d065f9e3938358aaffd777b86aec49": "500000000000000000000",
  "d2abd84a181093e5e229136f42d835e8235de109": "100007000000000000000",
  "b56a780028039c81caf37b6775c620e786954764": "2000000000000000000000",
  "86df73bd377f2c09de63c45d67f283eaefa0f4ab": "1000000000000000000000",
  "7670b02f2c3cf8fd4f4730f3381a71ea431c33c7": "267400000000000000000",
  "24aa1151bb765fa3a89ca50eb6e1b1c706417fd4": "3100000000000000000000",
  "43227d65334e691cf231b4a4e1d339b95d598afb": "10000000000000000000000",
  "695550656cbf90b75d92ad9122d90d23ca68ca4d": "1000000000000000000000",
  "5281733473e00d87f11e9955e589b59f4ac28e7a": "660360000000000000000000",
  "99a96bf2242ea1b39ece6fcc0d18aed00c0179f3": "300000000000000000000",
  "b1cf94f8091505055f010ab4bac696e0ca0f67a1": "1580000000000000000000",
  "54391b4d176d476cea164e5fb535c69700cb2535": "100076000000000000000",
  "152f2bd229ddf3cb0fdaf455c183209c0e1e39a2": "2000000000000000000000",
  "affc99d5ebb4a84fe7788d97dce274b038240438": "5000000000000000000000",
  "23df8f48ee009256ea797e1fa369beebcf6bc663": "2302671000000000000000",
  "3a72d635aadeee4382349db98a1813a4cfeb3df1": "200000000000000000000000",
  "ce26f9a5305f8381094354dbfc92664e84f902b5": "230200000000000000000",
  "d283b8edb10a25528a4404de1c65e7410dbcaa67": "12000000000000000000000",
  "a7859fc07f756ea7dcebbccd42f05817582d973f": "10000000000000000000000",
  "b28181a458a440f1c6bb1de8400281a3148f4c35": "376000000000000000000",
  "27b1694eafa165ebd7cc7bc99e74814a951419dc": "800000000000000000000",
  "66cc8ab23c00d1b82acd7d73f38c99e0d05a4fa6": "100000000000000000000",
  "926082cb7eed4b1993ad245a477267e1c33cd568": "374300000000000000000",
  "4a47fc3e177f567a1e3893e000e36bba23520ab8": "2000000000000000000000",
  "594a76f06935388dde5e234696a0668bc20d2ddc": "2800000000000000000000",
  "e91fa0badaddb9a97e88d3f4db7c55d6bb7430fe": "376000000000000000000",
  "574de1b3f38d915846ae3718564a5ada20c2f3ed": "4000000000000000000000",
  "5816c2687777b6d7d2a2432d59a41fa059e3a406": "133700000000000000000000",
  "b50955aa6e341571986608bdc891c2139f540cdf": "1970000000000000000000",
  "6d44974a31d187eda16ddd47b9c7ec5002d61fbe": "940000000000000000000",
  "80abec5aa36e5c9d098f1b942881bd5acac6963d": "2000000000000000000000",
  "294f494b3f2e143c2ffc9738cbfd9501850b874e": "2240000000000000000000",
  "bca3ffd4683fba0ad3bbc90734b611da9cfb457e": "200000000000000000000",
  "5992624c54cdec60a5ae938033af8be0c50cbb0a": "3621678000000000000000",
  "6560941328ff587cbc56c38c78238a7bb5f442f6": "744900000000000000000",
  "74b7e0228baed65957aebb4d916d333aae164f0e": "2000000000000000000000",
  "8516fcaf77c893970fcd1a958ba9a00e49044019": "196279000000000000000",
  "b992a967308c02b98af91ee760fd3b6b4824ab0e": "2000000000000000000000",
  "30bb4357cd6910c86d2238bf727cbe8156680e62": "100014000000000000000",
  "b8cc0f060aad92d4eb8b36b3b95ce9e90eb383d7": "150000000000000000000000",
  "28d4ebf41e3d3c451e943bdd7e1f175fae932a3d": "6000000000000000000000",
  "8c83d424a3cf24d51f01923dd54a18d6b6fede7b": "4000000000000000000000",
  "7efc90766a00bc52372cac97fabd8a3c831f8ecd": "158000000000000000000",
  "7c2b9603884a4f2e464eceb97d17938d828bc02c": "3000000000000000000000",
  "9d250ae4f110d71cafc7b0adb52e8d9acb6679b8": "9840000000000000000000",
  "61b3df2e9e9fd968131f1e88f0a0eb5bd765464d": "4000000000000000000000",
  "9ae13bd882f2576575921a94974cbea861ba0d35": "3160000000000000000000",
  "3d09688d93ad07f3abe68c722723cd680990435e": "29999948000000000000000",
  "5e58e255fc19870a04305ff2a04631f2ff294bb1": "17600000000000000000",
  "bcaed0acb6a76f113f7c613555a2c3b0f5bf34a5": "193600000000000000000",
  "159adce27aa10b47236429a34a5ac42cad5b6416": "31867951000000000000000",
  "e834c64318205ca7dd4a21abcb08266cb21ff02c": "999999000000000000000",
  "7b6a84718dd86e63338429ac811d7c8a860f21f1": "1790000000000000000000",
  "2118c116ab0cdf6fd11d54a4309307b477c3fc0f": "10000000000000000000000",
  "34a901a69f036bcf9f7843c0ba01b426e8c3dc2b": "4000000000000000000000",
  "c7d44fe32c7f8cd5f1a97427b6cd3afc9e45023e": "1580000000000000000000",
  "c6045b3c350b4ce9ca0c6b754fb41a69b97e9900": "925000000000000000000",
  "cf5a6f9df75579c644f794711215b30d77a0ce40": "2000000000000000000000",
  "e2904b1aefa056398b6234cb35811288d736db67": "40000000000000000000",
  "7101bd799e411cde14bdfac25b067ac890eab8e8": "1450054000000000000000",
  "cc45fb3a555bad807b388a0357c855205f7c75e8": "865000000000000000000",
  "ff0c3c7798e8733dd2668152891bab80a8be955c": "80220000000000000000",
  "3536453322c1466cb905af5c335ca8db74bff1e6": "447000000000000000000",
  "08cac8952641d8fc526ec1ab4f2df826a5e7710f": "300000000000000000000",
  "0d8aab8f74ea862cdf766805009d3f3e42d8d00b": "5820000000000000000000",
  "8908760cd39b9c1e8184e6a752ee888e3f0b7045": "6000000000000000000000",
  "8156360bbd370961ceca6b6691d75006ad204cf2": "40000000000000000000000",
  "a304588f0d850cd8d38f76e9e83c1bf63e333ede": "39800000000000000000",
  "14c63ba2dcb1dd4df33ddab11c4f0007fa96a62d": "15500000000000000000000",
  "a009bf076f1ba3fa57d2a7217218bed5565a7a7a": "1000000000000000000000",
  "1c89060f987c518fa079ec2c0a5ebfa30f5d20f7": "38000000000000000000000",
  "8895eb726226edc3f78cc6a515077b3296fdb95e": "3940000000000000000000",
  "7919e7627f9b7d54ea3b14bb4dd4649f4f39dee0": "1670000000000000000000",
  "b3c65b845aba6cd816fbaae983e0e46c82aa8622": "1000000000000000000000",
  "eff51d72adfae143edf3a42b1aec55a2ccdd0b90": "300000000000000000000",
  "05bb64a916be66f460f5e3b64332110d209e19ae": "4200000000000000000000",
  "d5b117ec116eb846418961eb7edb629cd0dd697f": "3000000000000000000000",
  "05e97b09492cd68f63b12b892ed1d11d152c0eca": "1015200000000000000000",
  "84cc7878da605fdb019fab9b4ccfc157709cdda5": "1336922000000000000000",
  "79cac6494f11ef2798748cb53285bd8e22f97cda": "2000000000000000000000",
  "bd5a8c94bd8be6470644f70c8f8a33a8a55c6341": "200000000000000000000",
  "b119e79aa9b916526581cbf521ef474ae84dcff4": "1470700000000000000000",
  "aff1045adf27a1aa329461b24de1bae9948a698b": "33400000000000000000",
  "4398628ea6632d393e929cbd928464c568aa4a0c": "1400000000000000000000",
  "99997668f7c1a4ff9e31f9977ae3224bcb887a85": "291200000000000000000",
  "bc0e8745c3a549445c2be900f52300804ab56289": "33104697000000000000000",
  "e5bab4f0afd8a9d1a381b45761aa18f3d3cce105": "1508010000000000000000",
  "be60037e90714a4b917e61f193d834906703b13a": "1700000000000000000000",
  "8ed4284c0f47449c15b8d9b3245de8beb6ce80bf": "800000000000000000000",
  "333ad1596401e05aea2d36ca47318ef4cd2cb3df": "2910000000000000000000",
  "22db559f2c3c1475a2e6ffe83a5979599196a7fa": "1000000000000000000000",
  "fdf449f108c6fb4f5a2b081eed7e45e6919e4d25": "2000000000000000000000",
  "0be1bcb90343fae5303173f461bd914a4839056c": "6000000000000000000000",
  "b981ad5e6b7793a23fc6c1e8692eb2965d18d0da": "9999924000000000000000",
  "c75d2259306aec7df022768c69899a652185dbc4": "4000000000000000000000",
  "6c2e9be6d4ab450fd12531f33f028c614674f197": "3580000000000000000000",
  "6dcc7e64fcafcbc2dc6c0e5e662cb347bffcd702": "20000000000000000000000",
  "aabdb35c1514984a039213793f3345a168e81ff1": "309760000000000000000",
  "d315deea1d8c1271f9d1311263ab47c007afb6f5": "69760000000000000000",
  "4faf90b76ecfb9631bf9022176032d8b2c207009": "1000032000000000000000",
  "3e7a966b5dc357ffb07e9fe067c45791fd8e3049": "59100000000000000000",
  "2e64a8d71111a22f4c5de1e039b336f68d398a7c": "2000000000000000000000",
  "181fbba852a7f50178b1c7f03ed9e58d54162929": "666000000000000000000",
  "4f7330096f79ed264ee0127f5d30d2f73c52b3d8": "499970000000000000000",
  "a8a8dbdd1a85d1beee2569e91ccc4d09ae7f6ea1": "5800000000000000000000",
  "1f9c3268458da301a2be5ab08257f77bb5a98aa4": "200000000000000000000",
  "fc372ff6927cb396d9cf29803500110da632bc52": "2000000000000000000000",
  "4fa554ab955c249217386a4d3263bbf72895434e": "19982000000000000000",
  "2a59e47ea5d8f0e7c028a3e8e093a49c1b50b9a3": "2000000000000000000000",
  "5e32c72191b8392c55f510d8e3326e3a60501d62": "44000000000000000000000",
  "1dfaee077212f1beaf0e6f2f1840537ae154ad86": "1000000000000000000000",
  "7eaba035e2af3793fd74674b102540cf190addb9": "1273000000000000000000",
  "d62edb96fce2969aaf6c545e967cf1c0bc805205": "85705000000000000000",
  "220dc68df019b6b0ccbffb784b5a5ab4b15d4060": "3940000000000000000000",
  "45bb829652d8bfb58b8527f0ecb621c29e212ec3": "2000000000000000000000",
  "79b120eb8806732321288f675a27a9225f1cd2eb": "2465000000000000000000",
  "740af1eefd3365d78ba7b12cb1a673e06a077246": "19700000000000000000000",
  "0f042c9c2fb18766f836bb59f735f27dc329fe3c": "10000000000000000000000",
  "6dda5f788a6c688ddf921fa3852eb6d6c6c62966": "40000000000000000000",
  "96ad579bbfa8db8ebec9d286a72e4661eed8e356": "1070750000000000000000",
  "0c2073ba44d3ddbdb639c04e191039a71716237f": "1430000000000000000000",
  "1a3520453582c718a21c42375bc50773255253e1": "790000000000000000000",
  "efcaae9ff64d2cd95b5249dcffe7faa0a0c0e44d": "401100000000000000000",
  "0a3de155d5ecd8e81c1ff9bbf0378301f8d4c623": "4000000000000000000000",
  "80f07ac09e7b2c3c0a3d1e9413a544c73a41becb": "20000000000000000000",
  "c3631c7698b6c5111989bf452727b3f9395a6dea": "10683500000000000000000",
  "4cc22c9bc9ad05d875a397dbe847ed221c920c67": "2000000000000000000000",
  "1a987e3f83de75a42f1bde7c997c19217b4a5f24": "2000000000000000000000",
  "5b2b64e9c058e382a8b299224eecaa16e09c8d92": "161000000000000000000",
  "86caafacf32aa0317c032ac36babed974791dc03": "40000000000000000000000",
  "1cd1f0a314cbb200de0a0cb1ef97e920709d97c2": "2000000000000000000000",
  "7d980f4b566bb045517e4c14c87750de9346744b": "1337000000000000000000",
  "8b5f29cc2faa262cdef30ef554f50eb488146eac": "5818250000000000000000",
  "5153a0c3c8912881bf1c3501bf64b45649e48222": "4000000000000000000000",
  "d21a7341eb84fd151054e5e387bb25d36e499c09": "14000000000000000000000",
  "9560e8ac6718a6a1cdcff189d603c9063e413da6": "4000000000000000000000",
  "e49ba0cd96816c4607773cf8a5970bb5bc16a1e6": "1670000000000000000000",
  "b8ac117d9f0dba80901445823c4c9d4fa3fedc6e": "15759015000000000000000",
  "af67fd3e127fd9dc36eb3fcd6a80c7be4f7532b2": "1670000000000000000000",
  "b43c27f7a0a122084b98f483922541c8836cee2c": "715000000000000000000",
  "4d9279962029a8bd45639737e98b511eff074c21": "1337000000000000000000",
  "c667441e7f29799aba616451d53b3f489f9e0f48": "13920000000000000000000",
  "275875ff4fbb0cf3a430213127487f7608d04cba": "500080000000000000000",
  "9a953b5bcc709379fcb559d7b916afdaa50cadcc": "100000000000000000000",
  "7ea791ebab0445a00efdfc4e4a8e9a7e7565136d": "18200000000000000000",
  "6ffe5cf82cc9ea5e36cad7c2974ce7249f3749e6": "1940000000000000000000",
  "f1b4ecc63525f7432c3d834ffe2b970fbeb87212": "3000064000000000000000",
  "6b72a8f061cfe6996ad447d3c72c28c0c08ab3a7": "4271316000000000000000",
  "bba3c68004248e489573abb2743677066b24c8a7": "2000000000000000000000",
  "b7c0d0cc0b4d342d4062bac624ccc3c70cc6da3f": "4000000000000000000000",
  "fe98c664c3e447a95e69bd582171b7176ea2a685": "4000000000000000000000",
  "ce71086d4c602554b82dcbfce88d20634d53cc4d": "43250000000000000000000",
  "1c601993789207f965bb865cbb4cd657cce76fc0": "98294000000000000000",
  "476b5599089a3fb6f29c6c72e49b2e4740ea808d": "2800000000000000000000",
  "3439998b247cb4bf8bc80a6d2b3527f1dfe9a6d2": "140000000000000000000",
  "c4f7d2e2e22084c44f70feaab6c32105f3da376f": "1970000000000000000000",
  "c1eba5684aa1b24cba63150263b7a9131aeec28d": "20000000000000000000",
  "94ad4bad824bd0eb9ea49c58cebcc0ff5e08346b": "1940000000000000000000",
  "ded877378407b94e781c4ef4af7cfc5bc220b516": "372500000000000000000",
  "699c9ee47195511f35f862ca4c22fd35ae8ffbf4": "80000000000000000000",
  "e3a89a1927cc4e2d43fbcda1e414d324a7d9e057": "205500000000000000000",
  "4d93696fa24859f5d2939aebfa54b4b51ae1dccc": "19100000000000000000",
  "0af65f14784e55a6f95667fd73252a1c94072d2a": "192987000000000000000",
  "5b70c49cc98b3df3fbe2b1597f5c1b6347a388b7": "970000000000000000000",
  "426f78f70db259ac8534145b2934f4ef1098b5d8": "360000000000000000000",
  "58b8ae8f63ef35ed0762f0b6233d4ac14e64b64d": "2000000000000000000000",
  "8eae29435598ba8f1c93428cdb3e2b4d31078e00": "2000000000000000000000",
  "17fd9b551a98cb61c2e07fbf41d3e8c9a530cba5": "26989000000000000000",
  "ab3e78294ba886a0cfd5d3487fb3a3078d338d6e": "1970000000000000000000",
  "bdf6e68c0cd7584080e847d72cbb23aad46aeb1d": "1970000000000000000000",
  "f989346772995ec1906faffeba2a7fe7de9c6bab": "6685000000000000000000",
  "dc5f5ad663a6f263327d64cac9cb133d2c960597": "2000000000000000000000",
  "68fe1357218d095849cd579842c4aa02ff888d93": "2000000000000000000000",
  "e09c68e61998d9c81b14e4ee802ba7adf6d74cdb": "4000000000000000000000",
  "890fe11f3c24db8732d6c2e772e2297c7e65f139": "62980000000000000000000",
  "a76929890a7b47fb859196016c6fdd8289ceb755": "5000000000000000000000",
  "2dc79d6e7f55bce2e2d0c02ad07ceca8bb529354": "1580000000000000000000",
  "19687daa39c368139b6e7be60dc1753a9f0cbea3": "8000000000000000000000",
  "c69be440134d6280980144a9f64d84748a37f349": "715000000000000000000",
  "3d8d0723721e73a6c0d860aa0557abd14c1ee362": "5000000000000000000000",
  "2b241f037337eb4acc61849bd272ac133f7cdf4b": "378000000000000000000000",
  "24b95ebef79500baa0eda72e77f877415df75c33": "910000000000000000000",
  "106ed5c719b5261477890425ae7551dc59bd255c": "11979600000000000000000",
  "5b2e2f1618552eab0db98add55637c2951f1fb19": "12000000000000000000000",
  "403145cb4ae7489fcc90cd985c6dc782b3cc4e44": "5999800000000000000000",
  "e8be24f289443ee473bc76822f55098d89b91cc5": "2000000000000000000000",
  "f6bc37b1d2a3788d589b6de212dc1713b2f6e78e": "5000000000000000000000",
  "67fc527dce1785f0fb8bc7e518b1c669f7ecdfb5": "240000000000000000000",
  "6580b1bc94390f04b397bd73e95d96ef11eaf3a8": "20000000000000000000",
  "98bf4af3810b842387db70c14d46099626003d10": "4000000000000000000000",
  "17993d312aa1106957868f6a55a5e8f12f77c843": "450065000000000000000",
  "0729b4b47c09eb16158464c8aa7fd9690b438839": "1999800000000000000000",
  "ae70e69d2c4a0af818807b1a2705f79fd0b5dbc4": "985000000000000000000",
  "38b50146e71916a5448de12a4d742135dcf39833": "32200000000000000000000",
  "38439aaa24e3636f3a18e020ea1da7e145160d86": "2600000000000000000000",
  "54b4429b182f0377be7e626939c5db6440f75d7a": "1970000000000000000000",
  "7179726f5c71ae1b6d16a68428174e6b34b23646": "7353500000000000000000",
  "c2ee91d3ef58c9d1a589844ea1ae3125d6c5ba69": "970000000000000000000",
  "912304118b80473d9e9fe3ee458fbe610ffda2bb": "200000000000000000000",
  "3308b03466c27a17dfe1aafceb81e16d2934566f": "17000000000000000000000",
  "10346414bec6d3dcc44e50e54d54c2b8c3734e3e": "4000000000000000000000",
  "4fee50c5f988206b09a573469fb1d0b42ebb6dce": "2009400000000000000000",
  "9ece1400800936c7c6485fcdd3626017d09afbf6": "310000000000000000000",
  "ddf3ad76353810be6a89d731b787f6f17188612b": "20000000000000000000000",
  "72402300e81d146c2e644e2bbda1da163ca3fb56": "7000000000000000000000",
  "bb4b4a4b548070ff41432c9e08a0ca6fa7bc9f76": "850000000000000000000",
  "c3dd58903886303b928625257ae1a013d71ae216": "2000000000000000000000",
  "ca6c818befd251361e02744068be99d8aa60b84a": "6000000000000000000000",
  "b8d2ddc66f308c0158ae3ccb7b869f7d199d7b32": "844800000000000000000",
  "8e486a0442d171c8605be348fee57eb5085eff0d": "4000000000000000000000",
  "a807104f2703d679f8deafc442befe849e42950b": "2000000000000000000000",
  "bb61a04bffd57c10470d45c39103f64650347616": "1000000000000000000000",
  "d1c45954a62b911ad701ff2e90131e8ceb89c95c": "1394000000000000000000",
  "5e65458be964ae449f71773704979766f8898761": "528600000000000000000",
  "f9b37825f03073d31e249378c30c795c33f83af2": "200152000000000000000",
  "e309974ce39d60aadf2e69673251bf0e04760a10": "254030000000000000000",
  "d541ac187ad7e090522de6da3213e9a7f4439673": "2000000000000000000000",
  "f33efc6397aa65fb53a8f07a0f893aae30e8bcee": "2304850000000000000000",
  "d2f1998e1cb1580cec4f6c047dcd3dcec54cf73c": "200000000000000000000",
  "0ed76c2c3b5d50ff8fb50b3eeacd681590be1c2d": "100000000000000000000",
  "637d67d87f586f0a5a479e20ee13ea310a10b647": "48300000000000000000000",
  "1a5ee533acbfb3a2d76d5b685277b796c56a052b": "2000000000000000000000",
  "323fca5ed77f699f9d9930f5ceeff8e56f59f03c": "1337000000000000000000",
  "a5fe2ce97f0e8c3856be0de5f4dcb2ce5d389a16": "22892000000000000000",
  "93258255b37c7f58f4b10673a932dd3afd90f4f2": "1000000000000000000000",
  "950fe9c6cad50c18f11a9ed9c45740a6180612d0": "8000000000000000000000",
  "ee31167f9cc93b3c6465609d79db0cde90e8484c": "2000000000000000000000",
  "6ebb5e6957aa821ef659b6018a393a504cae4450": "2000000000000000000000",
  "be305a796e33bbf7f9aeae6512959066efda1010": "10880000000000000000000",
  "537f9d4d31ef70839d84b0d9cdb72b9afedbdf35": "70000000000000000000000",
  "fe9e1197d7974a7648dcc7a03112a88edbc9045d": "4925000000000000000000",
  "99f77f998b20e0bcdcd9fc838641526cf25918ef": "1790000000000000000000",
  "76ffc157ad6bf8d56d9a1a7fddbc0fea010aabf4": "1000000000000000000000",
  "defe9141f4704599159d7b223de42bffd80496b3": "100000000000000000000",
  "7b1bf53a9cbe83a7dea434579fe72aac8d2a0cd0": "199800000000000000000",
  "23ccc3c6acd85c2e460c4ffdd82bc75dc849ea14": "4000000000000000000000",
  "9f86a066edb61fcb5856de93b75c8c791864b97b": "2000000000000000000000",
  "871b8a8b51dea1989a5921f13ec1a955a515ad47": "8000000000000000000000",
  "4efcd9c79fb4334ca6247b0a33bd9cc33208e272": "1337000000000000000000",
  "35ac1d3ed7464fa3db14e7729213ceaa378c095e": "1520000000000000000000",
  "c69d663c8d60908391c8d236191533fdf7775613": "485000000000000000000",
  "c2ed5ffdd1add855a2692fe062b5d618742360d4": "1200000000000000000000",
  "454f0141d721d33cbdc41018bd01119aa4784818": "6000000000000000000000",
  "6c8687e3417710bb8a93559021a1469e6a86bc77": "11126675000000000000000",
  "ec5b198a00cfb55a97b5d53644cffa8a04d2ab45": "2000000000000000000000",
  "cd59f3dde77e09940befb6ee58031965cae7a336": "10000000000000000000000",
  "8eebec1a62c08b05a7d1d59180af9ff0d18e3f36": "500000000000000000000",
  "92a971a739799f8cb48ea8475d72b2d2474172e6": "3940000000000000000000",
  "bed4649df646e2819229032d8868556fe1e053d3": "18200000000000000000",
  "c50fe415a641b0856c4e75bf960515441afa358d": "2000000000000000000000",
  "91f516146cda20281719978060c6be4149067c88": "2000000000000000000000",
  "54a1370116fe22099e015d07cd2669dd291cc9d1": "20000000000000000000",
  "80c04efd310f440483c73f744b5b9e64599ce3ec": "1200000000000000000000",
  "a8914c95b560ec13f140577338c32bcbb77d3a7a": "180000000000000000000",
  "e3c812737ac606baf7522ad817428a36050e7a34": "1940000000000000000000",
  "6d1456fff0104ee844a3314737843338d24cd66c": "141840000000000000000",
  "0e6ece99111cad1961c748ed3df51edd69d2a3b1": "100000000000000000000000",
  "019d709579ff4bc09fdcdde431dc1447d2c260bc": "20000000000000000000",
  "ebff84bbef423071e604c361bba677f5593def4e": "10000000000000000000000",
  "e10c540088113fa6ec00b4b2c8824f8796e96ec4": "236400000000000000000000",
  "e03220c697bcd28f26ef0b74404a8beb06b2ba7b": "8000000000000000000000",
  "e69a6cdb3a8a7db8e1f30c8b84cd73bae02bc0f8": "16915503000000000000000",
  "e5fb31a5caee6a96de393bdbf89fbe65fe125bb3": "1000000000000000000000",
  "030fb3401f72bd3418b7d1da75bf8c519dd707dc": "3000000000000000000000",
  "1c751e7f24df9d94a637a5dedeffc58277b5db19": "3220000000000000000000",
  "bded7e07d0711e684de65ac8b2ab57c55c1a8645": "591000000000000000000",
  "dd7ff441ba6ffe3671f3c0dabbff1823a5043370": "2000000000000000000000",
  "b55474ba58f0f2f40e6cbabed4ea176e011fcad6": "1970000000000000000000",
  "b92427ad7578b4bfe20a9f63a7c5506d5ca12dc8": "2000000000000000000000",
  "91a8baaed012ea2e63803b593d0d0c2aab4c5b0a": "1500000000000000000000",
  "a97e072144499fe5ebbd354acc7e7efb58985d08": "2674000000000000000000",
  "75c2ffa1bef54919d2097f7a142d2e14f9b04a58": "2673866000000000000000",
  "53faf165be031ec18330d9fce5bd1281a1af08db": "140000000000000000000",
  "055ab658c6f0ed4f875ed6742e4bc7292d1abbf0": "83500000000000000000",
  "6f18ec767e320508195f1374500e3f2e125689ff": "1000000000000000000000",
  "90fc537b210658660a83baa9ac4a8402f65746a8": "1880000000000000000000",
  "34664d220fa7f37958024a3332d684bcc6d4c8bd": "10000000000000000000000",
  "15acb61568ec4af7ea2819386181b116a6c5ee70": "31000000000000000000000",
  "69d98f38a3ba3dbc01fa5c2c1427d862832f2f70": "100000000000000000000000",
  "ece1152682b7598fe2d1e21ec15533885435ac85": "4000000000000000000000",
  "f618d9b104411480a863e623fc55232d1a4f48aa": "265793000000000000000",
  "f9debaecb5f339beea4894e5204bfa340d067f25": "1665000000000000000000",
  "5e731b55ced452bb3f3fe871ddc3ed7ee6510a8f": "3000000000000000000000",
  "67df242d240dd4b8071d72f8fcf35bb3809d71e8": "4000000000000000000000",
  "c4cf930e5d116ab8d13b9f9a7ec4ab5003a6abde": "320000000000000000000",
  "01a25a5f5af0169b30864c3be4d7563ccd44f09e": "1430000000000000000000",
  "7f6efb6f4318876d2ee624e27595f44446f68e93": "1550000000000000000000",
  "82249fe70f61c6b16f19a324840fdc020231bb02": "9504014000000000000000",
  "205237c4be146fba99478f3a7dad17b09138da95": "2000000000000000000000",
  "fd1fb5a89a89a721b8797068fbc47f3e9d52e149": "236400000000000000000",
  "e47fbaed99fc209962604ebd20e240f74f4591f1": "2000000000000000000000",
  "a24c3ab62181e9a15b78c4621e4c7c588127be26": "162410000000000000000",
  "b6cd7432d5161be79768ad45de3e447a07982063": "4000000000000000000000",
  "32a70691255c9fc9791a4f75c8b81f388e0a2503": "985000000000000000000",
  "562f16d79abfcec3943e34b20f05f97bdfcda605": "4000000000000000000000",
  "dbc66965e426ff1ac87ad6eb78c1d95271158f9f": "18200000000000000000",
  "7e87863ec43a481df04d017762edcb5caa629b5a": "39400000000000000000",
  "587d6849b168f6c3332b7abae7eb6c42c37f48bf": "880000000000000000000",
  "721158be5762b119cc9b2035e88ee4ee78f29b82": "10000000000000000000000",
  "84b91e2e2902d05e2b591b41083bd7beb2d52c74": "9848621000000000000000",
  "632cecb10cfcf38ec986b43b8770adece9200221": "20000000000000000000",
  "c34e3ba1322ed0571183a24f94204ee49c186641": "58200000000000000000",
  "ae78bb849139a6ba38ae92a09a69601cc4cb62d1": "500000000000000000000",
  "5ce0b6862cce9162e87e0849e387cb5df4f9118c": "1670000000000000000000",
  "f52c0a7877345fe0c233bb0f04fd6ab18b6f14ba": "400440000000000000000000",
  "e016dc138e25815b90be3fe9eee8ffb2e105624f": "500000000000000000000",
  "5789d01db12c816ac268e9af19dc0dd6d99f15df": "200000000000000000000",
  "d8b77db9b81bbe90427b62f702b201ffc29ff618": "930200000000000000000",
  "5dff811dad819ece3ba602c383fb5dc64c0a3a48": "186000000000000000000",
  "af3087e62e04bf900d5a54dc3e946274da92423b": "20000000000000000000",
  "8c1023fde1574db8bb54f1739670157ca47da652": "6969382000000000000000",
  "bb3b010b18e6e2be1135871026b7ba15ea0fde24": "10044000000000000000000",
  "cabdaf354f4720a466a764a528d60e3a482a393c": "1000000000000000000000",
  "94bbc67d13f89ebca594be94bc5170920c30d9f3": "80200000000000000000",
  "3275496fd4dd8931fd69fb0a0b04c4d1ff879ef5": "446000000000000000000",
  "281250a29121270a4ee5d78d24feafe82c70ba3a": "1000000000000000000000",
  "590ccb5911cf78f6f622f535c474375f4a12cfcf": "20000000000000000000000",
  "542e8096bafb88162606002e8c8a3ed19814aeac": "2000000000000000000000",
  "a65426cff378ed23253513b19f496de45fa7e18f": "7200000000000000000000",
  "4aa693b122f314482a47b11cc77c68a497876162": "1970000000000000000000",
  "d9b783d31d32adc50fa3eacaa15d92b568eaeb47": "34010000000000000000000",
  "068e655766b944fb263619658740b850c94afa31": "35200000000000000000",
  "9e23c5e4b782b00a5fadf1aead87dacf5b0367a1": "20000000000000000000",
  "bf17f397f8f46f1bae45d187148c06eeb959fa4d": "1001440000000000000000",
  "8578e10212ca14ff0732a8241e37467db85632a9": "6000000000000000000000",
  "2cb5495a505336c2465410d1cae095b8e1ba5cdd": "20000000000000000000000",
  "695b0f5242753701b264a67071a2dc880836b8db": "16400000000000000000",
  "f2edde37f9a8c39ddea24d79f4015757d06bf786": "100000000000000000000000",
  "480f31b989311e4124c6a7465f5a44094d36f9d0": "1025000000000000000000",
  "cf157612764e0fd696c8cb5fba85df4c0ddc3cb0": "30000000000000000000000",
  "27521deb3b6ef1416ea4c781a2e5d7b36ee81c61": "2000000000000000000000",
  "6efd90b535e00bbd889fda7e9c3184f879a151db": "10100000000000000000000",
  "b635a4bc71fb28fdd5d2c322983a56c284426e69": "170000000000000000000",
  "a17c9e4323069518189d5207a0728dcb92306a3f": "1000000000000000000000",
  "6af940f63ec9b8d876272aca96fef65cdacecdea": "3000000000000000000000",
  "469358709332c82b887e20bcddd0220f8edba7d0": "17300000000000000000000",
  "a257ad594bd88328a7d90fc0a907df95eecae316": "520510000000000000000",
  "6f051666cb4f7bd2b1907221b829b555d7a3db74": "1760000000000000000000",
  "46bfc5b207eb2013e2e60f775fecd71810c5990c": "1550000000000000000000",
  "62b9081e7710345e38e02e16449ace1b85bcfc4e": "910000000000000000000",
  "bc73f7b1ca3b773b34249ada2e2c8a9274cc17c2": "2000000000000000000000",
  "1adaf4abfa867db17f99af6abebf707a3cf55df6": "6000000000000000000000",
  "8d629c20608135491b5013f1002586a0383130e5": "1370000000000000000000",
  "38e46de4453c38e941e7930f43304f94bb7b2be8": "2005500000000000000000",
  "3485f621256433b98a4200dad857efe55937ec98": "2000000000000000000000",
  "775c10c93e0db7205b2643458233c64fc33fd75b": "2000000000000000000000",
  "7c4401ae98f12ef6de39ae24cf9fc51f80eba16b": "200000000000000000000",
  "17b807afa3ddd647e723542e7b52fee39527f306": "400010000000000000000",
  "0ab366e6e7d5abbce6b44a438d69a1cabb90d133": "320000000000000000000",
  "194ffe78bbf5d20dd18a1f01da552e00b7b11db1": "7000000000000000000000",
  "c45d47ab0c9aa98a5bd62d16223ea2471b121ca4": "593640000000000000000",
  "2487c3c4be86a2723d917c06b458550170c3edba": "1000000000000000000000",
  "ec4d08aa2e47496dca87225de33f2b40a8a5b36f": "158000000000000000000",
  "aaa8defe11e3613f11067fb983625a08995a8dfc": "200000000000000000000",
  "50bb67c8b8d8bd0f63c4760904f2d333f400aace": "2000000000000000000000",
  "1227e10a4dbf9caca31b1780239f557615fc35c1": "200000000000000000000",
  "44a8989e32308121f72466978db395d1f76c3a4b": "7236900000000000000000",
  "59569a21d28fba4bda37753405a081f2063da150": "4000000000000000000000",
  "c3756bcdcc7eec74ed896adfc335275930266e08": "6000000000000000000000",
  "ce3a61f0461b00935e85fa1ead82c45e5a64d488": "500000000000000000000",
  "012f396a2b5eb83559bac515e5210df2c8c362ba": "200000000000000000000",
  "93bc7d9a4abd44c8bbb8fe8ba804c61ad8d6576c": "3999922000000000000000",
  "e20bb9f3966419e14bbbaaaa6789e92496cfa479": "3465116000000000000000",
  "9eef442d291a447d74c5d253c49ef324eac1d8f0": "3420000000000000000000",
  "db6c2a73dac7424ab0d031b66761122566c01043": "3000000000000000000000",
  "704d243c2978e46c2c86adbecd246e3b295ff633": "2012000000000000000000",
  "d2ff672016f63b2f85398f4a6fedbb60a50d3cce": "342500000000000000000",
  "d2051cb3cb6704f0548cc890ab0a19db3415b42a": "334000000000000000000",
  "1111e5dbf45e6f906d62866f1708101788ddd571": "1300200000000000000000",
  "6a686bf220b593deb9b7324615fb9144ded3f39d": "1460000000000000000000",
  "911feea61fe0ed50c5b9e5a0d66071399d28bdc6": "60000000000000000000",
  "3881defae1c07b3ce04c78abe26b0cdc8d73f010": "200000000000000000000",
  "ea94f32808a2ef8a9bf0861d1d2404f7b7be258a": "20000000000000000000",
  "2eef6b1417d7b10ecfc19b123a8a89e73e526c58": "600000000000000000000",
  "dd8af9e7765223f4446f44d3d509819a3d3db411": "10000000000000000000000",
  "2efc4c647dac6acac35577ad221758fef6616faa": "8000000000000000000000",
  "1547b9bf7ad66274f3413827231ba405ee8c88c1": "17300000000000000000000",
  "250a40cef3202397f240469548beb5626af4f23c": "92500000000000000000",
  "c175be3194e669422d15fee81eb9f2c56c67d9c9": "200000000000000000000",
  "c9e02608066828848aeb28c73672a12925181f4d": "500038000000000000000",
  "8229ceb9f0d70839498d44e6abed93c5ca059f5d": "123300000000000000000000",
  "39f198331e4b21c1b760a3155f4ab2fe00a74619": "2000000000000000000000",
  "3ffcb870d4023d255d5167d8a507cefc366b68ba": "649400000000000000000",
  "00dae27b350bae20c5652124af5d8b5cba001ec1": "40000000000000000000",
  "fc5500825105cf712a318a5e9c3bfc69c89d0c12": "4000000000000000000000",
  "1ed8bb3f06778b039e9961d81cb71a73e6787c8e": "2000000000000000000000",
  "530ffac3bc3412e2ec0ea47b7981c770f5bb2f35": "133700000000000000000",
  "5f344b01c7191a32d0762ac188f0ec2dd460911d": "1000000000000000000000",
  "5cfa9877f719c79d9e494a08d1e41cf103fc87c9": "200000000000000000000",
  "f6eaac7032d492ef17fd6095afc11d634f56b382": "500038000000000000000",
  "962c0dec8a3d464bf39b1215eafd26480ae490cd": "2001680000000000000000",
  "262a8bfd7d9dc5dd3ad78161b6bb560824373655": "1169820000000000000000",
  "9b4824ff9fb2abda554dee4fb8cf549165570631": "20000000000000000000",
  "bb3b9005f46fd2ca3b30162599928c77d9f6b601": "8000014000000000000000",
  "f7dc251196fbcbb77c947d7c1946b0ff65021cea": "1000000000000000000000",
  "af1148ef6c8e103d7530efc91679c9ac27000993": "200000000000000000000",
  "0bb2650ea01aca755bc0c017b64b1ab5a66d82e3": "1337000000000000000000",
  "0cda12bf72d461bbc479eb92e6491d057e6b5ad1": "10000000000000000000000",
  "4e5b77f9066159e615933f2dda7477fa4e47d648": "200000000000000000000",
  "391161b0e43c302066e8a68d2ce7e199ecdb1d57": "4000000000000000000000",
  "c7e330cd0c890ac99fe771fcc7e7b009b7413d8a": "4000000000000000000000",
  "d4b38a5fdb63e01714e9801db47bc990bd509183": "5999000000000000000000",
  "bc0f98598f88056a26339620923b8f1eb074a9fd": "200000000000000000000",
  "dbc59ed88973dead310884223af49763c05030f1": "20000000000000000000",
  "0f85e42b1df321a4b3e835b50c00b06173968436": "985000000000000000000",
  "d7788ef28658aa06cc53e1f3f0de58e5c371be78": "6685000000000000000000",
  "ecd276af64c79d1bd9a92b86b5e88d9a95eb88f8": "20000000000000000000",
  "81c9e1aee2d3365d53bcfdcd96c7c538b0fd7eec": "1820000000000000000000",
  "5d39ef9ea6bdfff15d11fe91f561a6f9e31f5da5": "2000000000000000000000",
  "99878f9d6e0a7ed9aec78297b73879a80195afe0": "3980000000000000000000",
  "7294c918b1aefb4d25927ef9d799e71f93a28e85": "197000000000000000000",
  "a33f70da7275ef057104dfa7db64f472e9f5d553": "80220000000000000000",
  "255bdd6474cc8262f26a22c38f45940e1ceea69b": "4000000000000000000000",
  "52f8b509fee1a874ab6f9d87367fbeaf15ac137f": "1000000000000000000000",
  "e2728a3e8c2aaac983d05dc6877374a8f446eee9": "197600000000000000000",
  "ed0206cb23315128f8caff26f6a30b985467d022": "40000000000000000000000",
  "87cf36ad03c9eae9053abb5242de9117bb0f2a0b": "500000000000000000000",
  "a929c8bd71db0c308dac06080a1747f21b1465aa": "500000000000000000000",
  "9da6e075989c7419094cc9f6d2e49393bb199688": "11100000000000000000000",
  "763eece0b08ac89e32bfa4bece769514d8cb5b85": "4000000000000000000000",
  "5df3277ca85936c7a0d2c0795605ad25095e7159": "2000000000000000000000",
  "7163758cbb6c4c525e0414a40a049dcccce919bb": "200000000000000000000",
  "14cdddbc8b09e6675a9e9e05091cb92238c39e1e": "5100000000000000000000",
  "b3b7f493b44a2c8d80ec78b1cdc75a652b73b06c": "2000000000000000000000",
  "c69b855539ce1b04714728eec25a37f367951de7": "2000000000000000000000",
  "052eab1f61b6d45517283f41d1441824878749d0": "4000000000000000000000",
  "515651d6db4faf9ecd103a921bbbbe6ae970fdd4": "20000000000000000000000",
  "c7aff91929797489555a2ff1d14d5c695a108355": "1000000000000000000000",
  "d7ca7fdcfebe4588eff5421d1522b61328df7bf3": "4001070000000000000000",
  "eefba12dfc996742db790464ca7d273be6e81b3e": "1000000000000000000000",
  "ebaa216de9cc5a43031707d36fe6d5bedc05bdf0": "1969606000000000000000",
  "559194304f14b1b93afe444f0624e053c23a0009": "400000000000000000000",
  "4ecc19948dd9cd87b4c7201ab48e758f28e7cc76": "500200000000000000000",
  "f224eb900b37b4490eee6a0b6420d85c947d8733": "970000000000000000000",
  "97810bafc37e84306332aacb35e92ad911d23d24": "1000000000000000000000",
  "bd67d2e2f82da8861341bc96a2c0791fddf39e40": "200014000000000000000",
  "1b6495891240e64e594493c2662171db5e30ce13": "172400000000000000000",
  "00bdd4013aa31c04616c2bc9785f2788f915679b": "13400000000000000000",
  "c6ae287ddbe1149ba16ddcca4fe06aa2eaa988a9": "400000000000000000000",
  "b7c9f12b038e73436d17e1c12ffe1aeccdb3f58c": "540000000000000000000",
  "c1b500011cfba95d7cd636e95e6cbf6167464b25": "200000000000000000000",
  "39e0db4d60568c800b8c5500026c2594f5768960": "1000000000000000000000",
  "40e3c283f7e24de0410c121bee60a5607f3e29a6": "1000000000000000000000",
  "2f7d3290851be5c6b4b43f7d4574329f61a792c3": "100000000000000000000",
  "c33ece935a8f4ef938ea7e1bac87cb925d8490ca": "33122000000000000000000",
  "57bddf078834009c89d88e6282759dc45335b470": "2148000000000000000000",
  "50ad187ab21167c2b6e78be0153f44504a07945e": "100076000000000000000",
  "5bd24aac3612b20c609eb46779bf95698407c57c": "1970000000000000000000",
  "16526c9edf943efa4f6d0f0bae81e18b31c54079": "985000000000000000000",
  "4c6a9dc2cab10abb2e7c137006f08fecb5b779e1": "499000000000000000000",
  "02c9f7940a7b8b7a410bf83dc9c22333d4275dd3": "5000000000000000000000",
  "b9fd3833e88e7cf1fa9879bdf55af4b99cd5ce3f": "1000000000000000000000",
  "7e268f131ddf687cc325c412f78ba961205e9112": "16000600000000000000000",
  "180478a655d78d0f3b0c4f202b61485bc4002fd5": "2000000000000000000000",
  "ed4014538cee664a2fbcb6dc669f7ab16d0ba57c": "200000000000000000000",
  "f63a579bc3eac2a9490410128dbcebe6d9de8243": "1490000000000000000000",
  "5d822d9b3ef4b502627407da272f67814a6becd4": "20000000000000000000",
  "eb52ab10553492329c1c54833ae610f398a65b9d": "152000000000000000000",
  "63340a57716bfa63eb6cd133721202575bf796f0": "209967000000000000000",
  "933bf33f8299702b3a902642c33e0bfaea5c1ca3": "15200000000000000000",
  "25bc49ef288cd165e525c661a812cf84fbec8f33": "338464000000000000000",
  "c8231ba5a411a13e222b29bfc1083f763158f226": "1000090000000000000000",
  "6c15ec3520bf8ebbc820bd0ff19778375494cf9d": "2005500000000000000000",
  "aaced8a9563b1bc311dbdffc1ae7f57519c4440c": "2000000000000000000000",
  "d90f3009db437e4e11c780bec8896f738d65ef0d": "4000000000000000000000",
  "5603241eb8f08f721e348c9d9ad92f48e390aa24": "200000000000000000000",
  "53cec6c88092f756efe56f7db11228a2db45b122": "4000000000000000000000",
  "194cebb4929882bf3b4bf9864c2b1b0f62c283f9": "571300000000000000000",
  "4be8628a8154874e048d80c142181022b180bcc1": "60000000000000000000",
  "5fd973af366aa5157c54659bcfb27cbfa5ac15d6": "4000000000000000000000",
  "303139bc596403d5d3931f774c66c4ba467454db": "1699830000000000000000",
  "87584a3f613bd4fac74c1e780b86d6caeb890cb2": "1700000000000000000000",
  "77f4e3bdf056883cc87280dbe640a18a0d02a207": "193806000000000000000",
  "4de3fe34a6fbf634c051997f47cc7f48791f5824": "1999000000000000000000",
  "c45a1ca1036b95004187cdac44a36e33a94ab5c3": "254800000000000000000",
  "65d33eb39cda6453b19e61c1fe4db93170ef9d34": "13370000000000000000",
  "f65616be9c8b797e7415227c9138faa0891742d7": "790000000000000000000",
  "e17812f66c5e65941e186c46922b6e7b2f0eeb46": "1820000000000000000000",
  "d47f50df89a1cff96513bef1b2ae3a2971accf2c": "840000000000000000000",
  "8ed1528b447ed4297902f639c514d0944a88f8c8": "198800000000000000000",
  "a4fb14409a67b45688a8593e5cc2cf596ced6f11": "1790000000000000000000",
  "855d9aef2c39c6230d09c99ef6494989abe68785": "161000000000000000000",
  "778c43d11afe3b586ff374192d96a7f23d2b9b7f": "2577139000000000000000",
  "e3ece1f632711d13bfffa1f8f6840871ee58fb27": "4000000000000000000000",
  "beb3358c50cf9f75ffc76d443c2c7f55075a0589": "2674000000000000000000",
  "f156dc0b2a981e5b55d3f2f03b8134e331dbadb7": "100000000000000000000",
  "eb9cc9fe0869d2dab52cc7aae8fd57adb35f9feb": "1966000000000000000000",
  "2467c6a5c696ede9a1e542bf1ad06bcc4b06aca0": "18500000000000000000",
  "ec75b4a47513120ba5f86039814f1998e3817ac3": "178756000000000000000",
  "9c3d0692ceeef80aa4965ceed262ffc7f069f2dc": "200000000000000000000",
  "e05029aceb0778675bef1741ab2cd2931ef7c84b": "5000057000000000000000",
  "41d3b731a326e76858baa5f4bd89b57b36932343": "394000000000000000000",
  "c346cb1fbce2ab285d8e5401f42dd7234d37e86d": "83500000000000000000",
  "45f4fc60f08eaca10598f0336329801e3c92cb46": "200000000000000000000",
  "f04a6a379708b9428d722aa2b06b77e88935cf89": "300000000000000000000",
  "232832cd5977e00a4c30d0163f2e24f088a6cb09": "3000000000000000000000",
  "d2ac0d3a58605e1d0f0eb3de25b2cad129ed6058": "4000000000000000000000",
  "a356551bb77d4f45a6d7e09f0a089e79cca249cb": "340000000000000000000",
  "b50c9f5789ae44e2dce017c714caf00c830084c2": "394000000000000000000",
  "21fd6c5d97f9c600b76821ddd4e776350fce2be0": "1999946000000000000000",
  "f0d5c31ccb6cbe30c7c9ea19f268d159851f8c9c": "16700000000000000000000",
  "ab7091932e4bc39dbb552380ca934fd7166d1e6e": "3340000000000000000000",
  "acd8dd91f714764c45677c63d852e56eb9eece2e": "2000000000000000000000",
  "57d032a43d164e71aa2ef3ffd8491b0a4ef1ea5b": "2000000000000000000000",
  "5af46a25ac09cb73616b53b14fb42ff0a51cddb2": "4000000000000000000000",
  "1ea6bf2f15ae9c1dbc64daa7f8ea4d0d81aad3eb": "4200000000000000000000",
  "03337012ae1d7ff3ee7f697c403e7780188bf0ef": "200000000000000000000",
  "32eb64be1b5dede408c6bdefbe6e405c16b7ed02": "1970000000000000000000",
  "22e2488e2da26a49ae84c01bd54b21f2947891c6": "1730000000000000000000",
  "be98a77fd41097b34f59d7589baad021659ff712": "900000000000000000000",
  "dda4ed2a58a8dd20a73275347b580d71b95bf99a": "399000000000000000000",
  "671110d96aaff11523cc546bf9940eedffb2faf7": "4000000000000000000000",
  "5d71799c8df3bccb7ee446df50b8312bc4eb71c5": "200000000000000000000",
  "ae179a460db66326743d24e67523a57b246daf7f": "4722920000000000000000",
  "198bfcf1b07ae308fa2c02069ac9dafe7135fb47": "20000000000000000000",
  "4662a1765ee921842ddc88898d1dc8627597bd7e": "10000000000000000000000",
  "783eec8aa5dac77b2e6623ed5198a431abbaee07": "440000000000000000000",
  "ed6643c0e8884b2d3211853785a08bf8f33ed29f": "1337000000000000000000",
  "5cc7d3066d45d27621f78bb4b339473e442a860f": "9999908000000000000000",
  "94ef8be45077c7d4c5652740de946a62624f713f": "100085000000000000000",
  "2f853817afd3b8f3b86e9f60ee77b5d97773c0e3": "1451450000000000000000",
  "3e0b8ed86ed669e12723af7572fbacfe829b1e16": "1499800000000000000000",
  "fa68e0cb3edf51f0a6f211c9b2cb5e073c9bffe6": "291200000000000000000",
  "2c234f505ca8dcc77d9b7e01d257c318cc19396d": "100000000000000000000",
  "f3f24fc29e20403fc0e8f5ebbb553426f78270a2": "100000000000000000000",
  "91546b79ecf69f936b5a561508b0d7e50cc5992f": "267400000000000000000",
  "435443b81dfdb9bd8c6787bc2518e2d47e57c15f": "5968500000000000000000",
  "3a06e3bb1edcfd0c44c3074de0bb606b049894a2": "10000000000000000000000",
  "3a3108c1e680a33b336c21131334409d97e5adec": "20000000000000000000",
  "2caf6bf4ec7d5a19c5e0897a5eeb011dcece4210": "139740000000000000000",
  "f44f8551ace933720712c5c491cdb6f2f951736c": "4000000000000000000000",
  "5bc1f95507b1018642e45cd9c0e22733b9b1a326": "100000000000000000000",
  "94ca56de777fd453177f5e0694c478e66aff8a84": "500000000000000000000",
  "afdd1b786162b8317e20f0e979f4b2ce486d765d": "20000000000000000000",
  "3a805fa0f7387f73055b7858ca8519edd93d634f": "1850000000000000000000",
  "8b36224c7356e751f0c066c35e3b44860364bfc2": "998987000000000000000",
  "cfecbea07c27002f65fe534bb8842d0925c78402": "4000000000000000000000",
  "482982ac1f1c6d1721feecd9b9c96cd949805055": "10000000000000000000000",
  "af880fc7567d5595cacce15c3fc14c8742c26c9e": "133700000000000000000",
  "acc1c78786ab4d2b3b277135b5ba123e0400486b": "78800000000000000000",
  "41f27e744bd29de2b0598f02a0bb9f98e681eaa4": "7760000000000000000000",
  "09a025316f967fa8b9a1d60700063f5a68001caa": "38200000000000000000",
  "391f20176d12360d724d51470a90703675594a4d": "1600000000000000000000",
  "fe4d8403216fd571572bf1bdb01d00578978d688": "9850000000000000000000",
  "900f0b8e35b668f81ef252b13855aa5007d012e7": "425000000000000000000",
  "c35b95a2a3737cb8f0f596b34524872bd30da234": "7540000000000000000000",
  "412a68f6c645559cc977fc4964047a201d1bb0e2": "50000000000000000000000",
  "d3dad1b6d08d4581ccae65a8732db6ac69f0c69e": "6000000000000000000000",
  "35855ec641ab9e081ed0c2a6dcd81354d0244a87": "1201897000000000000000",
  "88015d7203c5e0224aeda286ed12f1a51b789333": "4999711000000000000000",
  "251c12722c6879227992a304eb3576cd18434ea5": "2000000000000000000000",
  "1f6f0030349752061c96072bc3d6eb3549208d6b": "23891000000000000000",
  "86153063a1ae7f02f1a88136d4d69c7c5e3e4327": "1000000000000000000000",
  "78355df0a230f83d032c703154414de3eedab557": "2000000000000000000000",
  "c5b56cd234267c28e89c6f6b2266b086a12f970c": "4000000000000000000000",
  "3e3cd3bec06591d6346f254b621eb41c89008d31": "993800000000000000000",
  "378ea1dc8edc19bae82638029ea8752ce98bcfcd": "2000000000000000000000",
  "67632046dcb25a54936928a96f423f3320cbed92": "2000000000000000000000",
  "ddbee6f094eae63420b003fb4757142aea6cd0fd": "2000000000000000000000",
  "b555d00f9190cc3677aef314acd73fdc39399259": "2000000000000000000000",
  "e230fe1bff03186d0219f15d4c481b7d59be286a": "36710000000000000000",
  "3e4e9265223c9738324cf20bd06006d0073edb8c": "133700000000000000000",
  "7450ff7f99eaa9116275deac68e428df5bbcd8b9": "2000000000000000000000",
  "021f69043de88c4917ca10f1842897eec0589c7c": "1978760000000000000000",
  "351787843505f8e4eff46566cce6a59f4d1c5fe7": "9250000000000000000000",
  "ebd37b256563e30c6f9289a8e2702f0852880833": "1999944000000000000000",
  "ed41e1a28f5caa843880ef4e8b08bd6c33141edf": "790174000000000000000",
  "8d238e036596987643d73173c37b0ad06055b96c": "2089724000000000000000",
  "478e524ef2a381d70c82588a93ca7a5fa9d51cbf": "254908000000000000000000",
  "4419ac618d5dea7cdc6077206fb07dbdd71c1702": "4000000000000000000000",
  "ca25ff34934c1942e22a4e7bd56f14021a1af088": "197000000000000000000",
  "5552f4b3ed3e1da79a2f78bb13e8ae5a68a9df3b": "1000000000000000000000",
  "4354221e62dc09e6406436163a185ef06d114a81": "2000000000000000000000",
  "ca0432cb157b5179f02ebba5c9d1b54fec4d88ca": "1000000000000000000000",
  "8a780ab87a9145fe10ed60fa476a740af4cab1d2": "334000000000000000000",
  "4ff676e27f681a982d8fd9d20e648b3dce05e945": "2800000000000000000000",
  "6c63fc85029a2654d79b2bea4de349e4524577c5": "660000000000000000000",
  "1ac089c3bc4d82f06a20051a9d732dc0e734cb61": "700300000000000000000",
  "4bf4479799ef82eea20943374f56a1bf54001e5e": "3940000000000000000000",
  "08411652c871713609af0062a8a1281bf1bbcfd9": "1400000000000000000000",
  "e1bfaa5a45c504428923c4a61192a55b1400b45d": "2674000000000000000000",
  "5e1fbd4e58e2312b3c78d7aaaafa10bf9c3189e3": "40000000000000000000000",
  "bb27c6a7f91075475ab229619040f804c8ec7a6a": "10000000000000000000000",
  "5d8d31faa864e22159cd6f5175ccecc53fa54d72": "26980000000000000000000",
  "2dd8eeef87194abc2ce7585da1e35b7cea780cb7": "999999000000000000000",
  "0e1801e70b6262861b1134ccbc391f568afc92f7": "4000000000000000000000",
  "61042b80fd6095d1b87be2f00f109fabafd157a6": "100000000000000000000",
  "fb5518714cefc36d04865de5915ef0ff47dfe743": "2000000000000000000000",
  "b5add1e7809f7d03069bfe883b0a932210be8712": "1000000000000000000000",
  "c2e2d498f70dcd0859e50b023a710a6d4b2133bd": "1037130000000000000000",
  "4ad047fae67ef162fe68fedbc27d3b65caf10c36": "1970000000000000000000",
  "69cb3e2153998d86e5ee20c1fcd1a6baeeb2863f": "4000000000000000000000",
  "683633010a88686bea5a98ea53e87997cbf73e69": "99960000000000000000",
  "6cb11ecb32d3ce829601310636f5a10cf7cf9b5f": "20068370000000000000000",
  "a613456996408af1c2e93e177788ab55895e2b32": "6366000000000000000000",
  "8308ed0af7f8a3c1751fafc877b5a42af7d35882": "1000000000000000000000",
  "e5edf8123f2403ce1a0299becf7aac744d075f23": "200200000000000000000",
  "05665155cc49cbf6aabdd5ae92cbfaad82b8c0c1": "400000000000000000000",
  "00b277b099a8e866ca0ec65bcb87284fd142a582": "1970000000000000000000",
  "4b9e068fc4680976e61504912985fd5ce94bab0d": "668500000000000000000",
  "12134e7f6b017bf48e855a399ca58e2e892fa5c8": "1000000000000000000000",
  "dffcea5421ec15900c6ecfc777184e140e209e24": "19980000000000000000",
  "2132c0516a2e17174ac547c43b7b0020d1eb4c59": "985000000000000000000",
  "d39a5da460392b940b3c69bc03757bf3f2e82489": "7019250000000000000000",
  "66c8331efe7198e98b2d32b938688e3241d0e24f": "9620000000000000000000",
  "bdca2a0ff34588af625fa8e28fc3015ab5a3aa00": "2339800000000000000000",
  "7dfc342dffcf45dfee74f84c0995397bd1a63172": "250000000000000000000",
  "a202547242806f6e70e74058d6e5292defc8c8d4": "2002000000000000000000",
  "3bbc13d04accc0707aebdcaef087d0b87e0b5ee3": "3520000000000000000000",
  "be5cba8d37427986e8ca2600e858bb03c359520f": "2955000000000000000000",
  "4174fa1bc12a3b7183cbabb77a0b59557ba5f1db": "2000000000000000000000",
  "9eb3a7cb5e6726427a3a361cfa8d6164dbd0ba16": "804000000000000000000",
  "25e661c939863acc044e6f17b5698cce379ec3cc": "1370000000000000000000",
  "24bd5904059091d2f9e12d6a26a010ca22ab14e8": "1880000000000000000000",
  "c96626728aaa4c4fb3d31c26df3af310081710d1": "3340000000000000000000",
  "0fb5d2c673bfb1ddca141b9894fd6d3f05da6720": "100000000000000000000",
  "2de31afd189a13a76ff6fe73ead9f74bb5c4a629": "6000000000000000000000",
  "bd09126c891c4a83068059fe0e15796c4661a9f4": "800000000000000000000",
  "496f5843f6d24cd98d255e4c23d1e1f023227545": "1754143000000000000000",
  "540cf23dd95c4d558a279d778d2b3735b3164191": "10000000000000000000000",
  "9b5ec18e8313887df461d2902e81e67a8f113bb1": "100000000000000000000",
  "b7a7f77c348f92a9f1100c6bd829a8ac6d7fcf91": "1820000000000000000000",
  "2590126870e0bde8a663ab040a72a5573d8d41c2": "5000000000000000000000",
  "090fa9367bda57d0d3253a0a8ff76ce0b8e19a73": "1000000000000000000000",
  "2a5ba9e34cd58da54c9a2712663a3be274c8e47b": "197000000000000000000",
  "3e8641d43c42003f0a33c929f711079deb2b9e46": "500000000000000000000",
  "f4d97664cc4eec9edbe7fa09f4750a663b507d79": "4000000000000000000000",
  "b1540e94cff3465cc3d187e7c8e3bdaf984659e2": "2989950000000000000000",
  "f96883582459908c827627e86f28e646f9c7fc7a": "8350000000000000000000",
  "d4feed99e8917c5c5458635f3603ecb7e817a7d0": "300031000000000000000",
  "14b1603ec62b20022033eec4d6d6655ac24a015a": "50000000000000000000",
  "af8e1dcb314c950d3687434d309858e1a8739cd4": "267400000000000000000",
  "4b9206ba6b549a1a7f969e1d5dba867539d1fa67": "7880000000000000000000",
  "471010da492f4018833b088d9872901e06129174": "500000000000000000000",
  "d243184c801e5d79d2063f3578dbae81e7b3a9cb": "1989700000000000000000",
  "3eada8c92f56067e1bb73ce378da56dc2cdfd365": "2210000000000000000000",
  "33ea6b7855e05b07ab80dab1e14de9b649e99b6c": "532000000000000000000",
  "700711e311bb947355f755b579250ca7fd765a3e": "1790000000000000000000",
  "87fb26c31e48644d693134205cae43b21f18614b": "1370000000000000000000",
  "001d14804b399c6ef80e64576f657660804fec0b": "4200000000000000000000",
  "f9642086b1fbae61a6804dbe5fb15ec2d2b537f4": "2000000000000000000000",
  "6919dd5e5dfb1afa404703b9faea8cee35d00d70": "5910000000000000000000",
  "9ac4da51d27822d1e208c96ea64a1e5b55299723": "100040000000000000000",
  "1bd8ebaa7674bb18e19198db244f570313075f43": "150000000000000000000",
  "e64ef012658d54f8e8609c4e9023c09fe865c83b": "28000000000000000000",
  "43b079baf0727999e66bf743d5bcbf776c3b0922": "2000000000000000000000",
  "06ac26ad92cb859bd5905ddce4266aa0ec50a9c5": "775000000000000000000",
  "99c1d9f40c6ab7f8a92fce2fdce47a54a586c53f": "985000000000000000000",
  "4ae93082e45187c26160e66792f57fad3551c73a": "21658000000000000000000",
  "7da7613445a21299aa74f0ad71431ec43fbb1be9": "68000000000000000000",
  "4a9a26fd0a8ba10f977da4f77c31908dab4a8016": "1790000000000000000000",
  "972c2f96aa00cf8a2f205abcf8937c0c75f5d8d9": "200000000000000000000",
  "b5046cb3dc1dedbd364514a2848e44c1de4ed147": "16445100000000000000000",
  "48c2ee91a50756d8ce9abeeb7589d22c6fee5dfb": "3220000000000000000000",
  "46c1aa2244b9c8a957ca8fac431b0595a3b86824": "4000000000000000000000",
  "21fd0bade5f4ef7474d058b7f3d854cb1300524e": "20000000000000000000",
  "1864a3c7b48155448c54c88c708f166709736d31": "133700000000000000000",
  "5dd53ae897526b167d39f1744ef7c3da5b37a293": "8000000000000000000000",
  "ece111670b563ccdbebca52384290ecd68fe5c92": "20000000000000000000",
  "74d671d99cbea1ab57906375b63ff42b50451d17": "1000000000000000000000",
  "5717cc9301511d4a81b9f583148beed3d3cc8309": "2600000000000000000000",
  "8f92844f282a92999ee5b4a8d773d06b694dbd9f": "1940000000000000000000",
  "b5a606f4ddcbb9471ec67f658caf2b00ee73025e": "4325000000000000000000",
  "bdb60b823a1173d45a0792245fb496f1fd3301cf": "2000000000000000000000",
  "1d2615f8b6ca5012b663bdd094b0c5137c778ddf": "10000000000000000000000",
  "82ff716fdf033ec7e942c909d9831867b8b6e2ef": "1790000000000000000000",
  "44c14765127cde11fab46c5d2cf4d4b2890023fd": "2000000000000000000000",
  "c72cb301258e91bc08998a805dd192f25c2f9a35": "591000000000000000000",
  "ad732c976593eec4783b4e2ecd793979780bfedb": "2000000000000000000000",
  "d8f62036f03b7635b858f1103f8a1d9019a892b6": "50000000000000000000",
  "0a06fad7dcd7a492cbc053eeabde6934b39d8637": "20000000000000000000",
  "67f2bb78b8d3e11f7c458a10b5c8e0a1d374467d": "1790000000000000000000",
  "4b5cdb1e428c91dd7cb54a6aed4571da054bfe52": "88000000000000000000",
  "b3557d39b5411b84445f5f54f38f62d2714d0087": "600000000000000000000",
  "0b0e055b28cbd03dc5ff44aa64f3dce04f5e63fb": "2000000000000000000000",
  "9b2be7f56754f505e3441a10f7f0e20fd3ddf849": "340000000000000000000",
  "0b93fca4a4f09cac20db60e065edcccc11e0a5b6": "200000000000000000000",
  "3bc85d6c735b9cda4bba5f48b24b13e70630307b": "1970000000000000000000",
  "52102354a6aca95d8a2e86d5debda6de69346076": "2000000000000000000000",
  "cda4530f4b9bc50905b79d17c28fc46f95349bdf": "942000000000000000000",
  "ff545bbb66fbd00eb5e6373ff4e326f5feb5fe12": "20000000000000000000",
  "4030a925706b2c101c8c5cb9bd05fbb4f6759b18": "4000000000000000000000",
  "f11e01c7a9d12499005f4dae7716095a34176277": "400000000000000000000",
  "a4826b6c3882fad0ed5c8fbb25cc40cc4f33759f": "2068000000000000000000",
  "28510e6eff1fc829b6576f4328bc3938ec7a6580": "10000000000000000000000",
  "9ce5363b13e8238aa4dd15acd0b2e8afe0873247": "200000000000000000000",
  "d97bc84abd47c05bbf457b2ef659d61ca5e5e48f": "122000000000000000000",
  "4a719061f5285495b37b9d7ef8a51b07d6e6acac": "199800000000000000000",
  "8b714522fa2839620470edcf0c4401b713663df1": "200000000000000000000",
  "b6decf82969819ba02de29b9b593f21b64eeda0f": "740000000000000000000",
  "c87d3ae3d88704d9ab0009dcc1a0067131f8ba3c": "1969606000000000000000",
  "dccb370ed68aa922283043ef7cad1b9d403fc34a": "4000000000000000000000",
  "2d532df4c63911d1ce91f6d1fcbff7960f78a885": "1669833000000000000000",
  "1fcfd1d57f872290560cb62d600e1defbefccc1c": "1490000000000000000000",
  "d9e27eb07dfc71a706060c7f079238ca93e88539": "1000000000000000000000",
  "da7732f02f2e272eaf28df972ecc0ddeed9cf498": "205274000000000000000",
  "bf09d77048e270b662330e9486b38b43cd781495": "436000000000000000000000",
  "619f171445d42b02e2e07004ad8afe694fa53d6a": "20000000000000000000",
  "2bdd03bebbee273b6ca1059b34999a5bbd61bb79": "20000000000000000000",
  "8da1d359ba6cb4bcc57d7a437720d55db2f01c72": "80000000000000000000",
  "be935793f45b70d8045d2654d8dd3ad24b5b6137": "880000000000000000000",
  "ee71793e3acf12a7274f563961f537529d89c7de": "2000000000000000000000",
  "86f05d19063e9369c6004eb3f123943a7cff4eab": "1999944000000000000000",
  "87b10f9c280098179a2b76e9ce90be61fc844d0d": "1337000000000000000000",
  "243c84d12420570cc4ef3baba1c959c283249520": "2345000000000000000000",
  "6bc85acd5928722ef5095331ee88f484b8cf8357": "180000000000000000000",
  "2561a138dcf83bd813e0e7f108642be3de3d6f05": "999940000000000000000",
  "7d0350e40b338dda736661872be33f1f9752d755": "49933000000000000000",
  "e5dc9349cb52e161196122cf87a38936e2c57f34": "2000000000000000000000",
  "543a8c0efb8bcd15c543e2a6a4f807597631adef": "5893800000000000000000",
  "0413d0cf78c001898a378b918cd6e498ea773c4d": "280000000000000000000",
  "3708e59de6b4055088782902e0579c7201a8bf50": "200000000000000000000000",
  "699fc6d68a4775573c1dcdaec830fefd50397c4e": "60000000000000000000",
  "379a7f755a81a17edb7daaa28afc665dfa6be63a": "25000000000000000000",
  "260a230e4465077e0b14ee4442a482d5b0c914bf": "1677935000000000000000",
  "3daa01ceb70eaf9591fa521ba4a27ea9fb8ede4a": "1667400000000000000000",
  "7f3a1e45f67e92c880e573b43379d71ee089db54": "100000000000000000000000",
  "38643babea6011316cc797d9b093c897a17bdae7": "334400000000000000000",
  "84675e9177726d45eaa46b3992a340ba7f710c95": "1000000000000000000000",
  "0f83461ba224bb1e8fdd9dae535172b735acb4e0": "200000000000000000000",
  "31aa3b1ebe8c4dbcb6a708b1d74831e60e497660": "400000000000000000000",
  "a32cf7dde20c3dd5679ff5e325845c70c5962662": "20000000000000000000",
  "c007f0bdb6e7009202b7af3ea90902697c721413": "2999966000000000000000",
  "05c64004a9a826e94e5e4ee267fa2a7632dd4e6f": "16191931000000000000000",
  "f622e584a6623eaaf99f2be49e5380c5cbcf5cd8": "200000000000000000000",
  "9dc10fa38f9fb06810e11f60173ec3d2fd6a751e": "1970000000000000000000",
  "423c3107f4bace414e499c64390a51f74615ca5e": "2000000000000000000000",
  "92438e5203b6346ff886d7c36288aacccc78ceca": "1000000000000000000000",
  "bef07d97c3481f9d6aee1c98f9d91a180a32442b": "100000000000000000000000",
  "55aa5d313ebb084da0e7801091e29e92c5dec3aa": "2000000000000000000000",
  "89c433d601fad714da6369308fd26c1dc9942bbf": "2000000000000000000000",
  "25106ab6755df86d6b63a187703b0cfea0e594a0": "27400000000000000000",
  "494256e99b0f9cd6e5ebca3899863252900165c8": "14000000000000000000000",
  "5f4ace4c1cc13391e01f00b198e1f20b5f91cbf5": "5000196000000000000000",
  "135cecd955e5798370769230159303d9b1839f66": "5000000000000000000000",
  "ced81ec3533ff1bfebf3e3843ee740ad11758d3e": "1970000000000000000000",
  "688eb3853bbcc50ecfee0fa87f0ab693cabdef02": "31600000000000000000000",
  "2159240813a73095a7ebf7c3b3743e8028ae5f09": "2000000000000000000000",
  "99d1579cd42682b7644e1d4f7128441eeffe339d": "20000000000000000000000",
  "8a243a0a9fea49b839547745ff2d11af3f4b0522": "985000000000000000000",
  "c1a41a5a27199226e4c7eb198b031b59196f9842": "191000000000000000000",
  "7514adbdc63f483f304d8e94b67ff3309f180b82": "622911000000000000000",
  "74aeec915de01cc69b2cb5a6356feea14658c6c5": "232500000000000000000",
  "76f9ad3d9bbd04ae055c1477c0c35e7592cb2a20": "40200000000000000000000",
  "a8a7b68adab4e3eadff19ffa58e34a3fcec0d96a": "6000000000000000000000",
  "60de22a1507432a47b01cc68c52a0bf8a2e0d098": "19100000000000000000",
  "ceb33d78e7547a9da2e87d51aec5f3441c87923a": "20000000000000000000",
  "432809a2390f07c665921ff37d547d12f1c9966a": "30000000000000000000000",
  "d5e656a1b916f9bf45afb07dd8afaf73b4c56f41": "97000000000000000000",
  "e3410bb7557cf91d79fa69d0dfea0aa075402651": "2000000000000000000000",
  "dee942d5caf5fac11421d86b010b458e5c392990": "4000000000000000000000",
  "a98f109835f5eacd0543647c34a6b269e3802fac": "400000000000000000000",
  "932b9c04d40d2ac83083d94298169dae81ab2ed0": "2000000000000000000000",
  "ba10f2764290f875434372f79dbf713801caac01": "955000000000000000000",
  "a2c7eaffdc2c9d937345206c909a52dfb14c478f": "143000000000000000000",
  "6c67e0d7b62e2a08506945a5dfe38263339f1f22": "1970000000000000000000",
  "60c3714fdddb634659e4a2b1ea42c4728cc7b8ba": "13370000000000000000",
  "73b4d499de3f38bf35aaf769a6e318bc6d123692": "2000000000000000000000",
  "3b22dea3c25f1b59c7bd27bb91d3a3eaecef3984": "100000000000000000000",
  "1e3badb1b6e1380e27039c576ae6222e963a5b53": "20000000000000000000000",
  "abd4d6c1666358c0406fdf3af248f78ece830104": "2112000000000000000000",
  "0c925ad5eb352c8ef76d0c222d115b0791b962a1": "3180000000000000000000",
  "be9186c34a52514abb9107860f674f97b821bd5b": "509600000000000000000",
  "b7f67314cb832e32e63b15a40ce0d7ffbdb26985": "1060866000000000000000",
  "3f30d3bc9f602232bc724288ca46cd0b0788f715": "4000000000000000000000",
  "970abd53a54fca4a6429207c182d4d57bb39d4a0": "2000000000000000000000",
  "36d85dc3683156e63bf880a9fab7788cf8143a27": "20000000000000000000000",
  "2836123046b284e5ef102bfd22b1765e508116ad": "411880000000000000000",
  "de06d5ea777a4eb1475e605dbcbf43444e8037ea": "50000000000000000000000",
  "9af11399511c213181bfda3a8b264c05fc81b3ce": "14000000000000000000000",
  "e2191215983f33fd33e22cd4a2490054da53fddc": "15800000000000000000",
  "2eebf59432b52892f9380bd140aa99dcf8ad0c0f": "152000000000000000000",
  "dc087f9390fb9e976ac23ab689544a0942ec2021": "1820000000000000000000",
  "fd4b989558ae11be0c3b36e2d6f2a54a9343ca2e": "2000000000000000000000",
  "770c2fb2c4a81753ac0182ea460ec09c90a516f8": "20000000000000000000",
  "b28dbfc6499894f73a71faa00abe0f4bc9d19f2a": "100000000000000000000",
  "b0cef8e8fb8984a6019f01c679f272bbe68f5c77": "152000000000000000000",
  "f400f93d5f5c7e3fc303129ac8fb0c2f786407fa": "2000000000000000000000",
  "f2133431d1d9a37ba2f0762bc40c5acc8aa6978e": "2000000000000000000000",
  "9003d270891ba2df643da8341583193545e3e000": "4000000000000000000000",
  "8938d1b4daee55a54d738cf17e4477f6794e46f7": "18200000000000000000",
  "98e6f547db88e75f1f9c8ac2c5cf1627ba580b3e": "1000000000000000000000",
  "009fdbf44e1f4a6362b769c39a475f95a96c2bc7": "564000000000000000000",
  "d0f9597811b0b992bb7d3757aa25b4c2561d32e2": "500000000000000000000",
  "dcd10c55bb854f754434f1219c2c9a98ace79f03": "4000086000000000000000",
  "67048f3a12a4dd1f626c64264cb1d7971de2ca38": "180000000000000000000",
  "d33cf82bf14c592640a08608914c237079d5be34": "2000000000000000000000",
  "f5b068989df29c253577d0405ade6e0e7528f89e": "1610000000000000000000",
  "a9a8eca11a23d64689a2aa3e417dbb3d336bb59a": "262025000000000000000",
  "99413704b1a32e70f3bc0d69dd881c38566b54cb": "27382708000000000000000",
  "2a085e25b64862f5e68d768e2b0f7a8529858eee": "1983618000000000000000",
  "833d3fae542ad5f8b50ce19bde2bec579180c88c": "346000000000000000000",
  "c3483d6e88ac1f4ae73cc4408d6c03abe0e49dca": "17000000000000000000000",
  "fde395bc0b6d5cbb4c1d8fea3e0b4bff635e9db7": "2000000000000000000000",
  "eddacd94ec89a2ef968fcf977a08f1fae2757869": "8000000000000000000000",
  "dc29119745d2337320da51e19100c948d980b915": "160000000000000000000",
  "640bf87415e0cf407301e5599a68366da09bbac8": "493207000000000000000",
  "afcc7dbb8356d842d43ae7e23c8422b022a30803": "30400000000000000000000",
  "9120e71173e1ba19ba8f9f4fdbdcaa34e1d6bb78": "2000000000000000000000",
  "9092918707c621fdbd1d90fb80eb787fd26f7350": "2460000000000000000000",
  "263e57dacbe0149f82fe65a2664898866ff5b463": "38000000000000000000000",
  "315db7439fa1d5b423afa7dd7198c1cf74c918bc": "600000000000000000000",
  "09b4668696f86a080f8bebb91db8e6f87015915a": "656010000000000000000",
  "5c31996dcac015f9be985b611f468730ef244d90": "200000000000000000000",
  "b1179589e19db9d41557bbec1cb24ccc2dec1c7f": "100000000000000000000000",
  "3b1937d5e793b89b63fb8eb5f1b1c9ca6ba0fa8e": "2000000000000000000000",
  "c9127b7f6629ee13fc3f60bc2f4467a20745a762": "16465639000000000000000",
  "7306de0e288b56cfdf987ef0d3cc29660793f6dd": "508060000000000000000",
  "2aa192777ca5b978b6b2c2ff800ac1860f753f47": "335000000000000000000",
  "55da9dcdca61cbfe1f133c7bcefc867b9c8122f9": "880000000000000000000",
  "cdd9efac4d6d60bd71d95585dce5d59705c13564": "100000000000000000000",
  "ad8e48a377695de014363a523a28b1a40c78f208": "1000000000000000000000",
  "252b6555afdc80f2d96d972d17db84ea5ad521ac": "7880000000000000000000",
  "60ab71cd26ea6d6e59a7a0f627ee079c885ebbf6": "26740000000000000000",
  "f40b134fea22c6b29c8457f49f000f9cda789adb": "600000000000000000000",
  "85a2f6ea94d05e8c1d9ae2f4910338a358e98ded": "2000000000000000000000",
  "ae13a08511110f32e53be4127845c843a1a57c7b": "500000000000000000000",
  "40db1ba585ce34531edec5494849391381e6ccd3": "1790000000000000000000",
  "0c5589a7a89b9ad15b02751930415948a875fbef": "126000000000000000000",
  "89054430dcdc28ac15fa635ef87c105e602bf70c": "108000000000000000000",
  "6c882c27732cef5c7c13a686f0a2ea77555ac289": "100000000000000000000000",
  "de374299c1d07d79537385190f442ef9ca24061f": "133700000000000000000",
  "b146a0b925553cf06fcaf54a1b4dfea621290757": "2000200000000000000000",
  "09ae49e37f121df5dc158cfde806f173a06b0c7f": "3988000000000000000000",
  "b758896f1baa864f17ebed16d953886fee68aae6": "1000000000000000000000",
  "30730466b8eb6dc90d5496aa76a3472d7dbe0bbe": "1999800000000000000000",
  "fc02734033e57f70517e0afc7ee62461f06fad8e": "394000000000000000000",
  "a9b2d2e0494eab18e07d37bbb856d80e80f84cd3": "10000000000000000000000",
  "95278b08dee7c0f2c8c0f722f9fcbbb9a5241fda": "2408672000000000000000",
  "dab6bcdb83cf24a0ae1cb21b3b5b83c2f3824927": "50000000000000000000000",
  "94439ca9cc169a79d4a09cae5e67764a6f871a21": "240000000000000000000",
  "e06c29a81517e0d487b67fb0b6aabc4f57368388": "401100000000000000000",
  "458e3cc99e947844a18e6a42918fef7e7f5f5eb3": "36400000000000000000000",
  "0a9804137803ba6868d93a55f9985fcd540451e4": "13370000000000000000",
  "40630024bd2c58d248edd8465617b2bf1647da0e": "1000000000000000000000",
  "15224ad1c0face46f9f556e4774a3025ad06bd52": "13370000000000000000",
  "2e2810dee44ae4dff3d86342ab126657d653c336": "200000000000000000000",
  "48a30de1c919d3fd3180e97d5f2b2a9dbd964d2d": "44000000000000000000",
  "46a30b8a808931217445c3f5a93e882c0345b426": "250019000000000000000",
  "455396a4bbd9bae8af9fb7c4d64d471db9c24505": "161000000000000000000",
  "edfda2d5db98f9380714664d54b4ee971a1cae03": "40044000000000000000",
  "f5eadcd2d1b8657a121f33c458a8b13e76b65526": "249828000000000000000",
  "90e7070f4d033fe6910c9efe5a278e1fc6234def": "100392000000000000000",
  "d55508adbbbe9be81b80f97a6ea89add68da674f": "2000000000000000000000",
  "66925de3e43f4b41bf9dadde27d5488ef569ea0d": "39400000000000000000",
  "b7c077946674ba9341fb4c747a5d50f5d2da6415": "1000000000000000000000",
  "c52d1a0c73c2a1be84915185f8b34faa0adf1de3": "1400001000000000000000",
  "79b8aad879dd30567e8778d2d231c8f37ab8734e": "2000000000000000000000",
  "3aae4872fd9093cbcad1406f1e8078bab50359e2": "39400000000000000000",
  "b2e9d76bf50fc36bf7d3944b63e9ca889b699968": "2660000000000000000000",
  "405f596b94b947344c033ce2dcbff12e25b79784": "2000000000000000000000",
  "232cb1cd49993c144a3f88b3611e233569a86bd6": "15576000000000000000000",
  "9e232c08c14dc1a6ed0b8a3b2868977ba5c17d10": "20000000000000000000",
  "095270cc42141dd998ad2862dbd1fe9b44e7e650": "1200000000000000000000",
  "15d99468507aa0413fb60dca2adc7f569cb36b54": "2000000000000000000000",
  "04852732b4c652f6c2e58eb36587e60a62da14db": "20000000000000000000000",
  "ecf24cdd7c22928c441e694de4aa31b0fab59778": "600000000000000000000",
  "512b91bbfaa9e581ef683fc90d9db22a8f49f48b": "310000000000000000000000",
  "a88577a073fbaf33c4cd202e00ea70ef711b4006": "2000000000000000000000",
  "00acc6f082a442828764d11f58d6894ae408f073": "60000000000000000000000",
  "0355bcacbd21441e95adeedc30c17218c8a408ce": "400000000000000000000",
  "4e73cf2379f124860f73d6d91bf59acc5cfc845b": "40110000000000000000",
  "2a742b8910941e0932830a1d9692cfd28494cf40": "499986000000000000000",
  "41a8c2830081b102df6e0131657c07ab635b54ce": "1999944000000000000000",
  "b63064bd3355e6e07e2d377024125a33776c4afa": "38800000000000000000000",
  "1a25e1c5bc7e5f50ec16f8885f210ea1b938800e": "4000000000000000000000",
  "09b59b8698a7fbd3d2f8c73a008988de3e406b2b": "40000000000000000000000",
  "c555b93156f09101233c6f7cf6eb3c4f196d3346": "3000000000000000000000",
  "12f32c0a1f2daab676fe69abd9e018352d4ccd45": "50000000000000000000",
  "5956b28ec7890b76fc061a1feb52d82ae81fb635": "2000000000000000000000",
  "c739259e7f85f2659bef5f609ed86b3d596c201e": "200000000000000000000",
  "fae92c1370e9e1859a5df83b56d0f586aa3b404c": "106480000000000000000",
  "d5a7bec332adde18b3104b5792546aa59b879b52": "2000000000000000000000",
  "4f88dfd01091a45a9e2676021e64286cd36b8d34": "1000000000000000000000",
  "102c477d69aadba9a0b0f62b7459e17fbb1c1561": "2000000000000000000000",
  "34272d5e7574315dcae9abbd317bac90289d4765": "1820000000000000000000",
  "fe615d975c0887e0c9113ec7298420a793af8b96": "8000000000000000000000",
  "487adf7d70a6740f8d51cbdd68bb3f91c4a5ce68": "66850000000000000000",
  "7e5d9993104e4cb545e179a2a3f971f744f98482": "2000000000000000000000",
  "5529830a61c1f13c197e550beddfd6bd195c9d02": "10000000000000000000000",
  "2f282abbb6d4a3c3cd3b5ca812f7643e80305f06": "1850000000000000000000",
  "7352586d021ad0cf77e0e928404a59f374ff4582": "3400000000000000000000",
  "03f7b92008813ae0a676eb212814afab35221069": "2000000000000000000000",
  "056686078fb6bcf9ba0a8a8dc63a906f5feac0ea": "499800000000000000000",
  "8063379a7bf2cb923a84c5093e68dac7f75481c5": "322102000000000000000",
  "200264a09f8c68e3e6629795280f56254f8640d0": "20000000000000000000",
  "5a891155f50e42074374c739baadf7df2651153a": "4775000000000000000000",
  "80022a1207e910911fc92849b069ab0cdad043d3": "13370000000000000000",
  "e781ec732d401202bb9bd13860910dd6c29ac0b6": "1240000000000000000000",
  "4c2f1afef7c5868c44832fc77cb03b55f89e6d6e": "20000000000000000000000",
  "34ff582952ff24458f7b13d51f0b4f987022c1fe": "2804400000000000000000",
  "73914b22fc2f131584247d82be4fecbf978ad4ba": "2000000000000000000000",
  "562be95aba17c5371fe2ba828799b1f55d2177d6": "38200000000000000000000",
  "648f5bd2a2ae8902db37847d1cb0db9390b06248": "7769965000000000000000",
  "6a9758743b603eea3aa0524b42889723c4153948": "10100000000000000000000",
  "5985c59a449dfc5da787d8244e746c6d70caa55f": "100000000000000000000",
  "56ee197f4bbf9f1b0662e41c2bbd9aa1f799e846": "1000000000000000000000",
  "d47c242edffea091bc54d57df5d1fdb93101476c": "2914000000000000000000",
  "d482e7f68e41f238fe517829de15477fe0f6dd1d": "500000000000000000000",
  "05bf4fcfe772e45b826443852e6c351350ce72a2": "8000000000000000000000",
  "f10462e58fcc07f39584a187639451167e859201": "169830000000000000000",
  "1aa27699cada8dc3a76f7933aa66c71919040e88": "400000000000000000000",
  "24046b91da9b61b629cb8b8ec0c351a07e0703e4": "2000000000000000000000",
  "41033c1b6d05e1ca89b0948fc64453fbe87ab25e": "1337000000000000000000",
  "369822f5578b40dd1f4471706b22cd971352da6b": "346000000000000000000",
  "044e853144e3364495e7a69fa1d46abea3ac0964": "49225000000000000000",
  "abf728cf9312f22128024e7046c251f5dc5901ed": "29550000000000000000000",
  "d781f7fc09184611568570b4986e2c72872b7ed0": "20002000000000000000",
  "6bb4a661a33a71d424d49bb5df28622ed4dffcf4": "630400000000000000000",
  "fef3b3dead1a6926d49aa32b12c22af54d9ff985": "1000000000000000000000",
  "fa410971ad229c3036f41acf852f2ac999281950": "3997400000000000000000",
  "de176b5284bcee3a838ba24f67fc7cbf67d78ef6": "37600000000000000000",
  "23120046f6832102a752a76656691c863e17e59c": "329800000000000000000",
  "a2f472fe4f22b77db489219ea4023d11582a9329": "40000000000000000000000",
  "f0d64cf9df09741133d170485fd24b005011d520": "498680000000000000000",
  "8b505e2871f7deb7a63895208e8227dcaa1bff05": "61216600000000000000000",
  "481e3a91bfdc2f1c8428a0119d03a41601417e1c": "1000000000000000000000",
  "bc69a0d2a31c3dbf7a9122116901b2bdfe9802a0": "3000000000000000000000",
  "20a81680e465f88790f0074f60b4f35f5d1e6aa5": "1279851000000000000000",
  "194a6bb302b8aba7a5b579df93e0df1574967625": "500000000000000000000",
  "264cc8086a8710f91b21720905912cd7964ae868": "26740000000000000000",
  "24aca08d5be85ebb9f3132dfc1b620824edfedf9": "18200000000000000000",
  "1851a063ccdb30549077f1d139e72de7971197d5": "2000000000000000000000",
  "f64a4ac8d540a9289c68d960d5fb7cc45a77831c": "2000000000000000000000",
  "c3db5657bb72f10d58f231fddf11980aff678693": "5910000000000000000000",
  "b46ace865e2c50ea4698d216ab455dff5a11cd72": "1000000000000000000000",
  "9faea13c733412dc4b490402bfef27a0397a9bc3": "310000000000000000000",
  "b40594c4f3664ef849cca6227b8a25aa690925ee": "4000000000000000000000",
  "672fa0a019088db3166f6119438d07a99f8ba224": "13370000000000000000000",
  "c1ffad07db96138c4b2a530ec1c7de29b8a0592c": "17600000000000000000",
  "87af25d3f6f8eea15313d5fe4557e810c524c083": "19700000000000000000000",
  "d6a22e598dabd38ea6e958bd79d48ddd9604f4df": "1000000000000000000000",
  "a2a435de44a01bd0ecb29e44e47644e46a0cdffb": "500171000000000000000",
  "549b47649cfad993e4064d2636a4baa0623305cc": "601650000000000000000",
  "1321b605026f4ffb296a3e0edcb390c9c85608b7": "2000000000000000000000",
  "b4bf24cb83686bc469869fefb044b909716993e2": "2000000000000000000000",
  "12d91a92d74fc861a729646db192a125b79f5374": "18200000000000000000",
  "7f0662b410298c99f311d3a1454a1eedba2fea76": "200000000000000000000",
  "83908aa7478a6d1c9b9b0281148f8f9f242b9fdc": "2000000000000000000000",
  "c1438c99dd51ef1ca8386af0a317e9b041457888": "223500000000000000000",
  "545bb070e781172eb1608af7fc2895d6cb87197e": "2244000000000000000000",
  "161d26ef6759ba5b9f20fdcd66f16132c352415e": "2000000000000000000000",
  "d7f370d4bed9d57c6f49c999de729ee569d3f4e4": "200000000000000000000",
  "90e35aabb2deef408bb9b5acef714457dfde6272": "100076000000000000000",
  "0fcfc4065008cfd323305f6286b57a4dd7eee23b": "20000000000000000000000",
  "cd725d70be97e677e3c8e85c0b26ef31e9955045": "1337000000000000000000",
  "dcf6b657266e91a4dae6033ddac15332dd8d2b34": "1760000000000000000000",
  "31f006f3494ed6c16eb92aaf9044fa8abb5fd5a3": "500000000000000000000",
  "cdea386f9d0fd804d02818f237b7d9fa7646d35e": "3012139000000000000000",
  "d45b3341e8f15c80329320c3977e3b90e7826a7e": "500000000000000000000",
  "0b649da3b96a102cdc6db652a0c07d65b1e443e6": "2000000000000000000000",
  "0a58fddd71898de773a74fdae45e7bd84ef43646": "20000000000000000000",
  "0256149f5b5063bea14e15661ffb58f9b459a957": "704000000000000000000",
  "4438e880cb2766b0c1ceaec9d2418fceb952a044": "133712000000000000000",
  "9ed80eda7f55054db9fb5282451688f26bb374c1": "300000000000000000000",
  "8dab948ae81da301d972e3f617a912e5a753712e": "400000000000000000000",
  "5b5d8c8eed6c85ac215661de026676823faa0a0c": "20000000000000000000000",
  "46722a36a01e841d03f780935e917d85d5a67abd": "14900000000000000000",
  "d4b8bdf3df9a51b0b91d16abbea05bb4783c8661": "1000000000000000000000",
  "98f6b8e6213dbc9a5581f4cce6655f95252bdb07": "319968000000000000000",
  "3599493ce65772cf93e98af1195ec0955dc98002": "1500048000000000000000",
  "ecab5aba5b828de1705381f38bc744b32ba1b437": "940000000000000000000",
  "9a82826d3c29481dcc2bd2950047e8b60486c338": "20000000000000000000000",
  "6c474bc66a54780066aa4f512eefa773abf919c7": "94000000000000000000",
  "d5903e9978ee20a38c3f498d63d57f31a39f6a06": "10380000000000000000000",
  "341480cc8cb476f8d01ff30812e7c70e05afaf5d": "2000000000000000000000",
  "af771039345a343001bc0f8a5923b126b60d509c": "985000000000000000000",
  "b5a4679685fa14196c2e9230c8c4e33bffbc10e2": "1400000000000000000000",
  "2a400dff8594de7228b4fd15c32322b75bb87da8": "95810000000000000000",
  "a1336dfb96b6bcbe4b3edf3205be5723c90fad52": "5000000000000000000000",
  "e9b1f1fca3fa47269f21b061c353b7f5e96d905a": "500000000000000000000",
  "0ee414940487fd24e390378285c5d7b9334d8b65": "2680000000000000000000",
  "6ab5b4c41cddb829690c2fda7f20c85e629dd5d5": "1860000000000000000000",
  "dd63042f25ed32884ad26e3ad959eb94ea36bf67": "21340000000000000000000",
  "c0b3f244bca7b7de5b48a53edb9cbeab0b6d88c0": "5820000000000000000000",
  "ed1a5c43c574d4e934299b24f1472cdc9fd6f010": "200000000000000000000",
  "b2d9ab9664bcf6df203c346fc692fd9cbab9205e": "438000000000000000000",
  "ede8c2cb876fbe8a4cca8290361a7ea01a69fdf8": "7813091000000000000000",
  "6a7c252042e7468a3ff773d6450bba85efa26391": "500000000000000000000",
  "a106e6923edd53ca8ed650968a9108d6ccfd9670": "9499935000000000000000",
  "031e25db516b0f099faebfd94f890cf96660836b": "2000000000000000000000",
  "7fdbc3a844e40d96b2f3a635322e6065f4ca0e84": "2000000000000000000000",
  "df47a61b72535193c561cccc75c3f3ce0804a20e": "398000000000000000000",
  "ed31305c319f9273d3936d8f5b2f71e9b1b22963": "100000000000000000000",
  "a6b2d573297360102c07a18fc21df2e7499ff4eb": "4011000000000000000000",
  "f68464bf64f2411356e4d3250efefe5c50a5f65b": "20000000000000000000",
  "927cc2bfda0e088d02eff70b38b08aa53cc30941": "1852700000000000000000",
  "41cb9896445f70a10a14215296daf614e32cf4d5": "1910000000000000000000",
  "3ad70243d88bf0400f57c8c1fd57811848af162a": "860000000000000000000",
  "63b9754d75d12d384039ec69063c0be210d5e0e3": "2694055000000000000000",
  "ad1799aad7602b4540cd832f9db5f11150f1687a": "2000000000000000000000",
  "a8b65ba3171a3f77a6350b9daf1f8d55b4d201eb": "745000000000000000000",
  "ad0a4ae478e9636e88c604f242cf5439c6d45639": "3520000000000000000000",
  "4cd0b0a6436362595ceade052ebc9b929fb6c6c0": "2000000000000000000000",
  "c1d4af38e9ba799040894849b8a8219375f1ac78": "20000000000000000000000",
  "49ddee902e1d0c99d1b11af3cc8a96f78e4dcf1a": "199358000000000000000",
  "ae842210f44d14c4a4db91fc9d3b3b50014f7bf7": "4000000000000000000000",
  "10a1c42dc1ba746986b985a522a73c93eae64c63": "1000000000000000000000",
  "5103bc09933e9921fd53dc536f11f05d0d47107d": "4000000000000000000000",
  "c88eec54d305c928cc2848c2fee23531acb96d49": "1999946000000000000000",
  "9a2ce43b5d89d6936b8e8c354791b8afff962425": "2000000000000000000000",
  "562020e3ed792d2f1835fe5f55417d5111460c6a": "20000000000000000000000",
  "ed16ce39feef3bd7f5d162045e0f67c0f00046bb": "20000000000000000000",
  "ab948a4ae3795cbca13126e19253bdc21d3a8514": "200000000000000000000",
  "c12b7f40df9a2f7bf983661422ab84c9c1f50858": "8000000000000000000000",
  "62e6b2f5eb94fa7a43831fc87e254a3fe3bf8f89": "250000000000000000000",
  "423bca47abc00c7057e3ad34fca63e375fbd8b4a": "18000000000000000000000",
  "5ff326cd60fd136b245e29e9087a6ad3a6527f0d": "1880000000000000000000",
  "79ffb4ac13812a0b78c4a37b8275223e176bfda5": "17300000000000000000",
  "f757fc8720d3c4fa5277075e60bd5c411aebd977": "2000000000000000000000",
  "0bdbc54cc8bdbbb402a08911e2232a5460ce866b": "3000000000000000000000",
  "9ee9760cc273d4706aa08375c3e46fa230aff3d5": "8950000000000000000000",
  "d23a24d7f9468343c143a41d73b88f7cbe63be5e": "200000000000000000000",
  "46d80631284203f6288ecd4e5758bb9d41d05dbe": "2000000000000000000000",
  "3f4cd1399f8a34eddb9a17a471fc922b5870aafc": "200000000000000000000",
  "44c54eaa8ac940f9e80f1e74e82fc14f1676856a": "7880000000000000000000",
  "aec27ff5d7f9ddda91183f46f9d52543b6cd2b2f": "450000000000000000000",
  "203c6283f20df7bc86542fdfb4e763ecdbbbeef5": "25000000000000000000000",
  "bcaf347918efb2d63dde03e39275bbe97d26df50": "100000000000000000000",
  "974d0541ab4a47ec7f75369c0069b64a1b817710": "400000000000000000000",
  "5da54785c9bd30575c89deb59d2041d20a39e17b": "1967031000000000000000",
  "1fb463a0389983df7d593f7bdd6d78497fed8879": "20000000000000000000",
  "6e1ea4b183e252c9bb7767a006d4b43696cb8ae9": "294245000000000000000",
  "c2aa74847e86edfdd3f3db22f8a2152feee5b7f7": "2048852000000000000000",
  "a13b9d82a99b3c9bba5ae72ef2199edc7d3bb36c": "1999944000000000000000",
  "5135fb8757600cf474546252f74dc0746d06262c": "2000000000000000000000",
  "43e7ec846358d7d0f937ad1c350ba069d7bf72bf": "118800000000000000000",
  "f2ed3e77254acb83231dc0860e1a11242ba627db": "1980000000000000000000",
  "c0a02ab94ebe56d045b41b629b98462e3a024a93": "100000000000000000000",
  "f21549bdd1487912f900a7523db5f7626121bba3": "10000000000000000000000",
  "886d0a9e17c9c095af2ea2358b89ec705212ee94": "28000000000000000000",
  "211b29cefc79ae976744fdebcebd3cbb32c51303": "14000000000000000000000",
  "b8c2703d8c3f2f44c584bc10e7c0a6b64c1c097e": "5550000000000000000000",
  "ec30addd895b82ee319e54fb04cb2bb03971f36b": "2000000000000000000000",
  "b71b62f4b448c02b1201cb5e394ae627b0a560ee": "500000000000000000000",
  "e1334e998379dfe983177062791b90f80ee22d8d": "500000000000000000000",
  "1d633097a85225a1ff4321b12988fdd55c2b3844": "4000000000000000000000",
  "8bd8d4c4e943f6c8073921dc17e3e8d7a0761627": "2933330000000000000000",
  "a5d96e697d46358d119af7819dc7087f6ae47fef": "14605131000000000000000",
  "d0809498c548047a1e2a2aa6a29cd61a0ee268bd": "2000000000000000000000",
  "3cd6b7593cbee77830a8b19d0801958fcd4bc57a": "500000000000000000000",
  "ead4d2eefb76abae5533961edd11400406b298fc": "3880000000000000000000",
  "6331028cbb5a21485bc51b565142993bdb2582a9": "534800000000000000000",
  "163bad4a122b457d64e8150a413eae4d07023e6b": "18800000000000000000",
  "c522e20fbf04ed7f6b05a37b4718d6fce0142e1a": "4000000000000000000000",
  "2d9bad6f1ee02a70f1f13def5cccb27a9a274031": "1790000000000000000000",
  "5ed0d6338559ef44dc7a61edeb893fa5d83fa1b5": "220000000000000000000",
  "ec8c1d7b6aaccd429db3a91ee4c9eb1ca4f6f73c": "4250000000000000000000",
  "3896ad743579d38e2302454d1fb6e2ab69e01bfd": "1880000000000000000000",
  "e73ccf436725c151e255ccf5210cfce5a43f13e3": "19982000000000000000",
  "9483d98f14a33fdc118d403955c29935edfc5f70": "459600000000000000000",
  "1cfcf7517f0c08459720942b647ad192aa9c8828": "800000000000000000000",
  "8d378f0edc0bb0f0686d6a20be6a7692c4fa24b8": "100000000000000000000",
  "06f68de3d739db41121eacf779aada3de8762107": "28000000000000000000",
  "9909650dd5b1397b8b8b0eb69499b291b0ad1213": "200000000000000000000",
  "b66675142e3111a1c2ea1eb2419cfa42aaf7a234": "1000000000000000000000",
  "7836f7ef6bc7bd0ff3acaf449c84dd6b1e2c939f": "4142296000000000000000",
  "3ddedbe48923fbf9e536bf9ffb0747c9cdd39eef": "16100000000000000000000",
  "c47d610b399250f70ecf1389bab6292c91264f23": "288800000000000000000",
  "51a6d627f66a8923d88d6094c4715380d3057cb6": "1152044000000000000000",
  "6c0cc917cbee7d7c099763f14e64df7d34e2bf09": "250000000000000000000",
  "aaaae68b321402c8ebc13468f341c63c0cf03fce": "1520000000000000000000",
  "819cdaa5303678ef7cec59d48c82163acc60b952": "14523448000000000000000",
  "d071192966eb69c3520fca3aa4dd04297ea04b4e": "110000000000000000000",
  "e53425d8df1f11c341ff58ae5f1438abf1ca53cf": "322000000000000000000",
  "8ffe322997b8e404422d19c54aadb18f5bc8e9b7": "3940000000000000000000",
  "305f78d618b990b4295bac8a2dfa262884f804ea": "4000000000000000000000",
  "274d69170fe7141401882b886ac4618c6ae40edb": "955000000000000000000",
  "69c94e07c4a9be3384d95dfa3cb9290051873b7b": "70000000000000000000",
  "859c600cf13d1d0273d5d1da3cd789e495899f27": "2674000000000000000000",
  "c06cebbbf7f5149a66f7eb976b3e47d56516da2f": "2000000000000000000000",
  "37bbc47212d82fcb5ee08f5225ecc2041ad2da7d": "3280000000000000000000",
  "11e7997edd904503d77da6038ab0a4c834bbd563": "388000000000000000000",
  "d333627445f2d787901ef33bb2a8a3675e27ffec": "400000000000000000000",
  "16a58e985dccd707a594d193e7cca78b5d027849": "1360000000000000000000",
  "f8ae857b67a4a2893a3fbe7c7a87ff1c01c6a6e7": "4000000000000000000000",
  "491561db8b6fafb9007e62d050c282e92c4b6bc8": "30000000000000000000000",
  "21df1ec24b4e4bfe79b0c095cebae198f291fbd1": "20000000000000000000000",
  "e208812a684098f3da4efe6aba256256adfe3fe6": "2000000000000000000000",
  "f4ec8e97a20aa5f8dd206f55207e06b813df2cc0": "200000000000000000000",
  "29eb7eefdae9feb449c63ff5f279d67510eb1422": "19400000000000000000",
  "0d678706d037187f3e22e6f69b99a592d11ebc59": "1580000000000000000000",
  "de6d363106cc6238d2f092f0f0372136d1cd50c6": "5348000000000000000000",
  "c8710d7e8b5a3bd69a42fe0fa8b87c357fddcdc8": "4000000000000000000000",
  "5267f4d41292f370863c90d793296903843625c7": "1400000000000000000000",
  "4cda41dd533991290794e22ae324143e309b3d3d": "2400000000000000000000",
  "f8a50cee2e688ceee3aca4d4a29725d4072cc483": "2000000000000000000000",
  "5ed3bbc05240e0d399eb6ddfe60f62de4d9509af": "193999806000000000000000",
  "0befb54707f61b2c9fb04715ab026e1bb72042bd": "4000000000000000000000",
  "cab9a301e6bd46e940355028eccd40ce4d5a1ac3": "400000000000000000000",
  "64672da3ab052821a0243d1ce4b6e0a36517b8eb": "200000000000000000000",
  "eac0827eff0c6e3ff28a7d4a54f65cb7689d7b99": "2856500000000000000000",
  "f4b6cdcfcb24230b337d770df6034dfbd4e1503f": "19000000000000000000000",
  "7be2f7680c802da6154c92c0194ae732517a7169": "18200000000000000000",
  "869f1aa30e4455beb1822091de5cadec79a8f946": "8000000000000000000000",
  "c4681e73bb0e32f6b726204831ff69baa4877e32": "1820000000000000000000",
  "962cd22a8edf1e4f4e55b4b15ddbfb5d9d541971": "2000000000000000000000",
  "131df8d330eb7cc7147d0a55576f05de8d26a8b7": "188000000000000000000",
  "19f99f2c0b46ce8906875dc9f90ae104dae35594": "4507300000000000000000",
  "91bb3f79022bf3c453f4ff256e269b15cf2c9cbd": "1519000000000000000000",
  "7301dc4cf26d7186f2a11bf8b08bf229463f64a3": "2000000000000000000000",
  "7cbca88fca6a0060b960985c9aa1b02534dc2208": "462500000000000000000",
  "f3c1abd29dc57b41dc192d0e384d021df0b4f6d4": "2798000000000000000000",
  "5d32f6f86e787ff78e63d78b0ef95fe6071852b8": "401100000000000000000",
  "1678c5f2a522393225196361894f53cc752fe2f3": "1936000000000000000000",
  "1cf04cb14380059efd3f238b65d5beb86afa14d8": "20000000000000000000",
  "52e1731350f983cc2c4189842fde0613fad50ce1": "11640000000000000000000",
  "d0b11d6f2bce945e0c6a5020c3b52753f803f9d1": "200000000000000000000",
  "409bd75085821c1de70cdc3b11ffc3d923c74010": "4000000000000000000000",
  "0bb7160aba293762f8734f3e0326ffc9a4cac190": "1000000000000000000000",
  "7aad4dbcd3acf997df93586956f72b64d8ad94ee": "4000000000000000000000",
  "2dec98329d1f96c3a59caa7981755452d4da49d5": "200000000000000000000",
  "c18ab467feb5a0aadfff91230ff056464d78d800": "2000000000000000000000",
  "c90c3765156bca8e4897ab802419153cbe5225a9": "200000000000000000000",
  "85c8f3cc7a354feac99a5e7bfe7cdfa351cfe355": "400000000000000000000",
  "f4fc4d39bc0c2c4068a36de50e4ab4d4db7e340a": "25380000000000000000",
  "f50abbd4aa45d3eb88515465a8ba0b310fd9b521": "6685000000000000000000",
  "4d200110124008d56f76981256420c946a6ff45c": "199955000000000000000",
  "f4ba6a46d55140c439cbcf076cc657136262f4f8": "2000000000000000000000",
  "fa7adf660b8d99ce15933d7c5f072f3cbeb99d33": "5910000000000000000000",
  "84503334630d77f74147f68b2e086613c8f1ade9": "1600000000000000000000",
  "31ed858788bda4d5270992221cc04206ec62610d": "1176000000000000000000",
  "bfbca418d3529cb393081062032a6e1183c6b2dc": "8000000000000000000000",
  "8263ece5d709e0d7ae71cca868ed37cd2fef807b": "990000000000000000000",
  "23ba3864da583dab56f420873c37679690e02f00": "9800000000000000000000",
  "cedcb3a1d6843fb6bef643617deaf38f8e98dd5f": "477500000000000000000",
  "8fac748f784a0fed68dba43319b42a75b4649c6e": "910000000000000000000",
  "18b8bcf98321da61fb4e3eacc1ec5417272dc27e": "880000000000000000000",
  "776943ffb2ef5cdd35b83c28bc046bd4f4677098": "3000000000000000000000",
  "fb8113f94d9173eefd5a3073f516803a10b286ae": "80000000000000000000",
  "3e8349b67f5745449f659367d9ad4712db5b895a": "1820000000000000000000",
  "79cfa9780ae6d87b2c31883f09276986c89a6735": "1000000000000000000000",
  "5006fe4c22173980f00c74342b39cd231c653129": "2000000000000000000000",
  "13848b46ea75beb7eaa85f59d866d77fd24cf21a": "50000000000000000000000",
  "d64a2d50f8858537188a24e0f50df1681ab07ed7": "38800000000000000000000",
  "4f9ce2af9b8c5e42c6808a3870ec576f313545d1": "10000000000000000000000",
  "8764d02722000996ecd475b433298e9f540b05bf": "200000000000000000000",
  "3b7c77dbe95dc2602ce3269a9545d04965fefdbd": "2000000000000000000000",
  "c9dcbb056f4db7d9da39936202c5bd8230b3b477": "20000000000000000000000",
  "9ecbabb0b22782b3754429e1757aaba04b81189f": "823743000000000000000",
  "831c44b3084047184b2ad218680640903750c45d": "1970000000000000000000",
  "ff8eb07de3d49d9d52bbe8e5b26dbe1d160fa834": "3986000000000000000000",
  "8ccf3aa21ab742576ad8c422f71bb188591dea8a": "1000000000000000000000",
  "ddac312a9655426a9c0c9efa3fd82559ef4505bf": "401100000000000000000",
  "9a3e2b1bf346dd070b027357feac44a4b2c97db8": "10000000000000000000000",
  "69d39d510889e552a396135bfcdb06e37e387633": "4000000000000000000000",
  "83a3148833d9644984f7c475a7850716efb480ff": "3400000000000000000000",
  "62b4a9226e61683c72c183254690daf511b4117a": "260000000000000000000",
  "50763add868fd7361178342fc055eaa2b95f6846": "66838000000000000000",
  "91898eab8c05c0222883cd4db23b7795e1a24ad7": "2000000000000000000000",
  "066647cfc85d23d37605573d208ca154b244d76c": "10000000000000000000000",
  "aaf9ee4b886c6d1e95496fd274235bf4ecfcb07d": "1400000000000000000000",
  "06860a93525955ff624940fadcffb8e149fd599c": "1999800000000000000000",
  "e81c2d346c0adf4cc56708f6394ba6c8c8a64a1e": "2000000000000000000000",
  "41a8e236a30e6d63c1ff644d132aa25c89537e01": "20000000000000000000",
  "6a679e378fdce6bfd97fe62f043c6f6405d79e99": "4000000000000000000000",
  "933436c8472655f64c3afaaf7c4c621c83a62b38": "1000000000000000000000",
  "abe07ced6ac5ddf991eff6c3da226a741bd243fe": "10000000000000000000000",
  "bb56a404723cff20d0685488b05a02cdc35aacaa": "20000000000000000000",
  "0d551ec1a2133c981d5fc6a8c8173f9e7c4f47af": "2000000000000000000000",
  "23376ecabf746ce53321cf42c86649b92b67b2ff": "2000000000000000000000",
  "644ba6c61082e989109f5c11d4b40e991660d403": "4000000000000000000000",
  "680d5911ed8dd9eec45c060c223f89a7f620bbd5": "20000000000000000000000",
  "cb1bb6f1da5eb10d4899f7e61d06c1b00fdfb52d": "1038000000000000000000",
  "303a30ac4286ae17cf483dad7b870c6bd64d7b4a": "500000000000000000000",
  "7b0b31ff6e24745ead8ed9bb85fc0bf2fe1d55d4": "800000000000000000000",
  "854691ce714f325ced55ce5928ce9ba12facd1b8": "4380000000000000000000",
  "a13cfe826d6d1841dcae443be8c387518136b5e8": "140000000000000000000000",
  "5fcd84546896dd081db1a320bd4d8c1dd1528c4c": "20000000000000000000",
  "3db5fe6a68bd3612ac15a99a61e555928eeceaf3": "1580000000000000000000",
  "7a79e30ff057f70a3d0191f7f53f761537af7dff": "400000000000000000000",
  "3d3fad49c9e5d2759c8e8e5a7a4d60a0dd135692": "20000000000000000000",
  "05a830724302bc0f6ebdaa1ebeeeb46e6ce00b39": "98500000000000000000",
  "e4b6ae22c7735f5b89f34dd77ad0975f0acc9181": "1000000000000000000000",
  "3f2dd55db7eab0ebee65b33ed8202c1e992e958b": "820000000000000000000",
  "395d6d255520a8db29abc47d83a5db8a1a7df087": "100000000000000000000",
  "1cc90876004109cd79a3dea866cb840ac364ba1b": "2000000000000000000000",
  "c83e9d6a58253beebeb793e6f28b054a58491b74": "281800000000000000000",
  "901d99b699e5c6911519cb2076b4c76330c54d22": "2000000000000000000000",
  "3a9132b7093d3ec42e1e4fb8cb31ecdd43ae773c": "2000000000000000000000",
  "b41eaf5d51a5ba1ba39bb418dbb54fab750efb1f": "1000000000000000000000",
  "aa493d3f4fb866491cf8f800efb7e2324ed7cfe5": "1700000000000000000000",
  "509982f56237ee458951047e0a2230f804e2e895": "17500000000000000000000",
  "316e92a91bbda68b9e2f98b3c048934e3cc0b416": "2000000000000000000000",
  "a3430e1f647f321ed34739562323c7d623410b56": "999942000000000000000",
  "fca43bbc23a0d321ba9e46b929735ce7d8ef0c18": "20000000000000000000",
  "ff45cb34c928364d9cc9d8bb00373474618f06f3": "100000000000000000000",
  "8c999591fd72ef7111efca7a9e97a2356b3b000a": "4084000000000000000000",
  "8579dadf1a395a3471e20b6f763d9a0ff19a3f6f": "4000000000000000000000",
  "c8d4e1599d03b79809e0130a8dc38408f05e8cd3": "2945500000000000000000",
  "2abce1808940cd4ef5b5e05285f82df7a9ab5e03": "9800000000000000000000",
  "0bb0c12682a2f15c9b5741b2385cbe41f034068e": "1500000000000000000000",
  "08b7bdcf944d5570838be70460243a8694485858": "2000000000000000000000",
  "c452e0e4b3d6ae06b836f032ca09db409ddfe0fb": "800000000000000000000",
  "48d4f2468f963fd79a006198bb67895d2d5aa4d3": "1400000000000000000000",
  "f9e7222faaf0f4da40c1c4a40630373a09bed7b6": "2865000000000000000000",
  "bf59aee281fa43fe97194351a9857e01a3b897b2": "600000000000000000000",
  "da0d4b7ef91fb55ad265f251142067f10376ced6": "20000000000000000000000",
  "2c6f5c124cc789f8bb398e3f889751bc4b602d9e": "24928000000000000000",
  "c85ef27d820403805fc9ed259fff64acb8d6346a": "2000000000000000000000",
  "9aa8308f42910e5ade09c1a5e282d6d91710bdbf": "200000000000000000000",
  "9e4cec353ac3e381835e3c0991f8faa5b7d0a8e6": "9999917000000000000000",
  "137cf341e8516c815814ebcd73e6569af14cf7bc": "1000000000000000000000",
  "889da662eb4a0a2a069d2bc24b05b4ee2e92c41b": "1663417000000000000000",
  "0998d8273115b56af43c505e087aff0676ed3659": "3999984000000000000000",
  "3e4d13c55a84e46ed7e9cb90fd355e8ad991e38f": "1000000000000000000000",
  "abc068b4979b0ea64a62d3b7aa897d73810dc533": "1970000000000000000000",
  "d8fdf546674738c984d8fab857880b3e4280c09e": "20000000000000000000",
  "aff161740a6d909fe99c59a9b77945c91cc91448": "60000000000000000000",
  "92ad1b3d75fba67d54663da9fc848a8ade10fa67": "2000000000000000000000",
  "819eb4990b5aba5547093da12b6b3c1093df6d46": "1000000000000000000000",
  "643d9aeed4b180947ed2b9207cce4c3ddc55e1f7": "200000000000000000000",
  "ab3e62e77a8b225e411592b1af300752fe412463": "9850000000000000000000",
  "650b425555e4e4c51718146836a2c1ee77a5b421": "20000000000000000000000",
  "ba8e46d69d2e2343d86c60d82cf42c2041a0c1c2": "100000000000000000000",
  "f9570e924c95debb7061369792cf2efec2a82d5e": "20000000000000000000",
  "4dc4bf5e7589c47b28378d7503cf96488061dbbd": "1760000000000000000000",
  "3d7ea5bf03528100ed8af8aed2653e921b6e6725": "1000000000000000000000",
  "a02bde6461686e19ac650c970d0672e76dcb4fc2": "8865000000000000000000",
  "b0e760bb07c081777345e0578e8bc898226d4e3b": "2000000000000000000000",
  "979cbf21dfec8ace3f1c196d82df962534df394f": "2832860000000000000000",
  "9f8245c3ab7d173164861cd3991b94f1ba40a93a": "2860000000000000000000",
  "c25cf826550c8eaf10af2234fef904ddb95213be": "1000000000000000000000",
  "967bfaf76243cdb9403c67d2ceefdee90a3feb73": "970582000000000000000",
  "0b2113504534642a1daf102eee10b9ebde76e261": "2733351000000000000000",
  "74bc4a5e2045f4ff8db184cf3a9b0c065ad807d2": "2000000000000000000000",
  "f1da40736f99d5df3b068a5d745fafc6463fc9b1": "121546000000000000000",
  "0fa6c7b0973d0bae2940540e247d3627e37ca347": "1000000000000000000000",
  "72b05962fb2ad589d65ad16a22559eba1458f387": "133700000000000000000",
  "6ceae3733d8fa43d6cd80c1a96e8eb93109c83b7": "298000000000000000000",
  "28eaea78cd4d95faecfb68836eafe83520f3bbb7": "200000000000000000000",
  "f49f6f9baabc018c8f8e119e0115f491fc92a8a4": "10000000000000000000000",
  "833316985d47742bfed410604a91953c05fb12b0": "2000000000000000000000",
  "ead75016e3a0815072b6b108bcc1b799acf0383e": "2000000000000000000000",
  "0032403587947b9f15622a68d104d54d33dbd1cd": "77500000000000000000",
  "8f64b9c1246d857831643107d355b5c75fef5d4f": "1999944000000000000000",
  "15dcafcc2bace7b55b54c01a1c514626bf61ebd8": "9400000000000000000000",
  "6886ada7bbb0617bda842191c68c922ea3a8ac82": "1160000000000000000000",
  "f736dc96760012388fe88b66c06efe57e0d7cf0a": "2100000000000000000000",
  "0b288a5a8b75f3dc4191eb0457e1c83dbd204d25": "4853000000000000000000",
  "56b6c23dd2ec90b4728f3bb2e764c3c50c85f144": "1000000000000000000000",
  "6310b020fd98044957995092090f17f04e52cdfd": "1580000000000000000000",
  "b0baeb30e313776c4c6d247402ba4167afcda1cc": "1970000000000000000000",
  "7641f7d26a86cddb2be13081810e01c9c83c4b20": "13370000000000000000",
  "07a8dadec142571a7d53a4297051786d072cba55": "22729000000000000000",
  "cc73dd356b4979b579b401d4cc7a31a268ddce5a": "500000000000000000000",
  "adf1acfe99bc8c14b304c8d905ba27657b8a7bc4": "20000000000000000000000",
  "72dabb5b6eed9e99be915888f6568056381608f8": "208433000000000000000",
  "9de20ae76aa08263b205d5142461961e2408d266": "252000000000000000000",
  "9d4ff989b7bed9ab109d10c8c7e55f02d76734ad": "1000000000000000000000",
  "e58dd23238ee6ea7c2138d385df500c325f376be": "1820000000000000000000",
  "4bd6dd0cff23400e1730ba7b894504577d14e74a": "206028000000000000000000",
  "35147430c3106500e79fa2f502462e94703c23b1": "1999944000000000000000",
  "c0ae14d724832e2fce2778de7f7b8daf7b12a93e": "20000000000000000000",
  "b57413060af3f14eb479065f1e9d19b3757ae8cc": "40000000000000000000",
  "7d04d2edc058a1afc761d9c99ae4fc5c85d4c8a6": "314807840000000000000000",
  "1c94d636e684eb155895ce6db4a2588fba1d001b": "2000000000000000000000",
  "c721b2a7aa44c21298e85039d00e2e460e670b9c": "140800000000000000000",
  "2d89a8006a4f137a20dc2bec46fe2eb312ea9654": "200000000000000000000",
  "646afba71d849e80c0ed59cac519b278e7f7abe4": "1000000000000000000000",
  "71f2cdd1b046e2da2fbb5a26723422b8325e25a3": "99960000000000000000",
  "2c9fa72c95f37d08e9a36009e7a4b07f29bad41a": "16100000000000000000",
  "848fbd29d67cf4a013cb02a4b176ef244e9ee68d": "20116000000000000000",
  "68190ca885da4231874c1cfb42b1580a21737f38": "3820000000000000000000",
  "9adf458bff3599eee1a26398853c575bc38c6313": "280000000000000000000",
  "b72220ade364d0369f2d2da783ca474d7b9b34ce": "499986000000000000000",
  "38e2af73393ea98a1d993a74df5cd754b98d529a": "1790000000000000000000",
  "4d38d90f83f4515c03cc78326a154d358bd882b7": "185000000000000000000",
  "aa8eb0823b07b0e6d20aadda0e95cf3835be192e": "32000000000000000000",
  "008639dabbe3aeac887b5dc0e43e13bcd287d76c": "310200000000000000000",
  "fa3a0c4b903f6ea52ea7ab7b8863b6a616ad6650": "20000000000000000000",
  "e26bf322774e18288769d67e3107deb7447707b8": "2000000000000000000000",
  "e061a4f2fc77b296d19ada238e49a5cb8ecbfa70": "4000000000000000000000",
  "b320834836d1dbfda9e7a3184d1ad1fd4320ccc0": "1000000000000000000000",
  "0ed3bb3a4eb554cfca97947d575507cdfd6d21d8": "547863000000000000000",
  "32fa0e86cd087dd68d693190f32d93310909ed53": "4000000000000000000000",
  "5b759fa110a31c88469f54d44ba303d57dd3e10f": "1683760000000000000000",
  "136f4907cab41e27084b9845069ff2fd0c9ade79": "4000000000000000000000",
  "3d89e505cb46e211a53f32f167a877bec87f4b0a": "25019000000000000000",
  "57a852fdb9b1405bf53ccf9508f83299d3206c52": "2000000000000000000000",
  "747abc9649056d3926044d28c3ad09ed17b67d70": "5000057000000000000000",
  "5c29f9e9a523c1f8669448b55c48cbd47c25e610": "964320000000000000000",
  "30a9da72574c51e7ee0904ba1f73a6b7b83b9b9d": "20200000000000000000",
  "220e2b92c0f6c902b513d9f1e6fab6a8b0def3d7": "800000000000000000000",
  "5af7c072b2c5acd71c76addcce535cf7f8f93585": "20000000000000000000",
  "81556db27349ab8b27004944ed50a46e941a0f5f": "3998000000000000000000",
  "987618c85656207c7bac1507c0ffefa2fb64b092": "64419000000000000000",
  "e0f372347c96b55f7d4306034beb83266fd90966": "400000000000000000000",
  "71784c105117c1f68935797fe159abc74e43d16a": "2001600000000000000000",
  "9284f96ddb47b5186ee558aa31324df5361c0f73": "16000000000000000000000",
  "a60c1209754f5d87b181da4f0817a81859ef9fd8": "50000000000000000000",
  "5afda9405c8e9736514574da928de67456010918": "6008500000000000000000",
  "6978696d5150a9a263513f8f74c696f8b1397cab": "6640000000000000000000",
  "a9ad1926bc66bdb331588ea8193788534d982c98": "30000000000000000000000",
  "e3f80b40fb83fb97bb0d5230af4f6ed59b1c7cc8": "1337000000000000000000",
  "e207578e1f4ddb8ff6d5867b39582d71b9812ac5": "3880000000000000000000",
  "86883d54cd3915e549095530f9ab1805e8c5432d": "4000000000000000000000",
  "6974c8a414ceaefd3c2e4dfdbef430568d9a960b": "334250000000000000000",
  "532d32b00f305bcc24dcef56817d622f34fb2c24": "1800000000000000000000",
  "761f8a3a2af0a8bdbe1da009321fb29764eb62a1": "10000000000000000000000",
  "4677b04e0343a32131fd6abb39b1b6156bba3d5b": "200000000000000000000",
  "ef69781f32ffce33346f2c9ae3f08493f3e82f89": "18200000000000000000",
  "e3b3d2c9bf570be6a2f72adca1862c310936a43c": "100100000000000000000",
  "d19caf39bb377fdf2cf19bd4fb52591c2631a63c": "1000000000000000000000",
  "5d68324bcb776d3ffd0bf9fea91d9f037fd6ab0f": "2000000000000000000000",
  "1c99fe9bb6c6d1066d912099547fd1f4809eacd9": "2000000000000000000000",
  "bbfe0a830cace87b7293993a7e9496ce64f8e394": "6000000000000000000000",
  "26c0054b700d3a7c2dcbe275689d4f4cad16a335": "2000000000000000000000",
  "7d7e7c61779adb7706c94d32409a2bb4e994bf60": "865992000000000000000",
  "d037d215d11d1df3d54fbd321cd295c5465e273b": "1400000000000000000000",
  "08166f02313feae18bb044e7877c808b55b5bf58": "1970000000000000000000",
  "781b1501647a2e06c0ed43ff197fccec35e1700b": "3000000000000000000000",
  "74316adf25378c10f576d5b41a6f47fa98fce33d": "336082000000000000000",
  "44e2fdc679e6bee01e93ef4a3ab1bcce012abc7c": "410231000000000000000",
  "178eaf6b8554c45dfde16b78ce0c157f2ee31351": "320000000000000000000",
  "cf923a5d8fbc3d01aa079d1cfe4b43ce071b1611": "2000000000000000000000",
  "0c28847e4f09dfce5f9b25af7c4e530f59c880fe": "1000000000000000000000",
  "54ce88275956def5f9458e3b95decacd484021a0": "2000000000000000000000",
  "9d4213339a01551861764c87a93ce8f85f87959a": "200000000000000000000",
  "e559b5fd337b9c5572a9bf9e0f2521f7d446dbe4": "200000000000000000000",
  "dcb03bfa6c1131234e56b7ea7c4f721487546b7a": "1337000000000000000000",
  "db6ff71b3db0928f839e05a7323bfb57d29c87aa": "910000000000000000000",
  "eb7c202b462b7cc5855d7484755f6e26ef43a115": "2000000000000000000000",
  "323486ca64b375474fb2b759a9e7a135859bd9f6": "400000000000000000000",
  "2c1df8a76f48f6b54bcf9caf56f0ee1cf57ab33d": "10118000000000000000000",
  "2cd87866568dd81ad47d9d3ad0846e5a65507373": "400000000000000000000",
  "8566610901aace38b83244f3a9c831306a67b9dc": "3256000000000000000000",
  "1c257ad4a55105ea3b58ed374b198da266c85f63": "10000000000000000000000",
  "cf4f1138f1bd6bf5b6d485cce4c1017fcb85f07d": "882038000000000000000",
  "c934becaf71f225f8b4a4bf7b197f4ac9630345c": "20000000000000000000000",
  "1e2bf4ba8e5ef18d37de6d6ad636c4cae489d0cc": "2000000000000000000000",
  "9d78a975b7db5e4d8e28845cfbe7e31401be0dd9": "1340000000000000000000",
  "16aa52cb0b554723e7060f21f327b0a68315fea3": "250000000000000000000",
  "97e28973b860c567402800fbb63ce39a048a3d79": "97000000000000000000",
  "4ac5acad000b8877214cb1ae00eac9a37d59a0fd": "4000000000000000000000",
  "01226e0ad8d62277b162621c62c928e96e0b9a8c": "2000000000000000000000",
  "479abf2da4d58716fd973a0d13a75f530150260a": "20000000000000000000",
  "31d81d526c195e3f10b5c6db52b5e59afbe0a995": "264000000000000000000",
  "749087ac0f5a97c6fad021538bf1d6cda18e0daa": "1000000000000000000000",
  "1565af837ef3b0bd4e2b23568d5023cd34b16498": "393284000000000000000",
  "997d6592a31589acc31b9901fbeb3cc3d65b3215": "2000000000000000000000",
  "9d207517422cc0d60de7c237097a4d4fce20940c": "500000000000000000000",
  "24b8b446debd1947955dd084f2c544933346d3ad": "4324135000000000000000",
  "107a03cf0842dbdeb0618fb587ca69189ec92ff5": "1970000000000000000000",
  "7f603aec1759ea5f07c7f8d41a1428fbbaf9e762": "20000000000000000000",
  "53a244672895480f4a2b1cdf7da5e5a242ec4dbc": "1000000000000000000000",
  "7db4c7d5b797e9296e6382f203693db409449d62": "400000000000000000000",
  "2ae82dab92a66389eea1abb901d1d57f5a7cca0b": "2000000000000000000000",
  "16bc40215abbd9ae5d280b95b8010b4514ff1292": "200000000000000000000",
  "bba4fac3c42039d828e742cde0efffe774941b39": "1999946000000000000000",
  "5431ca427e6165a644bae326bd09750a178c650d": "2000000000000000000000",
  "dcf33965531380163168fc11f67e89c6f1bc178a": "334885000000000000000",
  "65fd02d704a12a4dace9471b0645f962a89671c8": "28615000000000000000",
  "135d1719bf03e3f866312479fe338118cd387e70": "2000000000000000000000",
  "f3159866c2bc86bba40f9d73bb99f1eee57bb9d7": "1000000000000000000000",
  "e3a4621b66004588e31206f718cb00a319889cf0": "2000000000000000000000",
  "abcdbc8f1dd13af578d4a4774a62182bedf9f9be": "36660000000000000000",
  "9fbe066de57236dc830725d32a02aef9246c6c5e": "2000000000000000000000",
  "81cfad760913d3c322fcc77b49c2ae3907e74f6e": "197000000000000000000",
  "0ab59d390702c9c059db148eb4f3fcfa7d04c7e7": "18200000000000000000",
  "2c2db28c3309375eea3c6d72cd6d0eec145afcc0": "2000000000000000000000",
  "08306de51981e7aca1856859b7c778696a6b69f9": "3200000000000000000000",
  "f814799f6ddf4dcb29c7ee870e75f9cc2d35326d": "1000000000000000000000",
  "ee867d20916bd2e9c9ece08aa04385db667c912e": "50000000000000000000000",
  "97a86f01ce3f7cfd4441330e1c9b19e1b10606ef": "2000000000000000000000",
  "4c759813ad1386bed27ffae9e4815e3630cca312": "2000000000000000000000",
  "8f226096c184ebb40105e08dac4d22e1c2d54d30": "306552000000000000000",
  "13acada8980affc7504921be84eb4944c8fbb2bd": "1601600000000000000000",
  "122dcfd81addb97d1a0e4925c4b549806e9f3beb": "1514954000000000000000",
  "232f525d55859b7d4e608d20487faadb00293135": "4000000000000000000000",
  "6f7ac681d45e418fce8b3a1db5bc3be6f06c9849": "2000000000000000000000",
  "0c8692eeff2a53d6d1688ed56a9ddbbd68dabba1": "2000000000000000000000",
  "6a6337833f8f6a6bf10ca7ec21aa810ed444f4cb": "1028200000000000000000",
  "209377b6ad3fe101c9685b3576545c6b1684e73c": "1820000000000000000000",
  "560fc08d079f047ed8d7df75551aa53501f57013": "7600000000000000000000",
  "8e78f351457d016f4ad2755ec7424e5c21ba6d51": "146000000000000000000",
  "2ce11a92fad024ff2b3e87e3b542e6c60dcbd996": "4000000000000000000000",
  "8ab839aeaf2ad37cb78bacbbb633bcc5c099dc46": "2000000000000000000000",
  "673144f0ec142e770f4834fee0ee311832f3087b": "500038000000000000000",
  "ba8a63f3f40de4a88388bc50212fea8e064fbb86": "2000000000000000000000",
  "ee899b02cbcb3939cd61de1342d50482abb68532": "1760000000000000000000",
  "c2d9eedbc9019263d9d16cc5ae072d1d3dd9db03": "20000000000000000000000",
  "355c0c39f5d5700b41d375b3f17851dcd52401f9": "3979000000000000000000",
  "8179c80970182cc5b7d82a4df06ea94db63a25f3": "727432000000000000000",
  "b388b5dfecd2c5e4b596577c642556dbfe277855": "20000000000000000000",
  "a9e28337e6357193d9e2cb236b01be44b81427df": "2200000000000000000000",
  "04ba4bb87140022c214a6fac42db5a16dd954045": "1000000000000000000000",
  "67c926093e9b8927933810d98222d62e2b8206bb": "1910000000000000000000",
  "ed7346766e1a676d0d06ec821867a276a083bf31": "4012890000000000000000",
  "92558226b384626cad48e09d966bf1395ee7ea5d": "334250000000000000000",
  "bdf693f833c3fe471753184788eb4bfe4adc3f96": "1970000000000000000000",
  "4474299d0ee090dc90789a1486489c3d0d645e6d": "1000000000000000000000",
  "b1178ad47383c31c8134a1941cbcd474d06244e2": "1000000000000000000000",
  "979d681c617da16f21bcaca101ed16ed015ab696": "1880000000000000000000",
  "6b20c080606a79c73bd8e75b11717a4e8db3f1c3": "299720000000000000000",
  "b85218f342f8012eda9f274e63ce2152b2dcfdab": "3100000000000000000000",
  "530b61e42f39426d2408d40852b9e34ab5ebebc5": "267400000000000000000",
  "76afc225f4fa307de484552bbe1d9d3f15074c4a": "2998800000000000000000",
  "1e783e522ab7df0acaac9eeed3593039e5ac7579": "203435800000000000000000",
  "0f7bf6373f771a4601762c4dae5fbbf4fedd9cc9": "2000000000000000000000",
  "7a8797690ab77b5470bf7c0c1bba612508e1ac7d": "8865000000000000000000",
  "2a2ab6b74c7af1d9476bb5bcb4524797bedc3552": "1000000000000000000000",
  "523e140dc811b186dee5d6c88bf68e90b8e096fd": "2000000000000000000000",
  "ea8168fbf225e786459ca6bb18d963d26b505309": "500000000000000000000",
  "20ff3ede8cadb5c37b48cb14580fb65e23090a7b": "42000000000000000000000",
  "e482d255ede56b04c3e8df151f56e9ca62aaa8c2": "500000000000000000000",
  "2e0880a34596230720f05ac8f065af8681dcb6c2": "100000000000000000000000",
  "c674f28c8afd073f8b799691b2f0584df942e844": "2000000000000000000000",
  "b646df98b49442746b61525c81a3b04ba3106250": "1970000000000000000000",
  "d55c1c8dfbe1e02cacbca60fdbdd405b09f0b75f": "2000000000000000000000",
  "65ebaed27edb9dcc1957aee5f452ac2105a65c0e": "43531987000000000000000",
  "f079e1b1265f50e8c8a98ec0c7815eb3aeac9eb4": "20094000000000000000",
  "867eba56748a5904350d2ca2a5ce9ca00b670a9b": "20000000000000000000000",
  "51ee0cca3bcb10cd3e983722ced8493d926c0866": "999972000000000000000",
  "88d541c840ce43cefbaf6d19af6b9859b573c145": "170000000000000000000",
  "f851b010f633c40af1a8f06a73ebbaab65077ab5": "4400000000000000000000",
  "e0aa69365555b73f282333d1e30c1bbd072854e8": "7000000000000000000000",
  "c7b1c83e63203f9547263ef6282e7da33b6ed659": "18200000000000000000",
  "af06f5fa6d1214ec43967d1bd4dde74ab814a938": "88000000000000000000",
  "991173601947c2084a62d639527e961512579af9": "600000000000000000000",
  "7a381122bada791a7ab1f6037dac80432753baad": "10000000000000000000000",
  "e766f34ff16f3cfcc97321721f43ddf5a38b0cf4": "1550000000000000000000",
  "d785a8f18c38b9bc4ffb9b8fa8c7727bd642ee1c": "1000000000000000000000",
  "aebd4f205de799b64b3564b256d42a711d37ef99": "1177100000000000000000",
  "a2fa17c0fb506ce494008b9557841c3f641b8cae": "20000000000000000000",
  "a8aca748f9d312ec747f8b6578142694c7e9f399": "2000000000000000000000",
  "950c68a40988154d2393fff8da7ccda99614f72c": "4597943000000000000000",
  "075d15e2d33d8b4fa7dba8b9e607f04a261e340b": "1910000000000000000000",
  "3616d448985f5d32aefa8b93a993e094bd854986": "205400000000000000000",
  "4bb9655cfb2a36ea7c637a7b859b4a3154e26ebe": "16000000000000000000000",
  "84949dba559a63bfc845ded06e9f2d9b7f11ef24": "2000000000000000000000",
  "937563d8a80fd5a537b0e66d20a02525d5d88660": "2500000000000000000000",
  "b183ebee4fcb42c220e47774f59d6c54d5e32ab1": "1604266000000000000000",
  "21e5d77320304c201c1e53b261a123d0a1063e81": "86972000000000000000",
  "fa14b566234abee73042c31d21717182cba14aa1": "328000000000000000000",
  "2da617695009cc57d26ad490b32a5dfbeb934e5e": "20000000000000000000000",
  "3326b88de806184454c40b27f309d9dd6dcfb978": "17900000000000000000000",
  "95e6a54b2d5f67a24a4875af75107ca7ea9fd2fa": "1337000000000000000000",
  "8db58e406e202df9bc703c480bd8ed248d52a032": "2000000000000000000000",
  "f777361a3dd8ab62e5f1b9b047568cc0b555704c": "1000000000000000000000",
  "83a93b5ba41bf88720e415790cdc0b67b4af34c4": "200000000000000000000",
  "8a1cc5ac111c49bfcfd848f37dd768aa65c88802": "10000000000000000000000",
  "52214378b54004056a7cc08c891327798ac6b248": "15200000000000000000000",
  "ad80d865b85c34d2e6494b2e7aefea6b9af184db": "4000000000000000000000",
  "e7d6240620f42c5edbb2ede6aec43da4ed9b5757": "1000000000000000000000",
  "d0e35e047646e759f4517093d6408642517f084d": "3939507000000000000000",
  "9340345ca6a3eabdb77363f2586043f29438ce0b": "530922000000000000000",
  "6640ccf053555c130ae2b656647ea6e31637b9ab": "1970000000000000000000",
  "184d86f3466ae6683b19729982e7a7e1a48347b2": "10000000000000000000000",
  "84ec06f24700fe42414cb9897c154c88de2f6132": "1337000000000000000000",
  "d1e5e234a9f44266a4a6241a84d7a1a55ad5a7fe": "20000000000000000000000",
  "e8a9a41740f44f54c3688b53e1ddd42e43c9fe94": "4000000000000000000000",
  "6e3a51db743d334d2fe88224b5fe7c008e80e624": "106000000000000000000",
  "3e94df5313fa520570ef232bc3311d5f622ff183": "2000000000000000000000",
  "8957727e72cf629020f4e05edf799aa7458062d0": "2200000000000000000000",
  "cf5e0eacd1b39d0655f2f77535ef6608eb950ba0": "2000000000000000000000",
  "f4aaa3a6163e3706577b49c0767e948a681e16ee": "2000000000000000000000",
  "97f1fe4c8083e596212a187728dd5cf80a31bec5": "20000000000000000000",
  "57d5fd0e3d3049330ffcdcd020456917657ba2da": "1991240000000000000000",
  "49bdbc7ba5abebb6389e91a3285220d3451bd253": "1000000000000000000000",
  "ae126b382cf257fad7f0bc7d16297e54cc7267da": "300000000000000000000",
  "bbf8616d97724af3def165d0e28cda89b800009a": "114063000000000000000",
  "adb948b1b6fefe207de65e9bbc2de98e605d0b57": "2000000000000000000000",
  "8a217db38bc35f215fd92906be42436fe7e6ed19": "6000000000000000000000",
  "e28b062259e96eeb3c8d4104943f9eb325893cf5": "1337000000000000000000",
  "6a6b18a45a76467e2e5d5a2ef911c3e12929857b": "82000000000000000000000",
  "cb68ae5abe02dcf8cbc5aa719c25814651af8b85": "500000000000000000000",
  "4c7e2e2b77ad0cd6f44acb2861f0fb8b28750ef9": "20000000000000000000",
  "58ba1569650e5bbbb21d35d3e175c0d6b0c651a9": "500000000000000000000",
  "1eb4bf73156a82a0a6822080c6edf49c469af8b9": "1910000000000000000000",
  "4103299671d46763978fa4aa19ee34b1fc952784": "200000000000000000000",
  "e321bb4a946adafdade4571fb15c0043d39ee35f": "1575212000000000000000",
  "893608751d68d046e85802926673cdf2f57f7cb8": "19700000000000000000",
  "70fee08b00c6c2c04a3c625c1ff77caf1c32df01": "200000000000000000000",
  "7b0fea1176d52159333a143c294943da36bbddb4": "9380000000000000000000",
  "d331c823825a9e5263d052d8915d4dcde07a5c37": "564000000000000000000",
  "a45432a6f2ac9d56577b938a37fabac8cc7c461c": "1000000000000000000000",
  "764fc46d428b6dbc228a0f5f55c9508c772eab9f": "26000000000000000000000",
  "1a95a8a8082e4652e4170df9271cb4bb4305f0b2": "50000000000000000000",
  "08c9f1bfb689fdf804d769f82123360215aff93b": "1970000000000000000000",
  "1572cdfab72a01ce968e78f5b5448da29853fbdd": "5061500000000000000000",
  "379c7166849bc24a02d6535e2def13daeef8aa8d": "100000000000000000000",
  "e0a254ac09b9725bebc8e460431dd0732ebcabbf": "6000000000000000000000",
  "3225c1ca5f2a9c88156bb7d9cdc44a326653c214": "400000000000000000000",
  "84686c7bad762c54b667d59f90943cd14d117a26": "20000000000000000000",
  "3d5a8b2b80be8b35d8ecf789b5ed7a0775c5076c": "20000000000000000000",
  "2ccf80e21898125eb4e807cd82e09b9d28592f6e": "2000000000000000000000",
  "dde969aef34ea87ac299b7597e292b4a0155cc8a": "298819000000000000000",
  "19e94e620050aad766b9e1bad931238312d4bf49": "2396000000000000000000",
  "959f57fded6ae37913d900b81e5f48a79322c627": "255599000000000000000",
  "b9b0a3219a3288d9b35b091b14650b8fe23dce2b": "14000000000000000000000",
  "3575c770668a9d179f1ef768c293f80166e2aa3d": "474000000000000000000",
  "58f05b262560503ca761c61890a4035f4c737280": "8000000000000000000000",
  "3286d1bc657a312c8847d93cb3cb7950f2b0c6e3": "20000000000000000000000",
  "1d9e6aaf8019a05f230e5def05af5d889bd4d0f2": "133700000000000000000",
  "a375b4bc24a24e1f797593cc302b2f331063fa5c": "200000000000000000000",
  "108ba7c2895c50e072dc6f964932d50c282d3034": "500000000000000000000",
  "b6b34a263f10c3d2eceb0acc559a7b2ab85ce565": "4000000000000000000000",
  "a4d2b429f1ad5349e31704969edc5f25ee8aca10": "10000000000000000000000",
  "674adb21df4c98c7a347ac4c3c24266757dd7039": "2000000000000000000000",
  "33565ba9da2c03e778ce12294f081dfe81064d24": "16000000000000000000000",
  "4ddda7586b2237b053a7f3289cf460dc57d37a09": "10000000000000000000000",
  "cc4faac00be6628f92ef6b8cb1b1e76aac81fa18": "205410000000000000000",
  "5f99dc8e49e61d57daef606acdd91b4d7007326a": "3000000000000000000000",
  "b8a979352759ba09e35aa5935df175bff678a108": "20000000000000000000",
  "86fff220e59305c09f483860d6f94e96fbe32f57": "42900000000000000000",
  "03e8b084537557e709eae2e1e1a5a6bce1ef8314": "20000000000000000000",
  "dda4ff7de491c687df4574dd1b17ff8f246ba3d1": "19600000000000000000000",
  "2538532936813c91e653284f017c80c3b8f8a36f": "2002000000000000000000",
  "5a82f96cd4b7e2d93d10f3185dc8f43d4b75aa69": "1999400000000000000000",
  "86740a46648e845a5d96461b18091ff57be8a16f": "98000000000000000000000",
  "7e3f63e13129a221ba1ab06326342cd98b5126ae": "1597960000000000000000",
  "1f5f3b34bd134b2781afe5a0424ac5846cdefd11": "99000000000000000000",
  "39936c2719450b9420cc2522cf91db01f227c1c1": "500000000000000000000",
  "967076a877b18ec15a415bb116f06ef32645dba3": "2000000000000000000000",
  "a42908e7fe53980a9abf4044e957a54b70e99cbe": "2000000000000000000000",
  "5eb371c407406c427b3b7de271ad3c1e04269579": "3000000000000000000000",
  "a570223ae3caa851418a9843a1ac55db4824f4fd": "200000000000000000000",
  "764692cccb33405dd0ab0c3379b49caf8e6221ba": "20000000000000000000",
  "a365918bfe3f2627b9f3a86775d8756e0fd8a94b": "400000000000000000000",
  "069ed0ab7aa77de571f16106051d92afe195f2d0": "200000000000000000000",
  "bd432a3916249b4724293af9146e49b8280a7f2a": "4000000000000000000000",
  "61c9dce8b2981cb40e98b0402bc3eb28348f03ac": "196910000000000000000",
  "8f1fcc3c51e252b693bc5b0ec3f63529fe69281e": "6000000000000000000000",
  "55fd08d18064bd202c0ec3d2cce0ce0b9d169c4d": "1970000000000000000000",
  "383a7c899ee18bc214969870bc7482f6d8f3570e": "10000000000000000000000",
  "b14cc8de33d6338236539a489020ce4655a32bc6": "8000000000000000000000",
  "448bf410ad9bbc2fecc4508d87a7fc2e4b8561ad": "199955000000000000000",
  "06f7dc8d1b9462cef6feb13368a7e3974b097f9f": "2000000000000000000000",
  "9c9f89a3910f6a2ae8a91047a17ab788bddec170": "10000000000000000000000",
  "5de598aba344378cab4431555b4f79992dc290c6": "1337000000000000000000",
  "87e6034ecf23f8b5639d5f0ea70a22538a920423": "328000000000000000000",
  "8b27392206b958cd375d7ef8af2cf8ef0598c0bc": "1000000000000000000000",
  "49136fe6e28b7453fcb16b6bbbe9aaacba8337fd": "2000000000000000000000",
  "6982fe8a867e93eb4a0bd051589399f2ec9a5292": "2000000000000000000000",
  "9fd1052a60506bd1a9ef003afd9d033c267d8e99": "1000000000000000000000",
  "d38fa2c4cc147ad06ad5a2f75579281f22a7cc1f": "20000000000000000000000",
  "6f794dbdf623daa6e0d00774ad6962737c921ea4": "2000000000000000000000",
  "e96b184e1f0f54924ac874f60bbf44707446b72b": "2910840000000000000000",
  "b5ba29917c78a1d9e5c5c713666c1e411d7f693a": "3100000000000000000000",
  "81d619ff5726f2405f12904c72eb1e24a0aaee4f": "20000000000000000000000",
  "b02fa29387ec12e37f6922ac4ce98c5b09e0b00f": "2000000000000000000000",
  "b7230d1d1ff2aca366963914a79df9f7c5ea2c98": "8000000000000000000000",
  "7b4007c45e5a573fdbb6f8bd746bf94ad04a3c26": "15202564000000000000000",
  "8d9a0c70d2262042df1017d6c303132024772712": "2000000000000000000000",
  "323aad41df4b6fc8fece8c93958aa901fa680843": "970000000000000000000",
  "db04fad9c49f9e880beb8fcf1d3a3890e4b3846f": "1242482000000000000000",
  "27824666d278d70423f03dfe1dc7a3f02f43e2b5": "1000070000000000000000",
  "e04920dc6ecc1d6ecc084f88aa0af5db97bf893a": "182000000000000000000",
  "b0c1b177a220e41f7c74d07cde8569c21c75c2f9": "5600000000000000000000",
  "7864dc999fe4f8e003c0f43decc39aae1522dc0f": "94400000000000000000",
  "c75c37ce2da06bbc40081159c6ba0f976e3993b1": "1078640000000000000000",
  "179a825e0f1f6e985309668465cffed436f6aea9": "20000000000000000000",
  "2c6b699d9ead349f067f45711a074a641db6a897": "20000000000000000000",
  "068ce8bd6e902a45cb83b51541b40f39c4469712": "5240000000000000000000",
  "767ac690791c2e23451089fe6c7083fe55deb62b": "820000000000000000000",
  "b34f04b8db65bba9c26efc4ce6efc50481f3d65d": "20000000000000000000000",
  "29aef48de8c9fbad4b9e4ca970797a5533eb722d": "10000000000000000000000",
  "0a0ecda6636f7716ef1973614687fd89a820a706": "394000000000000000000",
  "b32825d5f3db249ef4e85cc4f33153958976e8bc": "501375000000000000000",
  "7ef16fd8d15b378a0fba306b8d03dd98fc92619f": "700000000000000000000",
  "b58b52865ea55d8036f2fab26098b352ca837e18": "18200000000000000000",
  "9b658fb361e046d4fcaa8aef6d02a99111223625": "2000000000000000000000",
  "b2a498f03bd7178bd8a789a00f5237af79a3e3f8": "19400000000000000000000",
  "cb48fe8265d9af55eb7006bc335645b0a3a183be": "3000000000000000000000",
  "3cf9a1d465e78b7039e3694478e2627b36fcd141": "1372000000000000000000",
  "5db84400570069a9573cab04b4e6b69535e202b8": "9700000000000000000000",
  "214c89c5bd8e7d22bc574bb35e48950211c6f776": "18903000000000000000",
  "53396f4a26c2b4604496306c5442e7fcba272e36": "20055000000000000000000",
  "720994dbe56a3a95929774e20e1fe525cf3704e4": "8000000000000000000000",
  "3571cf7ad304ecaee595792f4bbfa484418549d6": "5825500000000000000000",
  "6042c644bae2b96f25f94d31f678c90dc96690db": "2000000000000000000000",
  "2e24b597873bb141bdb237ea8a5ab747799af02d": "20000000000000000000000",
  "08c802f87758349fa03e6bc2e2fd0791197eea9a": "2000000000000000000000",
  "297a88921b5fca10e5bb9ded60025437ae221694": "200000000000000000000",
  "aee49d68adedb081fd43705a5f78c778fb90de48": "20000000000000000000",
  "4cee901b4ac8b156c5e2f8a6f1bef572a7dceb7e": "1000000000000000000000",
  "dfaf31e622c03d9e18a0ddb8be60fbe3e661be0a": "9999800000000000000000",
  "00aa5381b2138ebeffc191d5d8c391753b7098d2": "990049000000000000000",
  "5b4c0c60f10ed2894bdb42d9dd1d210587810a0d": "500000000000000000000",
  "c44f4ab5bc60397c737eb0683391b633f83c48fa": "1000000000000000000000",
  "50bef2756248f9a7a380f91b051ba3be28a649ed": "1999884000000000000000",
  "1bd909ac0d4a1102ec98dcf2cca96a0adcd7a951": "20055000000000000000",
  "9ec03e02e587b7769def538413e97f7e55be71d8": "19700000000000000000000",
  "9874803fe1f3a0365e7922b14270eaeb032cc1b5": "1124500000000000000000",
  "4e2310191ead8d3bc6489873a5f0c2ec6b87e1be": "1000000000000000000000",
  "93678a3c57151aeb68efdc43ef4d36cb59a009f3": "30060000000000000000",
  "f483f607a21fcc28100a018c568ffbe140380410": "1000000000000000000000",
  "2a91a9fed41b7d0e5cd2d83158d3e8a41a9a2d71": "1940000000000000000000",
  "240e559e274aaef0c258998c979f671d1173b88b": "4000000000000000000000",
  "108a2b7c336f784779d8b54d02a8d31d9a139c0a": "10000000000000000000000",
  "9c98fdf1fdcd8ba8f4c5b04c3ae8587efdf0f6e6": "6000000000000000000000",
  "194ff44aefc17bd20efd7a204c47d1620c86db5d": "2999400000000000000000",
  "1f8116bd0af5570eaf0c56c49c7ab5e37a580458": "2000000000000000000000",
  "d79835e404fb86bf845fba090d6ba25e0c8866a6": "2400000000000000000000",
  "a8e7201ff619faffc332e6ad37ed41e301bf014a": "600000000000000000000",
  "286906b6bd4972e3c71655e04baf36260c7cb153": "340000000000000000000",
  "db4bc83b0e6baadb1156c5cf06e0f721808c52c7": "880000000000000000000",
  "a158148a2e0f3e92dc2ce38febc20107e3253c96": "2000000000000000000000",
  "9f6a322a6d469981426ae844865d7ee0bb15c7b3": "50003000000000000000",
  "32f29e8727a74c6b4301e3ffff0687c1b870dae9": "1000000000000000000000",
  "19918aa09e7d494e98ffa5db50350892f7156ac6": "10000000000000000000000",
  "5a5f8508da0ebebb90be9033bd4d9e274105ae00": "6685000000000000000000",
  "6fc25e7e00ca4f60a9fe6f28d1fde3542e2d1079": "792000000000000000000",
  "72094f3951ffc9771dced23ada080bcaf9c7cca7": "6000000000000000000000",
  "43f7e86e381ec51ec4906d1476cba97a3db584e4": "1000000000000000000000",
  "05696b73916bd3033e05521e3211dfec026e98e4": "2000000000000000000000",
  "5e7f70378775589fc66a81d3f653e954f55560eb": "2434000000000000000000",
  "895613236f3584216ad75c5d3e07e3fa6863a778": "2000000000000000000000",
  "4eb1454b573805c8aca37edec7149a41f61202f4": "300000000000000000000",
  "d99999a2490d9494a530cae4daf38554f4dd633e": "120000000000000000000",
  "1704cefcfb1331ec7a78388b29393e85c1af7916": "400000000000000000000",
  "ac4acfc36ed6094a27e118ecc911cd473e8fb91f": "1799800000000000000000",
  "a975b077fcb4cc8efcbf838459b6fa243a4159d6": "40000000000000000000",
  "9c405cf697956138065e11c5f7559e67245bd1a5": "200000000000000000000",
  "cafde855864c2598da3cafc05ad98df2898e8048": "14179272000000000000000",
  "8ef711e43a13918f1303e81d0ea78c9eefd67eb2": "4000000000000000000000",
  "0b14891999a65c9ef73308efe3100ca1b20e8192": "800000000000000000000",
  "47cf9cdaf92fc999cc5efbb7203c61e4f1cdd4c3": "131400000000000000000",
  "04ba8a3f03f08b895095994dda619edaacee3e7a": "2000000000000000000000",
  "02b6d65cb00b7b36e1fb5ed3632c4cb20a894130": "20000000000000000000000",
  "f99aee444b5783c093cfffd1c4632cf93c6f050c": "400000000000000000000",
  "2541314a0b408e95a694444977712a50713591ab": "1634706000000000000000",
  "3096dca34108085bcf04ae72b94574a13e1a3e1d": "200000000000000000000",
  "56df05bad46c3f00ae476ecf017bb8c877383ff1": "197248000000000000000",
  "6d59b21cd0e2748804d9abe064eac2bef0c95f27": "2000000000000000000000",
  "b29f5b7c1930d9f97a115e067066f0b54db44b3b": "1000000000000000000000",
  "888c16144933197cac26504dd76e06fd6600c789": "100000000000000000000",
  "dfe3c52a92c30396a4e33a50170dc900fcf8c9cf": "50000000000000000000",
  "f76f69cee4faa0a63b30ae1e7881f4f715657010": "200000000000000000000",
  "ee0007b0960d00908a94432a737557876aac7c31": "53053000000000000000",
  "effc15e487b1beda0a8d1325bdb4172240dc540a": "64940000000000000000",
  "40ab0a3e83d0c8ac9366910520eab1772bac3b1a": "976600000000000000000",
  "1895a0eb4a4372722fcbc5afe6936f289c88a419": "910000000000000000000",
  "81efe296ae76c860d1c5fbd33d47e8ce9996d157": "1000000000000000000000",
  "9ddd355e634ee9927e4b7f6c97e7bf3a2f1e687a": "50000000000000000000",
  "f2b4ab2c9427a9015ef6eefff5edb60139b719d1": "716800000000000000000",
  "765be2e12f629e6349b97d21b62a17b7c830edab": "6000000000000000000000",
  "ff61c9c1b7a3d8b53bba20b34466544b7b216644": "2000000000000000000000",
  "36a08fd6fd1ac17ce15ed57eefb12a2be28188bf": "1337000000000000000000",
  "17049311101d817efb1d65910f663662a699c98c": "1999800000000000000000",
  "30511832918d8034a7bee72ef2bfee440ecbbcf6": "16100000000000000000000",
  "d27c234ff7accace3d996708f8f9b04970f97d36": "1337000000000000000000",
  "a961171f5342b173dd70e7bfe5b5ca238b13bcdd": "3397053000000000000000",
  "30bf61b2d877fe10635126326fa189e4b0b1c3b0": "1027580000000000000000",
  "4bb6d86b8314c22d8d37ea516d0019f156aae12d": "1000000000000000000000",
  "5f363e0ab747e02d1b3b66abb69ea53c7baf523a": "11640000000000000000000",
  "283e11203749b1fa4f32febb71e49d135919382a": "1000000000000000000000",
  "ac5999a89d2dd286d5a80c6dee7e86aad40f9e12": "3880000000000000000000",
  "3f6dd3650ee428dcb7759553b017a96a94286ac9": "1337000000000000000000",
  "b3fc1d6881abfcb8becc0bb021b8b73b7233dd91": "50000000000000000000",
  "f0832a6bb25503eeca435be31b0bf905ca1fcf57": "6685000000000000000000",
  "9d7fda7070bf3ee9bbd9a41f55cad4854ae6c22c": "11027380000000000000000",
  "4b0bd8acfcbc53a6010b40d4d08ddd2d9d69622d": "668500000000000000000",
  "f3b668b3f14d920ebc379092db98031b67b219b3": "199955000000000000000",
  "d91d889164479ce436ece51763e22cda19b22d6b": "3365200000000000000000",
  "ffe28db53c9044b4ecd4053fd1b4b10d7056c688": "100000000000000000000",
  "c77b01a6e911fa988d01a3ab33646beef9c138f3": "721400000000000000000",
  "c0064f1d9474ab915d56906c9fb320a2c7098c9b": "358000000000000000000",
  "4e3edad4864dab64cae4c5417a76774053dc6432": "590943000000000000000",
  "71d2cc6d02578c65f73c575e76ce8fbcfadcf356": "72400000000000000000",
  "9971df60f0ae66dce9e8c84e17149f09f9c52f64": "200000000000000000000",
  "58e661d0ba73d6cf24099a5562b808f7b3673b68": "2000000000000000000000",
  "84b0ee6bb837d3a4c4c5011c3a228c0edab4634a": "20000000000000000000",
  "84375afbf59b3a1d61a1be32d075e0e15a4fbca5": "200000000000000000000",
  "9ae9476bfecd3591964dd325cf8c2a24faed82c1": "4000000000000000000000",
  "6a4c8907b600248057b1e46354b19bdc859c991a": "20000000000000000000",
  "1c045649cd53dc23541f8ed4d341812808d5dd9c": "7000000000000000000000",
  "c5e488cf2b5677933971f64cb8202dd05752a2c0": "1000000000000000000000",
  "eb25481fcd9c221f1ac7e5fd1ecd9307a16215b8": "197000000000000000000",
  "a61887818f914a20e31077290b83715a6b2d6ef9": "1880000000000000000000",
  "679437eacf437878dc293d48a39c87b7421a216c": "64528000000000000000",
  "331a1c26cc6994cdd3c14bece276ffff4b9df77c": "18049000000000000000",
  "75b95696e8ec4510d56868a7c1a735c68b244890": "6400000000000000000000",
  "a77f3ee19e9388bbbb2215c62397b96560132360": "200000000000000000000",
  "bc7afc8477412274fc265df13c054473427d43c6": "130034000000000000000",
  "91050a5cffadedb4bb6eaafbc9e5013428e96c80": "1700000000000000000000",
  "24586ec5451735eeaaeb470dc8736aae752f82e5": "17600000000000000000",
  "51039377eed0c573f986c5e8a95fb99a59e9330f": "1970000000000000000000",
  "fbb161fe875f09290a4b262bc60110848f0d2226": "2000000000000000000000",
  "ed52a2cc0869dc9e9f842bd0957c47a8e9b0c9ff": "9550000000000000000000",
  "bad235d5085dc7b068a67c412677b03e1836884c": "2000000000000000000000",
  "055eac4f1ad3f58f0bd024d68ea60dbe01c6afb3": "100000000000000000000",
  "4058808816fdaa3a5fc98ed47cfae6c18315422e": "199800000000000000000",
  "3540c7bd7a8442d5bee21a2180a1c4edff1649e0": "1239295000000000000000",
  "c5edbbd2ca0357654ad0ea4793f8c5cecd30e254": "6000000000000000000000",
  "b5906b0ae9a28158e8ac550e39da086ee3157623": "200000000000000000000",
  "4d801093c19ca9b8f342e33cc9c77bbd4c8312cf": "345005000000000000000",
  "206482ee6f138a778fe1ad62b180ce856fbb23e6": "2000000000000000000000",
  "c0ed0d4ad10de03435b153a0fc25de3b93f45204": "3160000000000000000000",
  "29e67990e1b6d52e1055ffe049c53195a81542cf": "20000000000000000000000",
  "e6d22209ffd0b87509ade3a8e2ef429879cb89b5": "17260000000000000000000",
  "d6644d40e90bc97fe7dfe7cabd3269fd579ba4b3": "159000000000000000000",
  "ece1290877b583e361a2d41b009346e6274e2538": "300000000000000000000",
  "ab3861226ffec1289187fb84a08ec3ed043264e8": "1000000000000000000000",
  "60e0bdd0a259bb9cb09d3f37e5cd8b9daceabf8a": "1370000000000000000000",
  "28b77585cb3d55a199ab291d3a18c68fe89a848a": "1960000000000000000000",
  "73128173489528012e76b41a5e28c68ba4e3a9d4": "1000000000000000000000",
  "018492488ba1a292342247b31855a55905fef269": "140000000000000000000",
  "0bb54c72fd6610bfa4363397e020384b022b0c49": "1337000000000000000000",
  "520f66a0e2657ff0ac4195f2f064cf2fa4b24250": "40000000000000000000",
  "a1432ed2c6b7777a88e8d46d388e70477f208ca5": "7999538000000000000000",
  "149ba10f0da2725dc704733e87f5a524ca88515e": "7880000000000000000000",
  "b287f7f8d8c3872c1b586bcd7d0aedbf7e732732": "20000000000000000000",
  "c46bbdef76d4ca60d316c07f5d1a780e3b165f7e": "2000000000000000000000",
  "b5a589dd9f4071dbb6fba89b3f5d5dae7d96c163": "2000000000000000000000",
  "d218efb4db981cdd6a797f4bd48c7c26293ceb40": "2975000000000000000000",
  "af87d2371ef378957fbd05ba2f1d66931b01e2b8": "700000000000000000000",
  "86ef6426211949cc37f4c75e7850369d0cf5f479": "13399196000000000000000",
  "fb3a0b0d6b6a718f6fc0292a825dc9247a90a5d0": "199950000000000000000",
  "da16dd5c3d1a2714358fe3752cae53dbab2be98c": "19400000000000000000000",
  "9eb7834e171d41e069a77947fca87622f0ba4e48": "100000000000000000000",
  "e1d91b0954cede221d6f24c7985fc59965fb98b8": "2000000000000000000000",
  "85d0d88754ac84b8b21ba93dd2bfec72626faba8": "1000000000000000000000",
  "695b4cce085856d9e1f9ff3e79942023359e5fbc": "5000000000000000000000",
  "9156d18029350e470408f15f1aa3be9f040a67c6": "1000000000000000000000",
  "a9d64b4f3bb7850722b58b478ba691375e224e42": "6000000000000000000000",
  "17e4a0e52bac3ee44efe0954e753d4b85d644e05": "2000000000000000000000",
  "b8a79c84945e47a9c3438683d6b5842cff7684b1": "2000000000000000000000",
  "cfac2e1bf33205b05533691a02267ee19cd81836": "1000000000000000000000",
  "6b992521ec852370848ad697cc2df64e63cc06ff": "1000000000000000000000",
  "60af0ee118443c9b37d2fead77f5e521debe1573": "1910000000000000000000",
  "c6dbdb9efd5ec1b3786e0671eb2279b253f215ed": "1000000000000000000000",
  "659c0a72c767a3a65ced0e1ca885a4c51fd9b779": "2000000000000000000000",
  "ed1276513b6fc68628a74185c2e20cbbca7817bf": "191000000000000000000",
  "5ad12c5ed4fa827e2150cfa0d68c0aa37b1769b8": "800000000000000000000",
  "17c0fef6986cfb2e4041f9979d9940b69dff3de2": "4000000000000000000000",
  "ca98c7988efa08e925ef9c9945520326e9f43b99": "4000000000000000000000",
  "fe8f1fdcab7fbec9a6a3fcc507619600505c36a3": "19700000000000000000",
  "4420aa35465be617ad2498f370de0a3cc4d230af": "2000000000000000000000",
  "8232d1f9742edf8dd927da353b2ae7b4cbce7592": "668500000000000000000",
  "eca5f58792b8c62d2af556717ee3ee3028be4dce": "2000000000000000000000",
  "6bf86f1e2f2b8032a95c4d7738a109d3d0ed8104": "1820000000000000000000",
  "3ac2f0ff1612e4a1c346d53382abf6d8a25baa53": "2000000000000000000000",
  "daa1bd7a9148fb865cd612dd35f162861d0f3bdc": "3066243000000000000000",
  "5169c60aee4ceed1849ab36d664cff97061e8ea8": "3000000000000000000000",
  "2a5e3a40d2cd0325766de73a3d671896b362c73b": "100000000000000000000000",
  "a83382b6e15267974a8550b98f7176c1a353f9be": "3541608000000000000000",
  "b50c149a1906fad2786ffb135aab501737e9e56f": "388000000000000000000",
  "d9775965b716476675a8d513eb14bbf7b07cd14a": "5076200000000000000000",
  "66662006015c1f8e3ccfcaebc8ee6807ee196303": "500024000000000000000",
  "78746a958dced4c764f876508c414a68342cecb9": "50600000000000000000",
  "e982e6f28c548f5f96f45e63f7ab708724f53fa1": "396238000000000000000",
  "740bfd52e01667a3419b029a1b8e45576a86a2db": "16800000000000000000000",
  "2bd252e0d732ff1d7c78f0a02e6cb25423cf1b1a": "2674000000000000000000",
  "2e2d7ea66b9f47d8cc52c01c52b6e191bc7d4786": "3999800000000000000000",
  "3e3161f1ea2fbf126e79da1801da9512b37988c9": "49250000000000000000000",
  "7e2ba86da52e785d8625334f3397ba1c4bf2e8d1": "197000000000000000000",
  "7608f437b31f18bc0b64d381ae86fd978ed7b31f": "50000000000000000000",
  "25a5a44d38a2f44c6a9db9cdbc6b1e2e97abb509": "17000000000000000000000",
  "745ad3abc6eeeb2471689b539e789ce2b8268306": "1129977000000000000000",
  "09e437d448861228a232b62ee8d37965a904ed9c": "21708305000000000000000",
  "be53322f43fbb58494d7cce19dda272b2450e827": "200018000000000000000",
  "4166fc08ca85f766fde831460e9dc93c0e21aa6c": "1000000000000000000000",
  "99c0174cf84e0783c220b4eb6ae18fe703854ad3": "2074800000000000000000",
  "3cf484524fbdfadae26dc185e32b2b630fd2e726": "448798000000000000000",
  "fdcd5d80b105897a57abc47865768b2900524295": "6400000000000000000000",
  "f22f4078febbbaa8b0e78e642c8a42f35d433905": "1999944000000000000000",
  "eac768bf14b8f9432e69eaa82a99fbeb94cd0c9c": "98500000000000000000000",
  "2639eee9873ceec26fcc9454b548b9e7c54aa65c": "1000000000000000000000",
  "c3c3c2510d678020485a63735d1307ec4ca6302b": "1000000000000000000000",
  "b73d6a77559c86cf6574242903394bacf96e3570": "91200000000000000000",
  "5ce2e7ceaaa18af0f8aafa7fbad74cc89e3cd436": "20000000000000000000000",
  "03377c0e556b640103289a6189e1aeae63493467": "20000000000000000000000",
  "6eb0a5a9ae96d22cf01d8fd6483b9f38f08c2c8b": "4000000000000000000000",
  "fc8215a0a69913f62a43bf1c8590b9ddcd0d8ddb": "2000000000000000000000",
  "4a835c25824c47ecbfc79439bf3f5c3481aa75cd": "1400000000000000000000",
  "b5493ef173724445cf345c035d279ba759f28d51": "20000000000000000000",
  "b9e90c1192b3d5d3e3ab0700f1bf655f5dd4347a": "499928000000000000000",
  "419bde7316cc1ed295c885ace342c79bf7ee33ea": "6000000000000000000000",
  "e4625501f52b7af52b19ed612e9d54fdd006b492": "209440000000000000000",
  "e9d599456b2543e6db80ea9b210e908026e2146e": "200000000000000000000",
  "2c06dd922b61514aafedd84488c0c28e6dcf0e99": "100000000000000000000000",
  "06b5ede6fdf1d6e9a34721379aeaa17c713dd82a": "2000000000000000000000",
  "d8930a39c77357c30ad3a060f00b06046331fd62": "820000000000000000000",
  "b2a2c2111612fb8bbb8e7dd9378d67f1a384f050": "20000000000000000000",
  "1f174f40a0447234e66653914d75bc003e5690dc": "160000000000000000000",
  "e06cb6294704eea7437c2fc3d30773b7bf38889a": "20094000000000000000",
  "cd06f8c1b5cdbd28e2d96b6346c3e85a0483ba24": "1000000000000000000000",
  "f316ef1df2ff4d6c1808dba663ec8093697968e0": "1794400000000000000000",
  "1e6915ebd9a19c81b692ad99b1218a592c1ac7b1": "4000000000000000000000",
  "885493bda36a0432976546c1ddce71c3f4570021": "216700000000000000000",
  "18b0407cdad4ce52600623bd5e1f6a81ab61f026": "319489000000000000000",
  "187d9f0c07f8eb74faaad15ebc7b80447417f782": "20000000000000000000",
  "5d6ccf806738091042ad97a6e095fe8c36aa79c5": "188000000000000000000",
  "53437fecf34ab9d435f4deb8ca181519e2592035": "188000000000000000000",
  "fd1faa347b0fcc804c2da86c36d5f1d18b7087bb": "52380000000000000000",
  "650cf67db060cce17568d5f2a423687c49647609": "100000000000000000000",
  "bcd95ef962462b6edfa10fda87d72242fe3edb5c": "334133000000000000000",
  "3b5e8b3c77f792decb7a8985df916efb490aac23": "2000000000000000000000",
  "f13b083093ba564e2dc631568cf7540d9a0ec719": "1999944000000000000000",
  "373c547e0cb5ce632e1c5ad66155720c01c40995": "4691588000000000000000",
  "7313461208455455465445a459b06c3773b0eb30": "2000000000000000000000",
  "441f37e8a029fd02482f289c49b5d06d00e408a4": "333333000000000000000",
  "d30d4c43adcf55b2cb53d68323264134498d89ce": "1000000000000000000000",
  "f648ea89c27525710172944e79edff847803b775": "100000000000000000000000",
  "0c7f869f8e90d53fdc03e8b2819b016b9d18eb26": "20000000000000000000000",
  "c71f92a3a54a7b8c2f5ea44305fccb84eee23148": "49980000000000000000",
  "7988901331e387f713faceb9005cb9b65136eb14": "1970000000000000000000",
  "e9a39a8bac0f01c349c64cedb69897f633234ed2": "3980000000000000000000",
  "ad2a5c00f923aaf21ab9f3fb066efa0a03de2fb2": "999996000000000000000",
  "f25259a5c939cd25966c9b6303d3731c53ddbc4c": "200000000000000000000",
  "d1682c2159018dc3d07f08240a8c606daf65f8e1": "200000000000000000000000",
  "a99991cebd98d9c838c25f7a7416d9e244ca250d": "1000000000000000000000",
  "5a285755391e914e58025faa48cc685f4fd4f5b8": "26000000000000000000000",
  "4d24b7ac47d2f27de90974ba3de5ead203544bcd": "100000000000000000000",
  "21b182f2da2b384493cf5f35f83d9d1ee14f2a21": "2000000000000000000000",
  "31ab088966ecc7229258f6098fce68cf39b38485": "1000000000000000000000",
  "4977a7939d0939689455ce2639d0ee5a4cd910ed": "1820000000000000000000",
  "07af938c1237a27c9030094dcf240750246e3d2c": "500000000000000000000",
  "4e2bfa4a466f82671b800eee426ad00c071ba170": "4000000000000000000000",
  "107379d4c467464f235bc18e55938aad3e688ad7": "50000000000000000000",
  "f7b29b82195c882dab7897c2ae95e77710f57875": "2199000000000000000000",
  "56586391040c57eec6f5affd8cd4abde10b50acc": "4000000000000000000000",
  "ac608e2bac9dd20728d2947effbbbf900a9ce94b": "6000600000000000000000",
  "48548b4ba62bcb2f0d34a88dc69a680e539cf046": "100084000000000000000",
  "1665ab1739d71119ee6132abbd926a279fe67948": "100000000000000000000",
  "af4493e8521ca89d95f5267c1ab63f9f45411e1b": "200000000000000000000",
  "bf6925c00751008440a6739a02bf2b6cdaab5e3a": "1000000000000000000000",
  "3fe40fbd919aad2818df01ee4df46c46842ac539": "6000000000000000000000",
  "455b9296921a74d1fc41617f43b8303e6f3ed76c": "4200000000000000000000",
  "7086b4bde3e35d4aeb24b825f1a215f99d85f745": "1999800000000000000000",
  "d4ee4919fb37f2bb970c3fff54aaf1f3dda6c03f": "40000000000000000000000",
  "a4489a50ead5d5445a7bee4d2d5536c2a76c41f8": "200000000000000000000",
  "505e4f7c275588c533a20ebd2ac13b409bbdea3c": "17600000000000000000",
  "3bb53598cc20e2055dc553b049404ac9b7dd1e83": "615020000000000000000",
  "52cd20403ba7eda6bc307a3d63b5911b817c1263": "20000000000000000000",
  "a211da03cc0e31ecce5309998718515528a090df": "200000000000000000000",
  "bcb422dc4dd2aae94abae95ea45dd1731bb6b0ba": "447500000000000000000",
  "cbde9734b8e6aa538c291d6d7facedb0f338f857": "2000000000000000000000",
  "171ca02a8b6d62bf4ca47e906914079861972cb2": "200000000000000000000",
  "d40d0055fd9a38488aff923fd03d35ec46d711b3": "4999711000000000000000",
  "3887192c7f705006b630091276b39ac680448d6b": "60000000000000000000",
  "3f3c8e61e5604cef0605d436dd22accd862217fc": "1337000000000000000000",
  "4258fd662fc4ce3295f0d4ed8f7bb1449600a0a9": "6719600000000000000000",
  "4571de672b9904bad8743692c21c4fdcea4c2e01": "4000000000000000000000",
  "5be045512a026e3f1cebfd5a7ec0cfc36f2dc16b": "120000000000000000000",
  "d6300b3215b11de762ecde4b70b7927d01291582": "2000000000000000000000",
  "f9e37447406c412197b2e2aebc001d6e30c98c60": "8346700000000000000000",
  "bd047ff1e69cc6b29ad26497a9a6f27a903fc4dd": "865000000000000000000",
  "23fa7eb51a48229598f97e762be0869652dffc66": "1000000000000000000000",
  "6679aeecd87a57a73f3356811d2cf49d0c4d96dc": "600000000000000000000",
  "23c55aeb5739876f0ac8d7ebea13be729685f000": "1337000000000000000000",
  "757b65876dbf29bf911d4f0692a2c9beb1139808": "4124263000000000000000",
  "e8fc36b0131ec120ac9e85afc10ce70b56d8b6ba": "200000000000000000000",
  "1a89899cbebdbb64bb26a195a63c08491fcd9eee": "2000000000000000000000",
  "6edf7f5283725c953ee64317f66188af1184b033": "8050000000000000000000",
  "297385e88634465685c231a314a0d5dcd146af01": "1550000000000000000000",
  "018f20a27b27ec441af723fd9099f2cbb79d6263": "2167000000000000000000",
  "a5a4227f6cf98825c0d5baff5315752ccc1a1391": "10000000000000000000000",
  "69517083e303d4fbb6c2114514215d69bc46a299": "100000000000000000000",
  "1dab172effa6fbee534c94b17e794edac54f55f8": "1970000000000000000000",
  "c6ee35934229693529dc41d9bb71a2496658b88e": "19700000000000000000000",
  "a8ee1df5d44b128469e913569ef6ac81eeda4fc8": "500000000000000000000",
  "35bd246865fab490ac087ac1f1d4f2c10d0cda03": "400000000000000000000",
  "4bf8bf1d35a231315764fc8001809a949294fc49": "66850000000000000000",
  "c70fa45576bf9c865f983893002c414926f61029": "400400000000000000000",
  "fdeaac2acf1d138e19f2fc3f9fb74592e3ed818a": "668500000000000000000",
  "bfbfbcb656c2992be8fcde8219fbc54aadd59f29": "9999924000000000000000",
  "1722c4cbe70a94b6559d425084caeed4d6e66e21": "4000000000000000000000",
  "00e681bc2d10db62de85848324492250348e90bf": "20000000000000000000000",
  "5c308bac4857d33baea074f3956d3621d9fa28e1": "4999711000000000000000",
  "68c08490c89bf0d6b6f320b1aca95c8312c00608": "4000000000000000000000",
  "ce1884ddbbb8e10e4dba6e44feeec2a7e5f92f05": "4000000000000000000000",
  "427417bd16b1b3d22dbb902d8f9657016f24a61c": "2000000000000000000000",
  "5ff93de6ee054cad459b2d5eb0f6870389dfcb74": "220000000000000000000",
  "71946b7117fc915ed107385f42d99ddac63249c2": "2000000000000000000000",
  "11ec00f849b6319cf51aa8dd8f66b35529c0be77": "2000000000000000000000",
  "610fd6ee4eebab10a8c55d0b4bd2e7d6ef817156": "20002000000000000000",
  "a422e4bf0bf74147cc895bed8f16d3cef3426154": "349281000000000000000",
  "745aecbaf9bb39b74a67ea1ce623de368481baa6": "10000000000000000000000",
  "9f496cb2069563144d0811677ba0e4713a0a4143": "1122000000000000000000",
  "c500b720734ed22938d78c5e48b2ba9367a575ba": "33400000000000000000000",
  "cd072e6e1833137995196d7bb1725fef8761f655": "6000000000000000000000",
  "94644ad116a41ce2ca7fbec609bdef738a2ac7c7": "5000000000000000000000",
  "e8d942d82f175ecb1c16a405b10143b3f46b963a": "568600000000000000000",
  "f73dd9c142b71bce11d06e30e7e7d032f2ec9c9e": "1970000000000000000000",
  "1327d759d56e0ab87af37ecf63fe01f310be100a": "659200000000000000000",
  "28fa2580f9ebe420f3e5eefdd371638e3b7af499": "6000000000000000000000",
  "024bdd2c7bfd500ee7404f7fb3e9fb31dd20fbd1": "180000000000000000000",
  "b4b14bf45455d0ab0803358b7524a72be1a2045b": "500000000000000000000",
  "b1e2dd95e39ae9775c55aeb13f12c2fa233053ba": "2000000000000000000000",
  "35b03ea4245736f57b85d2eb79628f036ddcd705": "4000000000000000000000",
  "eb2ef3d38fe652403cd4c9d85ed7f0682cd7c2de": "42784000000000000000000",
  "690594d306613cd3e2fd24bca9994ad98a3d73f8": "2000000000000000000000",
  "8397a1bc47acd647418159b99cea57e1e6532d6e": "9169160000000000000000",
  "b44815a0f28e569d0e921a4ade8fb2642526497a": "55500000000000000000",
  "e24109be2f513d87498e926a286499754f9ed49e": "886500000000000000000",
  "37ac29bda93f497bc4aeaab935452c431510341e": "985000000000000000000",
  "4a81abe4984c7c6bef63d69820e55743c61f201c": "16011846000000000000000",
  "66dcc5fb4ee7fee046e141819aa968799d644491": "1337000000000000000000",
  "43ff38743ed0cd43308c066509cc8e7e72c862aa": "1940000000000000000000",
  "b8f20005b61352ffa7699a1b52f01f5ab39167f1": "10000000000000000000000",
  "1cda411bd5163baeca1e558563601ce720e24ee1": "18200000000000000000",
  "86245f596691093ece3f3d3ca2263eace81941d9": "188000000000000000000",
  "f52a5882e8927d944b359b26366ba2b9cacfbae8": "25000080000000000000000",
  "118c18b2dce170e8f445753ba5d7513cb7636d2d": "8800000000000000000000",
  "7168b3bb8c167321d9bdb023a6e9fd11afc9afd9": "1790000000000000000000",
  "d9103bb6b67a55a7fece2d1af62d457c2178946d": "1000000000000000000000",
  "8b9fda7d981fe9d64287f85c94d83f9074849fcc": "14000000000000000000000",
  "91211712719f2b084d3b3875a85069f466363141": "1000000000000000000000",
  "4863849739265a63b0a2bf236a5913e6f959ce15": "1520000000000000000000",
  "c2d1778ef6ee5fe488c145f3586b6ebbe3fbb445": "1146000000000000000000",
  "2b77a4d88c0d56a3dbe3bae04a05f4fcd1b757e1": "300000000000000000000",
  "fe9c0fffefb803081256c0cf4d6659e6d33eb4fb": "1528000000000000000000",
  "893017ff1adad499aa065401b4236ce6e92b625a": "1999944000000000000000",
  "073c67e09b5c713c5221c8a0c7f3f74466c347b0": "19400000000000000000000",
  "93e303411afaf6c107a44101c9ac5b36e9d6538b": "66000000000000000000000",
  "0ec50aa823f465b9464b0bc0c4a57724a555f5d6": "59100000000000000000000",
  "a3e3a6ea509573e21bd0239ece0523a7b7d89b2f": "1970000000000000000000",
  "c069ef0eb34299abd2e32dabc47944b272334824": "120000000000000000000",
  "28a3da09a8194819ae199f2e6d9d1304817e28a5": "2000000000000000000000",
  "e9495ba5842728c0ed97be37d0e422b98d69202c": "2000000000000000000000",
  "bba976f1a1215f7512871892d45f7048acd356c8": "2000000000000000000000",
  "887cac41cd706f3345f2d34ac34e01752a6e5909": "595366000000000000000",
  "e0e0b2e29dde73af75987ee4446c829a189c95bc": "149000000000000000000",
  "4a5fae3b0372c230c125d6d470140337ab915656": "1600000000000000000000",
  "425177eb74ad0a9d9a5752228147ee6d6356a6e6": "13370000000000000000",
  "5db7bba1f9573f24115d8c8c62e9ce8895068e9f": "49984000000000000000",
  "fa6a37f018e97967937fc5e8617ba1d786dd5f77": "19999800000000000000000",
  "45e3a93e72144ada860cbc56ff85145ada38c6da": "1610000000000000000000",
  "67da922effa472a6b124e84ea8f86b24e0f515aa": "20000000000000000000",
  "aa9bd4589535db27fa2bc903ca17d679dd654806": "2000000000000000000000",
  "16a9e9b73ae98b864d1728798b8766dbc6ea8d12": "957480000000000000000",
  "d6580ab5ed4c7dfa506fa6fe64ad5ce129707732": "4000000000000000000000",
  "984a7985e3cc7eb5c93691f6f8cc7b8f245d01b2": "6000000000000000000000",
  "7746b6c6699c8f34ca2768a820f1ffa4c207fe05": "4000086000000000000000",
  "2fa491fb5920a6574ebd289f39c1b2430d2d9a6a": "2000000000000000000000",
  "fae76719d97eac41870428e940279d97dd57b2f6": "98500000000000000000000",
  "41b2dbd79dda9b864f6a7030275419c39d3efd3b": "3200000000000000000000",
  "dd8254121a6e942fc90828f2431f511dad7f32e6": "3018000000000000000000",
  "37fac1e6bc122e936dfb84de0c4bef6e0d60c2d7": "2000000000000000000000",
  "3a10888b7e149cae272c01302c327d0af01a0b24": "17000000000000000000",
  "401354a297952fa972ad383ca07a0a2811d74a71": "14000000000000000000",
  "51865db148881951f51251710e82b9be0d7eadb2": "2000000000000000000000",
  "bbbd6ecbb5752891b4ceb3cce73a8f477059376f": "36000000000000000000",
  "3f236108eec72289bac3a65cd283f95e041d144c": "999925000000000000000",
  "dc83b6fd0d512131204707eaf72ea0c8c9bef976": "2000000000000000000000",
  "036eeff5ba90a6879a14dff4c5043b18ca0460c9": "100000000000000000000",
  "fac5ca94758078fbfccd19db3558da7ee8a0a768": "1017500000000000000000",
  "d0d62c47ea60fb90a3639209bbfdd4d933991cc6": "194000000000000000000",
  "891cb8238c88e93a1bcf61db49bd82b47a7f4f84": "2680000000000000000000",
  "df53003346d65c5e7a646bc034f2b7d32fcbe56a": "2000000000000000000000",
  "6e89c51ea6de13e06cdc748b67c4410fe9bcab03": "4000000000000000000000",
  "a61cdbadf04b1e54c883de6005fcdf16beb8eb2f": "2000000000000000000000",
  "e3951de5aefaf0458768d774c254f7157735e505": "1600930000000000000000",
  "f2732cf2c13b8bb8e7492a988f5f89e38273ddc8": "600000000000000000000",
  "4752218e54de423f86c0501933917aea08c8fed5": "20000000000000000000000",
  "152f4e860ef3ee806a502777a1b8dbc91a907668": "600000000000000000000",
  "15b96f30c23b8664e7490651066b00c4391fbf84": "410650000000000000000",
  "8693e9b8be94425eef7969bc69f9d42f7cad671e": "1000090000000000000000",
  "f41557dfdfb1a1bdcefefe2eba1e21fe0a4a9942": "1970000000000000000000",
  "38458e0685573cb4d28f53098829904570179266": "40000000000000000000",
  "53e4d9696dcb3f4d7b3f70dcaa4eecb71782ff5c": "200000000000000000000",
  "2dca0e449ab646dbdfd393a96662960bcab5ae1e": "40000000000000000000000",
  "87d7ac0653ccc67aa9c3469eef4352193f7dbb86": "200000000000000000000000",
  "ae9f5c3fbbe0c9bcbf1af8ff74ea280b3a5d8b08": "1730000000000000000000",
  "7751f363a0a7fd0533190809ddaf9340d8d11291": "20000000000000000000",
  "708a2af425ceb01e87ffc1be54c0f532b20eacd6": "134159000000000000000",
  "ac122a03cd058c122e5fe17b872f4877f9df9572": "1969606000000000000000",
  "5da4ca88935c27f55c311048840e589e04a8a049": "80000000000000000000",
  "e67c2c1665c88338688187629f49e99b60b2d3ba": "200000000000000000000",
  "dec82373ade8ebcf2acb6f8bc2414dd7abb70d77": "200000000000000000000",
  "47c247f53b9fbeb17bba0703a00c009fdb0f6eae": "20000000000000000000000",
  "9a522e52c195bfb7cf5ffaaedb91a3ba7468161d": "1000000000000000000000",
  "3159e90c48a915904adfe292b22fa5fd5e72796b": "1008800000000000000000",
  "defddfd59b8d2c154eecf5c7c167bf0ba2905d3e": "93588000000000000000",
  "ad1d68a038fd2586067ef6d135d9628e79c2c924": "4686168000000000000000",
  "038e45eadd3d88b87fe4dab066680522f0dfc8f9": "10000000000000000000000",
  "2561ec0f379218fe5ed4e028a3f744aa41754c72": "13370000000000000000",
  "b95396daaa490df2569324fcc6623be052f132ca": "2000000000000000000000",
  "2376ada90333b1d181084c97e645e810aa5b76f1": "750000000000000000000",
  "07800d2f8068e448c79a4f69b1f15ef682aae5f6": "19400000000000000000000",
  "adeb204aa0c38e179e81a94ed8b3e7d53047c26b": "608000000000000000000",
  "0dc100b107011c7fc0a1339612a16ccec3285208": "2000000000000000000000",
  "f0b1340b996f6f0bf0d9561c849caf7f4430befa": "100000000000000000000",
  "e1443dbd95cc41237f613a48456988a04f683282": "4000086000000000000000",
  "d3c6f1e0f50ec3d2a67e6bcd193ec7ae38f1657f": "6618150000000000000000",
  "b68899e7610d4c93a23535bcc448945ba1666f1c": "200000000000000000000",
  "a7253763cf4a75df92ca1e766dc4ee8a2745147b": "10740000000000000000000",
  "75d67ce14e8d29e8c2ffe381917b930b1aff1a87": "3000000000000000000000",
  "493d48bda015a9bfcf1603936eab68024ce551e0": "22528000000000000000",
  "7ddd57165c87a2707f025dcfc2508c09834759bc": "1400000000000000000000",
  "cff7f89a4d4219a38295251331568210ffc1c134": "1760000000000000000000",
  "168d30e53fa681092b52e9bae15a0dcb41a8c9bb": "100000000000000000000",
  "99b743d1d9eff90d9a1934b4db21d519d89b4a38": "100000000000000000000",
  "a3d0b03cffbb269f796ac29d80bfb07dc7c6ad06": "2000000000000000000000",
  "816d9772cf11399116cc1e72c26c6774c9edd739": "200000000000000000000",
  "a880e2a8bf88a1a82648b4013c49c4594c433cc8": "4728000000000000000000",
  "2a44a7218fe44d65a1b4b7a7d9b1c2c52c8c3e34": "62221355000000000000000",
  "cb86edbc8bbb1f9131022be649565ebdb09e32a1": "2000000000000000000000",
  "3915eab5ab2e5977d075dec47d96b68b4b5cf515": "61520000000000000000000",
  "8165cab0eafb5a328fc41ac64dae715b2eef2c65": "1000000000000000000000",
  "416c86b72083d1f8907d84efd2d2d783dffa3efb": "1999944000000000000000",
  "c524086d46c8112b128b2faf6f7c7d8160a8386c": "400000000000000000000",
  "902d74a157f7d2b9a3378b1f56703730e03a1719": "4000000000000000000000",
  "74ef2869cbe608856045d8c2041118579f2236ea": "59724000000000000000",
  "af992dd669c0883e5515d3f3112a13f617a4c367": "2000000000000000000000",
  "4c6a248fc97d705def495ca20759169ef0d36471": "760000000000000000000",
  "974d2f17895f2902049deaaecf09c3046507402d": "14707000000000000000",
  "0239b4f21f8e05cd01512b2be7a0e18a6d974607": "1000000000000000000000",
  "b97a6733cd5fe99864b3b33460d1672434d5cafd": "1999579000000000000000",
  "f558a2b2dd26dd9593aae04531fd3c3cc3854b67": "198000000000000000000",
  "b577b6befa054e9c040461855094b002d7f57bd7": "114000000000000000000000",
  "73bfe7710f31cab949b7a2604fbf5239cee79015": "2000000000000000000000",
  "5717f2d8f18ffcc0e5fe247d3a4219037c3a649c": "3998000000000000000000",
  "20707e425d2a11d2c89f391b2b809f556c592421": "2000000000000000000000",
  "9a6708ddb8903c289f83fe889c1edcd61f854423": "1000000000000000000000",
  "fa27cc49d00b6c987336a875ae39da58fb041b2e": "10000000000000000000000",
  "d688e785c98f00f84b3aa1533355c7a258e87948": "500000000000000000000",
  "927cb7dc187036b5427bc7e200c5ec450c1d27d4": "216000000000000000000",
  "b2bfaa58b5196c5cb7f89de15f479d1838de713d": "21000000000000000000",
  "e180de9e86f57bafacd7904f9826b6b4b26337a3": "830400000000000000000",
  "a1204dad5f560728a35c0d8fc79481057bf77386": "1000000000000000000000",
  "6b0da25af267d7836c226bcae8d872d2ce52c941": "6000000000000000000000",
  "0517448dada761cc5ba4033ee881c83037036400": "1998000000000000000000",
  "7ed0a5a847bef9a9da7cba1d6411f5c316312619": "39842000000000000000",
  "5b5d517029321562111b43086d0b043591109a70": "2600000000000000000000",
  "56fc1a7bad4047237ce116146296238e078f93ad": "178000000000000000000",
  "6c5422fb4b14e6d98b6091fdec71f1f08640419d": "400000000000000000000",
  "108fe8ee2a13da487b22c6ab6d582ea71064d98c": "399800000000000000000",
  "0ad3e44d3c001fa290b393617030544108ac6eb9": "1969019000000000000000",
  "25aee68d09afb71d8817f3f184ec562f7897b734": "2000000000000000000000",
  "c2340a4ca94c9678b7494c3c852528ede5ee529f": "48669000000000000000",
  "44901e0d0e08ac3d5e95b8ec9d5e0ff5f12e0393": "417500000000000000000",
  "8775a610c502b9f1e6ad4cdadb8ce29bff75f6e4": "600000000000000000000",
  "682897bc4f8e89029120fcffb787c01a93e64184": "10000000000000000000000",
  "f7acff934b84da0969dc37a8fcf643b7d7fbed41": "1999944000000000000000",
  "f05fcd4c0d73aa167e5553c8c0d6d4f2faa39757": "13334000000000000000000",
  "c981d312d287d558871edd973abb76b979e5c35e": "1970000000000000000000",
  "9da61ccd62bf860656e0325d7157e2f160d93bb5": "4999980000000000000000",
  "d284a50382f83a616d39b8a9c0f396e0ebbfa95d": "1000070000000000000000",
  "d6cf5c1bcf9da662bcea2255905099f9d6e84dcc": "8349332000000000000000",
  "c71b2a3d7135d2a85fb5a571dcbe695e13fc43cd": "1000000000000000000000",
  "b22dadd7e1e05232a93237baed98e0df92b1869e": "2000000000000000000000",
  "b09fe6d4349b99bc37938054022d54fca366f7af": "200000000000000000000000",
  "427e4751c3babe78cff8830886febc10f9908d74": "1970000000000000000000",
  "60b358cb3dbefa37f47df2d7365840da8e3bc98c": "20000000000000000000",
  "dcd5bca2005395b675fde5035659b26bfefc49ee": "197000000000000000000",
  "81186931184137d1192ac88cd3e1e5d0fdb86a74": "2900000000000000000000",
  "de212293f8f1d231fa10e609470d512cb8ffc512": "2000000000000000000000",
  "1937c5c515057553ccbd46d5866455ce66290284": "1000000000000000000000000",
  "592777261e3bd852c48eca95b3a44c5b7f2d422c": "20000000000000000000000",
  "bbf84292d954acd9e4072fb860b1504106e077ae": "1500000000000000000000",
  "3b4100e30a73b0c734b18ffa8426d19b19312f1a": "55300000000000000000000",
  "a03a3dc7c533d1744295be955d61af3f52b51af5": "40000000000000000000",
  "4aa148c2c33401e66a2b586e6577c4b292d3f240": "216200000000000000000",
  "ff850e3be1eb6a4d726c08fa73aad358f39706da": "1940000000000000000000",
  "743651b55ef8429df50cf81938c2508de5c8870f": "2000000000000000000000",
  "3700e3027424d939dbde5d42fb78f6c4dbec1a8f": "40000000000000000000",
  "c1cbd2e2332a524cf219b10d871ccc20af1fb0fa": "1000000000000000000000",
  "e25b9f76b8ad023f057eb11ad94257a0862e4e8c": "2000000000000000000000",
  "719e891fbcc0a33e19c12dc0f02039ca05b801df": "6185800000000000000000",
  "39636b25811b176abfcfeeca64bc87452f1fdff4": "400000000000000000000",
  "631030a5b27b07288a45696f189e1114f12a81c0": "499970000000000000000",
  "bcc84597b91e73d5c5b4d69c80ecf146860f779a": "4380000000000000000000",
  "095e0174829f34c3781be1a5e38d1541ea439b7f": "6000000000000000000000",
  "2e7e05e29edda7e4ae25c5173543efd71f6d3d80": "6000000000000000000000",
  "dbb6ac484027041642bbfd8d80f9d0c1cf33c1eb": "2000000000000000000000",
  "153c08aa8b96a611ef63c0253e2a4334829e579d": "394000000000000000000",
  "10f4bff0caa5027c0a6a2dcfc952824de2940909": "2000000000000000000000",
  "2ef869f0350b57d53478d701e3fee529bc911c75": "50000000000000000000",
  "70ab34bc17b66f9c3b63f151274f2a727c539263": "2000000000000000000000",
  "3201259caf734ad7581c561051ba0bca7fd6946b": "180000000000000000000000",
  "84e9cf8166c36abfa49053b7a1ad4036202681ef": "2000000000000000000000",
  "4ebc5629f9a6a66b2cf3363ac4895c0348e8bf87": "1000090000000000000000",
  "e50b464ac9de35a5618b7cbf254674182b81b97e": "4100000000000000000000",
  "2abdf1a637ef6c42a7e2fe217773d677e804ebdd": "5000000000000000000000",
  "7a0a78a9cc393f91c3d9e39a6b8c069f075e6bf5": "1337000000000000000000",
  "2d9c5fecd2b44fbb6a1ec732ea059f4f1f9d2b5c": "1010694000000000000000",
  "7b712c7af11676006a66d2fc5c1ab4c479ce6037": "8000000000000000000000",
  "3466f67e39636c01f43b3a21a0e8529325c08624": "842864000000000000000",
  "fdd502a74e813bcfa355ceda3c176f6a6871af7f": "400000000000000000000",
  "26475419c06d5f147aa597248eb46cf7befa64a5": "1640000000000000000000",
  "9243d7762d77287b12638688b9854e88a769b271": "1000000000000000000000",
  "723d8baa2551d2addc43c21b45e8af4ca2bfb2c2": "1760000000000000000000",
  "f2fbb6d887f8b8cc3a869aba847f3d1f643c53d6": "3999000000000000000000",
  "2cdb3944650616e47cb182e060322fa1487978ce": "1820000000000000000000",
  "f0d21663d8b0176e05fde1b90ef31f8530fda95f": "1999944000000000000000",
  "77cc02f623a9cf98530997ea67d95c3b491859ae": "1354900000000000000000",
  "d1b5a454ac3405bb4179208c6c84de006bcb9be9": "500000000000000000000",
  "b9920fd0e2c735c256463caa240fb7ac86a93dfa": "1760000000000000000000",
  "ed1f1e115a0d60ce02fb25df014d289e3a0cbe7d": "500000000000000000000",
  "23e2c6a8be8e0acfa5c4df5e36058bb7cbac5a81": "2000000000000000000000",
  "f0be0faf4d7923fc444622d1980cf2d990aab307": "2000000000000000000000",
  "0829d0f7bb7c446cfbb0deadb2394d9db7249a87": "40110000000000000000",
  "2ecac504b233866eb5a4a99e7bd2901359e43b3d": "20000000000000000000000",
  "06d6cb308481c336a6e1a225a912f6e6355940a1": "1760000000000000000000",
  "d4879fd12b1f3a27f7e109761b23ca343c48e3d8": "666000000000000000000",
  "857f100b1a5930225efc7e9020d78327b41c02cb": "2000000000000000000000",
  "3aa42c21b9b31c3e27ccd17e099af679cdf56907": "8000000000000000000000",
  "764d5212263aff4a2a14f031f04ec749dc883e45": "1850000000000000000000",
  "d03a2da41e868ed3fef5745b96f5eca462ff6fda": "3000000000000000000000",
  "4f26690c992b7a312ab12e1385d94acd58288e7b": "14000000000000000000000",
  "7b122162c913e7146cad0b7ed37affc92a0bf27f": "1506799000000000000000",
  "c87352dba582ee2066b9c002a962e003134f78b1": "500000000000000000000",
  "9f4ac9c9e7e24cb2444a0454fa5b9ad9d92d3853": "835000000000000000000",
  "ccf62a663f1353ba2ef8e6521dc1ecb673ec8ef7": "152000000000000000000",
  "557f5e65e0da33998219ad4e99570545b2a9d511": "11024000000000000000000",
  "a5f0077b351f6c505cd515dfa6d2fa7f5c4cd287": "40000000000000000000000",
  "79c6002f8452ca157f1317e80a2faf24475559b7": "20000000000000000000",
  "3aa07a34a1afc8967d3d1383b96b62cf96d5fa90": "20000000000000000000000",
  "7f389c12f3c6164f6446566c77669503c2792527": "98500000000000000000",
  "ac4cc256ae74d624ace80db078b2207f57198f6b": "2001000000000000000000",
  "823ba7647238d113bce9964a43d0a098118bfe4d": "200000000000000000000",
  "f5a7676ad148ae9c1ef8b6f5e5a0c2c473be850b": "200000000000000000000",
  "7d34803569e00bd6b59fff081dfa5c0ab4197a62": "1712700000000000000000",
  "061ea4877cd08944eb64c2966e9db8dedcfec06b": "1000000000000000000000",
  "df37c22e603aedb60a627253c47d8ba866f6d972": "24000000000000000000000",
  "529aa002c6962a3a8545027fd8b05f22b5bf9564": "1670000000000000000000",
  "eb89a882670909cf377e9e78286ee97ba78d46c2": "802200000000000000000",
  "9ac85397792a69d78f286b86432a07aeceb60e64": "14300000000000000000",
  "9610592202c282ab9bd8a884518b3e0bd4758137": "268000000000000000000",
  "73932709a97f02c98e51b091312865122385ae8e": "1430000000000000000000",
  "5ef8c96186b37984cbfe04c598406e3b0ac3171f": "9400000000000000000000",
  "b6f78da4f4d041b3bc14bc5ba519a5ba0c32f128": "172326253000000000000000",
  "6f0edd23bcd85f6015f9289c28841fe04c83efeb": "19100000000000000000",
  "a8a43c009100616cb4ae4e033f1fc5d7e0b6f152": "3939015000000000000000",
  "7081fa6baad6cfb7f51b2cca16fb8970991a64ba": "233953000000000000000",
  "9de7386dde401ce4c67b71b6553f8aa34ea5a17d": "60000000000000000000",
  "54ec7300b81ac84333ed1b033cd5d7a33972e234": "200000000000000000000",
  "67a80e0190721f94390d6802729dd12c31a895ad": "1999964000000000000000",
  "3a4297da3c555e46c073669d0478fce75f2f790e": "1969606000000000000000",
  "c2e0584a71348cc314b73b2029b6230b92dbb116": "2000000000000000000000",
  "0a2ade95b2e8c66d8ae6f0ba64ca57d783be6d44": "4000000000000000000000",
  "544b5b351d1bc82e9297439948cf4861dac9ae11": "22000000000000000000000",
  "3ae62bd271a760637fad79c31c94ff62b4cd12f7": "2000000000000000000000",
  "0d8023929d917234ae40512b1aabb5e8a4512771": "148000000000000000000",
  "2858acacaf21ea81cab7598fdbd86b452e9e8e15": "666000000000000000000",
  "c033b1325a0af45472c25527853b1f1c21fa35de": "2000000000000000000000",
  "bbf85aaaa683738f073baef44ac9dc34c4c779ea": "2000000000000000000000",
  "6ae57f27917c562a132a4d1bf7ec0ac785832926": "6000000000000000000000",
  "88e6f9b247f988f6c0fc14c56f1de53ec69d43cc": "100000000000000000000",
  "b72c2a011c0df50fbb6e28b20ae1aad217886790": "4000000000000000000000",
  "161caf5a972ace8379a6d0a04ae6e163fe21df2b": "100000000000000000000000",
  "2a63590efe9986c3fee09b0a0a338b15bed91f21": "6458400000000000000000",
  "50e1c8ec98415bef442618708799437b86e6c205": "6000000000000000000000",
  "33f4a6471eb1bca6a9f85b3b4872e10755c82be1": "2000000000000000000000",
  "9c49deff47085fc09704caa2dca8c287a9a137da": "8000000000000000000000",
  "e1173a247d29d8238df0922f4df25a05f2af77c3": "40007051000000000000000",
  "51891b2ccdd2f5a44b2a8bc49a5d9bca6477251c": "310000000000000000000",
  "ecaf3350b7ce144d068b186010852c84dd0ce0f0": "2000000000000000000000",
  "72393d37b451effb9e1ff3b8552712e2a970d8c2": "985000000000000000000",
  "1bbc60bcc80e5cdc35c5416a1f0a40a83dae867b": "2000000000000000000000",
  "b8ab39805bd821184f6cbd3d2473347b12bf175c": "118200000000000000000",
  "c55a6b4761fd11e8c85f15174d74767cd8bd9a68": "133700000000000000000",
  "99d1b585965f406a42a49a1ca70f769e765a3f98": "16700000000000000000000",
  "9ab988b505cfee1dbe9cd18e9b5473b9a2d4f536": "320000000000000000000",
  "7fef8c38779fb307ec6f044bebe47f3cfae796f1": "168561000000000000000",
  "322d6f9a140d213f4c80cd051afe25c620bf4c7d": "20000000000000000000",
  "3bd9a06d1bd36c4edd27fc0d1f5b088ddae3c72a": "499970000000000000000",
  "5dcdb6b87a503c6d8a3c65c2cf9a9aa883479a1e": "9200000000000000000000",
  "6e84c2fd18d8095714a96817189ca21cca62bab1": "340935000000000000000",
  "a5bad86509fbe0e0e3c0e93f6d381f1af6e9d481": "6000000000000000000000",
  "3954bdfe0bf587c695a305d9244c3d5bdddac9bb": "19187461000000000000000",
  "63f0e5a752f79f67124eed633ad3fd2705a397d4": "3940000000000000000000",
  "33fd718f0b91b5cec88a5dc15eecf0ecefa4ef3d": "432500000000000000000",
  "68027d19558ed7339a08aee8de3559be063ec2ea": "2000000000000000000000",
  "96f0462ae6f8b96088f7e9c68c74b9d8ad34b347": "1790000000000000000000",
  "f1f391ca92808817b755a8b8f4e2ca08d1fd1108": "6000000000000000000000",
  "7fcf5ba6666f966c5448c17bf1cb0bbcd8019b06": "99999000000000000000",
  "e9b9a2747510e310241d2ece98f56b3301d757e0": "2000000000000000000000",
  "2100381d60a5b54adc09d19683a8f6d5bb4bfbcb": "10000000000000000000000",
  "7495ae78c0d90261e2140ef2063104731a60d1ed": "34250000000000000000",
  "dc911cf7dc5dd0813656670528e9338e67034786": "2000000000000000000000",
  "262aed4bc0f4a4b2c6fb35793e835a49189cdfec": "10000000000000000000000",
  "9ee93f339e6726ec65eea44f8a4bfe10da3d3282": "2000000000000000000000",
  "a3a57b0716132804d60aac281197ff2b3d237b01": "1400000000000000000000",
  "c799e34e88ff88be7de28e15e4f2a63d0b33c4cb": "200000000000000000000",
  "c7506c1019121ff08a2c8c1591a65eb4bdfb4a3f": "600000000000000000000",
  "795ebc2626fc39b0c86294e0e837dcf523553090": "1000000000000000000000",
  "441aca82631324acbfa2468bda325bbd78477bbf": "6000000000000000000000",
  "9f271d285500d73846b18f733e25dd8b4f5d4a8b": "722000000000000000000",
  "d77892e2273b235d7689e430e7aeed9cbce8a1f3": "2000000000000000000000",
  "4f8972838f70c903c9b6c6c46162e99d6216d451": "4610000000000000000000",
  "4c85ed362f24f6b9f04cdfccd022ae535147cbb9": "1500000000000000000000",
  "3807eff43aa97c76910a19752dd715ee0182d94e": "250190000000000000000",
  "3a9e5441d44b243be55b75027a1ceb9eacf50df2": "1000000000000000000000",
  "3deae43327913f62808faa1b6276a2bd6368ead9": "2000000000000000000000",
  "c270456885342b640b4cfc1b520e1a544ee0d571": "1820000000000000000000",
  "77798f201257b9c35204957057b54674aefa51df": "149000000000000000000",
  "225f9eb3fb6ff3e9e3c8447e14a66e8d4f3779f6": "2000000000000000000000",
  "78df2681d6d602e22142d54116dea15d454957aa": "298000000000000000000",
  "283396ce3cac398bcbe7227f323e78ff96d08767": "400000000000000000000",
  "747ff7943b71dc4dcdb1668078f83dd7cc4520c2": "60000000000000000000",
  "a4ed11b072d89fb136759fc69b428c48aa5d4ced": "262800000000000000000",
  "cc043c4388d345f884c6855e71142a9f41fd6935": "20000000000000000000",
  "ab14d221e33d544629198cd096ed63dfa28d9f47": "6000000000000000000000",
  "251e6838f7cec5b383c1d90146341274daf8e502": "147510000000000000000",
  "36a0e61e1be47fa87e30d32888ee0330901ca991": "20000000000000000000",
  "bcfc98e5c82b6adb180a3fcb120b9a7690c86a3f": "1970000000000000000000",
  "18a6d2fc52be73084023c91802f05bc24a4be09f": "2000000000000000000000",
  "80591a42179f34e64d9df75dcd463b28686f5574": "20000000000000000000000",
  "881230047c211d2d5b00d8de4c5139de5e3227c7": "10000000000000000000000",
  "9eb1ff71798f28d6e989fa1ea0588e27ba86cb7d": "140800000000000000000",
  "a01fd1906a908506dedae1e208128872b56ee792": "3000000000000000000000",
  "1b05ea6a6ac8af7cb6a8b911a8cce8fe1a2acfc8": "2000000000000000000000",
  "6add932193cd38494aa3f03aeccc4b7ab7fabca2": "89600000000000000000",
  "2aaa35274d742546670b7426264521032af4f4c3": "10000000000000000000000",
  "67b8a6e90fdf0a1cac441793301e8750a9fa7957": "895000000000000000000",
  "5b5be0d8c67276baabd8edb30d48ea75640b8b29": "824480000000000000000",
  "28d7e5866f1d85fd1ceb32bfbe1dfc36db434566": "7199000000000000000000",
  "98e3e90b28fccaee828779b8d40a5568c4116e21": "40000000000000000000",
  "2dd578f7407dfbd548d05e95ccc39c485429626a": "4200000000000000000000",
  "8ca6989746b06e32e2487461b1ce996a273acfd7": "20000000000000000000",
  "a6f93307f8bce03195fece872043e8a03f7bd11a": "2886000000000000000000",
  "efbd52f97da5fd3a673a46cbf330447b7e8aad5c": "100033000000000000000",
  "52bdd9af5978850bc24110718b3723759b437e59": "1730000000000000000000",
  "6e073b66d1b8c66744d88096a8dd99ec7e0228da": "4000000000000000000000",
  "a29d661a6376f66d0b74e2fe9d8f26c0247ec84c": "4117300000000000000000",
  "7d34ff59ae840a7413c6ba4c5bb2ba2c75eab018": "3000000000000000000000",
  "2eca6a3c5d9f449d0956bd43fa7b4d7be8435958": "2000020000000000000000",
  "f59f9f02bbc98efe097eabb78210979021898bfd": "9999800000000000000000",
  "90e300ac71451e401f887f6e7728851647a80e07": "400000000000000000000",
  "05ae7fd4bbcc80ca11a90a1ec7a301f7cccc83db": "910000000000000000000",
  "e54102534de8f23effb093b31242ad3b233facfd": "4000000000000000000000",
  "c127aab59065a28644a56ba3f15e2eac13da2995": "600000000000000000000",
  "ed60c4ab6e540206317e35947a63a9ca6b03e2cb": "57275000000000000000",
  "d855b03ccb029a7747b1f07303e0a664793539c8": "2000000000000000000000",
  "1178501ff94add1c5881fe886136f6dfdbe61a94": "158000000000000000000",
  "f447108b98df64b57e871033885c1ad71db1a3f9": "6916709000000000000000",
  "deee2689fa9006b59cf285237de53b3a7fd01438": "450034000000000000000",
  "7f01dc7c3747ca608f983dfc8c9b39e755a3b914": "206980000000000000000",
  "9edeac4c026b93054dc5b1d6610c6f3960f2ad73": "1200000000000000000000",
  "e3cffe239c64e7e20388e622117391301b298696": "500000000000000000000",
  "ebbb4f2c3da8be3eb62d1ffb1f950261cf98ecda": "2000000000000000000000",
  "38c10b90c859cbb7815692f99dae520ab5febf5e": "13169000000000000000000",
  "23f9ecf3e5dddca38815d3e59ed34b5b90b4a353": "204608000000000000000",
  "d7fa5ffb6048f96fb1aba09ef87b1c11dd7005e4": "1000000000000000000000",
  "9ca42ee7a0b898f6a5cc60b5a5d7b1bfa3c33231": "2000000000000000000000",
  "8b9577920053b1a00189304d888010d9ef2cb4bf": "500000000000000000000",
  "fcd0b4827cd208ffbf5e759dba8c3cc61d8c2c3c": "8000000000000000000000",
  "01ff1eb1dead50a7f2f9638fdee6eccf3a7b2ac8": "600000000000000000000",
  "abde147b2af789eaa586547e66c4fa2664d328a4": "247545000000000000000",
  "64042ba68b12d4c151651ca2813b7352bd56f08e": "600000000000000000000",
  "dccca42045ec3e16508b603fd936e7fd7de5f36a": "19700000000000000000",
  "e77a89bd45dc04eeb4e41d7b596b707e6e51e74c": "12000000000000000000000",
  "f77c7b845149efba19e261bc7c75157908afa990": "2000000000000000000000",
  "fa5201fe1342af11307b9142a041243ca92e2f09": "152150000000000000000000",
  "40df495ecf3f8b4cef2a6c189957248fe884bc2b": "12000000000000000000000",
  "3d79a853d71be0621b44e29759656ca075fdf409": "2000000000000000000000",
  "6de02f2dd67efdb7393402fa9eaacbcf589d2e56": "1182000000000000000000",
  "729aad4627744e53f5d66309aa74448b3acdf46f": "2000000000000000000000",
  "4e4318f5e13e824a54edfe30a7ed4f26cd3da504": "2000000000000000000000",
  "c6a286e065c85f3af74812ed8bd3a8ce5d25e21d": "18200000000000000000",
  "fd686de53fa97f99639e2568549720bc588c9efc": "1969606000000000000000",
  "06b0ff834073cce1cbc9ea557ea87b605963e8b4": "300000000000000000000",
  "72b5633fe477fe542e742facfd690c137854f216": "1670000000000000000000",
  "8bf373d076814cbc57e1c6d16a82c5be13c73d37": "200000000000000000000",
  "cf264e6925130906c4d7c18591aa41b2a67f6f58": "2000000000000000000000",
  "0ea2a210312b3e867ee0d1cc682ce1d666f18ed5": "10000000000000000000000",
  "d02afecf8e2ec2b62ac8ad204161fd1fae771d0e": "2000000000000000000000",
  "e6b20f980ad853ad04cbfc887ce6601c6be0b24c": "4000000000000000000000",
  "4280a58f8bb10b9440de94f42b4f592120820191": "2000000000000000000000",
  "a914cdb571bfd93d64da66a4e108ea134e50d000": "1430143000000000000000",
  "60864236930d04d8402b5dcbeb807f3caf611ea2": "4000000000000000000000",
  "f9dd239008182fb519fb30eedd2093fed1639be8": "500000000000000000000",
  "18e53243981aabc8767da10c73449f1391560eaa": "6000000000000000000000",
  "c3a9226ae275df2cab312b911040634a9c9c9ef6": "4000000000000000000000",
  "4fcc19ea9f4c57dcbce893193cfb166aa914edc5": "7001380000000000000000",
  "c1e1409ca52c25435134d006c2a6a8542dfb7273": "34380000000000000000",
  "981ddf0404e4d22dda556a0726f00b2d98ab9569": "999972000000000000000",
  "e5bcc88c3b256f6ed5fe550e4a18198b943356ad": "2000000000000000000000",
  "74a17f064b344e84db6365da9591ff1628257643": "20000000000000000000",
  "2720f9ca426ef2f2cbd2fecd39920c4f1a89e16d": "2000000000000000000000",
  "8d04a5ebfb5db409db0617c9fa5631c192861f4a": "970000000000000000000",
  "f18b14cbf6694336d0fe12ac1f25df2da0c05dbb": "3999800000000000000000",
  "56ac20d63bd803595cec036da7ed1dc66e0a9e07": "63927000000000000000",
  "92c94c2820dfcf7156e6f13088ece7958b3676fd": "95500000000000000000",
  "968dea60df3e09ae3c8d3505e9c080454be0e819": "6000000000000000000000",
  "9268d62646563611dc3b832a30aa2394c64613e3": "2000000000000000000000",
  "5a192b964afd80773e5f5eda6a56f14e25e0c6f3": "500000000000000000000",
  "df8d48b1eb07b3c217790e6c2df04dc319e7e848": "500000000000000000000",
  "7f61fa6cf5f898b440dac5abd8600d6d691fdef9": "280000000000000000000",
  "929d368eb46a2d1fbdc8ffa0607ede4ba88f59ad": "2000000000000000000000",
  "9982a5890ffb5406d3aca8d2bfc1dd70aaa80ae0": "2000000000000000000000",
  "bf2aea5a1dcf6ed3b5e8323944e983fedfd1acfb": "1580000000000000000000",
  "46aa501870677e7f0a504876b4e8801a0ad01c46": "800000000000000000000",
  "8f473d0ab876ddaa15608621d7013e6ff714b675": "470400000000000000000",
  "02290fb5f9a517f82845acdeca0fc846039be233": "2000000000000000000000",
  "8a5831282ce14a657a730dc18826f7f9b99db968": "4330268000000000000000",
  "0328510c09dbcd85194a98d67c33ac49f2f94d60": "11000000000000000000000",
  "cf883a20329667ea226a1e3c765dbb6bab32219f": "3038972000000000000000",
  "2615100ea7e25bba9bca746058afbbb4ffbe4244": "500000000000000000000",
  "b115ee3ab7641e1aa6d000e41bfc1ec7210c2f32": "13000000000000000000000",
  "5cfa8d568575658ca4c1a593ac4c5d0e44c60745": "291000000000000000000",
  "d3c24d4b3a5e0ff8a4622d518edd73f16ab28610": "20000000000000000000",
  "a639acd96b31ba53b0d08763229e1f06fd105e9d": "8000000000000000000000",
  "ffa4aff1a37f984b0a67272149273ae9bd41e3bc": "10000000000000000000000",
  "cf684dfb8304729355b58315e8019b1aa2ad1bac": "432500000000000000000",
  "5797b60fd2894ab3c2f4aede86daf2e788d745ad": "6000000000000000000000",
  "a6a0de421ae54f6d17281308f5646d2f39f7775d": "2000000000000000000000",
  "08504f05643fab5919f5eea55925d7a3ed7d807a": "20000000000000000000",
  "7a7068e1c3375c0e599db1fbe6b2ea23b8f407d2": "2000000000000000000000",
  "1078d7f61b0e56c74ee6635b2e1819ef1e3d8785": "1000000000000000000000",
  "6e12b51e225b4a4372e59ad7a2a1a13ea3d3a137": "14172200000000000000000",
  "6a2e86469a5bf37cee82e88b4c3863895d28fcaf": "519000000000000000000",
  "197672fd39d6f246ce66a790d13aa922d70ea109": "1000000000000000000000",
  "8009a7cbd192b3aed4adb983d5284552c16c7451": "4000000000000000000000",
  "f6c3c48a1ac0a34799f04db86ec7a975fe7768f3": "1970000000000000000000",
  "16be75e98a995a395222d00bd79ff4b6e638e191": "36000000000000000000000",
  "6c05e34e5ef2f42ed09deff1026cd66bcb6960bb": "2000000000000000000000",
  "5d6ae8cbd6b3393c22d16254100d0238e808147c": "719992000000000000000",
  "1a376e1b2d2f590769bb858d4575320d4e149970": "4841200000000000000000",
  "f6ead67dbf5b7eb13358e10f36189d53e643cfcf": "40000000000000000000000",
  "467d5988249a68614716659840ed0ae6f6f457bc": "387500000000000000000",
  "aa960e10c52391c54e15387cc67af827b5316dcc": "2000000000000000000000",
  "483ba99034e900e3aedf61499d3b2bce39beb7aa": "985000000000000000000",
  "86f23e9c0aafc78b9c404dcd60339a925bffa266": "400000000000000000000",
  "d05a447c911dbb275bfb2e5a37e5a703a56f9997": "200000000000000000000",
  "edb71ec41bda7dce86e766e6e8c3e9907723a69b": "20000000000000000000",
  "f86a3ea8071f7095c7db8a05ae507a8929dbb876": "336000000000000000000",
  "323b3cfe3ee62bbde2a261e53cb3ecc05810f2c6": "13790000000000000000000",
  "936f3813f5f6a13b8e4ffec83fe7f826186a71cd": "520000000000000000000",
  "6db72bfd43fef465ca5632b45aab7261404e13bf": "2000000000000000000000",
  "9bb76204186af2f63be79168601687fc9bad661f": "300000000000000000000",
  "28ab165ffb69eda0c549ae38e9826f5f7f92f853": "1296890000000000000000",
  "c73e2112282215dc0762f32b7e807dcd1a7aae3e": "6900000000000000000000",
  "f8086e42661ea929d2dda1ab6c748ce3055d111e": "1000000000000000000000",
  "4db21284bcd4f787a7556500d6d7d8f36623cf35": "1939806000000000000000",
  "c48651c1d9c16bff4c9554886c3f3f26431f6f68": "658000000000000000000",
  "9bdbdc9b973431d13c89a3f9757e9b3b6275bfc7": "499971000000000000000",
  "560da37e956d862f81a75fd580a7135c1b246352": "10000000000000000000000",
  "4b60a3e253bf38c8d5662010bb93a473c965c3e5": "1490000000000000000000",
  "64e02abb016cc23a2934f6bcddb681905021d563": "1000000000000000000000",
  "ac2c8e09d06493a63858437bd20be01962450365": "1910000000000000000000",
  "9bf9b3b2f23cf461eb591f28340bc719931c8364": "1000000000000000000000",
  "9b5c39f7e0ac168c8ed0ed340477117d1b682ee9": "98000000000000000000",
  "f75bb39c799779ebc04a336d260da63146ed98d0": "25000000000000000000",
  "a7966c489f4c748a7ae980aa27a574251767caf9": "3000000000000000000000",
  "ea53c954f4ed97fd4810111bdab69ef981ef25b9": "17300000000000000000000",
  "03a26cfc4c18316f70d59e9e1a79ee3e8b962f4c": "2000000000000000000000",
  "3e63ce3b24ca2865b4c5a687b7aea3597ef6e548": "2000000000000000000000",
  "500c902958f6421594d1b6ded712490d52ed6c44": "1970000000000000000000",
  "6f44ca09f0c6a8294cbd519cdc594ad42c67579f": "50000000000000000000",
  "3616fb46c81578c9c8eb4d3bf880451a88379d7d": "200000000000000000000",
  "57bc20e2d62b3d19663cdb4c309d5b4f2fc2db8f": "100000000000000000000",
  "1cebf0985d7f680aaa915c44cc62edb49eab269e": "1000000000000000000000",
  "c0cbf6032fa39e7c46ff778a94f7d445fe22cf30": "310000000000000000000",
  "c58b9cc61dedbb98c33f224d271f0e228b583433": "3880000000000000000000",
  "e9c6dfae97f7099fc5f4e94b784db802923a1419": "48800000000000000000",
  "9bacd3d40f3b82ac91a264d9d88d908eac8664b9": "20000000000000000000000",
  "63d80048877596e0c28489e650cd4ac180096a49": "280000000000000000000",
  "e6a6f6dd6f70a456f4ec15ef7ad5e5dbb68bd7dc": "200000000000000000000",
  "d418870bc2e4fa7b8a6121ae0872d55247b62501": "1580000000000000000000",
  "e2f9383d5810ea7b43182b8704b62b27f5925d39": "400000000000000000000",
  "bd5e473abce8f97a6932f77c2facaf9cc0a00514": "1117350000000000000000",
  "2ff1ca55fd9cec1b1fe9f0a9abb74c513c1e2aaa": "3000000000000000000000",
  "9d99b189bbd9a48fc2e16e8fcda33bb99a317bbb": "1126900000000000000000",
  "6e96faeda3054302c45f58f161324c99a3eebb62": "20000000000000000000",
  "ef93818f684db0c3675ec81332b3183ecc28a495": "1550000000000000000000",
  "2659facb1e83436553b5b42989adb8075f9953ed": "29356000000000000000",
  "c4ffadaaf2823fbea7bff702021bffc4853eb5c9": "42233000000000000000",
  "e9864c1afc8eaad37f3ba56fcb7477cc622009b7": "79000000000000000000",
  "87ef6d8b6a7cbf9b5c8c97f67ee2adc2a73b3f77": "200400000000000000000",
  "c043f2452dcb9602ef62bd360e033dd23971fe84": "2000000000000000000000",
  "0fdd65402395df9bd19fee4507ef5345f745104c": "5000000000000000000000",
  "939c4313d2280edf5e071bced846063f0a975d54": "120000000000000000000000",
  "b28245037cb192f75785cb86cbfe7c930da258b0": "16000000000000000000000",
  "a80cb1738bac08d4f9c08b4deff515545fa8584f": "500000000000000000000",
  "62971bf2634cee0be3c9890f51a56099dbb9519b": "656000000000000000000",
  "f2efe96560c9d97b72bd36447843885c1d90c231": "2000000000000000000000",
  "0e390f44053ddfcef0d608b35e4d9c2cbe9871bb": "1970000000000000000000",
  "61d101a033ee0e2ebb3100ede766df1ad0244954": "500000000000000000000",
  "6785513cf732e47e87670770b5419be10cd1fc74": "2000000000000000000000",
  "167699f48a78c615512515739958993312574f07": "39000000000000000000",
  "68ec79d5be7155716c40941c79d78d17de9ef803": "500600000000000000000",
  "a0e8ba661b48154cf843d4c2a5c0f792d528ee29": "400000000000000000000",
  "1a201b4327cea7f399046246a3c87e6e03a3cda8": "1000000000000000000000",
  "f60f62d73937953fef35169e11d872d2ea317eec": "5348000000000000000000",
  "c0c04d0106810e3ec0e54a19f2ab8597e69a573d": "50000000000000000000",
  "ef47cf073e36f271d522d7fa4e7120ad5007a0bc": "2500000000000000000000",
  "a44fe800d96fcad73b7170d0f610cb8c0682d6ce": "4000000000000000000000",
  "010f4a98dfa1d9799bf5c796fb550efbe7ecd877": "8023366000000000000000",
  "708fa11fe33d85ad1befcbae3818acb71f6a7d7e": "18200000000000000000",
  "b38c4e537b5df930d65a74d043831d6b485bbde4": "400000000000000000000",
  "250a69430776f6347703f9529783955a6197b682": "1940000000000000000000",
  "2d35a9df62757f7ffad1049afb06ca4afc464c51": "20000000000000000000",
  "6aff1466c2623675e3cb0e75e423d37a25e442eb": "1730000000000000000000",
  "fc15cb99a8d1030b12770add033a79ee0d0c908c": "350056000000000000000",
  "e784dcc873aa8c1513ec26ff36bc92eac6d4c968": "200000000000000000000",
  "b1c328fb98f2f19ab6646f0a7c8c566fda5a8540": "2500000000000000000000",
  "247a0a11c57f0383b949de540b66dee68604b0a1": "1069600000000000000000",
  "1af60343360e0b2d75255210375720df21db5c7d": "1000000000000000000000",
  "8794bf47d54540ece5c72237a1ffb511ddb74762": "2000000000000000000000",
  "e76d945aa89df1e457aa342b31028a5e9130b2ce": "1015200000000000000000",
  "a30e0acb534c9b3084e8501da090b4eb16a2c0cd": "2000000000000000000000",
  "7099d12f6ec656899b049a7657065d62996892c8": "400000000000000000000",
  "7be7f2456971883b9a8dbe4c91dec08ac34e8862": "3000000000000000000000",
  "42746aeea14f27beff0c0da64253f1e7971890a0": "1550000000000000000000",
  "736b44503dd2f6dd5469ff4c5b2db8ea4fec65d0": "313950000000000000000",
  "822edff636563a6106e52e9a2598f7e6d0ef2782": "36099000000000000000",
  "03c647a9f929b0781fe9ae01caa3e183e876777e": "445800000000000000000",
  "63612e7862c27b587cfb6daf9912cb051f030a9f": "43458000000000000000",
  "d46bae61b027e5bb422e83a3f9c93f3c8fc77d27": "2000000000000000000000",
  "5f23ba1f37a96c45bc490259538a54c28ba3b0d5": "1200000000000000000000",
  "d41d7fb49fe701baac257170426cc9b38ca3a9b2": "176000000000000000000",
  "1ebacb7844fdc322f805904fbf1962802db1537c": "10000000000000000000000",
  "9c80bc18e9f8d4968b185da8c79fa6e11ffc3e23": "240000000000000000000",
  "e4ca0a5238564dfc91e8bf22bade2901619a1cd4": "1000000000000000000000",
  "1ad72d20a76e7fcc6b764058f48d417d496fa6cd": "2000000000000000000000",
  "d3bc730937fa75d8452616ad1ef1fe7fffe0d0e7": "83363000000000000000",
  "eac1482826acb6111e19d340a45fb851576bed60": "32177000000000000000",
  "01e40521122530d9ac91113c06a0190b6d63850b": "1337000000000000000000",
  "9e20e5fd361eabcf63891f5b87b09268b8eb3793": "100000000000000000000",
  "69ff429074cb9b6c63bc914284bce5f0c8fbf7d0": "500000000000000000000",
  "0d3265d3e7bdb93d5e8e8b1ca47f210a793ecc8e": "200000000000000000000",
  "5b4ea16db6809b0352d4b6e81c3913f76a51bb32": "400000000000000000000",
  "d8fe088fffce948f5137ee23b01d959e84ac4223": "227942000000000000000",
  "7e4e9409704121d1d77997026ff06ea9b19a8b90": "2602600000000000000000",
  "96b434fe0657e42acc8212b6865139dede15979c": "4000000000000000000000",
  "22f004df8de9e6ebf523ccace457accb26f97281": "10000000000000000000000",
  "d8f9240c55cff035523c6d5bd300d370dc8f0c95": "285000000000000000000",
  "9d9e57fde30e5068c03e49848edce343b7028358": "1730000000000000000000",
  "317cf4a23cb191cdc56312c29d15e210b3b9b784": "144000000000000000000",
  "79f08e01ce0988e63c7f8f2908fade43c7f9f5c9": "18200000000000000000",
  "04e5f5bc7c923fd1e31735e72ef968fd67110c6e": "1611000000000000000000",
  "1ec4ec4b77bf19d091a868e6f49154180541f90e": "2000000000000000000000",
  "8737dae671823a8d5917e0157ace9c43468d946b": "1999944000000000000000",
  "f998ca3411730a6cd10e7455b0410fb0f6d3ff80": "2000000000000000000000",
  "6e2eab85dc89fe29dc0aa1853247dab43a523d56": "80000000000000000000",
  "72c083beadbdc227c5fb43881597e32e83c26056": "20000000000000000000000",
  "5902e44af769a87246a21e079c08bf36b06efeb3": "1000000000000000000000",
  "cc2d04f0a4017189b340ca77198641dcf6456b91": "3940000000000000000000",
  "bde4c73f969b89e9ceae66a2b51844480e038e9a": "1000000000000000000000",
  "adff0d1d0b97471e76d789d2e49c8a74f9bd54ff": "1880000000000000000000",
  "397cdb8c80c67950b18d654229610e93bfa6ee1a": "1172938000000000000000",
  "a3e051fb744aa3410c3b88f899f5d57f168df12d": "2955000000000000000000",
  "810db25675f45ea4c7f3177f37ce29e22d67999c": "200000000000000000000",
  "1e13ec51142cebb7a26083412c3ce35144ba56a1": "5000000000000000000000",
  "25bdfa3ee26f3849617b230062588a97e3cae701": "1000008000000000000000",
  "ae538c73c5b38d8d584d7ebdadefb15cabe48357": "999000000000000000000",
  "a2ecce2c49f72a0995a0bda57aacf1e9f001e22a": "4000000000000000000000",
  "7e24fbdad290175eb2df6d180a19b9a9f41370be": "1000000000000000000000",
  "e8cc43bc4f8acf39bff04ebfbf42aac06a328470": "400000000000000000000",
  "c2779771f0536d79a8708f6931abc44b3035e999": "20002000000000000000000",
  "ab27ba78c8e5e3daef31ad05aef0ff0325721e08": "468000000000000000000",
  "563cb8803c1d32a25b27b64114852bd04d9c20cd": "204400000000000000000",
  "08d4267feb15da9700f7ccc3c84a8918bf17cfde": "1790000000000000000000",
  "d1778c13fbd968bc083cb7d1024ffe1f49d02caa": "4020000000000000000000",
  "1796bcc97b8abc717f4b4a7c6b1036ea2182639f": "355242000000000000000",
  "beecd6af900c8b064afcc6073f2d85d59af11956": "2000000000000000000000",
  "045ed7f6d9ee9f252e073268db022c6326adfc5b": "100000000000000000000",
  "b88a37c27f78a617d5c091b7d5b73a3761e65f2a": "2000000000000000000000",
  "72fb49c29d23a18950c4b2dc0ddf410f532d6f53": "2000000000000000000000",
  "6ecaefa6fc3ee534626db02c6f85a0c395571e77": "600000000000000000000",
  "d1811c55976980f083901d8a0db269222dfb5cfe": "1550000000000000000000",
  "98855c7dfbee335344904a12c40c731795b13a54": "1069600000000000000000",
  "92a898d46f19719c38126a8a3c27867ae2cee596": "2000000000000000000000",
  "ca428863a5ca30369892d612183ef9fb1a04bcea": "1520000000000000000000",
  "797427e3dbf0feae7a2506f12df1dc40326e8505": "1000000000000000000000",
  "3d574fcf00fae1d98cc8bf9ddfa1b3953b9741bc": "1970000000000000000000",
  "28818e18b610001321b31df6fe7d2815cdadc9f5": "1000000000000000000000",
  "5f3e1e6739b0c62200e00a003691d9efb238d89f": "3000000000000000000000",
  "d9d370fec63576ab15b318bf9e58364dc2a3552a": "100000000000000000000",
  "b223bf1fbf80485ca2b5567d98db7bc3534dd669": "4000000000000000000000",
  "7b27d0d1f3dd3c140294d0488b783ebf4015277d": "400000000000000000000",
  "7930c2d9cbfa87f510f8f98777ff8a8448ca5629": "199955000000000000000",
  "820c19291196505b65059d9914b7090be1db87de": "140000000000000000000",
  "e545ee84ea48e564161e9482d59bcf406a602ca2": "1850000000000000000000",
  "af4cf41785161f571d0ca69c94f8021f41294eca": "9850000000000000000000",
  "7a4f9b850690c7c94600dbee0ca4b0a411e9c221": "1910000000000000000000",
  "ddab6b51a9030b40fb95cf0b748a059c2417bec7": "2000000000000000000000",
  "315ef2da620fd330d12ee55de5f329a696e0a968": "150000000000000000000",
  "4db1c43a0f834d7d0478b8960767ec1ac44c9aeb": "872870000000000000000",
  "2fef81478a4b2e8098db5ff387ba2153f4e22b79": "999000000000000000000",
  "6c6aa0d30b64721990b9504a863fa0bfb5e57da7": "2700000000000000000000",
  "33380c6fff5acd2651309629db9a71bf3f20c5ba": "16100000000000000000000",
  "4eebf1205d0cc20cee6c7f8ff3115f56d48fba26": "19400000000000000000",
  "03cc9d2d21f86b84ac8ceaf971dba78a90e62570": "1610000000000000000000",
  "728f9ab080157db3073156dbca1a169ef3179407": "500000000000000000000",
  "30ed11b77bc17e5e6694c8bc5b6e4798f68d9ca7": "143731500000000000000000",
  "f617b967b9bd485f7695d2ef51fb7792d898f500": "500000000000000000000",
  "c0cbad3ccdf654da22cbcf5c786597ca1955c115": "2000000000000000000000",
  "80522ddf944ec52e27d724ed4c93e1f7be6083d6": "200000000000000000000",
  "4e90ccb13258acaa9f4febc0a34292f95991e230": "15800000000000000000",
  "ff207308ced238a6c01ad0213ca9eb4465d42590": "1999944000000000000000",
  "35f2949cf78bc219bb4f01907cf3b4b3d3865482": "289800000000000000000",
  "68f525921dc11c329b754fbf3e529fc723c834cd": "1610000000000000000000",
  "81139bfdcca656c430203f72958c543b6580d40c": "2000000000000000000000",
  "9d511543b3d9dc60d47f09d49d01b6c498d82078": "11245000000000000000000",
  "084d103254759b343cb2b9c2d8ff9e1ac5f14596": "7600000000000000000000",
  "b323dcbf2eddc5382ee4bbbb201ca3931be8b438": "2000000000000000000000",
  "349d2c918fd09e2807318e66ce432909176bd50b": "1120000000000000000000",
  "b535f8db879fc67fec58824a5cbe6e5498aba692": "1910000000000000000000",
  "824074312806da4748434266ee002140e3819ac2": "1507000000000000000000",
  "e8ef100d7ce0895832f2678df72d4acf8c28b8e3": "500038000000000000000",
  "84af1b157342d54368260d17876230a534b54b0e": "985000000000000000000",
  "419a71a36c11d105e0f2aef5a3e598078e85c80b": "5000000000000000000000",
  "55af092f94ba6a79918b0cf939eab3f01b3f51c7": "149940000000000000000",
  "35a549e8fd6c368d6dcca6d2e7d18e4db95f5284": "499938000000000000000",
  "f0e2649c7e6a3f2c5dfe33bbfbd927ca3c350a58": "2000000000000000000000",
  "f4b759cc8a1c75f80849ebbcda878dc8f0d66de4": "400000000000000000000",
  "21846f2fdf5a41ed8df36e5ed8544df75988ece3": "1999944000000000000000",
  "229ff80bf5708009a9f739e0f8b560914016d5a6": "333333000000000000000",
  "da505537537ffb33c415fec64e69bae090c5f60f": "160000000000000000000",
  "b91d9e916cd40d193db60e79202778a0087716fc": "404800000000000000000",
  "bb6823a1bd819f13515538264a2de052b4442208": "25610000000000000000",
  "459393d63a063ef3721e16bd9fde45ee9dbd77fb": "1968818000000000000000",
  "95f62d0243ede61dad9a3165f53905270d54e242": "1610000000000000000000",
  "b0bb29a861ea1d424d45acd4bfc492fb8ed809b7": "80000000000000000000",
  "5e74ed80e9655788e1bb269752319667fe754e5a": "56000000000000000000",
  "a276b058cb98d88beedb67e543506c9a0d9470d8": "2668652000000000000000",
  "8ae9ef8c8a8adfa6ab798ab2cdc405082a1bbb70": "2000000000000000000000",
  "e5102c3b711b810344197419b1cd8a7059f13e32": "299999000000000000000",
  "c32038ca52aee19745be5c31fcdc54148bb2c4d0": "49984000000000000000",
  "13e321728c9c57628058e93fc866a032dd0bda90": "714580000000000000000",
  "c2bae4a233c2d85724f0dabebda0249d833e37d3": "5000000000000000000000",
  "10d32416722ca4e648630548ead91edd79c06aff": "100000000000000000000",
  "d5f07552b5c693c20067b378b809cee853b8f136": "505540000000000000000",
  "8668af868a1e98885f937f2615ded6751804eb2d": "20000000000000000000",
  "139d3531c9922ad56269f6309aa789fb2485f98c": "4000000000000000000000",
  "1d29c7aab42b2048d2b25225d498dba67a03fbb2": "200000000000000000000",
  "d35075ca61fe59d123969c36a82d1ab2d918aa38": "2674000000000000000000",
  "d6fc0446c6a8d40ae3551db7e701d1fa876e4a49": "2000000000000000000000",
  "fccd0d1ecee27addea95f6857aeec8c7a04b28ee": "10000000000000000000000",
  "c12cfb7b3df70fceca0ede263500e27873f8ed16": "1000000000000000000000",
  "d0db456178206f5c4430fe005063903c3d7a49a7": "706245000000000000000",
  "73cf80ae9688e1580e68e782cd0811f7aa494d2c": "7760000000000000000000",
  "d60651e393783423e5cc1bc5f889e44ef7ea243e": "398800000000000000000",
  "048a8970ea4145c64d5517b8de5b46d0595aad06": "20000000000000000000000",
  "dd9b485a3b1cd33a6a9c62f1e5bee92701856d25": "225073000000000000000",
  "5b287c7e734299e727626f93fb1187a60d5057fe": "101230000000000000000",
  "635c00fdf035bca15fa3610df3384e0fb79068b1": "9000000000000000000000",
  "630a913a9031c9492abd4c41dbb15054cfec4416": "5688000000000000000000",
  "af3614dcb68a36e45a4e911e62796247222d595b": "2259800000000000000000",
  "335e22025b7a77c3a074c78b8e3dfe071341946e": "10178744000000000000000",
  "f0e1dfa42adeac2f17f6fdf584c94862fd563393": "500000000000000000000",
  "1a9e702f385dcd105e8b9fa428eea21c57ff528a": "1400000000000000000000",
  "8ce4949d8a16542d423c17984e6739fa72ceb177": "24999975000000000000000",
  "5f29c9de765dde25852af07d33f2ce468fd20982": "2000000000000000000000",
  "dbf5f061a0f48e5e69618739a77d2ec19768d201": "152000000000000000000",
  "b247cf9c72ec482af3eaa759658f793d670a570c": "912000000000000000000",
  "99f4147ccc6bcb80cc842e69f6d00e30fa4133d9": "400000000000000000000",
  "ba6d31b9a261d640b5dea51ef2162c3109f1eba8": "5000000000000000000000",
  "f05ba8d7b68539d933300bc9289c3d9474d0419e": "126400000000000000000",
  "682e96276f518d31d7e56e30dfb009c1218201bd": "20000000000000000000",
  "0927220492194b2eda9fc4bbe38f25d681dfd36c": "6000000000000000000000",
  "a3c33afc8cb4704e23153de2049d35ae71332472": "799600000000000000000",
  "05c736d365aa37b5c0be9c12c8ad5cd903c32cf9": "6002000000000000000000",
  "d8eef4cf4beb01ee20d111748b61cb4d3f641a01": "2740000000000000000000",
  "16c1bf5b7dc9c83c179efacbcf2eb174e3561cb3": "1000000000000000000000",
  "d79db5ab43621a7a3da795e58929f3dd25af67d9": "1999944000000000000000",
  "28efae6356509edface89fc61a7fdcdb39eea8e5": "5348000000000000000000",
  "c55005a6c37e8ca7e543ce259973a3cace961a4a": "2000000000000000000000",
  "ab3d86bc82927e0cd421d146e07f919327cdf6f9": "1910000000000000000000",
  "b74ed2666001c16333cf7af59e4a3d4860363b9c": "193600000000000000000",
  "1899f69f653b05a5a6e81f480711d09bbf97588c": "1955000000000000000000",
  "27fc85a49cff90dbcfdadc9ddd40d6b9a2210a6c": "100000000000000000000",
  "cd1ed263fbf6f6f7b48aef8f733d329d4382c7c7": "18500000000000000000",
  "d97fe6f53f2a58f6d76d752adf74a8a2c18e9074": "309990000000000000000",
  "80da2fdda29a9e27f9e115975e69ae9cfbf3f27e": "200000000000000000000",
  "09146ea3885176f07782e1fe30dce3ce24c49e1f": "20000000000000000000",
  "393ff4255e5c658f2e7f10ecbd292572671bc2d2": "2000000000000000000000",
  "a390ca122b8501ee3e5e07a8ca4b419f7e4dae15": "100000000000000000000",
  "6d9193996b194617211106d1635eb26cc4b66c6c": "399640000000000000000",
  "999c49c174ca13bc836c1e0a92bff48b271543ca": "3280000000000000000000",
  "7421ce5be381738ddc83f02621974ff0686c79b8": "1632000000000000000000",
  "6be9030ee6e2fbc491aca3de4022d301772b7b7d": "26740000000000000000",
  "81bd75abd865e0c3f04a0b4fdbcb74d34082fbb7": "4000000000000000000000",
  "8bc1ff8714828bf286ff7e8a7709106548ed1b18": "10000000000000000000000",
  "a0aadbd9509722705f6d2358a5c79f37970f00f6": "200000000000000000000",
  "3d881433f04a7d0d27f84944e08a512da3555287": "1200000000000000000000",
  "cc1d6ead01aada3e8dc7b95dca25df26eefa639d": "2000000000000000000000",
  "35106ba94e8563d4b3cb3c5c692c10e604b7ced8": "2000000000000000000000",
  "4d8697af0fbf2ca36e8768f4af22133570685a60": "20000000000000000000",
  "1afcc585896cd0ede129ee2de5c19ea811540b64": "3231259000000000000000",
  "e5215631b14248d45a255296bed1fbfa0330ff35": "1310000000000000000000",
  "e3878f91ca86053fced5444686a330e09cc388fb": "194000000000000000000",
  "555df19390c16d01298772bae8bc3a1152199cbd": "200000000000000000000",
  "dc3dae59ed0fe18b58511e6fe2fb69b219689423": "100000000000000000000",
  "74648caac748dd135cd91ea14c28e1bd4d7ff6ae": "3100000000000000000000",
  "cf2e2ad635e9861ae95cb9bafcca036b5281f5ce": "35200000000000000000000",
  "14eec09bf03e352bd6ff1b1e876be664ceffd0cf": "20094000000000000000",
  "856e5ab3f64c9ab56b009393b01664fc0324050e": "1790000000000000000000",
  "632b9149d70178a7333634275e82d5953f27967b": "700000000000000000000",
  "2a39190a4fde83dfb3ddcb4c5fbb83ac6c49755c": "1000000000000000000000",
  "369ef761195f3a373e24ece6cd22520fe0b9e86e": "534933000000000000000",
  "16afa787fc9f94bdff6976b1a42f430a8bf6fb0f": "2000000000000000000000",
  "1b0b31afff4b6df3653a94d7c87978ae35f34aae": "354600000000000000000",
  "b4d82f2e69943f7de0f5f7743879406fac2e9cec": "40000000000000000000",
  "09d6cefd75b0c4b3f8f1d687a522c96123f1f539": "6000000000000000000000",
  "01577afd4e50890247c9b10d44af73229aec884f": "680000000000000000000",
  "a35606d51220ee7f2146d411582ee4ee4a45596e": "3996800000000000000000",
  "352e77c861696ef96ad54934f894aa8ea35151dd": "1000000000000000000000",
  "b87f5376c2de0b6cc3c179c06087aa473d6b4674": "1337000000000000000000",
  "5b49afcd75447838f6e7ceda8d21777d4fc1c3c0": "4000000000000000000000",
  "b884add88d83dc564ab8e0e02cbdb63919aea844": "2000000000000000000000",
  "5c312a56c784b122099b764d059c21ece95e84ca": "95000000000000000000",
  "4697baaf9ccb603fd30430689d435445e9c98bf5": "199600000000000000000",
  "c625f8c98d27a09a1bcabd5128b1c2a94856af30": "200000000000000000000",
  "19f5caf4c40e6908813c0745b0aea9586d9dd931": "664000000000000000000",
  "1e596a81b357c6f24970cc313df6dbdaabd0d09e": "2000000000000000000000",
  "c1631228efbf2a2e3a4092ee8900c639ed34fbc8": "955000000000000000000",
  "6f6cf20649a9e973177ac67dbadee4ebe5c7bdda": "5080000000000000000000",
  "5fa7bfe043886127d4011d8356a47e947963aca8": "1820000000000000000000",
  "6af8e55969682c715f48ad4fc0fbb67eb59795a3": "2000000000000000000000",
  "122f56122549d168a5c5e267f52662e5c5cce5c8": "185000000000000000000",
  "7713ab8037411c09ba687f6f9364f0d3239fac28": "10000000000000000000000",
  "31ccc616b3118268e75d9ab8996c8858ebd7f3c3": "399924000000000000000",
  "09c88f917e4d6ad473fa12e98ea3c4472a5ed6da": "10000000000000000000000",
  "e796fd4e839b4c95d7510fb7c5c72b83c6c3e3c7": "512200000000000000000",
  "a8285539869d88f8a961533755717d7eb65576ae": "200000000000000000000",
  "d929c65d69d5bbaea59762662ef418bc21ad924a": "1000000000000000000000",
  "f7418aa0e713d248228776b2e7434222ae75e3a5": "2000000000000000000000",
  "7f0b90a1fdd48f27b268feb38382e55ddb50ef0f": "940000000000000000000",
  "34a0431fff5ead927f3c69649616dc6e97945f6f": "400000000000000000000",
  "1b3cb81e51011b549d78bf720b0d924ac763a7c2": "560000000000000000000000",
  "155b3779bb6d56342e2fda817b5b2d81c7f41327": "50200000000000000000",
  "ecd486fc196791b92cf612d348614f9156488b7e": "12000000000000000000000",
  "82a8cbbfdff02b2e38ae4bbfca15f1f0e83b1aea": "84999000000000000000",
  "06b0c1e37f5a5ec4bbf50840548f9d3ac0288897": "4000098000000000000000",
  "e6d49f86c228f47367a35e886caacb271e539429": "412656000000000000000",
  "704a6eb41ba34f13addde7d2db7df04915c7a221": "1820000000000000000000",
  "745ccf2d819edbbddea8117b5c49ed3c2a066e93": "4000000000000000000000",
  "6d3b7836a2b9d899721a4d237b522385dce8dfcd": "1000070000000000000000",
  "856aa23c82d7215bec8d57f60ad75ef14fa35f44": "20000000000000000000000",
  "ea79057dabef5e64e7b44f7f18648e7e533718d2": "200000000000000000000",
  "9df057cd03a4e27e8e032f857985fd7f01adc8d7": "2000000000000000000000",
  "5f2f07d2d697e8c567fcfdfe020f49f360be2139": "2000000000000000000000",
  "5efbdfe5389999633c26605a5bfc2c1bb5959393": "69200000000000000000",
  "047e87c8f7d1fce3b01353a85862a948ac049f3e": "1490000000000000000000",
  "265383d68b52d034161bfab01ae1b047942fbc32": "21000600000000000000000",
  "760ff3354e0fde938d0fb5b82cef5ba15c3d2916": "10000000000000000000000",
  "bc46d537cf2edd403565bde733b2e34b215001bd": "20000000000000000000000",
  "ee58fb3db29070d0130188ce472be0a172b89055": "10021400000000000000000",
  "75abe5270f3a78ce007cf37f8fbc045d489b7bb1": "1999944000000000000000",
  "5fc6c11426b4a1eae7e51dd512ad1090c6f1a85b": "2730000000000000000000",
  "26cfffd052152bb3f957b478d5f98b233a7c2b92": "4000000000000000000000",
  "0a4a011995c681bc999fdd79754e9a324ae3b379": "41350300000000000000000",
  "6fa60df818a5446418b1bbd62826e0b9825e1318": "13200000000000000000000",
  "63d55ad99b9137fd1b20cc2b4f03d42cbaddf334": "400000000000000000000",
  "679b9a109930517e8999099ccf2a914c4c8dd934": "60000000000000000000",
  "3e83544f0082552572c782bee5d218f1ef064a9d": "100076000000000000000",
  "968b14648f018333687cd213fa640aec04ce6323": "1000000000000000000000",
  "427b462ab84e5091f48a46eb0cdc92ddcb26e078": "2000000000000000000000",
  "df8510793eee811c2dab1c93c6f4473f30fbef5b": "1000000000000000000000",
  "362fbcb10662370a068fc2652602a2577937cce6": "200000000000000000000",
  "5d83b21bd2712360436b67a597ee3378db3e7ae4": "2000000000000000000000",
  "5777441c83e03f0be8dd340bde636850847c620b": "10000000000000000000000",
  "c94a585203da7bbafd93e15884e660d4b1ead854": "7000000000000000000000",
  "35a08081799173e001cc5bd46a02406dc95d1787": "10000000000000000000000",
  "21d13f0c4024e967d9470791b50f22de3afecf1b": "4452210000000000000000",
  "fdfd6134c04a8ab7eb16f00643f8fed7daaaecb2": "400000000000000000000",
  "fd812bc69fb170ef57e2327e80affd14f8e4b6d2": "2000000000000000000000",
  "7148aef33261d8031fac3f7182ff35928daf54d9": "4100000000000000000000",
  "0b06390f2437b20ec4a3d3431b3279c6583e5ed7": "194000000000000000000",
  "4909b31998ead414b8fb0e846bd5cbde393935be": "4000000000000000000000",
  "b70dba9391682b4a364e77fe99256301a6c0bf1f": "200000000000000000000",
  "6b83bae7b565244558555bcf4ba8da2011891c17": "2000000000000000000000",
  "70a03549aa6168e97e88a508330a5a0bea74711a": "1337000000000000000000",
  "0fc9a0e34145fbfdd2c9d2a499b617d7a02969b9": "180000000000000000000",
  "2ddf40905769bcc426cb2c2938ffe077e1e89d98": "3000000000000000000000",
  "794b51c39e53d9e762b0613b829a44b472f4fff3": "667965000000000000000",
  "d062588171cf99bbeb58f126b870f9a3728d61ec": "4500000000000000000000",
  "8db185fe1b70a94a6a080e7e23a8bedc4acbf34b": "1400000000000000000000",
  "e73bfeada6f0fd016fbc843ebcf6e370a65be70c": "1970000000000000000000",
  "79ed10cf1f6db48206b50919b9b697081fbdaaf3": "2000000000000000000000",
  "276b0521b0e68b277df0bb32f3fd48326350bfb2": "50000000000000000000",
  "2e439348df8a4277b22a768457d1158e97c40904": "776970000000000000000",
  "6c25327f8dcbb2f45e561e86e35d8850e53ab059": "1103200000000000000000",
  "04d73896cf6593a691972a13a6e4871ff2c42b13": "2000000000000000000000",
  "b10fd2a647102f881f74c9fbc37da632949f2375": "40000000000000000000",
  "615f82365c5101f071e7d2cb6af14f7aad2c16c6": "20000000000000000000",
  "93aa8f92ebfff991fc055e906e651ac768d32bc8": "940000000000000000000",
  "0cbf8770f0d1082e5c20c5aead34e5fca9ae7ae2": "1000000000000000000000",
  "ffc9cc3094b041ad0e076f968a0de3b167255866": "432400000000000000000",
  "46531e8b1bde097fdf849d6d119885608a008df7": "200000000000000000000",
  "23cd2598a20e149ead2ad69379576ecedb60e38e": "2000000000000000000000",
  "85ca8bc6da2803d0725f5e1a456c89f9bc774e2f": "600000000000000000000",
  "c0725ec2bdc33a1d826071dea29d62d4385a8c25": "40740000000000000000000",
  "0e4765790352656bc656682c24fc5ef3e76a23c7": "46610000000000000000",
  "2ef9e465716acacfb8c8252fa8e7bc7969ebf6e4": "2760000000000000000000",
  "0ec5308b31282e218fc9e759d4fec5db3708cec4": "1001000000000000000000",
  "bf7701fc6225d5a17815438a8941d21ebc5d059d": "1880000000000000000000",
  "c489c83ffbb0252ac0dbe3521217630e0f491f14": "4000000000000000000000",
  "8eb51774af206b966b8909c45aa6722748802c0c": "500000000000000000000",
  "7b9226d46fe751940bc416a798b69ccf0dfab667": "4200000000000000000000",
  "8f660f8b2e4c7cc2b4ac9c47ed28508d5f8f8650": "20000000000000000000000",
  "9f19fac8a32437d80ac6837a0bb7841729f4972e": "650100000000000000000",
  "201864a8f784c2277b0b7c9ee734f7b377eab648": "4467000000000000000000",
  "a6101c961e8e1c15798ffcd0e3201d7786ec373a": "6000000000000000000000",
  "d4ff46203efa23064b1caf00516e28704a82a4f8": "1337000000000000000000",
  "aa136b47962bb8b4fb540db4ccf5fdd042ffb8cf": "500038000000000000000",
  "704ae21d762d6e1dde28c235d13104597236db1a": "2000000000000000000000",
  "f17a92e0361dbacecdc5de0d1894955af6a9b606": "2000000000000000000000",
  "8b48e19d39dd35b66e6e1bb6b9c657cb2cf59d04": "17844175000000000000000",
  "9ad47fdcf9cd942d28effd5b84115b31a658a13e": "3290000000000000000000",
  "df0d08617bd252a911df8bd41a39b83ddf809673": "10000000000000000000000",
  "4c666b86f1c5ee8ca41285f5bde4f79052081406": "500000000000000000000",
  "88dec5bd3f4eba2d18b8aacefa7b721548c319ba": "1370000000000000000000",
  "9f9fe0c95f10fee87af1af207236c8f3614ef02f": "6000000000000000000000",
  "f7d0d310acea18406138baaabbfe0571e80de85f": "1337000000000000000000",
  "9569c63a9284a805626db3a32e9d236393476151": "1970000000000000000000",
  "5d5c2c1099bbeefb267e74b58880b444d94449e0": "253574000000000000000",
  "8c6ae7a05a1de57582ae2768204276c0ff47ed03": "208000000000000000000000",
  "432d884bd69db1acc0d89c64ade4cb4fc3a88b7a": "2483000000000000000000",
  "672cbca8440a8577097b19aff593a2ad9d28a756": "80000000000000000000",
  "19df9445a81c1b3d804aeaeb6f6e204e4236663f": "37387000000000000000",
  "1cb5f33b4d488936d13e3161da33a1da7df70d1b": "200000000000000000000",
  "df60f18c812a11ed4e2776e7a80ecf5e5305b3d6": "900000000000000000000",
  "c99a9cd6c9c1be3534eecd92ecc22f5c38e9515b": "4821030000000000000000",
  "00c40fe2095423509b9fd9b754323158af2310f3": "0",
  "da4a5f557f3bab390a92f49b9b900af30c46ae80": "10000000000000000000000",
  "f36df02fbd89607347afce2969b9c4236a58a506": "2000000000000000000000",
  "c549df83c6f65eec0f1dc9a0934a5c5f3a50fd88": "2910000000000000000000",
  "9f662e95274121f177566e636d23964cf1fd686f": "2000000000000000000000",
  "5a267331facb262daaecd9dd63a9700c5f5259df": "100000000000000000000",
  "117d9aa3c4d13bee12c7500f09f5dd1c66c46504": "206000000000000000000",
  "1b4d07acd38183a61bb2783d2b7b178dd502ac8d": "200000000000000000000",
  "3c0c3defac9cea7acc319a96c30b8e1fedab4574": "1940000000000000000000",
  "e4dc22ed595bf0a337c01e03cc6be744255fc9e8": "191000000000000000000",
  "8f067c7c1bbd57780b7b9eeb9ec0032f90d0dcf9": "20000000000000000000000",
  "40e2440ae142c880366a12c6d4102f4b8434b62a": "1000000000000000000000",
  "f9ece022bccd2c92346911e79dd50303c01e0188": "1000000000000000000000",
  "f70328ef97625fe745faa49ee0f9d4aa3b0dfb69": "1000000000000000000000",
  "b6aacb8cb30bab2ae4a2424626e6e12b02d04605": "8000000000000000000000",
  "154459fa2f21318e3434449789d826cdc1570ce5": "2000000000000000000000",
  "684a44c069339d08e19a75668bdba303be855332": "70000000000000000000000",
  "9fe501aa57ead79278937cd6308c5cfa7a5629fe": "50003000000000000000",
  "3e45bd55db9060eced923bb9cb733cb3573fb531": "1640000000000000000000",
  "9c9f3b8a811b21f3ff3fe20fe970051ce66a824f": "1157740000000000000000",
  "e99aece90541cae224b87da673965e0aeb296afd": "920000000000000000000",
  "2f6dce1330c59ef921602154572d4d4bacbd048a": "1000000000000000000000",
  "6a6353b971589f18f2955cba28abe8acce6a5761": "3000000000000000000000",
  "98c10ebf2c4f97cba5a1ab3f2aafe1cac423f8cb": "300000000000000000000",
  "8077c3e4c445586e094ce102937fa05b737b568c": "100000000000000000000",
  "13371f92a56ea8381e43059a95128bdc4d43c5a6": "1000000000000000000000",
  "35a6885083c899dabbf530ed6c12f4dd3a204cf5": "200000000000000000000",
  "36b2c85e3aeeebb70d63c4a4730ce2e8e88a3624": "10000000000000000000000",
  "5ce44068b8f4a3fe799e6a8311dbfdeda29dee0e": "2000000000000000000000",
  "6fa6388d402b30afe59934c3b9e13d1186476018": "670000000000000000000",
  "8251358ca4e060ddb559ca58bc0bddbeb4070203": "2000000000000000000000",
  "17e86f3b5b30c0ba59f2b2e858425ba89f0a10b0": "2000000000000000000000",
  "298ec76b440d8807b3f78b5f90979bee42ed43db": "30000000000000000000000",
  "ce4b065dbcb23047203262fb48c1188364977470": "500000000000000000000",
  "c8e2adeb545e499d982c0c117363ceb489c5b11f": "985000000000000000000",
  "9928ff715afc3a2b60f8eb4cc4ba4ee8dab6e59d": "440000000000000000000",
  "c76130c73cb9210238025c9df95d0be54ac67fbe": "1500000000000000000000",
  "72d03d4dfab3500cf89b86866f15d4528e14a195": "4488000000000000000000",
  "d193e583d6070563e7b862b9614a47e99489f3e5": "999972000000000000000",
  "4df140ba796585dd5489315bca4bba680adbb818": "2674000000000000000000",
  "009eef0a0886056e3f69211853b9b7457f3782e4": "3000512000000000000000",
  "6e255b700ae7138a4bacf22888a9e2c00a285eec": "4000000000000000000000",
  "aa47a4ffc979363232c99b99fada0f2734b0aeee": "8121800000000000000000",
  "9d069197d1de50045a186f5ec744ac40e8af91c6": "2000000000000000000000",
  "b514882c979bb642a80dd38754d5b8c8296d9a07": "955000000000000000000",
  "17c0478657e1d3d17aaa331dd429cecf91f8ae5d": "999942000000000000000",
  "5f9616c47b4a67f406b95a14fe6fc268396f1721": "200000000000000000000",
  "f70a998a717b338d1dd99854409b1a338deea4b0": "2000000000000000000000",
  "d1ee905957fe7cc70ec8f2868b43fe47b13febff": "44000000000000000000",
  "fc018a690ad6746dbe3acf9712ddca52b6250039": "10000000000000000000000",
  "5118557d600d05c2fcbf3806ffbd93d02025d730": "11360000000000000000000",
  "1ef5c9c73650cfbbde5c885531d427c7c3fe5544": "6000000000000000000000",
  "d1a396dcdab2c7494130b3fd307820340dfd8c1f": "17952000000000000000",
  "2d8e061892a5dcce21966ae1bb0788fd3e8ba059": "250066000000000000000",
  "8834b2453471f324fb26be5b25166b5b5726025d": "573000000000000000000",
  "14f221159518783bc4a706676fc4f3c5ee405829": "200000000000000000000",
  "c056d4bd6bf3cbacac65f8f5a0e3980b852740ae": "100000000000000000000",
  "560536794a9e2b0049d10233c41adc5f418a264a": "1000000000000000000000",
  "bc9e0ec6788f7df4c7fc210aacd220c27e45c910": "500000000000000000000",
  "54bcb8e7f73cda3d73f4d38b2d0847e600ba0df8": "1078000000000000000000",
  "4361d4846fafb377b6c0ee49a596a78ddf3516a3": "3580000000000000000000",
  "41c3c2367534d13ba2b33f185cdbe6ac43c2fa31": "4000000000000000000000",
  "5dc6f45fef26b06e3302313f884daf48e2746fb9": "500000000000000000000",
  "ad414d29cb7ee973fec54e22a388491786cf5402": "14000000000000000000000",
  "802dc3c4ff2d7d925ee2859f4a06d7ba60f1308c": "98040000000000000000",
  "2aed2ce531c056b0097efc3c6de10c4762004ed9": "10430000000000000000000",
  "39782ffe06ac78822a3c3a8afe305e50a56188ce": "10000000000000000000000",
  "ec73833de4b810bb027810fc8f69f544e83c12d1": "1000000000000000000000",
  "8d51a4cc62011322c696fd725b9fb8f53feaaa07": "1000000000000000000000",
  "29298ccbdff689f87fe41aa6e98fdfb53deaf37a": "19800000000000000000000",
  "827531a6c5817ae35f82b00b9754fcf74c55e232": "3600000000000000000000",
  "9c581a60b61028d934167929b22d70b313c34fd0": "50000000000000000000000",
  "0a077db13ffeb09484c217709d5886b8bf9c5a8b": "4000000000000000000000",
  "07b7a57033f8f11330e4665e185d234e83ec140b": "4325683000000000000000",
  "17f523f117bc9fe978aa481eb4f5561711371bc8": "1999884000000000000000",
  "de42fcd24ce4239383304367595f068f0c610740": "45120000000000000000",
  "2a46d353777176ff8e83ffa8001f4f70f9733aa5": "106000000000000000000",
  "92e4392816e5f2ef5fb65837cec2c2325cc64922": "10000000000000000000000",
  "9a3da65023a13020d22145cfc18bab10bd19ce4e": "456516000000000000000",
  "1a085d43ec92414ea27b914fe767b6d46b1eef44": "29550000000000000000000",
  "3b2367f8494b5fe18d683c055d89999c9f3d1b34": "10000000000000000000000",
  "84244fc95a6957ed7c1504e49f30b8c35eca4b79": "2000000000000000000000",
  "5e031b0a724471d476f3bcd2eb078338bf67fbef": "18200000000000000000",
  "97e5cc6127c4f885be02f44b42d1c8b0ac91e493": "200000000000000000000",
  "eb1cea7b45d1bd4d0e2a007bd3bfb354759e2c16": "198000000000000000000",
  "72feaf124579523954645b7fafff0378d1c8242e": "1000000000000000000000",
  "8d07d42d831c2d7c838aa1872b3ad5d277176823": "349200000000000000000",
  "9637dc12723d9c78588542eab082664f3f038d9d": "1000000000000000000000",
  "e84b55b525f1039e744b918cb3332492e45eca7a": "200000000000000000000",
  "b1d6b01b94d854fe8b374aa65e895cf22aa2560e": "940000000000000000000",
  "8161d940c3760100b9080529f8a60325030f6edc": "300000000000000000000",
  "d30ee9a12b4d68abace6baca9ad7bf5cd1faf91c": "1499936000000000000000",
  "057949e1ca0570469e4ce3c690ae613a6b01c559": "200000000000000000000",
  "4bf8e26f4c2790da6533a2ac9abac3c69a199433": "200000000000000000000",
  "36fec62c2c425e219b18448ad757009d8c54026f": "400000000000000000000",
  "77bfe93ccda750847e41a1affee6b2da96e7214e": "300000000000000000000",
  "cc48414d2ac4d42a5962f29eee4497092f431352": "161000000000000000000",
  "ddbddd1bbd38ffade0305d30f02028d92e9f3aa8": "2000000000000000000000",
  "30c01142907acb1565f70438b9980ae731818738": "2000000000000000000000",
  "cffc49c1787eebb2b56cabe92404b636147d4558": "5679305000000000000000",
  "f99eeece39fa7ef5076d855061384009792cf2e0": "500000000000000000000",
  "e9b6a790009bc16642c8d820b7cde0e9fd16d8f5": "3640000000000000000000",
  "03b41b51f41df20dd279bae18c12775f77ad771c": "1000000000000000000000",
  "787d313fd36b053eeeaedbce74b9fb0678333289": "27160000000000000000000",
  "35d2970f49dcc81ea9ee707e9c8a0ab2a8bb7463": "1440000000000000000000",
  "4c0aca508b3caf5ee028bc707dd1e800b838f453": "18200000000000000000",
  "514632efbd642c04de6ca342315d40dd90a2dba6": "2674000000000000000000",
  "36810ff9d213a271eda2b8aa798be654fa4bbe06": "2000000000000000000000",
  "0c088006c64b30c4ddafbc36cb5f05469eb62834": "2000000000000000000000",
  "568df31856699bb5acfc1fe1d680df9960ca4359": "1379999000000000000000",
  "d48e3f9357e303513841b3f84bda83fc89727587": "1000000000000000000000",
  "953ef652e7b769f53d6e786a58952fa93ee6abe7": "2860000000000000000000",
  "7c60a05f7a4a5f8cf2784391362e755a8341ef59": "1892300000000000000000",
  "7a6b26f438d9a352449155b8876cbd17c9d99b64": "6000000000000000000000",
  "68f719ae342bd7fef18a05cbb02f705ad38ed5b2": "1050000000000000000000",
  "45ca8d956608f9e00a2f9974028640888465668f": "2000000000000000000000",
  "3eaf316b87615d88f7adc77c58e712ed4d77966b": "100141000000000000000",
  "1f0412bfedcd964e837d092c71a5fcbaf30126e2": "20000000000000000000",
  "7471f72eeb300624eb282eab4d03723c649b1b58": "8000000000000000000000",
  "9bf71f7fb537ac54f4e514947fa7ff6728f16d2f": "33400000000000000000",
  "1098c774c20ca1daac5ddb620365316d353f109c": "100000000000000000000",
  "7dd8d7a1a34fa1f8e73ccb005fc2a03a15b8229c": "200000000000000000000",
  "0151fa5d17a2dce2d7f1eb39ef7fe2ad213d5d89": "4000000000000000000000",
  "ad6628352ed3390bafa86d923e56014cfcb360f4": "2000000000000000000000",
  "02af2459a93d0b3f4d062636236cd4b29e3bcecf": "1910000000000000000000",
  "ace2abb63b0604409fbde3e716d2876d44e8e5dd": "152000000000000000000",
  "e710dcd09b8101f9437bd97db90a73ef993d0bf4": "386100000000000000000",
  "d43ee438d83de9a37562bb4e286cb1bd19f4964d": "1000000000000000000000",
  "ea3779d14a13f6c78566bcde403591413a6239db": "197000000000000000000000",
  "6704f169e0d0b36b57bbc39f3c45437b5ee3d28d": "394000000000000000000",
  "5584423050e3c2051f0bbd8f44bd6dbc27ecb62c": "3000000000000000000000",
  "2f315d9016e8ee5f536681202f9084b032544d4d": "1037400000000000000000",
  "e1b63201fae1f129f95c7a116bd9dde5159c6cda": "22837462000000000000000",
  "2bbe62eac80ca7f4d6fdee7e7d8e28b63acf770e": "2396000000000000000000",
  "38da1ba2de9e2c954b092dd9d81204fd016ba016": "10156000000000000000000",
  "8a86e4a51c013b1fb4c76bcf30667c78d52eedef": "2000000000000000000000",
  "8f717ec1552f4c440084fba1154a81dc003ebdc0": "10000000000000000000000",
  "c760971bbc181c6a7cf77441f24247d19ce9b4cf": "2000000000000000000000",
  "7f150afb1a77c2b45928c268c1e9bdb4641d47d8": "2000000000000000000000",
  "1ea334b5750807ea74aac5ab8694ec5f28aa77cf": "492500000000000000000",
  "2afb058c3d31032b353bf24f09ae20d54de57dbe": "1100000000000000000000",
  "caef027b1ab504c73f41f2a10979b474f97e309f": "200000000000000000000",
  "5dd112f368c0e6ceff77a9df02a5481651a02fb7": "169800000000000000000",
  "bd93e550403e2a06113ed4c3fba1a8913b19407e": "2000000000000000000000",
  "500c16352e901d48ba8d04e2c767121772790b02": "30239000000000000000",
  "d2a80327cbe55c4c7bd51ff9dde4ca648f9eb3f8": "50000000000000000000",
  "355ccfe0e77d557b971be1a558bc02df9eee0594": "1759120000000000000000",
  "5aed0e6cfe95f9d680c76472a81a2b680a7f93e2": "197000000000000000000",
  "f56442f60e21691395d0bffaa9194dcaff12e2b7": "260000000000000000000",
  "7db9eacc52e429dc83b461c5f4d86010e5383a28": "1000000000000000000000",
  "4b984ef26c576e815a2eaed2f5177f07dbb1c476": "1560000000000000000000",
  "9846648836a307a057184fd51f628a5f8c12427c": "19100000000000000000000",
  "4af0db077bb9ba5e443e21e148e59f379105c592": "600000000000000000000",
  "e96e2d3813efd1165f12f602f97f4a62909d3c66": "2300000000000000000000",
  "30e789b3d2465e946e6210fa5b35de4e8c93085f": "2000000000000000000000",
  "97f99b6ba31346cd98a9fe4c308f87c5a58c5151": "6000000000000000000000",
  "595e23d788a2d4bb85a15df7136d264a635511b3": "3940000000000000000000",
  "2f61efa5819d705f2b1e4ee754aeb8a819506a75": "1460000000000000000000",
  "3554947b7b947b0040da52ca180925c6d3b88ffe": "66850000000000000000",
  "8feffadb387a1547fb284da9b8147f3e7c6dc6da": "837200000000000000000",
  "258939bbf00c9de9af5338f5d714abf6d0c1c671": "1550000000000000000000",
  "5b333696e04cca1692e71986579c920d6b2916f9": "500000000000000000000",
  "5381448503c0c702542b1de7cc5fb5f6ab1cf6a5": "8000000000000000000000",
  "7e81f6449a03374191f3b7cb05d938b72e090dff": "100000000000000000000",
  "4ef1c214633ad9c0703b4e2374a2e33e3e429291": "1337000000000000000000",
  "fed8476d10d584b38bfa6737600ef19d35c41ed8": "1820000000000000000000",
  "1a95c9b7546b5d1786c3858fb1236446bc0ca4ce": "1970000000000000000000",
  "3b07db5a357f5af2484cbc9d77d73b1fd0519fc7": "500000000000000000000",
  "5f68a24c7eb4117667737b33393fb3c2148a53b6": "51800000000000000000",
  "d8f665fd8cd5c2bcc6ddc0a8ae521e4dc6aa6060": "1700000000000000000000",
  "d66acc0d11b689cea6d9ea5ff4014c224a5dc7c4": "18200000000000000000",
  "6e72b2a1186a8e2916543b1cb36a68870ea5d197": "186000000000000000000",
  "5102a4a42077e11c58df4773e3ac944623a66d9f": "2000325000000000000000",
  "72480bede81ad96423f2228b5c61be44fb523100": "6400000000000000000000",
  "e076db30ab486f79194ebbc45d8fab9a9242f654": "4840000000000000000000",
  "8ceea15eec3bdad8023f98ecf25b2b8fef27db29": "2000000000000000000000",
  "40652360d6716dc55cf9aab21f3482f816cc2cbd": "10000000000000000000000",
  "13e02fb448d6c84ae17db310ad286d056160da95": "2000000000000000000000",
  "d6598b1386e93c5ccb9602ff4bbbecdbd3701dc4": "224096000000000000000",
  "d5ea472cb9466018110af00c37495b5c2c713112": "4997800000000000000000",
  "bb75cb5051a0b0944b4673ca752a97037f7c8c15": "200000000000000000000",
  "8af626a5f327d7506589eeb7010ff9c9446020d2": "1400000000000000000000",
  "318c76ecfd8af68d70555352e1f601e35988042d": "501600000000000000000",
  "5c3d19441d196cb443662020fcad7fbb79b29e78": "14300000000000000000",
  "27101a0f56d39a88c5a84f9b324cdde33e5cb68c": "2000000000000000000000",
  "e229e746a83f2ce253b0b03eb1472411b57e5700": "5730000000000000000000",
  "604cdf18628dbfa8329194d478dd5201eecc4be7": "23000000000000000000",
  "657473774f63ac3d6279fd0743d5790c4f161503": "200000000000000000000",
  "1ddefefd35ab8f658b2471e54790bc17af98dea4": "1000000000000000000000",
  "ac3900298dd14d7cc96d4abb428da1bae213ffed": "24730250000000000000000",
  "944f07b96f90c5f0d7c0c580533149f3f585a078": "74000000000000000000",
  "232c6d03b5b6e6711efff190e49c28eef36c82b0": "1337000000000000000000",
  "c87c77e3c24adecdcd1038a38b56e18dead3b702": "8800000000000000000000",
  "c4b6e5f09cc1b90df07803ce3d4d13766a9c46f4": "6000000000000000000000",
  "d44334b4e23a169a0c16bd21e866bba52d970587": "2600000000000000000000",
  "7757a4b9cc3d0247ccaaeb9909a0e56e1dd6dcc2": "20000000000000000000",
  "cf694081c76d18c64ca71382be5cd63b3cb476f8": "1000000000000000000000",
  "133e4f15e1e39c53435930aaedf3e0fe56fde843": "20000000000000000000",
  "f067fb10dfb293e998abe564c055e3348f9fbf1e": "2000000000000000000000",
  "94449c01b32a7fa55af8104f42cdd844aa8cbc40": "16548000000000000000000",
  "0e2094ac1654a46ba1c4d3a40bb8c17da7f39688": "358000000000000000000",
  "738ca94db7ce8be1c3056cd6988eb376359f3353": "25500000000000000000000",
  "0cfb172335b16c87d519cd1475530d20577f5e0e": "100000000000000000000000",
  "3cb561ce86424b359891e364ec925ffeff277df7": "200000000000000000000",
  "5f981039fcf50225e2adf762752112d1cc26b6e3": "499954000000000000000",
  "b43657a50eecbc3077e005d8f8d94f377876bad4": "35460000000000000000",
  "d07e511864b1cf9969e3560602829e32fc4e71f5": "50000000000000000000",
  "11306c7d57588637780fc9fde8e98ecb008f0164": "1999944000000000000000",
  "45ca9862003b4e40a3171fb5cafa9028cac8de19": "13790000000000000000000",
  "231d94155dbcfe2a93a319b6171f63b20bd2b6fa": "3819952000000000000000",
  "e7533e270cc61fa164ac1553455c105d04887e14": "121550000000000000000",
  "070d5d364cb7bbf822fc2ca91a35bdd441b215d5": "2000000000000000000000",
  "d475477fa56390d33017518d6711027f05f28dbf": "1975032000000000000000",
  "cea34a4dd93dd9aefd399002a97d997a1b4b89cd": "1500000000000000000000",
  "560becdf52b71f3d8827d927610f1a980f33716f": "429413000000000000000",
  "f632adff490da4b72d1236d04b510f74d2faa3cd": "1400000000000000000000",
  "2fdd9b79df8df530ad63c20e62af431ae99216b8": "21000000000000000000",
  "535201a0a1d73422801f55ded4dfaee4fbaa6e3b": "39641000000000000000",
  "409d5a962edeeebea178018c0f38b9cdb213f289": "20000000000000000000",
  "9d911f3682f32fe0792e9fb6ff3cfc47f589fca5": "4000000000000000000000",
  "9f7a0392f857732e3004a375e6b1068d49d83031": "2000000000000000000000",
  "6a04f5d53fc0f515be942b8f12a9cb7ab0f39778": "3129800000000000000000",
  "be478e8e3dde6bd403bb2d1c657c4310ee192723": "492500000000000000000",
  "007622d84a234bb8b078230fcf84b67ae9a8acae": "698800000000000000000",
  "9475c510ec9a26979247744c3d8c3b0e0b5f44d3": "10000000000000000000000",
  "df47a8ef95f2f49f8e6f58184154145d11f72797": "1910000000000000000000",
  "13ce332dff65a6ab933897588aa23e000980fa82": "258400000000000000000",
  "9c4bbcd5f1644a6f075824ddfe85c571d6abf69c": "1800000000000000000000",
  "d42b20bd0311608b66f8a6d15b2a95e6de27c5bf": "2000000000000000000000",
  "a4dd59ab5e517d398e49fa537f899fed4c15e95d": "20000000000000000000000",
  "1a8a5ce414de9cd172937e37f2d59cff71ce57a0": "10000000000000000000000",
  "55c564664166a1edf3913e0169f1cd451fdb5d0c": "2399800000000000000000",
  "58ae2ddc5f4c8ada97e06c0086171767c423f5d7": "1610000000000000000000",
  "fb79abdb925c55b9f98efeef64cfc9eb61f51bb1": "1794000000000000000000",
  "e7a42f59fee074e4fb13ea9e57ecf1cc48282249": "20000000000000000000000",
  "07e2b4cdeed9d087b12e556d9e770c13c099615f": "668500000000000000000",
  "68473b7a7d965904bedba556dfbc17136cd5d434": "100000000000000000000",
  "6c5c3a54cda7c2f118edba434ed81e6ebb11dd7a": "200000000000000000000",
  "24c117d1d2b3a97ab11a4679c99a774a9eade8d1": "1000000000000000000000",
  "f68c5e33fa97139df5b2e63886ce34ebf3e4979c": "3320000000000000000000",
  "bd7419dc2a090a46e2873d7de6eaaad59e19c479": "6802000000000000000000",
  "1a0a1ddfb031e5c8cc1d46cf05842d50fddc7130": "1000000000000000000000",
  "2b3a68db6b0cae8a7c7a476bdfcfbd6205e10687": "2400000000000000000000",
  "426d15f407a01135b13a6b72f8f2520b3531e302": "20000000000000000000",
  "0394b90fadb8604f86f43fc1e35d3124b32a5989": "764000000000000000000",
  "7412c9bc30b4df439f023100e63924066afd53af": "500000000000000000000",
  "80e7b3205230a566a1f061d922819bb4d4d2a0e1": "14000000000000000000000",
  "ff4fc66069046c525658c337a917f2d4b832b409": "2000000000000000000000",
  "f5061ee2e5ee26b815503677130e1de07a52db07": "100000000000000000000",
  "49793463e1681083d6abd6e725d5bba745dccde8": "545974000000000000000",
  "23551f56975fe92b31fa469c49ea66ee6662f41e": "1910000000000000000000",
  "fad96ab6ac768ad5099452ac4777bd1a47edc48f": "100000000000000000000",
  "2a746cd44027af3ebd37c378c85ef7f754ab5f28": "394000000000000000000",
  "b8d389e624a3a7aebce4d3e5dbdf6cdc29932aed": "200000000000000000000",
  "7b761feb7fcfa7ded1f0eb058f4a600bf3a708cb": "4600000000000000000000",
  "5435c6c1793317d32ce13bba4c4ffeb973b78adc": "250070000000000000000",
  "dd04eee74e0bf30c3f8d6c2c7f52e0519210df93": "80000000000000000000",
  "4331ab3747d35720a9d8ca25165cd285acd4bda8": "2000000000000000000000",
  "b84c8b9fd33ece00af9199f3cf5fe0cce28cd14a": "3820000000000000000000",
  "393f783b5cdb86221bf0294fb714959c7b45899c": "5910000000000000000000",
  "259ec4d265f3ab536b7c70fa97aca142692c13fc": "20400000000000000000",
  "5d2f7f0b04ba4be161e19cb6f112ce7a5e7d7fe4": "35200000000000000000",
  "d54ba2d85681dc130e5b9b02c4e8c851391fd9b9": "3940000000000000000000",
  "5cd8af60de65f24dc3ce5730ba92653022dc5963": "1790000000000000000000",
  "3b42a66d979f582834747a8b60428e9b4eeccd23": "620400000000000000000",
  "4b19eb0c354bc1393960eb06063b83926f0d67b2": "29000000000000000000",
  "8cf3546fd1cda33d58845fc8fcfecabca7c5642a": "574027000000000000000",
  "113612bc3ba0ee4898b49dd20233905f2f458f62": "14000000000000000000000",
  "1f2afc0aed11bfc71e77a907657b36ea76e3fb99": "4000000000000000000000",
  "03714b41d2a6f751008ef8dd4d2b29aecab8f36e": "6000000000000000000000",
  "25721c87b0dc21377c7200e524b14a22f0af69fb": "4000000000000000000000",
  "335858f749f169cabcfe52b796e3c11ec47ea3c2": "200000000000000000000",
  "52fb46ac5d00c3518b2c3a1c177d442f8165555f": "1500000000000000000000",
  "7a8c89c014509d56d7b68130668ff6a3ecec7370": "300000000000000000000",
  "7d5d2f73949dadda0856b206989df0078d51a1e5": "10560000000000000000000",
  "be538246dd4e6f0c20bf5ad1373c3b463a131e86": "200000000000000000000",
  "62680a15f8ccb8bdc02f7360c25ad8cfb57b8ccd": "1000000000000000000000",
  "aa0ca3737337178a0caac3099c584b056c56301c": "880000000000000000000",
  "1d341fa5a3a1bd051f7db807b6db2fc7ba4f9b45": "18200000000000000000",
  "6463f715d594a1a4ace4bb9c3b288a74decf294d": "1970000000000000000000",
  "e00d153b10369143f97f54b8d4ca229eb3e8f324": "152000000000000000000",
  "8d0b9ea53fd263415eac11391f7ce9123c447062": "2000000000000000000000",
  "cacb675e0996235404efafbb2ecb8152271b55e0": "700000000000000000000",
  "b615e940143eb57f875893bc98a61b3d618c1e8c": "20000000000000000000",
  "606f177121f7855c21a5062330c8762264a97b31": "4000000000000000000000",
  "e3925509c8d0b2a6738c5f6a72f35314491248ce": "1012961000000000000000",
  "3f08d9ad894f813e8e2148c160d24b353a8e74b0": "60000000000000000000000",
  "40f4f4c06c732cd35b119b893b127e7d9d0771e4": "10000000000000000000000",
  "1406854d149e081ac09cb4ca560da463f3123059": "1337000000000000000000",
  "ecf05d07ea026e7ebf4941002335baf2fed0f002": "200000000000000000000",
  "9a990b8aeb588d7ee7ec2ed8c2e64f7382a9fee2": "33518000000000000000",
  "a2e0683a805de6a05edb2ffbb5e96f0570b637c3": "20000000000000000000",
  "fba5486d53c6e240494241abf87e43c7600d413a": "1987592000000000000000",
  "d81bd54ba2c44a6f6beb1561d68b80b5444e6dc6": "1163806000000000000000",
  "5298ab182a19359ffcecafd7d1b5fa212dede6dd": "20000000000000000000",
  "d1acb5adc1183973258d6b8524ffa28ffeb23de3": "4000000000000000000000",
  "4e7aa67e12183ef9d7468ea28ad239c2eef71b76": "4925000000000000000000",
  "509a20bc48e72be1cdaf9569c711e8648d957334": "2000000000000000000000",
  "949f84f0b1d7c4a7cf49ee7f8b2c4a134de32878": "685000000000000000000",
  "edbac9527b54d6df7ae2e000cca3613ba015cae3": "1970000000000000000000",
  "c697b70477cab42e2b8b266681f4ae7375bb2541": "5577200000000000000000",
  "86c934e38e53be3b33f274d0539cfca159a4d0d1": "970000000000000000000",
  "0877eeaeab78d5c00e83c32b2d98fa79ad51482f": "439420000000000000000",
  "5e11ecf69d551d7f4f84df128046b3a13240a328": "20000000000000000000",
  "43ff8853e98ed8406b95000ada848362d6a0392a": "22100000000000000000000",
  "f11cf5d363746fee6864d3ca336dd80679bb87ae": "40000000000000000000000",
  "fb223c1e22eac1269b32ee156a5385922ed36fb8": "2000000000000000000000",
  "4e6600806289454acda330a2a3556010dfacade6": "6000000000000000000000",
  "cfe2caaf3cec97061d0939748739bffe684ae91f": "10000000000000000000000",
  "adeb52b604e5f77faaac88275b8d6b49e9f9f97f": "2089268000000000000000",
  "d53c567f0c3ff2e08b7d59e2b5c73485437fc58d": "600000000000000000000",
  "fbf75933e01b75b154ef0669076be87f62dffae1": "78000000000000000000000",
  "7dfd2962b575bcbeee97f49142d63c30ab009f66": "4000000000000000000000",
  "df6485c4297ac152b289b19dde32c77ec417f47d": "1000000000000000000000",
  "ffb974673367f5c07be5fd270dc4b7138b074d57": "2470407000000000000000",
  "f7d7af204c56f31fd94398e40df1964bd8bf123c": "150011000000000000000",
  "4506fe19fa4b006baa3984529d8516db2b2b50ab": "2000000000000000000000",
  "f4dc7ba85480bbb3f535c09568aaa3af6f3721c6": "7214962000000000000000",
  "d171c3f2258aef35e599c7da1aa07300234da9a6": "2000000000000000000000",
  "33581cee233088c0860d944e0cf1ceabb8261c2e": "13370000000000000000",
  "1c2e3607e127caca0fbd5c5948adad7dd830b285": "19700000000000000000000",
  "fd7ede8f5240a06541eb699d782c2f9afb2170f6": "1337000000000000000000",
  "368c5414b56b8455171fbf076220c1cba4b5ca31": "557940000000000000000",
  "3e8745ba322f5fd6cb50124ec46688c7a69a7fae": "4925000000000000000000",
  "76506eb4a780c951c74a06b03d3b8362f0999d71": "500000000000000000000",
  "96d62dfd46087f62409d93dd606188e70e381257": "2000000000000000000000",
  "37eada93c475ded2f7e15e7787d400470fa52062": "200000000000000000000",
  "26babf42b267fdcf3861fdd4236a5e474848b358": "1000000000000000000000",
  "3526eece1a6bdc3ee7b400fe935b48463f31bed7": "82400000000000000000",
  "27b62816e1e3b8d19b79d1513d5dfa855b0c3a2a": "99941000000000000000",
  "b3e3c439069880156600c2892e448d4136c92d9b": "850000000000000000000",
  "574ad9355390e4889ef42acd138b2a27e78c00ae": "1557000000000000000000",
  "f0b9d683cea12ba600baace219b0b3c97e8c00e4": "100000000000000000000",
  "a437fe6ec103ca8d158f63b334224eccac5b3ea3": "8000000000000000000000",
  "7a48d877b63a8f8f9383e9d01e53e80c528e955f": "8000000000000000000000",
  "e965daa34039f7f0df62375a37e5ab8a72b301e7": "4796000000000000000000",
  "72cd048a110574482983492dfb1bd27942a696ba": "2000000000000000000000",
  "6611ce59a98b072ae959dc49ad511daaaaa19d6b": "200000000000000000000",
  "0d92582fdba05eabc3e51538c56db8813785b328": "191000000000000000000",
  "e87e9bbfbbb71c1a740c74c723426df55d063dd9": "7998000000000000000000",
  "9c99a1da91d5920bc14e0cb914fdf62b94cb8358": "20000000000000000000000",
  "fe8e6e3665570dff7a1bda697aa589c0b4e9024a": "2000000000000000000000",
  "811461a2b0ca90badac06a9ea16e787b33b196cc": "164000000000000000000",
  "d211b21f1b12b5096181590de07ef81a89537ead": "2000000000000000000000",
  "01155057002f6b0d18acb9388d3bc8129f8f7a20": "1340000000000000000000",
  "8ce22f9fa372449a420610b47ae0c8d565481232": "2000000000000000000000",
  "e02b74a47628be315b1f76b315054ad44ae9716f": "4000000000000000000000",
  "92a7c5a64362e9f842a23deca21035857f889800": "1999944000000000000000",
  "5213f459e078ad3ab95a0920239fcf1633dc04ca": "2599989000000000000000",
  "c9957ba94c1b29e5277ec36622704904c63dc023": "1923000000000000000000",
  "6ac40f532dfee5118117d2ad352da77d4f6da2c8": "400000000000000000000",
  "ea1efb3ce789bedec3d67c3e1b3bc0e9aa227f90": "734000000000000000000",
  "b01e389b28a31d8e4995bdd7d7c81beeab1e4119": "1000000000000000000000",
  "ee97aa8ac69edf7a987d6d70979f8ec1fbca7a94": "376000000000000000000",
  "0fad05507cdc8f24b2be4cb7fa5d927ddb911b88": "3004447000000000000000",
  "b6e8afd93dfa9af27f39b4df06076710bee3dfab": "25000000000000000000",
  "7d0b255efb57e10f7008aa22d40e9752dfcf0378": "29944000000000000000",
  "aef5b12258a18dec07d5ec2e316574919d79d6d6": "2000000000000000000000",
  "63666755bd41b5986997783c13043008242b3cb5": "500000000000000000000",
  "921f5261f4f612760706892625c75e7bce96b708": "2000000000000000000000",
  "10e1e3377885c42d7df218522ee7766887c05e6a": "300031000000000000000",
  "134163be9fbbe1c5696ee255e90b13254395c318": "200000000000000000000",
  "870f15e5df8b0eabd02569537a8ef93b56785c42": "388000000000000000000",
  "68eec1e288ac31b6eaba7e1fbd4f04ad579a6b5d": "2000000000000000000000",
  "1a2694ec07cf5e4d68ba40f3e7a14c53f3038c6e": "1000073000000000000000",
  "cd9b4cef73390c83a8fd71d7b540a7f9cf8b8c92": "90000000000000000000",
  "c8de7a564c7f4012a6f6d10fd08f47890fbf07d4": "300000000000000000000",
  "c0345b33f49ce27fe82cf7c84d141c68f590ce76": "1000000000000000000000",
  "fe53b94989d89964da2061539526bbe979dd2ea9": "1930600000000000000000",
  "14410fb310711be074a80883c635d0ef6afb2539": "2000000000000000000000",
  "1d344e962567cb27e44db9f2fac7b68df1c1e6f7": "1940000000000000000000",
  "fe016ec17ec5f10e3bb98ff4a1eda045157682ab": "375804000000000000000",
  "e89da96e06beaf6bd880b378f0680c43fd2e9d30": "601400000000000000000",
  "0fee81ac331efd8f81161c57382bb4507bb9ebec": "400030000000000000000",
  "40cf90ef5b768c5da585002ccbe6617650d8e837": "999800000000000000000",
  "256fa150cc87b5056a07d004efc84524739e62b5": "200000000000000000000",
  "1b9b2dc2960e4cb9408f7405827c9b59071612fd": "1000000000000000000000",
  "0efd1789eb1244a3dede0f5de582d8963cb1f39f": "1500000000000000000000",
  "049c5d4bc6f25d4e456c697b52a07811ccd19fb1": "300048000000000000000",
  "02b7b1d6b34ce053a40eb65cd4a4f7dddd0e9f30": "685000000000000000000",
  "c1827686c0169485ec15b3a7c8c01517a2874de1": "40000000000000000000",
  "d8e5c9675ef4deed266b86956fc4590ea7d4a27d": "1000000000000000000000",
  "48f883e567b436a27bb5a3124dbc84dec775a800": "771840000000000000000",
  "a34076f84bd917f20f8342c98ba79e6fb08ecd31": "4200000000000000000000",
  "21ce6d5b9018cec04ad6967944bea39e8030b6b8": "20000000000000000000",
  "0596a27dc3ee115fce2f94b481bc207a9e261525": "1000000000000000000000",
  "717cf9beab3638308ded7e195e0c86132d163fed": "15097428000000000000000",
  "d5ce55d1b62f59433c2126bcec09bafc9dfaa514": "197000000000000000000",
  "7dd46da677e161825e12e80dc446f58276e1127c": "820000000000000000000",
  "98c5494a03ac91a768dffc0ea1dde0acbf889019": "200000000000000000000000",
  "617ff2cc803e31c9082233b825d025be3f7b1056": "1970000000000000000000",
  "1091176be19b9964a8f72e0ece6bf8e3cfad6e9c": "10020000000000000000000",
  "4ea56e1112641c038d0565a9c296c463afefc17e": "182000000000000000000",
  "e303167f3d4960fe881b32800a2b4aeff1b088d4": "2000000000000000000000",
  "773141127d8cf318aebf88365add3d5527d85b6a": "1000076000000000000000",
  "b916b1a01cdc4e56e7657715ea37e2a0f087d106": "2406017000000000000000",
  "46a430a2d4a894a0d8aa3feac615361415c3f81f": "2000000000000000000000",
  "e6a3010f0201bc94ff67a2f699dfc206f9e76742": "879088000000000000000",
  "d7ad09c6d32657685355b5c6ec8e9f57b4ebb982": "1970000000000000000000",
  "95e80a82c20cbe3d2060242cb92d735810d034a2": "32511000000000000000",
  "9a390162535e398877e416787d6239e0754e937c": "1000000000000000000000",
  "d85fdeaf2a61f95db902f9b5a53c9b8f9266c3ac": "2010000000000000000000",
  "c3e20c96df8d4e38f50b265a98a906d61bc51a71": "2000000000000000000000",
  "2949fd1def5c76a286b3872424809a07db3966f3": "5236067000000000000000",
  "86cdb7e51ac44772be3690f61d0e59766e8bfc18": "4000000000000000000000",
  "749a4a768b5f237248938a12c623847bd4e688dc": "72000000000000000000",
  "3524a000234ebaaf0789a134a2a417383ce5282a": "5635000000000000000000",
  "7b43c7eea8d62355b0a8a81da081c6446b33e9e0": "4000000000000000000000",
  "0eb189ef2c2d5762a963d6b7bdf9698ea8e7b48a": "1337000000000000000000",
  "767fd7797d5169a05f7364321c19843a8c348e1e": "18800000000000000000",
  "1b2639588b55c344b023e8de5fd4087b1f040361": "1500000000000000000000",
  "1e33d1c2fb5e084f2f1d54bc5267727fec3f985d": "500000000000000000000",
  "06b106649aa8c421ddcd1b8c32cd0418cf30da1f": "40000000000000000000000",
  "3c5a241459c6abbf630239c98a30d20b8b3ac561": "157600000000000000000",
  "0f4f94b9191bb7bb556aaad7c74ddb288417a50b": "1400000000000000000000",
  "d6f4a7d04e8faf20e8c6eb859cf7f78dd23d7a15": "131784000000000000000",
  "61adf5929a5e2981684ea243baa01f7d1f5e148a": "110302000000000000000",
  "8f58d8348fc1dc4e0dd8343b6543c857045ee940": "13632400000000000000000",
  "a6e3baa38e104a1e27a4d82869afb1c0ae6eff8d": "19690000000000000000",
  "67350b5331926f5e28f3c1e986f96443809c8b8c": "352000000000000000000",
  "0b5d66b13c87b392e94d91d5f76c0d450a552843": "2000000000000000000000",
  "562a8dcbbeeef7b360685d27303bd69e094accf6": "10000000000000000000000",
  "b5d9934d7b292bcf603b2880741eb760288383a0": "16700000000000000000",
  "6fc53662371dca587b59850de78606e2359df383": "180000000000000000000",
  "e069c0173352b10bf6834719db5bed01adf97bbc": "18894000000000000000",
  "10a93457496f1108cd98e140a1ecdbae5e6de171": "399600000000000000000",
  "69ff8901b541763f817c5f2998f02dcfc1df2997": "40000000000000000000",
  "00c27d63fde24b92ee8a1e7ed5d26d8dc5c83b03": "2000000000000000000000",
  "77f81b1b26fc84d6de97ef8b9fbd72a33130cc4a": "1000000000000000000000",
  "6d20ef9704670a500bb269b5832e859802049f01": "130000000000000000000",
  "186afdc085f2a3dce4615edffbadf71a11780f50": "200000000000000000000",
  "7ff0c63f70241bece19b737e5341b12b109031d8": "346000000000000000000",
  "9d4174aa6af28476e229dadb46180808c67505c1": "1219430000000000000000",
  "5fec49c665e64ee89dd441ee74056e1f01e92870": "6320000000000000000000",
  "6cd228dc712169307fe27ceb7477b48cfc8272e5": "77600000000000000000",
  "fd918536a8efa6f6cefe1fa1153995fef5e33d3b": "500000000000000000000",
  "2fbb504a5dc527d3e3eb0085e2fc3c7dd538cb7a": "1249961000000000000000",
  "6ab323ae5056ed0a453072c5abe2e42fcf5d7139": "880000000000000000000",
  "67d682a282ef73fb8d6e9071e2614f47ab1d0f5e": "1000000000000000000000",
  "1858cf11aea79f5398ad2bb22267b5a3c952ea74": "9850000000000000000000",
  "39d6caca22bccd6a72f87ee7d6b59e0bde21d719": "2002000000000000000000",
  "daa63cbda45dd487a3f1cd4a746a01bb5e060b90": "4797800000000000000000",
  "a90476e2efdfee4f387b0f32a50678b0efb573b5": "10000000000000000000000",
  "ae5aa1e6c2b60f6fd3efe721bb4a719cbe3d6f5d": "795860000000000000000",
  "ac2e766dac3f648f637ac6713fddb068e4a4f04d": "197000000000000000000",
  "6191ddc9b64a8e0890b4323709d7a07c48b92a64": "775000000000000000000",
  "cc4f0ff2aeb67d54ce3bc8c6510b9ae83e9d328b": "400000000000000000000",
  "ca23f62dff0d6460036c62e840aec5577e0befd2": "140800000000000000000",
  "97dc26ec670a31e0221d2a75bc5dc9f90c1f6fd4": "50000000000000000000",
  "848c994a79003fe7b7c26cc63212e1fc2f9c19eb": "2000000000000000000000",
  "20c284ba10a20830fc3d699ec97d2dfa27e1b95e": "2000000000000000000000",
  "4fa3f32ef4086448b344d5f0a9890d1ce4d617c3": "1500000000000000000000",
  "255abc8d08a096a88f3d6ab55fbc7352bddcb9ce": "82161000000000000000",
  "7c60e51f0be228e4d56fdd2992c814da7740c6bc": "200000000000000000000",
  "1c356cfdb95febb714633b28d5c132dd84a9b436": "25000000000000000000",
  "5062e5134c612f12694dbd0e131d4ce197d1b6a4": "1000000000000000000000",
  "ed862616fcbfb3becb7406f73c5cbff00c940755": "1700000000000000000000",
  "62c9b271ffd5b770a5eee4edc9787b5cdc709714": "2000000000000000000000",
  "3c925619c9b33144463f0537d896358706c520b0": "2000000000000000000000",
  "ffe2e28c3fb74749d7e780dc8a5d422538e6e451": "253319000000000000000",
  "37195a635dcc62f56a718049d47e8f9f96832891": "1970000000000000000000",
  "90e9a9a82edaa814c284d232b6e9ba90701d4952": "100007000000000000000",
  "e0c4ab9072b4e6e3654a49f8a8db026a4b3386a9": "2000000000000000000000",
  "439dee3f7679ff1030733f9340c096686b49390b": "2000000000000000000000",
  "548558d08cfcb101181dac1eb6094b4e1a896fa6": "1999944000000000000000",
  "3090f8130ec44466afadb36ed3c926133963677b": "4000000000000000000000",
  "d1648503b1ccc5b8be03fa1ec4f3ee267e6adf7b": "5828000000000000000000",
  "65b42faecc1edfb14283ca979af545f63b30e60c": "18200000000000000000",
  "6420f8bcc8164a6152a99d6b99693005ccf7e053": "999972000000000000000",
  "84b4b74e6623ba9d1583e0cfbe49643f16384149": "20000000000000000000",
  "b8310a16cc6abc465007694b930f978ece1930bd": "740000000000000000000",
  "16019a4dafab43f4d9bf4163fae0847d848afca2": "25060000000000000000",
  "479298a9de147e63a1c7d6d2fce089c7e64083bd": "9999999000000000000000",
  "030973807b2f426914ad00181270acd27b8ff61f": "5348000000000000000000",
  "b07bcf1cc5d4462e5124c965ecf0d70dc27aca75": "1600000000000000000000",
  "a2f798e077b07d86124e1407df32890dbb4b6379": "200000000000000000000",
  "0cbd921dbe121563b98a6871fecb14f1cc7e88d7": "200000000000000000000",
  "6042276df2983fe2bc4759dc1943e18fdbc34f77": "1970000000000000000000",
  "be2b2280523768ea8ac35cd9e888d60a719300d4": "2000000000000000000000",
  "2f4da753430fc09e73acbccdcde9da647f2b5d37": "200000000000000000000",
  "734223d27ff23e5906caed22595701bb34830ca1": "2000000000000000000000",
  "5b430d779696a3653fc60e74fbcbacf6b9c2baf1": "14000000000000000000000",
  "84232107932b12e03186583525ce023a703ef8d9": "2000000000000000000000",
  "4ed14d81b60b23fb25054d8925dfa573dcae6168": "340000000000000000000",
  "8b338411f26ccf37658cc75521d77629099e467d": "2000000000000000000000",
  "a37622ac9bbdc4d82b75015d745b9f8de65a28ec": "2910000000000000000000",
  "1dd77441844afe9cc18f15d8c77bccfb655ee034": "4850000000000000000000",
  "65849be1af20100eb8a3ba5a5be4d3ae8db5a70e": "400000000000000000000",
  "d5586da4e59583c8d86cccf71a86197f17996749": "2000000000000000000000",
  "4b53ae59c784b6b5c43616b9a0809558e684e10c": "1200000000000000000000",
  "55d42eb495bf46a634997b5f2ea362814918e2b0": "106128000000000000000",
  "959ff17f1d51b473b44010052755a7fa8c75bd54": "1970000000000000000000",
  "5a2daab25c31a61a92a4c82c9925a1d2ef58585e": "225400000000000000000",
  "24c0c88b54a3544709828ab4ab06840559f6c5e2": "2674000000000000000000",
  "7e8649e690fc8c1bfda1b5e186581f649b50fe33": "98500000000000000000",
  "4acfa9d94eda6625c9dfa5f9f4f5d107c4031fdf": "39400000000000000000",
  "5778ffdc9b94c5a59e224eb965b6de90f222d170": "335320000000000000000",
  "825a7f4e10949cb6f8964268f1fa5f57e712b4c4": "20000000000000000000",
  "6f39cc37caaa2ddc9b610f6131e0619fae772a3c": "500000000000000000000",
  "5b437365ae3a9a2ff97c68e6f90a7620188c7d19": "2002000000000000000000",
  "6710c2c03c65992b2e774be52d3ab4a6ba217ef7": "11600000000000000000000",
  "896e335ca47af57962fa0f4dbf3e45e688cba584": "1368500000000000000000",
  "b57549bfbc9bdd18f736b22650e48a73601fa65c": "446000000000000000000",
  "85ca1e727e9d1a87991cc2c41840ebb9edf21d1b": "13370000000000000000",
  "cf4166746e1d3bc1f8d0714b01f17e8a62df1464": "1004700000000000000000",
  "4a75c3d4fa6fccbd5dd5a703c15379a1e783e9b7": "1820000000000000000000",
  "9e5811b40be1e2a1e1d28c3b0774acde0a09603d": "3000000000000000000000",
  "763886e333c56feff85be3951ab0b889ce262e95": "2000000000000000000000",
  "2b101e822cd962962a06800a2c08d3b15d82b735": "152000000000000000000",
  "a01e9476df84431825c836e8803a97e22fa5a0cd": "6000000000000000000000",
  "be4e7d983f2e2a636b1102ec7039efebc842e98d": "66000000000000000000",
  "9e427272516b3e67d4fcbf82f59390d04c8e28e5": "4000000000000000000000",
  "e0d231e144ec9107386c7c9b02f1702ceaa4f700": "5000057000000000000000",
  "6a0f056066c2d56628850273d7ecb7f8e6e9129e": "5000016000000000000000",
  "d1538e9a87e59ca9ec8e5826a5b793f99f96c4c3": "1000000000000000000000",
  "f85bab1cb3710fc05fa19ffac22e67521a0ba21d": "2003000000000000000000",
  "f7cbdba6be6cfe68dbc23c2b0ff530ee05226f84": "20000000000000000000",
  "4eb87ba8788eba0df87e5b9bd50a8e45368091c1": "20000000000000000000",
  "1479a9ec7480b74b5db8fc499be352da7f84ee9c": "1000000000000000000000",
  "d311bcd7aa4e9b4f383ff3d0d6b6e07e21e3705d": "200000000000000000000",
  "425c1816868f7777cc2ba6c6d28c9e1e796c52b3": "10000000000000000000000",
  "8510ee934f0cbc900e1007eb38a21e2a5101b8b2": "106000000000000000000",
  "01e864d354741b423e6f42851724468c74f5aa9c": "20000000000000000000000",
  "a543a066fb32a8668aa0736a0c9cd40d78098727": "1000000000000000000000",
  "f3eb1948b951e22df1617829bf3b8d8680ec6b68": "4000000000000000000000",
  "f6b782f4dcd745a6c0e2e030600e04a24b25e542": "400000000000000000000",
  "229f4f1a2a4f540774505b4707a81de44410255b": "2000000000000000000000",
  "cff8d06b00e3f50c191099ad56ba6ae26571cd88": "1000000000000000000000",
  "910b7d577a7e39aa23acf62ad7f1ef342934b968": "10000000000000000000000",
  "392433d2ce83d3fb4a7602cca3faca4ec140a4b0": "51000000000000000000",
  "8ff46045687723dc33e4d099a06904f1ebb584dc": "2000000000000000000000",
  "9ca0429f874f8dcee2e9c062a9020a842a587ab9": "2000000000000000000000",
  "160ceb6f980e04315f53c4fc988b2bf69e284d7d": "19100000000000000000",
  "c340f9b91c26728c31d121d5d6fc3bb56d3d8624": "2000000000000000000000",
  "afa1d5ad38fed44759c05b8993c1aa0dace19f40": "80000000000000000000",
  "3969b4f71bb8751ede43c016363a7a614f76118e": "2000000000000000000000",
  "2bb6f578adfbe7b2a116b3554facf9969813c319": "7400000000000000000000",
  "8334764b7b397a4e578f50364d60ce44899bff94": "92500000000000000000",
  "9dd2196624a1ddf14a9d375e5f07152baf22afa2": "1211747000000000000000",
  "f242da845d42d4bf779a00f295b40750fe49ea13": "1000000000000000000000",
  "c6234657a807384126f8968ca1708bb07baa493c": "20000000000000000000",
  "94c055e858357aaa30cf2041fa9059ce164a1f91": "19999000000000000000000",
  "74c73c90528a157336f1e7ea20620ae53fd24728": "8969310000000000000000",
  "19e7f3eb7bf67f3599209ebe08b62ad3327f8cde": "2000000000000000000000",
  "b2b516fdd19e7f3864b6d2cf1b252a4156f1b03b": "53720000000000000000",
  "8164e78314ae16b28926cc553d2ccb16f356270d": "8450000000000000000000",
  "4d828894752f6f25175daf2177094487954b6f9f": "1459683000000000000000",
  "ab84a0f147ad265400002b85029a41fc9ce57f85": "1000000000000000000000",
  "f3fe51fde34413c73318b9c85437fe7e820f561a": "1003200000000000000000",
  "16c7b31e8c376282ac2271728c31c95e35d952c3": "2000000000000000000000",
  "80d5c40c59c7f54ea3a55fcfd175471ea35099b3": "1000000000000000000000",
  "7abb10f5bd9bc33b8ec1a82d64b55b6b18777541": "20000000000000000000000",
  "095b0ea2b218d82e0aea7c2889238a39c9bf9077": "20000000000000000000000",
  "5d5cdbe25b2a044b7b9be383bcaa5807b06d3c6b": "2000000000000000000000",
  "323749a3b971959e46c8b4822dcafaf7aaf9bd6e": "20064000000000000000",
  "e0272213e8d2fd3e96bd6217b24b4ba01b617079": "20000000000000000000",
  "00acbfb2f25a5485c739ef70a44eeeeb7c65a66f": "100000000000000000000",
  "52f15423323c24f19ae2ab673717229d3f747d9b": "1026115000000000000000",
  "cb4abfc282aed76e5d57affda542c1f382fcacf4": "8136100000000000000000",
  "f71b4534f286e43093b1e15efea749e7597b8b57": "104410000000000000000000",
  "44cd77535a893fa7c4d5eb3a240e79d099a72d2d": "820000000000000000000",
  "eb3ce7fc381c51db7d5fbd692f8f9e058a4c703d": "200000000000000000000",
  "f1c8c4a941b4628c0d6c30fda56452d99c7e1b64": "1449000000000000000000",
  "277677aba1e52c3b53bfa2071d4e859a0af7e8e1": "1000000000000000000000",
  "a5f075fd401335577b6683c281e6d101432dc6e0": "2680000000000000000000",
  "e28dbc8efd5e416a762ec0e018864bb9aa83287b": "24533161000000000000000",
  "2b717cd432a323a4659039848d3b87de26fc9546": "500000000000000000000000",
  "b358e97c70b605b1d7d729dfb640b43c5eafd1e7": "20000000000000000000000",
  "293c2306df3604ae4fda0d207aba736f67de0792": "200000000000000000000",
  "74d366b07b2f56477d7c7077ac6fe497e0eb6559": "5000000000000000000000",
  "490145afa8b54522bb21f352f06da5a788fa8f1d": "9231182000000000000000",
  "862569211e8c6327b5415e3a67e5738b15baaf6e": "140000000000000000000",
  "5a74ba62e7c81a3474e27d894fed33dd24ad95fe": "18200000000000000000",
  "536e4d8029b73f5579dca33e70b24eba89e11d7e": "1970000000000000000000",
  "25c6e74ff1d928df98137af4df8430df24f07cd7": "390000000000000000000",
  "19b36b0c87ea664ed80318dc77b688dde87d95a5": "1948386000000000000000",
  "abc4caeb474d4627cb6eb456ecba0ecd08ed8ae1": "3940000000000000000000",
  "8ea656e71ec651bfa17c5a5759d86031cc359977": "100000000000000000000",
  "8d620bde17228f6cbba74df6be87264d985cc179": "100000000000000000000",
  "b2aa2f1f8e93e79713d92cea9ffce9a40af9c82d": "2000000000000000000000",
  "198ef1ec325a96cc354c7266a038be8b5c558f67": "608334724000000000000000",
  "6a13d5e32c1fd26d7e91ff6e053160a89b2c8aad": "53480000000000000000",
  "e056bf3ff41c26256fef51716612b9d39ade999c": "100009000000000000000",
  "2c128c95d957215101f043dd8fc582456d41016d": "835000000000000000000",
  "2560b09b89a4ae6849ed5a3c9958426631714466": "1700000000000000000000",
  "d3d6e9fb82542fd29ed9ea3609891e151396b6f7": "54000000000000000000000",
  "a7607b42573bb6f6b4d4f23c7e2a26b3a0f6b6f0": "1610000000000000000000",
  "020362c3ade878ca90d6b2d889a4cc5510eed5f3": "1042883000000000000000",
  "14830704e99aaad5c55e1f502b27b22c12c91933": "620000000000000000000",
  "8030b111c6983f0485ddaca76224c6180634789f": "80000000000000000000",
  "2c5b7d7b195a371bf9abddb42fe04f2f1d9a9910": "200000000000000000000",
  "77d43fa7b481dbf3db530cfbf5fdced0e6571831": "2000000000000000000000",
  "2d90b415a38e2e19cdd02ff3ad81a97af7cbf672": "109800000000000000000",
  "2fc82ef076932341264f617a0c80dd571e6ae939": "7160000000000000000000",
  "dfe549fe8430e552c6d07cc3b92ccd43b12fb50f": "83620000000000000000",
  "1e8e689b02917cdc29245d0c9c68b094b41a9ed6": "2000000000000000000000",
  "21c3a8bba267c8cca27b1a9afabad86f607af708": "8940000000000000000000",
  "143c639752caeecf6a997d39709fc8f19878c7e8": "1970000000000000000000",
  "02603d7a3bb297c67c877e5d34fbd5b913d4c63a": "20000000000000000000",
  "a166f911c644ac3213d29e0e1ae010f794d5ad26": "2000000000000000000000",
  "6eb3819617404058268f0c3cff3596bfe9148c1c": "1670000000000000000000",
  "7a67dd043a504fc2f2fc7194e9becf484cecb1fb": "250000000000000000000",
  "f824ee331e4ac3cc587693395b57ecf625a6c0c2": "1600930000000000000000",
  "1179c60dbd068b150b074da4be23033b20c68558": "680000000000000000000",
  "d2a479404347c5543aab292ae1bb4a6f158357fa": "4000000000000000000000",
  "b0d32bd7e4e695b7b01aa3d0416f80557dba9903": "16300000000000000000000",
  "f734ec03724ddee5bb5279aa1afcf61b0cb448a1": "4238080000000000000000",
  "c04069dfb18b096c7867f8bee77a6dc7477ad062": "2674000000000000000000",
  "80c53ee7e3357f94ce0d7868009c208b4a130125": "2000000000000000000000",
  "0f32d9cb4d0fdaa0150656bb608dcc43ed7d9301": "753978000000000000000",
  "6ddb6092779d5842ead378e21e8120fd4c6bc132": "2000000000000000000000",
  "82ea01e3bf2e83836e71704e22a2719377efd9c3": "3040000000000000000000",
  "44c1110b18870ec81178d93d215838c551d48e64": "199958000000000000000",
  "7727af101f0aaba4d23a1cafe17c6eb5dab1c6dc": "2000000000000000000000",
  "a11a03c4bb26d21eff677d5d555c80b25453ee7a": "69979000000000000000",
  "19e5dea3370a2c746aae34a37c531f41da264e83": "200000000000000000000",
  "c325c352801ba883b3226c5feb0df9eae2d6e653": "3940000000000000000000",
  "ae5055814cb8be0c117bb8b1c8d2b63b4698b728": "32035000000000000000",
  "deb1bc34d86d4a4dde2580d8beaf074eb0e1a244": "1580000000000000000000",
  "558360206883dd1b6d4a59639e5629d0f0c675d0": "2000000000000000000000",
  "a9d6f871ca781a759a20ac3adb972cf12829a208": "925000000000000000000",
  "b0ac4eff6680ee14169cdadbffdb30804f6d25f5": "2000000000000000000000",
  "f1b58faffa8794f50af8e88309c7a6265455d51a": "999800000000000000000",
  "a61a54df784a44d71b771b87317509211381f200": "1000000000000000000000",
  "baa4b64c2b15b79f5f204246fd70bcbd86e4a92a": "500000000000000000000",
  "a20d8ff60caae31d02e0b665fa435d76f77c9442": "489600000000000000000",
  "f3e74f470c7d3a3f0033780f76a89f3ef691e6cb": "3021800000000000000000",
  "d330728131fe8e3a15487a34573c93457e2afe95": "4000000000000000000000",
  "9af9dbe47422d177f945bdead7e6d82930356230": "3940000000000000000000",
  "0eb5b662a1c718608fd52f0c25f9378830178519": "6091400000000000000000",
  "fda6810ea5ac985d6ffbf1c511f1c142edcfddf7": "4000000000000000000000",
  "832c54176bdf43d2c9bcd7b808b89556b89cbf31": "200000000000000000000",
  "704d5de4846d39b53cd21d1c49f096db5c19ba29": "152000000000000000000",
  "344a8db086faed4efc37131b3a22b0782dad7095": "500000000000000000000",
  "8c7fa5cae82fedb69ab189d3ff27ae209293fb93": "400030000000000000000",
  "ad660dec825522a9f62fcec3c5b731980dc286ea": "3000000000000000000000",
  "13b9b10715714c09cfd610cf9c9846051cb1d513": "1970000000000000000000",
  "40467d80e74c35407b7db51789234615fea66818": "388000000000000000000",
  "30e9d5a0088f1ddb2fd380e2a049192266c51cbf": "196910000000000000000",
  "b2d1e99af91231858e7065dd1918330dc4c747d5": "16700000000000000000000",
  "9f21302ca5096bea7402b91b0fd506254f999a3d": "1246832000000000000000",
  "d24b6644f439c8051dfc64d381b8c86c75c17538": "2000000000000000000000",
  "8228ebc087480fd64547ca281f5eace3041453b9": "1970000000000000000000",
  "29da3e35b23bb1f72f8e2258cf7f553359d24bac": "20000000000000000000000",
  "c8e558a3c5697e6fb23a2594c880b7a1b68f9860": "10000000000000000000000",
  "6b951a43274eeafc8a0903b0af2ec92bf1efc839": "100000000000000000000",
  "d015f6fcb84df7bb410e8c8f04894a881dcac237": "1038000000000000000000",
  "6ccb03acf7f53ce87aadcc21a9932de915f89804": "8000000000000000000000",
  "388c85a9b9207d8146033fe38143f6d34b595c47": "200000000000000000000",
  "429c06b487e8546abdfc958a25a3f0fba53f6f00": "13503000000000000000",
  "771507aeee6a255dc2cd9df55154062d0897b297": "334250000000000000000",
  "5a2b1c853aeb28c45539af76a00ac2d8a8242896": "25000000000000000000",
  "f4d67a9044b435b66e8977ff39a28dc4bd53729a": "200000000000000000000",
  "063759dd1c4e362eb19398951ff9f8fad1d31068": "10000000000000000000000",
  "cb58990bcd90cfbf6d8f0986f6fa600276b94e2d": "999925000000000000000",
  "6df5c84f7b909aab3e61fe0ecb1b3bf260222ad2": "4000000000000000000000",
  "deb2495d6aca7b2a6a2d138b6e1a42e2dc311fdd": "2000000000000000000000",
  "59203cc37599b648312a7cc9e06dacb589a9ae6a": "148689000000000000000",
  "fc9b347464b2f9929d807e039dae48d3d98de379": "14000000000000000000000",
  "48d2434b7a7dbbff08223b6387b05da2e5093126": "18000000000000000000000",
  "c9d76446d5aadff80b68b91b08cd9bc8f5551ac1": "714000000000000000000",
  "3d31587b5fd5869845788725a663290a49d3678c": "500000000000000000000",
  "d8715ef9176f850b2e30eb8e382707f777a6fbe9": "2000000000000000000000",
  "2c2147947ae33fb098b489a5c16bfff9abcd4e2a": "200000000000000000000",
  "d6c0d0bc93a62e257174700e10f024c8b23f1f87": "2000000000000000000000",
  "d1978f2e34407fab1dc2183d95cfda6260b35982": "788000000000000000000",
  "1bf974d9904f45ce81a845e11ef4cbcf27af719e": "100000000000000000000",
  "6e761eaa0f345f777b5441b73a0fa5b56b85f22d": "2000000000000000000000",
  "ea60436912de6bf187d3a472ff8f5333a0f7ed06": "19700000000000000000",
  "94f8f057db7e60e675ad940f155885d1a477348e": "401100000000000000000",
  "8933491760c8f0b4df8caac78ed835caee21046d": "20000000000000000000000",
  "a7775e4af6a23afa201fb78b915e51a515b7a728": "120000000000000000000",
  "d8d64384249b776794063b569878d5e3b530a4b2": "177569000000000000000",
  "be633a3737f68439bac7c90a52142058ee8e8a6f": "960000000000000000000",
  "90bd62a050845261fa4a9f7cf241ea630b05efb8": "500000000000000000000",
  "552987f0651b915b2e1e5328c121960d4bdd6af4": "1790000000000000000000",
  "0baf6ecdb91acb3606a8357c0bc4f45cfd2d7e6f": "1000000000000000000000",
  "9e5a311d9f69898a7c6a9d6360680438e67a7b2f": "1490000000000000000000",
  "78859c5b548b700d9284cee4b6633c2f52e529c2": "2955000000000000000000",
  "d572309169b1402ec8131a17a6aac3222f89e6eb": "13800000000000000000000",
  "8e6d7485cbe990acc1ad0ee9e8ccf39c0c93440e": "955000000000000000000",
  "75c11d024d12ae486c1095b7a7b9c4af3e8edeb9": "20000000000000000000",
  "903413878aea3bc1086309a3fe768b65559e8cab": "8000000000000000000000",
  "6d0569e5558fc7df2766f2ba15dc8aeffc5beb75": "4001070000000000000000",
  "3815b0743f94fc8cc8654fd9d597ed7d8b77c57e": "738578000000000000000",
  "0f26480a150961b8e30750713a94ee6f2e47fc00": "1000000000000000000000",
  "ede5de7c7fb7eee0f36e64530a41440edfbefacf": "617200000000000000000",
  "763a7cbab70d7a64d0a7e52980f681472593490c": "600000000000000000000",
  "6e270ad529f1f0b8d9cb6d2427ec1b7e2dc64a74": "200000000000000000000",
  "eb3bdd59dcdda5a9bb2ac1641fd02180f5f36560": "6600000000000000000000",
  "f4ebf50bc7e54f82e9b9bd24baef29438e259ce6": "10000000000000000000000",
  "882c8f81872c79fed521cb5f950d8b032322ea69": "40000000000000000000000",
  "394132600f4155e07f4d45bc3eb8d9fb72dcd784": "2941000000000000000000",
  "0be2b94ad950a2a62640c35bfccd6c67dae450f6": "1940000000000000000000",
  "d4c6ac742e7c857d4a05a04c33d4d05c1467571d": "200000000000000000000",
  "1fddd85fc98be9c4045961f40f93805ecc4549e5": "164000000000000000000",
  "534065361cb854fac42bfb5c9fcde0604ac919da": "2000000000000000000000",
  "9a6ff5f6a7af7b7ae0ed9c20ecec5023d281b786": "2547000000000000000000",
  "4f3a4854911145ea01c644044bdb2e5a960a982f": "4000000000000000000000",
  "00497e92cdc0e0b963d752b2296acb87da828b24": "194800000000000000000",
  "4ff67fb87f6efba9279930cfbd1b7a343c79fade": "400000000000000000000",
  "62f2e5ccecd52cc4b95e0597df27cc079715608c": "143000000000000000000",
  "1eda084e796500ba14c5121c0d90846f66e4be62": "534800000000000000000",
  "9836b4d30473641ab56aeee19242761d72725178": "2000000000000000000000",
  "de55de0458f850b37e4d78a641dd2eb2dd8f38ce": "4000000000000000000000",
  "140ca28ff33b9f66d7f1fc0078f8c1eef69a1bc0": "1600000000000000000000",
  "2014261f01089f53795630ba9dd24f9a34c2d942": "1337000000000000000000",
  "11415fab61e0dfd4b90676141a557a869ba0bde9": "2048000000000000000000",
  "88344909644c7ad4930fd873ca1c0da2d434c07f": "131970000000000000000",
  "88b217ccb786a254cf4dc57f5d9ac3c455a30483": "925000000000000000000",
  "dfdbcec1014b96da2158ca513e9c8d3b9af1c3d0": "2000000000000000000000",
  "1ba9f7997e5387b6b2aa0135ac2452fe36b4c20d": "850000000000000000000",
  "d70ad2c4e9eebfa637ef56bd486ad2a1e5bce093": "200000000000000000000",
  "9ce27f245e02d1c312c1d500788c9def7690453b": "200000000000000000000",
  "8234f463d18485501f8f85ace4972c9b632dbccc": "2000000000000000000000",
  "994152fc95d5c1ca8b88113abbad4d710e40def6": "500000000000000000000",
  "e5b980d28eece2c06fca6c9473068b37d4a6d6e9": "695200000000000000000",
  "2d426912d059fad9740b2e390a2eeac0546ff01b": "1400000000000000000000",
  "6d9997509882027ea947231424bedede2965d0ba": "2001600000000000000000",
  "167ce7de65e84708595a525497a3eb5e5a665073": "575400000000000000000",
  "e430c0024fdbf73a82e21fccf8cbd09138421c21": "4000000000000000000000",
  "2e52912bc10ea39d54e293f7aed6b99a0f4c73be": "400000000000000000000",
  "12cf8b0e465213211a5b53dfb0dd271a282c12c9": "15200000000000000000",
  "06964e2d17e9189f88a8203936b40ac96e533c06": "18200000000000000000",
  "66b1a63da4dcd9f81fe54f5e3fcb4055ef7ec54f": "201412000000000000000",
  "0a77e7f72b437b574f00128b21f2ac265133528c": "2000000000000000000000",
  "78f5c74785c5668a838072048bf8b453594ddaab": "400000000000000000000",
  "58e554af3d87629620da61d538c7f5b4b54c4afe": "1297081000000000000000",
  "37a10451f36166cf643dd2de6c1cbba8a011cfa3": "380000000000000000000",
  "fe9ad12ef05d6d90261f96c8340a0381974df477": "2000000000000000000000",
  "057f7f81cd7a406fc45994408b5049912c566463": "1700000000000000000000",
  "55a3df57b7aaec16a162fd5316f35bec082821cf": "1970000000000000000000",
  "c0e0b903088e0c63f53dd069575452aff52410c3": "3000000000000000000000",
  "63e88e2e539ffb450386b4e46789b223f5476c45": "6292000000000000000000",
  "3727341f26c12001e378405ee38b2d8464ec7140": "2000000000000000000000",
  "c96751656c0a8ef4357b7344322134b983504aca": "2000000000000000000000",
  "1e060dc6c5f1cb8cc7e1452e02ee167508b56542": "12715500000000000000000",
  "18136c9df167aa17b6f18e22a702c88f4bc28245": "4000000000000000000000",
  "116108c12084612eeda7a93ddcf8d2602e279e5c": "2000000000000000000000",
  "bbb643d2187b364afc10a6fd368d7d55f50d1a3c": "1000000000000000000000",
  "ec83e798c396b7a55e2a2224abcd834b27ea459c": "12000000000000000000000",
  "973f4e361fe5decd989d4c8f7d7cc97990385daf": "388500000000000000000",
  "c0f29ed0076611b5e55e130547e68a48e26df5e4": "3000000000000000000000",
  "fd4b551f6fdbcda6c511b5bb372250a6b783e534": "20600000000000000000",
  "144b19f1f66cbe318347e48d84b14039466c5909": "2000000000000000000000",
  "bf183641edb886ce60b8190261e14f42d93cce01": "25019000000000000000",
  "94db807873860aac3d5aea1e885e52bff2869954": "3220000000000000000000",
  "7a74cee4fa0f6370a7894f116cd00c1147b83e59": "800000000000000000000",
  "cd32a4a8a27f1cc63954aa634f7857057334c7a3": "1085000000000000000000",
  "7cbeb99932e97e6e02058cfc62d0b26bc7cca52b": "2000000000000000000000",
  "8cde8b732e6023878eb23ed16229124b5f7afbec": "133700000000000000000",
  "45c4ecb4ee891ea984a7c5cefd8dfb00310b2850": "1980000000000000000000",
  "8b393fb0813ee101db1e14ecc7d322c72b8c0473": "455578000000000000000",
  "7b66126879844dfa34fe65c9f288117fefb449ad": "6000000000000000000000",
  "162ba503276214b509f97586bd842110d103d517": "9002000000000000000000",
  "7dece6998ae1900dd3770cf4b93812bad84f0322": "100000000000000000000",
  "ec0927bac7dc36669c28354ab1be83d7eec30934": "2000000000000000000000",
  "8d7f3e61299c2db9b9c0487cf627519ed00a9123": "1742400000000000000000",
  "4fc46c396e674869ad9481638f0013630c87caac": "1000000000000000000000",
  "bf68d28aaf1eeefef646b65e8cc8d190f6c6da9c": "2000000000000000000000",
  "00969747f7a5b30645fe00e44901435ace24cc37": "1700000000000000000000",
  "494dec4d5ee88a2771a815f1ee7264942fb58b28": "2000000000000000000000",
  "ffeac0305ede3a915295ec8e61c7f881006f4474": "98500000000000000000",
  "b39139576194a0866195151f33f2140ad1cc86cf": "100000000000000000000000",
  "fead1803e5e737a68e18472d9ac715f0994cc2be": "500000000000000000000",
  "698ab9a2f33381e07c0c47433d0d21d6f336b127": "20000000000000000000",
  "e5edc73e626f5d3441a45539b5f7a398c593edf6": "865000000000000000000",
  "dd4f5fa2111db68f6bde3589b63029395b69a92d": "158400000000000000000",
  "8c93c3c6db9d37717de165c3a1b4fe51952c08de": "400000000000000000000",
  "f87bb07b289df7301e54c0efda6a2cf291e89200": "1400000000000000000000",
  "e7a4560c84b20e0fb54c49670c2903b0a96c42a4": "598000000000000000000",
  "00a5797f52c9d58f189f36b1d45d1bf6041f2f6b": "5456900000000000000000",
  "9da3302240af0511c6fd1857e6ddb7394f77ab6b": "3100000000000000000000",
  "2c2d15ff39561c1b72eda1cc027ffef23743a144": "3920000000000000000000",
  "9b4c2715780ca4e99e60ebf219f1590c8cad500a": "1600000000000000000000",
  "ff5e7ee7d5114821e159dca5e81f18f1bfffbff9": "2000000000000000000000",
  "0169c1c210eae845e56840412e1f65993ea90fb4": "2000000000000000000000",
  "abc45f84db7382dde54c5f7d8938c42f4f3a3bc4": "200000000000000000000",
  "d9383d4b6d17b3f9cd426e10fb944015c0d44bfb": "800000000000000000000",
  "c090fe23dcd86b358c32e48d2af91024259f6566": "200000000000000000000",
  "9ffedcc36b7cc312ad2a9ede431a514fccb49ba3": "669800000000000000000",
  "2ffe93ec1a5636e9ee34af70dff52682e6ff7079": "2000000000000000000000",
  "6e01e4ad569c95d007ada30d5e2db12888492294": "4000000000000000000000",
  "d4d92c62b280e00f626d8657f1b86166cb1f740f": "200028000000000000000",
  "1d36683063b7e9eb99462dabd569bddce71686f2": "1000000000000000000000",
  "3a48e0a7098b06a905802b87545731118e89f439": "2000000000000000000000",
  "bd9e56e902f4be1fc8768d8038bac63e2acbbf8e": "999972000000000000000",
  "4d67f2ab8599fef5fc413999aa01fd7fce70b43d": "10000000000000000000000",
  "8e74e0d1b77ebc823aca03f119854cb12027f6d7": "107200000000000000000000",
  "7e5b19ae1be94ff4dee635492a1b012d14db0213": "100000000000000000000",
  "5de9e7d5d1b667d095dd34099c85b0421a0bc681": "20000000000000000000",
  "316eb4e47df71b42e16d6fe46825b7327baf3124": "4000000000000000000000",
  "772c297f0ad194482ee8c3f036bdeb01c201d5cc": "200000000000000000000",
  "d7052519756af42590f15391b723a03fa564a951": "4615591000000000000000",
  "2c6846a1aa999a2246a287056000ba4dcba8e63d": "10020000000000000000000",
  "de5b005fe8daae8d1f05de3eda042066c6c4691c": "1100000000000000000000",
  "254c1ecc630c2877de8095f0a8dba1e8bf1f550c": "1700000000000000000000",
  "f8f226142a428434ab17a1864a2597f64aab2f06": "172473000000000000000",
  "a6c910ce4d494a919ccdaaa1fc3b82aa74ba06cf": "8000000000000000000000",
  "e587b16abc8a74081e3613e14342c03375bf0847": "2000000000000000000000",
  "6f176065e88e3c6fe626267d18a088aaa4db80bc": "3520000000000000000000",
  "50dcbc27bcad984093a212a9b4178eabe9017561": "145512000000000000000",
  "e1953c6e975814c571311c34c0f6a99cdf48ab82": "50000000000000000000",
  "be0a2f385f09dbfce96732e12bb40ac349871ba8": "1610348000000000000000",
  "4712540265cbeec3847022c59f1b318d43400a9e": "3500000000000000000000",
  "29bdc4f28de0180f433c2694eb74f5504ce94337": "2000000000000000000000",
  "2f66bfbf2262efcc8d2bd0444fc5b0696298ff1e": "9940000000000000000000",
  "506411fd79003480f6f2b6aac26b7ba792f094b2": "500000000000000000000",
  "23ea669e3564819a83b0c26c00a16d9e826f6c46": "1430590000000000000000",
  "e3ffb02cb7d9ea5243701689afd5d417d7ed2ece": "78000000000000000000",
  "38e7dba8fd4f1f850dbc2649d8e84f0952e3eb3c": "50000000000000000000",
  "8644cc281be332ccced36da483fb2a0746d9ba2e": "400000000000000000000",
  "e8a91da6cf1b9d65c74a02ec1f96eecb6dd241f3": "1940000000000000000000",
  "0631dc40d74e5095e3729eddf49544ecd4396f67": "160000000000000000000",
  "83c897a84b695eebe46679f7da19d776621c2694": "500000000000000000000",
  "db73460b59d8e85045d5e752e62559875e42502e": "999800000000000000000",
  "0dd4e674bbadb1b0dc824498713dce3b5156da29": "170000000000000000000",
  "e3933d61b77dcdc716407f8250bc91e4ffaeb09d": "86600000000000000000000",
  "58c90754d2f20a1cb1dd330625e04b45fa619d5c": "2000000000000000000000",
  "895ec5545644e0b78330fffab8ddeac9e833156c": "600000000000000000000",
  "7e1e29721d6cb91057f6c4042d8a0bbc644afe73": "159800000000000000000",
  "72b90a4dc097239492c5b9777dcd1e52ba2be2c2": "6000000000000000000000",
  "64241a7844290e0ab855f1d4aa75b55345032224": "1600000000000000000000",
  "6fd4e0f3f32bee6d3767fdbc9d353a6d3aab7899": "695240000000000000000",
  "3a035594c747476d42d1ee966c36224cdd224993": "355890000000000000000",
  "de97f4330700b48c496d437c91ca1de9c4b01ba4": "2910840000000000000000",
  "716ad3c33a9b9a0a18967357969b94ee7d2abc10": "482000000000000000000",
  "bfbe05e88c9cbbcc0e92a405fac1d85de248ee24": "100000000000000000000",
  "cfc4e6f7f8b011414bfba42f23adfaa78d4ecc5e": "1850000000000000000000",
  "d931ac2668ba6a84481ab139735aec14b7bfbabf": "2000000000000000000000",
  "e3263ce8af6db3e467584502ed7109125eae22a5": "2000000000000000000000",
  "f78258c12481bcdddbb72a8ca0c043097261c6c5": "20000000000000000000",
  "4493123c021ece3b33b1a452c9268de14007f9d3": "6685000000000000000000",
  "431f2c19e316b044a4b3e61a0c6ff8c104a1a12f": "1000000000000000000000",
  "e63e787414b9048478a50733359ecdd7e3647aa6": "1580000000000000000000",
  "e4715956f52f15306ee9506bf82bccc406b3895e": "274944000000000000000",
  "f7f91e7acb5b8129a306877ce3168e6f438b66a1": "176000000000000000000",
  "dcdbbd4e2604e40e1710cc6730289dccfad3892d": "4600000000000000000000",
  "2b5f4b3f1e11707a227aa5e69fa49dded33fb321": "6000000000000000000000",
  "01488ad3da603c4cdd6cb0b7a1e30d2a30c8fc38": "200000000000000000000",
  "841145b44840c946e21dbc190264b8e0d5029369": "300000000000000000000000",
  "bf05070c2c34219311c4548b2614a438810ded6d": "2000000000000000000000",
  "38f387e1a4ed4a73106ef2b462e474e2e3143ad0": "6000000000000000000000",
  "f116b0b4680f53ab72c968ba802e10aa1be11dc8": "20000000000000000000",
  "bea0afc93aae2108a3fac059623bf86fa582a75e": "1700000000000000000000",
  "4c997992036c5b433ac33d25a8ea1dc3d4e4e6d8": "29200000000000000000",
  "ab7e0b83ed9a424c6d1e6a6f87a4dbf06409c7d6": "2400000000000000000000",
  "d71fb130f0150c565269e00efb43902b52a455a6": "200000000000000000000",
  "99b018932bcad355b6792b255db6702dec8ce5dd": "4000086000000000000000",
  "4b904e934bd0cc8b20705f879e905b93ea0ccc30": "2000000000000000000000",
  "672ec42faa8cd69aaa71b32cc7b404881d52ff91": "10000000000000000000000",
  "acbc2d19e06c3babbb5b6f052b6bf7fc37e07229": "200000000000000000000",
  "cea8743341533cb2f0b9c6efb8fda80d77162825": "100000000000000000000",
  "9568b7de755628af359a84543de23504e15e41e6": "40000000000000000000000",
  "6ec96d13bdb24dc7a557293f029e02dd74b97a55": "4000000000000000000000",
  "d95c90ffbe5484864780b867494a83c89256d6e4": "1640000000000000000000",
  "ade6f8163bf7c7bb4abe8e9893bd0cc112fe8872": "327600000000000000000",
  "250eb7c66f869ddf49da85f3393e980c029aa434": "4000000000000000000000",
  "a35c19132cac1935576abfed6c0495fb07881ba0": "2000000000000000000000",
  "d5550caaf743b037c56fd2558a1c8ed235130750": "5347598000000000000000",
  "03097923ba155e16d82f3ad3f6b815540884b92c": "1820000000000000000000",
  "d6d9e30f0842012a7176a917d9d2048ca0738759": "4000000000000000000000",
  "ab9ad36e5c74ce2e96399f57839431d0e79f96ab": "164000000000000000000",
  "75be8ff65e5788aec6b2a52d5fa7b1e7a03ba675": "67720000000000000000",
  "4f6d4737d7a940382487264886697cf7637f8015": "1670000000000000000000",
  "5f7b3bbac16dab831a4a0fc53b0c549dc36c31ca": "1940000000000000000000",
  "d843ee0863ce933e22f89c802d31287b9671e81c": "13370000000000000000",
  "361f3ba9ed956b770f257d3672fe1ff9f7b0240c": "600000000000000000000",
  "6c0ae9f043c834d44271f13406593dfe094f389f": "1517545000000000000000",
  "db34745ede8576b499db01beb7c1ecda85cf4abe": "80000000000000000000",
  "7be8ccb4f11b66ca6e1d57c0b5396221a31ba53a": "20000000000000000000",
  "128b908fe743a434203de294c441c7e20a86ea67": "713304000000000000000",
  "df236bf6abf4f3293795bf0c28718f93e3b1b36b": "1337000000000000000000",
  "14254ea126b52d0142da0a7e188ce255d8c47178": "775000000000000000000",
  "ceed47ca5b899fd1623f21e9bd4db65a10e5b09d": "133196000000000000000",
  "30acd858875fa24eef0d572fc7d62aad0ebddc35": "400000000000000000000",
  "47a281dff64167197855bf6e705eb9f2cef632ea": "1000072000000000000000",
  "297d5dbe222f2fb52531acbd0b013dc446ac7368": "20000000000000000000000",
  "adf85203c8376a5fde9815384a350c3879c4cb93": "1147300000000000000000",
  "c3e0471c64ff35fa5232cc3121d1d38d1a0fb7de": "2000000000000000000000",
  "fdecc82ddfc56192e26f563c3d68cb544a96bfed": "440000000000000000000",
  "2614f42d5da844377578e6b448dc24305bef2b03": "2000000000000000000000",
  "1d96bcd58457bbf1d3c2a46ffaf16dbf7d836859": "171313000000000000000",
  "bd66ffedb530ea0b2e856dd12ac2296c31fe29e0": "200000000000000000000",
  "6e84876dbb95c40b6656e42ba9aea08a993b54dc": "1101932000000000000000",
  "a1c4f45a82e1c478d845082eb18875c4ea6539ab": "200000000000000000000000",
  "2c964849b1f69cc7cea4442538ed87fdf16cfc8f": "2000000000000000000000",
  "45b47105fe42c4712dce6e2a21c05bffd5ea47a9": "2000000000000000000000",
  "31e9c00f0c206a4e4e7e0522170dc81e88f3eb70": "2685000000000000000000",
  "5fe77703808f823e6c399352108bdb2c527cb87c": "1960000000000000000000",
  "2272186ef27dcbe2f5fc373050fdae7f2ace2316": "16100000000000000000000",
  "b7576e9d314df41ec5506494293afb1bd5d3f65d": "20000000000000000000",
  "ac9fff68c61b011efbecf038ed72db97bb9e7281": "9550000000000000000000",
  "cd9529492b5c29e475acb941402b3d3ba50686b0": "1970000000000000000000",
  "f19b39389d47b11b8a2c3f1da9124decffbefaf7": "2000000000000000000000",
  "9e951f6dc5e352afb8d04299d2478a451259bf56": "72004000000000000000",
  "8eb1fbe4e5d3019cd7d30dae9c0d5b4c76fb6331": "2000000000000000000000",
  "29cc804d922be91f5909f348b0aaa5d21b607830": "4000000000000000000000",
  "5c7b9ec7a2438d1e3c7698b545b9c3fd77b7cd55": "1000000000000000000000",
  "a16160851d2b9c349b92e46f829abfb210943595": "1790000000000000000000",
  "eac6b98842542ea10bb74f26d7c7488f698b6452": "20000000000000000000000",
  "57825aeb09076caa477887fbc9ae37e8b27cc962": "100000000000000000000",
  "b35e8a1c0dac7e0e66dbac736a592abd44012561": "14974000000000000000",
  "756b84eb85fcc1f4fcdcc2b08db6a86e135fbc25": "3220000000000000000000",
  "e13b3d2bbfdcbc8772a23315724c1425167c5688": "1032115000000000000000",
  "0a2dcb7a671701dbb8f495728088265873356c8e": "152120000000000000000",
  "03cb4c4f4516c4ff79a1b6244fbf572e1c7fea79": "2740000000000000000000",
  "98ba4e9ca72fddc20c69b4396f76f8183f7a2a4e": "12800000000000000000000",
  "f8087786b42da04ed6d1e0fe26f6c0eefe1e9f5a": "10000000000000000000000",
  "02f7f67209b16a17550c694c72583819c80b54ad": "98400000000000000000",
  "32bb2e9693e4e085344d2f0dbd46a283e3a087fd": "400000000000000000000",
  "9c78963fbc263c09bd72e4f8def74a9475f7055c": "13790000000000000000000",
  "27144ca9a7771a836ad50f803f64d869b2ae2b20": "4000000000000000000000",
  "cc758d071d25a6320af68c5dc9c4f6955ba94520": "6000000000000000000000",
  "cb42b44eb5fd60b5837e4f9eb47267523d1a229c": "865000000000000000000",
  "aaf5b207b88b0de4ac40d747cee06e172df6e745": "31428000000000000000000",
  "52d380511df19d5ec2807bbcb676581b67fd37a3": "13400000000000000000",
  "aa1b3768c16d821f580e76c8e4c8e86d7dc78853": "400000000000000000000",
  "41098a81452317c19e3eef0bd123bbe178e9e9ca": "2800000000000000000000",
  "267148fd72c54f620a592fb92799319cc4532b5c": "410000000000000000000",
  "d7cdbd41fff20df727c70b6255c1ba7606055468": "200000000000000000000",
  "0e33fcbbc003510be35785b52a9c5d216bc005f4": "1880000000000000000000",
  "6727daf5b9d68efcab489fedec96d7f7325dd423": "2000000000000000000000",
  "cd0a161bc367ae0927a92aac9cf6e5086714efca": "2000000000000000000000",
  "612667f172135b950b2cd1de10afdece6857b873": "1000000000000000000000",
  "900194c4b1074305d19de405b0ac78280ecaf967": "1000000000000000000000",
  "51f55ef47e6456a418ab32b9221ed27dba6608ee": "4200000000000000000000",
  "0da532c910e3ac0dfb14db61cd739a93353fd05f": "1336866000000000000000",
  "21df2dcdaf74b2bf803404dd4de6a35eabec1bbd": "6920000000000000000000",
  "f0e7fb9e420a5340d536f40408344feaefc06aef": "1000000000000000000000",
  "6742a2cfce8d79a2c4a51b77747498912245cd6a": "258064000000000000000",
  "8663a241a0a89e70e182c845e2105c8ad7264bcf": "14825507000000000000000",
  "18e113d8177c691a61be785852fa5bb47aeebdaf": "1337000000000000000000",
  "1bec4d02ce85fc48feb62489841d85b170586a9b": "2400000000000000000000",
  "287cf9d0902ef819a7a5f149445bf1775ee8c47c": "16000000000000000000000",
  "28967280214e218a120c5dda37041b111ea36d74": "200000000000000000000",
  "a0b771951ce1deee363ae2b771b73e07c4b5e800": "1400000000000000000000",
  "29f8fba4c30772b057edbbe62ae7420c390572e1": "1000000000000000000000",
  "ee34c7e7995db9f187cff156918cfb6f13f6e003": "1960000000000000000000",
  "916bf7e3c545921d3206d900c24f14127cbd5e70": "18020000000000000000000",
  "93235f340d2863e18d2f4c52996516138d220267": "73800000000000000000",
  "7efec0c6253caf397f71287c1c07f6c9582b5b86": "482839000000000000000",
  "8d2e31b08803b2c5f13d398ecad88528209f6057": "9993000000000000000000",
  "964eab4b276b4cd8983e15ca72b106900fe41fce": "500000000000000000000",
  "eea1e97988de75d821cd28ad6822b22cce988b31": "520000000000000000000",
  "278c0bde630ec393b1e7267fc9d7d97019e4145b": "2000000000000000000000",
  "82e4461eb9d849f0041c1404219e4272c4900ab4": "2000000000000000000000",
  "4a73389298031b8816cca946421c199e18b343d6": "631254000000000000000",
  "9a5af31c7e06339ac8b4628d7c4db0ce0f45c8a4": "500000000000000000000",
  "cb9b5103e4ce89af4f64916150bff9eecb9faa5c": "500000000000000000000",
  "740f641614779dcfa88ed1d425d60db42a060ca6": "998630000000000000000",
  "a4e623451e7e94e7e89ba5ed95c8a83a62ffc4ea": "20000000000000000000",
  "25a500eeec7a662a841552b5168b707b0de21e9e": "10020000000000000000000",
  "185a7fc4ace368d233e620b2a45935661292bdf2": "20000000000000000000000",
  "9b68f67416a63bf4451a31164c92f672a68759e9": "60000000000000000000000",
  "a38b5bd81a9db9d2b21d5ec7c60552cd02ed561b": "6000000000000000000000",
  "61c830f1654718f075ccaba316faacb85b7d120b": "400000000000000000000",
  "8392e53776713578015bff4940cf43849d7dcba1": "153190000000000000000",
  "dc57477dafa42f705c7fe40eae9c81756e0225f1": "500044000000000000000",
  "febc3173bc9072136354002b7b4fb3bfc53f22f1": "370000000000000000000",
  "d78f84e38944a0e0255faece48ba4950d4bd39d2": "5000000000000000000000",
  "a7a3bb6139b0ada00c1f7f1f9f56d994ba4d1fa8": "2000000000000000000000",
  "aa3f29601a1331745e05c42830a15e71938a6237": "1700000000000000000000",
  "bec6640f4909b58cbf1e806342961d607595096c": "1999944000000000000000",
  "9be3c329b62a28b8b0886cbd8b99f8bc930ce3e6": "74500000000000000000",
  "e3eb2c0a132a524f72ccc0d60fee8b41685d39e2": "1970000000000000000000",
  "90b1f370f9c1eb0be0fb8e2b8ad96a416371dd8a": "900000000000000000000",
  "f2742e6859c569d5f2108351e0bf4dca352a48a8": "10000000000000000000000",
  "b134c004391ab4992878337a51ec242f42285742": "2000000000000000000000",
  "ab7416ff32254951cbbc624ec7fb45fc7ecaa872": "340000000000000000000",
  "9795f64319fc17dd0f8261f9d206fb66b64cd0c9": "200000000000000000000",
  "64e03ef070a54703b7184e48276c5c0077ef4b34": "320000000000000000000",
  "3430a16381f869f6ea5423915855e800883525a9": "17900000000000000000000",
  "f4a367b166d2991a2bfda9f56463a09f252c1b1d": "1970000000000000000000",
  "77c4a697e603d42b12056cbba761e7f51d0443f5": "680000000000000000000",
  "153ef58a1e2e7a3eb6b459a80ab2a547c94182a2": "96000000000000000000000",
  "6dbe8abfa1742806263981371bf3d35590806b6e": "20000000000000000000000",
  "4c99dae96481e807c1f99f8b7fbde29b7547c5bf": "150000000000000000000",
  "d5b9d277d8aad20697a51f76e20978996bffe055": "143250000000000000000",
  "0f24105abbdaa03fa6309ef6c188e51f714a6e59": "200000000000000000000",
  "1cb6b2d7cfc559b7f41e6f56ab95c7c958cd0e4c": "1337000000000000000000",
  "f37b426547a1642d8033324814f0ede3114fc212": "401100000000000000000",
  "318f1f8bd220b0558b95fb33100ffdbb640d7ca6": "4000000000000000000000",
  "206d55d5792a514ec108e090599f2a065e501185": "200550000000000000000",
  "11d2247a221e70c2d66d17ee138d38c55ffb8640": "10000000000000000000000",
  "e8de725eca5def805ff7941d31ac1c2e342dfe95": "2462500000000000000000",
  "d561cbbc05515de73ab8cf9eae1357341e7dfdf4": "6000000000000000000000",
  "0455dcec8a7fc4461bfd7f37456fce3f4c3caac7": "400000000000000000000",
  "5161fd49e847f67455f1c8bb7abb36e985260d03": "1200000000000000000000",
  "8e073bad25e42218615f4a0e6b2ea8f8de2230c0": "2402500000000000000000",
  "6c08a6dc0173c7342955d1d3f2c065d62f83aec7": "20000000000000000000",
  "95cb6d8a6379f94aba8b885669562c4d448e56a7": "2000000000000000000000",
  "2805415e1d7fdec6dedfb89e521d10592d743c10": "100000000000000000000",
  "daacdaf42226d15cb1cf98fa15048c7f4ceefe69": "300000000000000000000",
  "e33df4ce80ccb62a76b12bcdfcecc46289973aa9": "6000000000000000000000",
  "8f8cd26e82e7c6defd02dfad07979021cbf7150c": "3000000000000000000000",
  "77a17122fa31b98f1711d32a99f03ec326f33d08": "1700000000000000000000",
  "6f791d359bc3536a315d6382b88311af8ed6da47": "92000000000000000000",
  "de30e49e5ab313214d2f01dcabce8940b81b1c76": "197000000000000000000",
  "cf9be9b9ab86c66b59968e67b8d4dcff46b1814a": "660000000000000000000",
  "7fdfc88d78bf1b285ac64f1adb35dc11fcb03951": "2287900000000000000000",
  "c5134cfbb1df7a20b0ed7057622eeed280947dad": "3800000000000000000000",
  "fa9ec8efe08686fa58c181335872ba698560ecab": "1999944000000000000000",
  "f6a8635757c5e8c134d20d028cf778cf8609e46a": "1459416000000000000000",
  "6265b2e7730f36b776b52d0c9d02ada55d8e3cb6": "1000000000000000000000",
  "6a8cea2de84a8df997fd3f84e3083d93de57cda9": "100007000000000000000",
  "1b7ed974b6e234ce81247498429a5bd4a0a2d139": "2000000000000000000000",
  "9ba53dc8c95e9a472feba2c4e32c1dc4dd7bab46": "1337000000000000000000",
  "d7b740dff8c457668fdf74f6a266bfc1dcb723f9": "20000000000000000000",
  "07bc2cc8eedc01970700efc9c4fb36735e98cd71": "4000000000000000000000",
  "3e1c962063e0d5295941f210dca3ab531eec8809": "3000000000000000000000",
  "b447571dacbb3ecbb6d1cf0b0c8f3838e52324e2": "30199000000000000000",
  "87764e3677eef604cbc59aed24abdc566b09fc25": "3000000000000000000000",
  "03aa622881236dd0f4940c24c324ff8b7b7e2186": "3200000000000000000000",
  "a4a7d306f510cd58359428c0d2f7c3609d5674d7": "3349000000000000000000",
  "3c83c1701db0388b68210d00f5717cd9bd322c6a": "30000000000000000000000",
  "047d5a26d7ad8f8e70600f70a398ddaa1c2db26f": "6000000000000000000000",
  "43767bf7fd2af95b72e9312da9443cb1688e4343": "300000000000000000000",
  "34a85d6d243fb1dfb7d1d2d44f536e947a4cee9e": "20000000000000000000000",
  "65a9dad42e1632ba3e4e49623fab62a17e4d3611": "93120000000000000000",
  "48e0cbd67f18acdb7a6291e1254db32e0972737f": "100007000000000000000",
  "a5de5e434fdcdd688f1c31b6fb512cb196724701": "800000000000000000000",
  "6d63d38ee8b90e0e6ed8f192eda051b2d6a58bfd": "30000000000000000000",
  "b079bb4d9866143a6da72ae7ac0022062981315c": "760000000000000000000",
  "c0413f5a7c2d9a4b8108289ef6ecd271781524f4": "50000000000000000000000",
  "a91a5a7b341f99c535144e20be9c6b3bb4c28e4d": "5431790000000000000000",
  "993f146178605e66d517be782ef0b3c61a4e1925": "7011998000000000000000",
  "966c04781cb5e67dde3235d7f8620e1ab663a9a5": "75800000000000000000000",
  "b3f82a87e59a39d0d2808f0751eb72c2329cdcc5": "5000000000000000000000",
  "9b77ebced7e215f0920e8c2b870024f6ecb2ff31": "1000000000000000000000",
  "fe697ff22ca547bfc95e33d960da605c6763f35b": "1325000000000000000000",
  "480af52076009ca73781b70e43b95916a62203ab": "924171000000000000000",
  "a9dc0424c6969d798358b393b1933a1f51bee00a": "20000000000000000000000",
  "7aba56f63a48bc0817d6b97039039a7ad62fae2e": "600000000000000000000",
  "59d139e2e40c7b97239d23dfaca33858f602d22b": "2000000000000000000000",
  "8d6170ff66978e773bb621bf72b1ba7be3a7f87e": "200000000000000000000",
  "d668523a90f0293d65c538d2dd6c57673710196e": "39500000000000000000",
  "bbb5a0f4802c8648009e8a6998af352cde87544f": "95500000000000000000",
  "fc43829ac787ff88aaf183ba352aadbf5a15b193": "3960000000000000000000",
  "fe22a0b388668d1ae2643e771dacf38a434223cc": "4000304000000000000000",
  "092acb624b08c05510189bbbe21e6524d644ccad": "18200000000000000000",
  "8f0538ed71da1155e0f3bde5667ceb84318a1a87": "1940000000000000000000",
  "06994cd83aa2640a97b2600b41339d1e0d3ede6c": "250000000000000000000",
  "9d460c1b379ddb19a8c85b4c6747050ddf17a875": "3340000000000000000000",
  "77a769fafdecf4a638762d5ba3969df63120a41d": "2000000000000000000000",
  "5f375b86600c40cca8b2676b7a1a1d1644c5f52c": "78838000000000000000",
  "15ee0fc63ebf1b1fc49d7bb38f8863823a2e17d2": "1910000000000000000000",
  "6651736fb59b91fee9c93aa0bd6ea2f7b2506180": "500000000000000000000",
  "361d9ed80b5bd27cf9f1226f26753258ee5f9b3f": "3530900000000000000000",
  "c9b6b686111691ee6aa197c7231a88dc60bd295d": "500000000000000000000",
  "e9b4a4853577a9dbcc2e795be0310d1bed28641a": "1000000000000000000000",
  "36758e049cd98bcea12277a676f9297362890023": "4000000000000000000000",
  "6bb50813146a9add42ee22038c9f1f7469d47f47": "200200000000000000000",
  "6de4b581385cf7fc9fe8c77d131fe2ee7724c76a": "2308840000000000000000",
  "d2a5a024230a57ccc666760b89b0e26cafd189c7": "49997115000000000000000",
  "65af9087e05167715497c9a5a749189489004def": "835000000000000000000",
  "ead21c1deccfbf1c5cd96688a2476b69ba07ce4a": "72800000000000000000",
  "e308435204793764f5fcbe65eb510f5a744a655a": "200000000000000000000",
  "9376dce2af2ec8dcda741b7e7345664681d93668": "1000000000000000000000",
  "a1b47c4d0ed6018842e6cfc8630ac3a3142e5e6b": "20000000000000000000",
  "e2198c8ca1b399f7521561fd5384a7132fba486b": "1015200000000000000000",
  "92c13fe0d6ce87fd50e03def9fa6400509bd7073": "40000000000000000000",
  "7517f16c28d132bb40e3ba36c6aef131c462da17": "18200000000000000000",
  "6a023af57d584d845e698736f130db9db40dfa9a": "98800000000000000000",
  "1518627b88351fede796d3f3083364fbd4887b0c": "16000000000000000000000",
  "f5b6e9061a4eb096160777e26762cf48bdd8b55d": "254030000000000000000",
  "28073efc17d05cab3195c2db332b61984777a612": "1000000000000000000000",
  "f06a854a3c5dc36d1c49f4c87d6db333b57e4add": "10000000000000000000000",
  "9225983860a1cb4623c72480ac16272b0c95e5f5": "2000000000000000000000",
  "5260dc51ee07bddaababb9ee744b393c7f4793a6": "34040000000000000000",
  "0f127bbf8e311caea2ba502a33feced3f730ba42": "188000000000000000000",
  "17d521a8d9779023f7164d233c3b6420ffd223ed": "20000000000000000000",
  "8c2b7d8b608d28b77f5caa9cd645242a823e4cd9": "1820000000000000000000",
  "6e866d032d405abdd65cf651411d803796c22311": "2000000000000000000000",
  "dc51b2dc9d247a1d0e5bc36ca3156f7af21ff9f6": "1000000000000000000000",
  "c84d9bea0a7b9f140220fd8b9097cfbfd5edf564": "123047000000000000000",
  "ff86e5e8e15b53909600e41308dab75f0e24e46b": "902400000000000000000",
  "d7164aa261c09ad9b2b5068d453ed8eb6aa13083": "3000000000000000000000",
  "76aaf8c1ac012f8752d4c09bb46607b6651d5ca8": "20000000000000000000",
  "41786a10d447f484d33244ccb7facd8b427b5b8c": "1000000000000000000000",
  "2e0c57b47150f95aa6a7e16ab9b1cbf54328979a": "100000000000000000000",
  "3f747237806fed3f828a6852eb0867f79027af89": "1500000000000000000000",
  "a568db4d57e4d67462d733c69a9e0fe26e218327": "1096140000000000000000",
  "1f88f8a1338fc7c10976abcd3fb8d38554b5ec9c": "13400000000000000000",
  "d1ea4d72a67b5b3e0f315559f52bd0614d713069": "2000000000000000000000",
  "bfaeb91067617dcf8b44172b02af615674835dba": "160661000000000000000",
  "b71a13ba8e95167b80331b52d69e37054fe7a826": "200000000000000000000",
  "b67a80f170197d96cdcc4ab6cba627b4afa6e12c": "2400000000000000000000",
  "35af040a0cc2337a76af288154c7561e1a233349": "1000000000000000000000",
  "c86190904b8d079ec010e462cbffc90834ffaa5c": "10100000000000000000000",
  "383304dd7a5720b29c1a10f60342219f48032f80": "5600000000000000000000",
  "191313525238a21c767457a91374f02200c55448": "116400000000000000000",
  "cc4a2f2cf86cf3e43375f360a4734691195f1490": "1348127000000000000000",
  "4e020779b5ddd3df228a00cb48c2fc979da6ae38": "2000000000000000000000",
  "e206fb7324e9deb79e19903496d6961b9be56603": "100000000000000000000",
  "3ae160e3cd60ae31b9d6742d68e14e76bd96c517": "30000000000000000000",
  "1f7d8e86d6eeb02545aad90e91327bd369d7d2f3": "20000000000000000000",
  "68c7d1711b011a33f16f1f55b5c902cce970bdd7": "152000000000000000000",
  "637be71b3aa815ff453d5642f73074450b64c82a": "2000000000000000000000",
  "1584a2c066b7a455dbd6ae2807a7334e83c35fa5": "130000000000000000000",
  "9c05e9d0f0758e795303717e31da213ca157e686": "1000000000000000000000",
  "4f1a2da54a4c6da19d142412e56e815741db2325": "100000000000000000000",
  "9a4ca8b82117894e43db72b9fa78f0b9b93ace09": "50000000000000000000",
  "26c99f8849c9802b83c861217fd07a9e84cdb79d": "300000000000000000000",
  "45c0d19f0b8e054f9e893836d5ecae7901af2812": "5000000000000000000000",
  "00dc01cbf44978a42e8de8e436edf94205cfb6ec": "1458440000000000000000",
  "de7dee220f0457a7187d56c1c41f2eb00ac56021": "629924000000000000000",
  "1c128bd6cda5fca27575e4b43b3253c8c4172afe": "2000000000000000000000",
  "666746fb93d1935c5a3c684e725010c4fad0b1d8": "20000000000000000000",
  "51d78b178d707e396e8710965c4f41b1a1d9179d": "110600000000000000000",
  "68f7573cd457e14c03fea43e302d30347c10705c": "5000000000000000000000",
  "9d30cb237bc096f17036fc80dd21ca68992ca2d9": "30380000000000000000000",
  "fbcfcc4a7b0f26cf26e9f3332132e2fc6a230766": "8000000000000000000000",
  "b166e37d2e501ae73c84142b5ffb5aa655dd5a99": "1999000000000000000000",
  "6df24f6685a62f791ba337bf3ff67e91f3d4bc3a": "2166000000000000000000",
  "92e435340e9d253c00256389f52b067d55974e76": "268000000000000000000",
  "ea53d26564859d9e90bb0e53b7abf560e0162c38": "400000000000000000000",
  "e26657f0ed201ea2392c9222b80a7003608ddf30": "40000000000000000000",
  "f4177a0d85d48b0e264211ce2aa2efd3f1b47f08": "3593425000000000000000",
  "9d47ba5b4c8505ad8da42934280b61a0e1e8b971": "100000000000000000000",
  "63c2a3d235e5eeabd0d4a6afdb89d94627396495": "1241620000000000000000",
  "446a8039cecf9dce4879cbcaf3493bf545a88610": "7000000000000000000000",
  "7fa37ed67887751a471f0eb306be44e0dbcd6089": "1060000000000000000000",
  "26d4a16891f52922789217fcd886f7fce296d400": "2000000000000000000000",
  "487e108502b0b189ef9c8c6da4d0db6261eec6c0": "1910000000000000000000",
  "7484d26becc1eea8c6315ec3ee0a450117dc86a0": "12000000000000000000000",
  "ad9e97a0482f353a05c0f792b977b6c7e811fa5f": "200000000000000000000",
  "2273bad7bc4e487622d175ef7a66988b6a93c4ee": "20000000000000000000",
  "3b93b16136f11eaf10996c95990d3b2739ccea5f": "10000000000000000000000",
  "f3f1fa3918ca34e2cf7e84670b1f4d8eca160db3": "680000000000000000000",
  "88a2154430c0e41147d3c1fee3b3b006f851edbd": "999972000000000000000",
  "25185f325acf2d64500698f65c769ddf68301602": "5000000000000000000000",
  "e9cafe41a5e8bbd90ba02d9e06585b4eb546c57f": "2000000000000000000000",
  "95681cdae69b2049ce101e325c759892cac3f811": "2857600000000000000000",
  "475066f9ad26655196d5535327bbeb9b7929cb04": "3040000000000000000000",
  "6685fd2e2544702c360b8bb9ee78f130dad16da5": "2000000000000000000000",
  "45e68db94c7d0ab7ac41857a71d67147870f4e71": "400000000000000000000000",
  "4ad95d188d6464709add2555fb4d97fe1ebf311f": "346000000000000000000",
  "73bedd6fda7ba3272185087b6351fc133d484e37": "5057200000000000000000",
  "1ea4715504c6af107b0194f4f7b1cb6fcccd6f4b": "590598000000000000000",
  "77306ffe2e4a8f3ca826c1a249f7212da43aeffd": "20000000000000000000000",
  "eb453f5a3adddd8ab56750fadb0fe7f94d9c89e7": "20000000000000000000",
  "7201d1c06920cd397ae8ad869bcda6e47ffb1b5a": "20000000000000000000",
  "821cb5cd05c7ef909fe1be60733d8963d760dc41": "4000000000000000000000",
  "496e319592b341eaccd778dda7c8196d54cac775": "9250000000000000000000",
  "88609e0a465b6e99fce907166d57e9da0814f5c8": "20000000000000000000000",
  "c7ec62b804b1f69b1e3070b5d362c62fb309b070": "13068074000000000000000",
  "3eb9ef06d0c259040319947e8c7a6812aa0253d8": "167000000000000000000",
  "cbf37ff854a2f1ce53934494777892d3ec655782": "10000000000000000000000",
  "02b1af72339b2a2256389fd64607de24f0de600a": "2000000000000000000000",
  "a8beb91c2b99c8964aa95b6b4a184b1269fc3483": "400000000000000000000",
  "922a20c79a1d3a26dd3829677bf1d45c8f672bb6": "4000000000000000000000",
  "c5843399d150066bf7979c34ba294620368ad7c0": "200000000000000000000",
  "8cd0cd22e620eda79c0461e896c93c44837e2968": "2000000000000000000000",
  "6170dd0687bd55ca88b87adef51cfdc55c4dd458": "2005160000000000000000",
  "eed384ef2d41d9d203974e57c12328ea760e08ea": "1000000000000000000000",
  "b129a5cb7105fe810bd895dc7206a991a4545488": "30000000000000000000",
  "3872f48dc5e3f817bc6b2ad2d030fc5e0471193d": "4000000000000000000000",
  "514b7512c9ae5ea63cbf11715b63f21e18d296c1": "1999944000000000000000",
  "7ab256b204800af20137fabcc916a23258752501": "20000000000000000000000",
  "fc66faba277f4b5de64ad45eb19c31e00ced3ed5": "5640000000000000000000",
  "39824f8bced176fd3ea22ec6a493d0ccc33fc147": "4000000000000000000000",
  "e338e859fe2e8c15554848b75caecda877a0e832": "1801800000000000000000",
  "e53c68796212033e4e6f9cff56e19c461eb454f9": "1000000000000000000000",
  "8461ecc4a6a45eb1a5b947fb86b88069b91fcd6f": "2000000000000000000000",
  "6b4b99cb3fa9f7b74ce3a48317b1cd13090a1a7a": "57300000000000000000",
  "97de21e421c37fe4b8025f9a51b7b390b5df7804": "80000000000000000000000",
  "d25aecd7eb8bd6345b063b5dbd271c77d3514494": "1820000000000000000000",
  "57b23d6a1adc06c652a779c6a7fb6b95b9fead66": "200000000000000000000",
  "0d658014a199061cf6b39433140303c20ffd4e5a": "8200000000000000000000",
  "30eac740e4f02cb56eef0526e5d300322600d03e": "1970000000000000000000",
  "4eead40aad8c73ef08fc84bc0a92c9092f6a36bf": "26740000000000000000",
  "30f7d025d16f7bee105580486f9f561c7bae3fef": "500000000000000000000",
  "0977bfba038a44fb49b03970d8d8cf2cb61f8b25": "420000000000000000000",
  "b14bbeff70720975dc6191b2a44ff49f2672873c": "143000000000000000000",
  "d588c3a5df228185d98ee7e60748255cdea68b01": "4000000000000000000000",
  "225d35faedb391c7bc2db7fa9071160405996d00": "167774000000000000000",
  "c0e457bd56ec36a1246bfa3230fff38e5926ef22": "1940000000000000000000",
  "2a9c57fe7b6b138a920d676f3c76b6c2a0eef699": "9400000000000000000000",
  "36df8f883c1273ec8a171f7a33cfd649b1fe6075": "227290000000000000000",
  "234f46bab73fe45d31bf87f0a1e0466199f2ebac": "485000000000000000000",
  "a2e1b8aa900e9c139b3fa122354f6156d92a18b1": "500000000000000000000",
  "517cd7608e5d0d83a26b717f3603dac2277dc3a4": "2000000000000000000000",
  "75f7539d309e9039989efe2e8b2dbd865a0df088": "2460000000000000000000",
  "4b792e29683eb586e394bb33526c6001b397999e": "600000000000000000000",
  "a34f9d568bf7afd94c2a5b8a5ff55c66c4087999": "2444000000000000000000",
  "4b31bf41abc75c9ae2cd8f7f35163b6e2b745054": "382000000000000000000",
  "e35453eef2cc3c7a044d0ac134ba615908fa82ee": "147510000000000000000",
  "7aa79ac04316cc8d08f20065baa6d4142897d54e": "1400000000000000000000",
  "f1dc8ac81042c67a9c3c6792b230c46ac016ca10": "200000000000000000000",
  "2bb366b9edcb0da680f0e10b3b6e28748190d6c3": "5799400000000000000000",
  "a567770b6ae320bdde50f904d663e746a61dace6": "2000000000000000000000",
  "d9d42fd13ebd4bf69cac5e9c7e82483ab46dd7e9": "5348000000000000000000",
  "27830c5f6023afaaf79745676c204a0faccda0ba": "240000000000000000000",
  "3cb179cb4801a99b95c3b0c324a2bdc101a65360": "26000000000000000000",
  "976e3ceaf3f1af51f8c29aff5d7fa21f0386d8ee": "240000000000000000000",
  "752a5ee232612cd3005fb26e5b597de19f776be6": "5460000000000000000000",
  "7d5aa33fc14b51841a06906edb2bb49c2a117269": "300048000000000000000",
  "55ca6abe79ea2497f46fdbb830346010fe469cbe": "5730000000000000000000",
  "6bec311ad05008b4af353c958c40bd06739a3ff3": "16380000000000000000000",
  "30e9698cf1e08a9d048bd8d8048f28be7ed9409f": "6685000000000000000000",
  "9afa536b4c66bc38d875c4b30099d9261fdb38eb": "205981000000000000000",
  "6b63a2dfb2bcd0caec0022b88be30c1451ea56aa": "809021000000000000000",
  "d07be0f90997caf903c8ac1d53cde904fb190741": "1000200000000000000000",
  "893cdddf5377f3c751bf2e541120045a47cba101": "100000000000000000000",
  "c1cdc601f89c0428b31302d187e0dc08ad7d1c57": "6000000000000000000000",
  "8f8acb107607388479f64baaabea8ff007ada97d": "27281800000000000000000",
  "88bc43012edb0ea9f062ac437843250a39b78fbb": "20000000000000000000000",
  "fcfc3a5004d678613f0b36a642269a7f371c3f6a": "1000000000000000000000",
  "f509557e90183fbf0f0651a786487bcc428ba175": "194000000000000000000",
  "e3d915eda3b825d6ee4af9328d32ac18ada35497": "500000000000000000000",
  "f237ef05261c34d79cc22b860de0f17f793c3860": "200000000000000000000",
  "a3a2e319e7d3a1448b5aa2468953160c2dbcba71": "2000000000000000000000",
  "3a368efe4ad786e26395ec9fc6ad698cae29fe01": "632200000000000000000",
  "8e3240b0810e1cf407a500804740cf8d616432a4": "40309000000000000000",
  "5691dd2f6745f20e22d2e1d1b955aa2903d65656": "1969606000000000000000",
  "5f93ff832774db5114c55bb4bf44ccf3b58f903f": "192026650000000000000000",
  "2c1cc6e18c152488ba11c2cc1bcefa2df306abd1": "1670000000000000000000",
  "bde9786a84e75b48f18e726dd78d70e4af3ed802": "5730000000000000000000",
  "79551cede376f747e3716c8d79400d766d2e0195": "46250000000000000000000",
  "49f028395b5a86c9e07f7778630e4c2e3d373a77": "122735000000000000000",
  "6a3694424c7cc6b8bcd9bccaba540cc1f5df18d7": "2000000000000000000000",
  "068e29b3f191c812a6393918f71ab933ae6847f2": "1999944000000000000000",
  "6e64e6129f224e378c0e6e736a7e7a06c211e9ec": "1000000000000000000000",
  "c4c15318d370c73318cc18bdd466dbaa4c6603bf": "19700000000000000000",
  "8035bcffaefdeeea35830c497d14289d362023de": "300000000000000000000",
  "a997dfc7986a27050848fa1c64d7a7d6e07acca2": "143000000000000000000",
  "2fe13a8d0785de8758a5e41876c36e916cf75074": "4000000000000000000000",
  "6f24c9af2b763480515d1b0951bb77a540f1e3f9": "1970000000000000000000",
  "4c23b370fc992bb67cec06e26715b62f0b3a4ac3": "10000000000000000000000",
  "4ac07673e42f64c1a25ec2fa2d86e5aa2b34e039": "2000000000000000000000",
  "117db836377fe15455e02c2ebda40b1ceb551b19": "6000000000000000000000",
  "ef1c0477f1184d60accab374d374557a0a3e10f3": "152000000000000000000",
  "99fe0d201228a753145655d428eb9fd94985d36d": "1939268000000000000000",
  "b3731b046c8ac695a127fd79d0a5d5fa6ae6d12e": "1998000000000000000000",
  "dce30c31f3ca66721ecb213c809aab561d9b52e4": "2000000000000000000000",
  "ddd69c5b9bf5eb5a39cee7c3341a120d973fdb34": "1987730000000000000000",
  "216e41864ef98f060da08ecae19ad1166a17d036": "5730000000000000000000",
  "6a53d41ae4a752b21abed5374649953a513de5e5": "2000000000000000000000",
  "20dd8fcbb46ea46fe381a68b8ca0ea5be21fe9a5": "2000000000000000000000",
  "19732bf973055dbd91a4533adaa2149a91d38380": "2000000000000000000000",
  "51ea1c0934e3d04022ed9c95a087a150ef705e81": "6280000000000000000000",
  "a0de5c601e696635c698b7ae9ca4539fc7b941ec": "346150000000000000000",
  "94e1f5cb9b8abace03a1a6428256553b690c2355": "20000000000000000000",
  "a539b4a401b584dfe0f344b1b422c65543167e2e": "200000000000000000000",
  "50584d9206a46ce15c301117ee28f15c30e60e75": "13400000000000000000",
  "856eb204241a87830fb229031343dc30854f581a": "1000000000000000000000",
  "9dd46b1c6d3f05e29e9c6f037eed9a595af4a9aa": "500000000000000000000",
  "8925da4549e15155e57a628522cea9dddf627d81": "1000070000000000000000",
  "a89df34859edd7c820db887740d8ff9e15157c7b": "2000000000000000000000",
  "ad9f4c890a3b511cee51dfe6cfd7f1093b76412c": "506600000000000000000",
  "f8c7f34a38b31801da43063477b12b27d0f203ff": "494800000000000000000",
  "a642501004c90ea9c9ed1998ba140a4cd62c6f5f": "250543000000000000000",
  "508cf19119db70aa86454253da764a2cb1b2be1a": "1000000000000000000000",
  "2979741174a8c1ea0b7f9edf658177859417f512": "461283000000000000000",
  "654f524847b3a6acc0d3d5f1f362b603edf65f96": "8000000000000000000000",
  "5cf18fa7c8a7c0a2b3d5efd1990f64ddc569242c": "1000000000000000000000",
  "17e82e7078dc4fd9e879fb8a50667f53a5c54591": "200000000000000000000",
  "8b07d050754dc9ba230db01c310afdb5395aa1b3": "118080000000000000000",
  "5f77a107ab1226b3f95f10ee83aefc6c5dff3edc": "500000000000000000000",
  "475a6193572d4a4e59d7be09cb960ddd8c530e2f": "667323000000000000000",
  "6470a4f92ec6b0fccd01234fa59023e9ff1f3aac": "3000000000000000000000",
  "2fbcef3384d420e4bf61a0669990bc7054f1a5af": "2000000000000000000000",
  "bbabf6643beb4bd01c120bd0598a0987d82967d1": "3342500000000000000000",
  "41a2f2e6ecb86394ec0e338c0fc97e9c5583ded2": "2009400000000000000000",
  "fb9473cf7712350a1fa0395273fc80560752e4fb": "123300000000000000000",
  "38b2197106123387a0d4de368431a8bacdda30e2": "20000000000000000000",
  "5ed56115bd6505a88273df5c56839470d24a2db7": "65601000000000000000",
  "523f6d64690fdacd942853591bb0ff20d3656d95": "1820000000000000000000",
  "55caff4bba04d220c9a5d2018672ec85e31ef83e": "2000000000000000000000",
  "65af8d8b5b1d1eedfa77bcbc96c1b133f83306df": "98000000000000000000",
  "7456c5b2c5436e3e571008933f1805ccfe34e9ec": "1000000000000000000000",
  "a6eebbe464d39187bf80ca9c13d72027ec5ba8be": "3000000000000000000000",
  "dd35cfdbcb993395537aecc9f59085a8d5ddb6f5": "1000000000000000000000",
  "98e2b6d606fd2d6991c9d6d4077fdf3fdd4585da": "901520000000000000000",
  "860f5ffc10de767ded807f71e861d647dfd219b1": "10000000000000000000000",
  "1a644a50cbc2aee823bd2bf243e825be4d47df02": "100007000000000000000",
  "a8455b411765d6901e311e726403091e42c56683": "3380000000000000000000",
  "3a86ee94862b743dd34f410969d94e2c5652d4ad": "201610000000000000000",
  "a57360f002e0d64d2d74457d8ca4857ee00bcddf": "335780000000000000000",
  "e59b3bd300893f97233ef947c46f7217e392f7e9": "1000000000000000000000",
  "9f3a74fd5e7edcc1162993171381cbb632b7cff0": "10000000000000000000000",
  "675d5caa609bf70a18aca580465d8fb7310d1bbb": "20000000000000000000000",
  "77f609ca8720a023262c55c46f2d26fb3930ac69": "17300000000000000000",
  "f8ac4a39b53c11307820973b441365cffe596f66": "2000000000000000000000",
  "112634b4ec30ff786e024159f796a57939ea144e": "1999944000000000000000",
  "49d2c28ee9bc545eaaf7fd14c27c4073b4bb5f1a": "1474134000000000000000",
  "91cc46aa379f856a6640dccd5a648a7902f849d9": "200000000000000000000",
  "b46440c797a556e04c7d9104660491f96bb076bf": "14900000000000000000",
  "e5968797468ef767101b761d431fce14abffdbb4": "8040000000000000000000",
  "c0895efd056d9a3a81c3da578ada311bfb9356cf": "200000000000000000000",
  "76846f0de03b5a76971ead298cdd08843a4bc6c6": "15500000000000000000",
  "5f708eaf39d823946c51b3a3e9b7b3c003e26341": "1820000000000000000000",
  "24f7450ddbf18b020feb1a2032d9d54b633edf37": "50000000000000000000",
  "cae3a253bcb2cf4e13ba80c298ab0402da7c2aa0": "5400000000000000000000",
  "91e8810652e8e6161525d63bb7751dc20f676076": "725000000000000000000",
  "543629c95cdef428ad37d453ca9538a9f90900ac": "43250000000000000000000",
  "6e79edd4845b076e4cd88d188b6e432dd93f35aa": "955000000000000000000",
  "bd325d4029e0d8729f6d399c478224ae9e7ae41e": "3880000000000000000000",
  "42cecfd2921079c2d7df3f08b07aa3beee5e219a": "1000000000000000000000",
  "3690246ba3c80679e22eac4412a1aefce6d7cd82": "20000000000000000000000",
  "577aeee8d4bc08fc97ab156ed57fb970925366be": "333046000000000000000",
  "fe00bf439911a553982db638039245bcf032dbdc": "394000000000000000000",
  "91f624b24a1fa5a056fe571229e7379db14b9a1e": "11999974000000000000000",
  "f206d328e471d0117b246d2a4619827709e96df3": "3001000000000000000000",
  "073f1ed1c9c3e9c52a9b0249a5c1caa0571fdf05": "70400000000000000000",
  "f56048dd2181d4a36f64fcecc6215481e42abc15": "200000000000000000000",
  "ef76a4cd8febcbc9b818f17828f8d93473f3f3cb": "4000000000000000000000",
  "1031e0ecb54985ae21af1793950dc811888fde7c": "20000000000000000000",
  "8e0fee38685a94aabcd7ce857b6b1409824f75b8": "500000000000000000000",
  "f0cbef84e169630098d4e301b20208ef05846ac9": "259084000000000000000",
  "bbca65b3266ea2fb73a03f921635f912c7bede00": "1970000000000000000000",
  "0aec2e426ed6cc0cf3c249c1897eac47a7faa9bd": "200000000000000000000",
  "b8f30758faa808dbc919aa7b425ec922b93b8129": "1000076000000000000000",
  "936dcf000194e3bff50ac5b4243a3ba014d661d8": "10000000000000000000000",
  "b14ddb0386fb606398b8cc47565afae00ff1d66a": "2973024000000000000000",
  "2ec95822eb887bc113b4712a4dfd7f13b097b5e7": "1000000000000000000000",
  "0136a5af6c3299c6b5f005fdaddb148c070b299b": "20368000000000000000",
  "37cb868d2c3f95b257611eb34a4188d58b749802": "2000000000000000000000",
  "cd7f09d7ed66d0c38bc5ad4e32b7f2b08dc1b30d": "1148000000000000000000",
  "b5fa8184e43ed3e0b8ab91216461b3528d84fd09": "2680000000000000000000",
  "3dbf0dbfd77890800533f09dea8301b9f025d2a6": "1000000000000000000000",
  "b553d25d6b5421e81c2ad05e0b8ba751f8f010e3": "2000000000000000000000",
  "dbf8b13967f55125272de0562536c450ba5655a0": "2046830000000000000000",
  "0f6e840a3f2a24647d8e43e09d45c7c335df4248": "2500000000000000000000",
  "fa2fd29d03fee9a07893df3a269f56b72f2e1e64": "10000000000000000000000",
  "8b57b2bc83cc8d4de331204e893f2f3b1db1079a": "40000000000000000000",
  "7f541491d2ac00d2612f94aa7f0bcb014651fbd4": "376000000000000000000",
  "4f4a9be10cd5d3fb5de48c17be296f895690645b": "40000000000000000000000",
  "45d1c9eedf7cab41a779057b79395f5428d80528": "2000000000000000000000",
  "662334814724935b7931ddca6100e00d467727cd": "637000000000000000000",
  "2c52c984102ee0cd3e31821b84d408930efa1ac7": "2000000000000000000000",
  "000d836201318ec6899a67540690382780743280": "200000000000000000000",
  "81498ca07b0f2f17e8bbc7e61a7f4ae7be66b78b": "101600000000000000000",
  "7860a3de38df382ae4a4dce18c0c07b98bce3dfa": "1000000000000000000000",
  "5e8e4df18cf0af770978a8df8dac90931510a679": "2000000000000000000000",
  "05d68dad61d3bbdfb3f779265c49474aff3fcd30": "39399000000000000000",
  "96eafbf2fb6f4db9a436a74c45b5654452e23819": "20000000000000000000",
  "d7d7f2caa462a41b3b30a34aeb3ba61010e2626f": "2000000000000000000000",
  "0b71f554122469ef978e2f1fefd7cbb410982772": "3880000000000000000000",
  "504666ce8931175e11a5ed11c1dcaa06e57f4e66": "11792000000000000000000",
  "d00f067286c0fbd082f9f4a61083ec76deb3cee6": "1000000000000000000000",
  "02e4cb22be46258a40e16d4338d802fffd00c151": "379786000000000000000",
  "1c13d38637b9a47ce79d37a86f50fb409c060728": "1337000000000000000000",
  "e30212b2011bb56bdbf1bc35690f3a4e0fd905ea": "8022000000000000000000",
  "1df6911672679bb0ef3509038c0c27e394fdfe30": "540000000000000000000",
  "2b8fe4166e23d11963c0932b8ade8e0145ea0770": "43250000000000000000000",
  "6509eeb1347e842ffb413e37155e2cbc738273fd": "2000000000000000000000",
  "8b7e9f6f05f7e36476a16e3e7100c9031cf404af": "1000000000000000000000",
  "bec8caf7ee49468fee552eff3ac5234eb9b17d42": "2000000000000000000000",
  "38898bbb4553e00bbfd0cf268b2fc464d154add5": "320000000000000000000",
  "cbb3189e4bd7f45f178b1c30c76e26314d4a4b0a": "295007000000000000000",
  "be1cd7f4c472070968f3bde268366b21eeea8321": "4300000000000000000000",
  "976a18536af41874426308871bcd1512a775c9f8": "10000000000000000000000",
  "e9c758f8da41e3346e4350e5ac3976345c6c1082": "1930050000000000000000",
  "64ec8a5b743f3479e707dae9ee20ddaa4f40f1d9": "200000000000000000000",
  "9e01765aff08bc220550aca5ea2e1ce8e5b09923": "1000000000000000000000",
  "ba0f39023bdb29eb1862a9f9059cab5d306e662f": "2000000000000000000000",
  "2baf8d6e221174124820ee492b9459ec4fadafbb": "2000000000000000000000",
  "655d5cd7489629e2413c2105b5a172d933c27af8": "4040060000000000000000",
  "badc2aef9f5951a8d78a6b35c3d0b3a4e6e2e739": "6000000000000000000000",
  "e64f6e1d6401b56c076b64a1b0867d0b2f310d4e": "51570000000000000000",
  "7a8563867901206f3f2bf0fa3e1c8109cabccd85": "137000000000000000000",
  "d17fbe22d90462ed37280670a2ea0b3086a0d6d6": "199955000000000000000",
  "e96d7d4cdd15553a4e4d316d6d6480ca3cea1e38": "12200000000000000000000",
  "f04d2c91efb6e9c45ffbe74b434c8c5f2b028f1f": "1000000000000000000000",
  "81164deb10814ae08391f32c08667b6248c27d7a": "394000000000000000000",
  "7f5ae05ae0f8cbe5dfe721f044d7a7bef4c27997": "60000000000000000000",
  "c982586d63b0d74c201b1af8418372e30c7616be": "100000000000000000000",
  "64cf0935bf19d2cebbecd8780d27d2e2b2c34166": "1970000000000000000000",
  "cd566ad7b883f01fd3998a9a58a9dee4724ddca5": "58848000000000000000",
  "9da609fa3a7e6cf2cc0e70cdabe78dc4e382e11e": "1200000000000000000000",
  "0d69100c395ce6c5eaadf95d05d872837ededd21": "400000000000000000000",
  "fe91eccf2bd566afa11696c5049fa84c69630a52": "1940000000000000000000",
  "005d0ee8155ec0a6ff6808552ca5f16bb5be323a": "197000000000000000000",
  "3e5cb8928c417825c03a3bfcc52183e5c91e42d7": "4264790000000000000000",
  "9c1b771f09af882af0643083de2aa79dc097c40e": "2480000000000000000000",
  "eba388b0da27c87b1cc0eac6c57b2c5a0b459c1a": "6800000000000000000000",
  "7529f3797bb6a20f7ea6492419c84c867641d81c": "2000000000000000000000",
  "532a7da0a5ad7407468d3be8e07e69c7dd64e861": "500000000000000000000",
  "de82cc8d4a1bb1d9434392965b3e80bad3c03d4f": "1477500000000000000000",
  "4a82694fa29d9e213202a1a209285df6e745c209": "4000000000000000000000",
  "3e53ff2107a8debe3328493a92a586a7e1f49758": "23143470000000000000000",
  "b2ddb786d3794e270187d0451ad6c8b79e0e8745": "400000000000000000000",
  "6ebcf9957f5fc5e985add475223b04b8c14a7aed": "1730000000000000000000",
  "c5c7590b5621ecf8358588de9b6890f2626143f1": "3000000000000000000000",
  "ae4f122e35c0b1d1e4069291457c83c07f965fa3": "1000000000000000000000",
  "47885ababedf4d928e1c3c71d7ca40d563ed595f": "1820000000000000000000",
  "78ce3e3d474a8a047b92c41542242d0a08c70f99": "10000000000000000000000",
  "6134d942f037f2cc3d424a230c603d67abd3edf7": "2000000000000000000000",
  "1360e87df24c69ee6d51c76e73767ffe19a2131c": "92000000000000000000",
  "5fd1c3e31778276cb42ea740f5eae9c641dbc701": "194000000000000000000",
  "98397342ec5f3d4cb877e54ef5d6f1d366731bd4": "5910000000000000000000",
  "6d4b5c05d06a20957e1748ab6df206f343f92f01": "10020475000000000000000",
  "e6115b13f9795f7e956502d5074567dab945ce6b": "100000000000000000000000",
  "23730c357a91026e44b1d0e2fc2a51d071d8d77b": "4000000000000000000000",
  "fae881937047895a660cf229760f27e66828d643": "182000000000000000000",
  "ff3ef6ba151c21b59986ae64f6e8228bc9a2c733": "2000000000000000000000",
  "dfbd4232c17c407a980db87ffbcda03630e5c459": "553150000000000000000",
  "4429a29fee198450672c0c1d073162250bec6474": "999200000000000000000",
  "7e8f96cc29f57b0975120cb593b7dd833d606b53": "197000000000000000000",
  "5ed3f1ebe2ae6756b5d8dc19cad02c419aa5778b": "0",
  "daa776a6754469d7b9267a89b86725e740da0fa0": "1970000000000000000000",
  "139e479764b499d666208c4a8a047a97043163dd": "598880000000000000000",
  "5ad5e420755613886f35aa56ac403eebdfe4b0d0": "80000000000000000000000",
  "3fe801e61335c5140dc7eda2ef5204460a501230": "2000000000000000000000",
  "ce8a6b6d5033b1498b1ffeb41a41550405fa03a2": "4000000000000000000000",
  "26c2ffc30efdc5273e76183a16c2698d6e531286": "776000000000000000000",
  "71ec3aec3f8f9221f9149fede06903a0f9a232f2": "200000000000000000000",
  "ef35f6d4b1075e6aa139151c974b2f4658f70538": "1111111000000000000000",
  "26a68eab905a8b3dce00e317308225dab1b9f6b8": "1980000000000000000000",
  "63f5b53d79bf2e411489526530223845fac6f601": "30000000000000000000000",
  "481115296ab7db52492ff7b647d63329fb5cbc6b": "16100000000000000000000",
  "f19f193508393e4d2a127b20b2031f39c82581c6": "3500088000000000000000",
  "500e34cde5bd9e2b71bb92d7cf55eee188d5fa0c": "5348000000000000000000",
  "65ea67ad3fb56ad5fb94387dd38eb383001d7c68": "100000000000000000000",
  "7f9f9b56e4289dfb58e70fd5f12a97b56d35c6a5": "1970000000000000000000",
  "60be6f953f2a4d25b6256ffd2423ac1438252e4e": "150000000000000000000",
  "ac1dfc984b71a19929a81d81f04a7cbb14073703": "600000000000000000000",
  "a3c14ace28b192cbb062145fcbbd5869c67271f6": "8000000000000000000000",
  "2da76b7c39b420e388ba2c1020b0856b0270648a": "2000000000000000000000",
  "622be4b45495fcd93143efc412d699d6cdc23dc5": "17300000000000000000",
  "d3f873bd9956135789ab00ebc195b922e94b259d": "2000000000000000000000",
  "975f3764e97bbccf767cbd3b795ba86d8ba9840e": "346000000000000000000",
  "fc39be41094b1997d2169e8264c2c3baa6c99bc4": "2000000000000000000000",
  "12ffc1128605cb0c13709a7290506f2690977193": "3340000000000000000000",
  "9b1168de8ab64b47552f3389800a9cc08b4666cf": "1730000000000000000000",
  "9f1aa8fcfc89a1a5328cbd6344b71f278a2ca4a0": "500000000000000000000",
  "505a33a18634dd4800693c67f48a1d693d4833f8": "7252000000000000000000",
  "d08fc09a0030fd0928cd321198580182a76aae9f": "1000000000000000000000",
  "6acddca3cd2b4990e25cd65c24149d0912099e79": "3000037000000000000000",
  "397a6ef8763a18f00fac217e055c0d3094101011": "2000000000000000000000",
  "4e0bd32473c4c51bf25654def69f797c6b29a232": "1600930000000000000000",
  "28d8c35fb7eea622582135e3ad47a227c9a663bd": "18200000000000000000",
  "f96488698590dc3b2c555642b871348dfa067ad5": "500000000000000000000",
  "4eebe80cb6f3ae5904f6f4b28d907f907189fcab": "1999944000000000000000",
  "8d1abd897dacd4312e18080c88fb9647eab44052": "216000000000000000000",
  "457029c469c4548d168cec3e65872e4428d42b67": "2000000000000000000000",
  "1296acded1e063af39fe8ba0b4b63df789f70517": "100014000000000000000",
  "71762c63678c18d1c6378ce068e666381315147e": "2000000000000000000000",
  "6cc1c878fa6cde8a9a0b8311247e741e4642fe6d": "985000000000000000000",
  "8d9ed7f4553058c26f7836a3802d3064eb1b363d": "90000000000000000000",
  "5032e4bcf7932b49fdba377b6f1499636513cfc3": "100000000000000000000",
  "462b678b51b584f3ed7ada070b5cd99c0bf7b87f": "100000000000000000000",
  "c8aa49e3809f0899f28ab57e6743709d58419033": "880000000000000000000",
  "01b1cae91a3b9559afb33cdc6d689442fdbfe037": "200000000000000000000",
  "b1043004ec1941a8cf4f2b00b15700ddac6ff17e": "1000000000000000000000",
  "5ba2c6c35dfaec296826591904d544464aeabd5e": "20000000000000000000",
  "b32400fd13c5500917cb037b29fe22e7d5228f2d": "40000000000000000000000",
  "d59d92d2c8701980cc073c375d720af064743c0c": "19000000000000000000000",
  "11dd6185d9a8d73ddfdaa71e9b7774431c4dfec2": "1000000000000000000000",
  "d4cb21e590c5a0e06801366aff342c7d7db16424": "494000000000000000000",
  "5b6d55f6712967405c659129f4b1de09acf2cb7b": "267400000000000000000",
  "6179979907fe7f037e4c38029d60bcbab832b3d6": "1610000000000000000000",
  "33c407133b84b3ca4c3ded1f4658900c38101624": "2800000000000000000000",
  "cd2a36d753e9e0ed012a584d716807587b41d56a": "261400000000000000000",
  "8155fa6c51eb31d808412d748aa086105018122f": "1880000000000000000000",
  "3ecc8e1668dde995dc570fe414f44211c534a615": "2000000000000000000000",
  "d6395db5a4bb66e60f4cfbcdf0057bb4d97862e2": "910000000000000000000",
  "b6fb39786250081426a342c70d47ee521e5bc563": "15000000000000000000000",
  "510eda5601499a0d5e1a006bfffd833672f2e267": "2000000000000000000000",
  "98c19dba810ba611e68f2f83ee16f6e7744f0c1f": "200000000000000000000",
  "34ff26eb60a8d1a95a489fae136ee91d4e58084c": "600000000000000000000",
  "6ad90be252d9cd464d998125fab693060ba8e429": "4000000000000000000000",
  "038323b184cff7a82ae2e1bda7793fe4319ca0bf": "20000000000000000000000",
  "dc5305b4020a06b49d657c7ca34c35c91c5f2c56": "7045990000000000000000",
  "c9c80dc12e7bab86e949d01e4c3ed35f2b9bba5f": "2000000000000000000000",
  "7beb81fb2f5e91526b2ac9795e76c69bcff04bc0": "69400000000000000000000",
  "b8bc9bca7f71b4ed12e620438d620f53c114342f": "500000000000000000000",
  "d288e7cb7ba9f620ab0f7452e508633d1c5aa276": "4000000000000000000000",
  "a2e460a989cb15565f9ecca7d121a18e4eb405b6": "2000000000000000000000",
  "7489cc8abe75cda4ef0d01cef2605e47eda67ab1": "133700000000000000000",
  "38b403fb1fb7c14559a2d6f6564a5552bca39aff": "2000000000000000000000",
  "e55c80520a1b0f755b9a2cd3ce214f7625653e8a": "2000000000000000000000",
  "451b7070259bdba27100e36e23428a53dfe304e9": "13370000000000000000",
  "8b5c914b128bf1695c088923fa467e7911f351fa": "98500000000000000000",
  "17df49518d73b129f0da36b1c9b40cb66420fdc7": "10000000000000000000000",
  "c1950543554d8a713003f662bb612c10ad4cdf21": "18200000000000000000",
  "fa7606435b356cee257bd2fcd3d9eacb3cd1c4e1": "100000000000000000000",
  "e0bad98eee9698dbf6d76085b7923de5754e906d": "167000000000000000000",
  "ce53c8cdd74296aca987b2bc19c2b875a48749d0": "3000000000000000000000",
  "d0c55abf976fdc3db2afe9be99d499484d576c02": "1000000000000000000000",
  "238a6b7635252f5244486c0af0a73a207385e039": "1370000000000000000000",
  "ceb389381d48a8ae4ffc483ad0bb5e204cfdb1ec": "740745000000000000000",
  "3847667038f33b01c1cc795d8daf5475eff5a0d4": "728330000000000000000",
  "a08d215b5b6aac4861a281ac7e400b78fef04cbf": "20000000000000000000",
  "2d0dec51a6e87330a6a8fa2a0f65d88d4abcdf73": "185000000000000000000",
  "9e8f64ddcde9b8b451bafaa235a9bf511a25ac91": "2674000000000000000000",
  "ddac6bf4bbdd7d597d9c686d0695593bedccc7fa": "865000000000000000000",
  "22e15158b5ee3e86eb0332e3e6a9ac6cd9b55ecd": "160000000000000000000",
  "3aea4e82d2400248f99871a41ca257060d3a221b": "1000000000000000000000",
  "fb126f0ec769f49dcefca2f200286451583084b8": "5013750000000000000000",
  "1b8bd6d2eca20185a78e7d98e8e185678dac4830": "16700000000000000000000",
  "664cd67dccc9ac8228b45c55db8d76550b659cdc": "394000000000000000000",
  "553f37d92466550e9fd775ae74362df030179132": "2000000000000000000000",
  "730d8763c6a4fd824ab8b859161ef7e3a96a1200": "20000000000000000000000",
  "04c2c64bb54c3eccd05585e10ec6f99a0cdb01a3": "100000000000000000000",
  "f1624d980b65336feac5a6d54125005cfcf2aacb": "2000000000000000000000",
  "0b7fc9ddf70576f6330669eaaa71b6a831e99528": "140000000000000000000",
  "fa2bbca15d3fe39f8a328e91f90da14f7ac6253d": "200000000000000000000",
  "07feef54c136850829badc4b49c3f2a73c89fb9e": "118200000000000000000",
  "3703350c4d6fe337342cddc65bf1e2386bf3f9b2": "2020000000000000000000",
  "6d7d1c949511f88303808c60c5ea0640fcc02683": "10000000000000000000000",
  "34fa7792bad8bbd7ff64056214a33eb6600c1ea8": "50000000000000000000",
  "994cc2b5227ec3cf048512467c41b7b7b748909f": "2000000000000000000000",
  "08da3a7a0f452161cfbcec311bb68ebfdee17e88": "2000000000000000000000",
  "bbb4ee1d82f2e156442cc93338a2fc286fa28864": "1370000000000000000000",
  "7a2dfc770e24368131b7847795f203f3d50d5b56": "11400000000000000000000",
  "7cef4d43aa417f9ef8b787f8b99d53f1fea1ee88": "1910000000000000000000",
  "c6a30ef5bb3320f40dc5e981230d52ae3ac19322": "182000000000000000000",
  "6a74844d8e9cb5581c45079a2e94462a6cee8821": "1082970000000000000000",
  "c3110be01dc9734cfc6e1ce07f87d77d1345b7e1": "4999998000000000000000",
  "aeb916ebf49d0f86c13f7331cef19e129937512d": "599908000000000000000",
  "3e5abd09ce5af7ba8487c359e0f2a93a986b0b18": "10000000000000000000000",
  "cdd60d73efaad873c9bbfb178ca1b7105a81a681": "32000000000000000000",
  "31eb123c95c82bf685ace7a75a1881a289efca10": "920034000000000000000",
  "86e8670e27598ea09c3899ab7711d3b9fe901c17": "200000000000000000000",
  "a144f6b60f72d64a21e330dadb62d8990ade2b09": "1000000000000000000000",
  "68883e152e5660fee59626e7e3b4f05110e6222f": "54683300000000000000000",
  "fe4249127950e2f896ec0e7e2e3d055aab10550f": "668500000000000000000",
  "403d53cf620f0922b417848dee96c190b5bc8271": "9850000000000000000000",
  "bec2e6de39c07c2bae556acfbee2c4728b9982e3": "573000000000000000000",
  "f3c4716d1ee5279a86d0163a14618181e16136c7": "1000000000000000000000",
  "e38ef28a5ed984a7db24a1ae782dfb87f397dfc6": "143000000000000000000",
  "30fbe5885f9fcce9ea5edb82ed4a1196dd259aed": "5200000000000000000000",
  "48bf14d7b1fc84ebf3c96be12f7bce01aa69b03e": "120000000000000000000",
  "b8d5c324a8209d7c8049d0d4aede02ba80ab578b": "16889329000000000000000",
  "43d5a71ce8b8f8ae02b2eaf8eaf2ca2840b93fb6": "6000000000000000000000",
  "f9a59c3cc5ffacbcb67be0fc7256f64c9b127cb4": "2000000000000000000000",
  "0e21af1b8dbf27fcf63f37e047b87a825cbe7c27": "3000000000000000000000",
  "1c35aab688a0cd8ef82e76541ba7ac39527f743b": "500000000000000000000",
  "91ac5cfe67c54aa7ebfba448666c461a3b1fe2e1": "401880000000000000000",
  "4ba53ab549e2016dfa223c9ed5a38fad91288d07": "1400000000000000000000",
  "99a4de19ded79008cfdcd45d014d2e584b8914a8": "1500000000000000000000",
  "4adbf4aae0e3ef44f7dd4d8985cfaf096ec48e98": "150000000000000000000",
  "9a633fcd112cceeb765fe0418170732a9705e79c": "18200000000000000000",
  "292f228b0a94748c8eec612d246f989363e08f08": "185000000000000000000",
  "9f3497f5ef5fe63095836c004eb9ce02e9013b4b": "633424000000000000000",
  "0e6dfd553b2e873d2aec15bd5fbb3f8472d8d394": "12000000000000000000000",
  "74ebf4425646e6cf81b109ce7bf4a2a63d84815f": "40000000000000000000",
  "8ce5e3b5f591d5eca38abf228f2e3c35134bdac0": "2319920000000000000000",
  "90c41eba008e20cbe927f346603fc88698125969": "42000000000000000000",
  "382ba76db41b75606dd48a48f0137e9174e031b6": "20000000000000000000",
  "5d24bdbc1c47f0eb83d128cae48ac33c4817e91f": "1000000000000000000000",
  "a64e5ffb704c2c9139d77ef61d8cdfa31d7a88e9": "143000000000000000000",
  "a18360e985f2062e8f8efe02ad2cbc91ad9a5aad": "3000000000000000000000",
  "d251f903ae18727259eee841a189a1f569a5fd76": "10000000000000000000000",
  "efa6b1f0db603537826891b8b4bc163984bb40cd": "985000000000000000000",
  "47fff42c678551d141eb75a6ee398117df3e4a8d": "100010000000000000000",
  "f2294adbb6f0dcc76e632ebef48ab49f124dbba4": "1443690000000000000000",
  "53700d53254d430f22781a4a76a463933b5d6b08": "1970000000000000000000",
  "b14a7aaa8f49f2fb9a8102d6bbe4c48ae7c06fb2": "8000000000000000000000",
  "9ed4e63f526542d44fddd34d59cd25388ffd6bda": "3885000000000000000000",
  "4cac91fb83a147d2f76c3267984b910a79933348": "2167000000000000000000",
  "9b32cf4f5115f4b34a00a64c617de06387354323": "105501000000000000000",
  "b8bedd576a4b4c2027da735a5bc3f533252a1808": "2000000000000000000000",
  "c5a3b98e4593fea0b38c4f455a5065f051a2f815": "20309030000000000000000",
  "eaf52388546ec35aca6f6c6393d8d609de3a4bf3": "20000000000000000000",
  "4c423c76930d07f93c47a5cc4f615745c45a9d72": "100000000000000000000",
  "9052f2e4a3e3c12dd1c71bf78a4ec3043dc88b7e": "267400000000000000000",
  "2bade91d154517620fd4b439ac97157a4102a9f7": "4000000000000000000000",
  "da698d64c65c7f2b2c7253059cd3d181d899b6b7": "295500000000000000000",
  "c6d8954e8f3fc533d2d230ff025cb4dce14f3426": "400000000000000000000",
  "349a816b17ab3d27bbc0ae0051f6a070be1ff29d": "10000000000000000000000",
  "ff4d9c8484c43c42ff2c5ab759996498d323994d": "4000000000000000000000",
  "22944fbca9b57963084eb84df7c85fb9bcdfb856": "4649845000000000000000",
  "bfd93c90c29c07bc5fb5fc49aeea55a40e134f35": "28000000000000000000000",
  "3caedb5319fe806543c56e5021d372f71be9062e": "40000000000000000000000",
  "9a079c92a629ca15c8cafa2eb28d5bc17af82811": "500000000000000000000",
  "7d2a52a7cf0c8436a8e007976b6c26b7229d1e15": "438040000000000000000",
  "cf89f7460ba3dfe83c5a1d3a019ee1250f242f0f": "985177000000000000000",
  "577bfe64e3a1e3800e94db1c6c184d8dc8aafc66": "1498000000000000000000",
  "7ffd02ed370c7060b2ae53c078c8012190dfbb75": "10000000000000000000000",
  "90b62f131a5f29b45571513ee7a74a8f0b232202": "158000000000000000000",
  "6e8212b722afd408a7a73ed3e2395ee6454a0330": "159000000000000000000",
  "515f30bc90cdf4577ee47d65d785fbe2e837c6bc": "10166128000000000000000",
  "c27376f45d21e15ede3b26f2655fcee02ccc0f2a": "20000000000000000000",
  "3da39ce3ef4a7a3966b32ee7ea4ebc2335a8f11f": "2000000000000000000000",
  "25259d975a21d83ae30e33f800f53f37dfa01938": "20000000000000000000",
  "8ed143701f2f72280fd04a7b4164281979ea87c9": "14000000000000000000",
  "5ac99ad7816ae9020ff8adf79fa9869b7cea6601": "21000000000000000000000",
  "f51fded80acb502890e87369741f3722514cefff": "20000042000000000000000",
  "f657fcbe682eb4e8db152ecf892456000b513d15": "1940000000000000000000",
  "62c37c52b97f4b040b1aa391d6dec152893c4707": "1000000000000000000000",
  "89fc8e4d386b0d0bb4a707edf3bd560df1ad8f4e": "2955000000000000000000",
  "53c0bb7fc88ea422d2ef7e540e2d8f28b1bb8183": "20000000000000000000",
  "56f493a3d108aaa2d18d98922f8efe1662cfb73d": "2020000000000000000000",
  "e9458f68bb272cb5673a04f781b403556fd3a387": "61000000000000000000",
  "be525a33ea916177f17283fca29e8b350b7f530b": "2638000000000000000000",
  "4feb846be43041fd6b34202897943e3f21cb7f04": "83226000000000000000",
  "15aa530dc36958b4edb38eee6dd9e3c77d4c9145": "2000000000000000000000",
  "2458d6555ff98a129cce4037953d00206eff4287": "197000000000000000000",
  "8035fe4e6b6af27ae492a578515e9d39fa6fa65b": "4000000000000000000000",
  "296b71c0015819c242a7861e6ff7eded8a5f71e3": "1999800000000000000000",
  "8f1952eed1c548d9ee9b97d0169a07933be69f63": "1000000000000000000000",
  "a421dbb89b3a07419084ad10c3c15dfe9b32d0c2": "20000000000000000000000",
  "554336ee4ea155f9f24f87bca9ca72e253e12cd2": "100000000000000000000",
  "ffc5fc4b7e8a0293ff39a3a0f7d60d2646d37a74": "2000000000000000000000",
  "ea2c197d26e98b0da83e1b72c787618c979d3db0": "19700000000000000000",
  "96aa573fed2f233410dbae5180145b23c31a02f0": "1730000000000000000000",
  "c23b2f921ce4a37a259ee4ad8b2158d15d664f59": "25403000000000000000",
  "d874b9dfae456a929ba3b1a27e572c9b2cecdfb3": "170000000000000000000",
  "bf8b8005d636a49664f74275ef42438acd65ac91": "200000000000000000000",
  "441a52001661fac718b2d7b351b7c6fb521a7afd": "400000000000000000000",
  "812a55c43caedc597218379000ce510d548836fd": "18200000000000000000",
  "5e90c85877198756b0366c0e17b28e52b446505a": "374288000000000000000",
  "da3017c150dd0dce7fcf881b0a48d0d1c756c4c7": "100014000000000000000",
  "6baf7a2a02ae78801e8904ad7ac05108fc56cff6": "1000000000000000000000",
  "177dae78bc0113d8d39c4402f2a641ae2a105ab8": "1818320000000000000000",
  "01b5b5bc5a117fa08b34ed1db9440608597ac548": "200000000000000000000",
  "aae732eda65988c3a00c7f472f351c463b1c968e": "2000000000000000000000",
  "d95342953c8a21e8b635eefac7819bea30f17047": "94160000000000000000000",
  "8d616b1eee77eef6f176e0698db3c0c141b2fc8f": "500000000000000000000",
  "12d20790b7d3dbd88c81a279b812039e8a603bd0": "1604400000000000000000",
  "3734cb187491ede713ae5b3b2d12284af46b8101": "3000000000000000000000",
  "dd967c4c5f8ae47e266fb416aad1964ee3e7e8c3": "7750000000000000000000",
  "3dcef19c868b15d34eda426ec7e04b18b6017002": "1999800000000000000000",
  "ce9d21c692cd3c01f2011f505f870036fa8f6cd2": "400000000000000000000",
  "d44f6ac3923b5fd731a4c45944ec4f7ec52a6ae4": "10000000000000000000000",
  "b424d68d9d0d00cec1938c854e15ffb880ba0170": "200000000000000000000",
  "1f2186ded23e0cf9521694e4e164593e690a9685": "300000000000000000000",
  "7f4b5e278578c046cceaf65730a0e068329ed5b6": "1880000000000000000000",
  "8c50aa2a9212bcde56418ae261f0b35e7a9dbb82": "400000000000000000000",
  "1953313e2ad746239cb2270f48af34d8bb9c4465": "2000000000000000000000",
  "a15025f595acdbf3110f77c5bf24477e6548f9e8": "2000000000000000000000",
  "53af32c22fef99803f178cf90b802fb571c61cb9": "3880000000000000000000",
  "d0a8abd80a199b54b08b65f01d209c27fef0115b": "6525979000000000000000",
  "2b68306ba7f8daaf73f4c644ef7d2743c0f26856": "864800000000000000000",
  "96924191b7df655b3319dc6d6137f481a73a0ff3": "4020000000000000000000",
  "6fa72015fa78696efd9a86174f7f1f21019286b1": "1337000000000000000000",
  "0b119df99c6b8de58a1e2c3f297a6744bf552277": "2000000000000000000000",
  "61733947fab820dbd351efd67855ea0e881373a0": "20000000000000000000",
  "8ae6f80b70e1f23c91fbd5a966b0e499d95df832": "197000000000000000000",
  "01a7d9fa7d0eb1185c67e54da83c2e75db69e39f": "7623900000000000000000",
  "9932ef1c85b75a9b2a80057d508734c51085becc": "50170000000000000000",
  "aefcfe88c826ccf131d54eb4ea9eb80e61e1ee25": "340000000000000000000",
  "c21fa6643a1f14c02996ad7144b75926e87ecb4b": "20000000000000000000000",
  "97d9e46a7604d7b5a4ea4ee61a42b3d2350fc3ed": "2000000000000000000000",
  "3cafaf5e62505615068af8eb22a13ad8a9e55070": "1999600000000000000000",
  "22f2dcff5ad78c3eb6850b5cb951127b659522e6": "13700000000000000000",
  "aaad1baade5af04e2b17439e935987bf8c2bb4b9": "2000000000000000000000",
  "298887bab57c5ba4f0615229d7525fa113b7ea89": "40000000000000000000",
  "7539333046deb1ef3c4daf50619993f444e1de68": "1182000000000000000000",
  "9752d14f5e1093f071711c1adbc4e3eb1e5c57f3": "2000000000000000000000",
  "ed641e06368fb0efaa1703e01fe48f4a685309eb": "200000000000000000000",
  "d0ee4d02cf24382c3090d3e99560de3678735cdf": "2400000000000000000000",
  "47e25df8822538a8596b28c637896b4d143c351d": "80500000000000000000000",
  "559706c332d20779c45f8a6d046a699159b74921": "380123000000000000000",
  "3a4da78dce05aeb87de9aead9185726da1926798": "200000000000000000000",
  "3041445a33ba158741160d9c344eb88e5c306f94": "60000000000000000000",
  "08d4311c9c1bbaf87fabe1a1d01463828d5d98ce": "90000000000000000000000",
  "6bd3e59f239fafe4776bb9bddd6bee83ba5d9d9f": "1000000000000000000000",
  "29eaae82761762f4d2db53a9c68b0f6b0b6d4e66": "2000000000000000000000",
  "0b7d339371e5be6727e6e331b5821fa24bdb9d5a": "857738000000000000000",
  "4714cfa4f46bd6bd70737d75878197e08f88e631": "11792000000000000000000",
  "ad92ca066edb7c711dfc5b166192d1edf8e77185": "36000000000000000000000",
  "f97b56ebd5b77abc9fbacbabd494b9d2c221cd03": "1970000000000000000000",
  "591bef3171d1c5957717a4e98d17eb142c214e56": "20000000000000000000000",
  "899b3c249f0c4b81df75d212004d3d6d952fd223": "2000000000000000000000",
  "a819d2ece122e028c8e8a04a064d02b9029b08b9": "1000000000000000000000",
  "e341642d40d2afce2e9107c67079ac7a2660086c": "400000000000000000000",
  "0329188f080657ab3a2afa522467178279832085": "216700000000000000000",
  "03317826d1f70aa4bddfa09be0c4105552d2358b": "38800000000000000000",
  "3ac9dc7a436ae98fd01c7a9621aa8e9d0b8b531d": "1790000000000000000000",
  "93c88e2d88621e30f58a9586bed4098999eb67dd": "31200000000000000000000",
  "cd1e66ed539dd92fc40bbaa1fa16de8c02c14d45": "230000000000000000000",
  "e6c81ffcecb47ecdc55c0b71e4855f3e5e97fc1e": "334250000000000000000",
  "50f8fa4bb9e2677c990a4ee8ce70dd1523251e4f": "26030000000000000000",
  "4f64a85e8e9a40498c0c75fceb0337fb49083e5e": "1000000000000000000000",
  "4b29437c97b4a844be71cca3b648d4ca0fdd9ba4": "150200000000000000000",
  "1eee6cbee4fe96ad615a9cf5857a647940df8c78": "19400000000000000000",
  "29f0edc60338e7112085a1d114da8c42ce8f55d6": "2958000000000000000000",
  "23b1c4917fbd93ee3d48389306957384a5496cbf": "4000086000000000000000",
  "1767525c5f5a22ed80e9d4d7710f0362d29efa33": "400000000000000000000",
  "3064899a963c4779cbf613cd6980846af1e6ec65": "6999908000000000000000",
  "68531f4dda808f5320767a03113428ca0ce2f389": "19400000000000000000",
  "1db9ac9a9eaeec0a523757050c71f47278c72d50": "1337000000000000000000",
  "7592c69d067b51b6cc639d1164d5578c60d2d244": "20000000000000000000",
  "cf3fbfa1fd32d7a6e0e6f8ef4eab57be34025c4c": "1063120000000000000000",
  "8efec058cc546157766a632775404a334aaada87": "1999000000000000000000",
  "faf5f0b7b6d558f5090d9ea1fb2d42259c586078": "6401000000000000000000",
  "19ecf2abf40c9e857b252fe1dbfd3d4c5d8f816e": "2000000000000000000000",
  "6e8a26689f7a2fdefd009cbaaa5310253450daba": "2049982000000000000000",
  "e2f40d358f5e3fe7463ec70480bd2ed398a7063b": "20000000000000000000",
  "fa19d6f7a50f4f079893d167bf14e21d0073d196": "530000000000000000000",
  "3e2ca0d234baf607ad466a1b85f4a6488ef00ae7": "89505000000000000000",
  "f8a49ca2390c1f6d5c0e62513b079571743f7cc6": "3000000000000000000000",
  "5d3f3b1f7130b0bb21a0fd32396239179a25657f": "62474000000000000000000",
  "f332c0f3e05a27d9126fd0b641a8c2d4060608fd": "5001041000000000000000",
  "e304a32f05a83762744a9542976ff9b723fa31ea": "1576256000000000000000",
  "f768f321fd6433d96b4f354d3cc1652c1732f57f": "10000000000000000000000",
  "147af46ae9ccd18bb35ca01b353b51990e49dce1": "4000000000000000000000",
  "21eae6feffa9fbf4cd874f4739ace530ccbe5937": "5000000000000000000000",
  "6994fb3231d7e41d491a9d68d1fa4cae2cc15960": "4000000000000000000000",
  "51126446ab3d8032557e8eba65597d75fadc815c": "322000000000000000000",
  "24daaaddf7b06bbcea9b80590085a88567682b4e": "319008000000000000000",
  "cd020f8edfcf524798a9b73a640334bbf72f80a5": "133700000000000000000",
  "56febf9e1003af15b1bd4907ec089a4a1b91d268": "200000000000000000000",
  "3c79c863c3d372b3ff0c6f452734a7f97042d706": "176000000000000000000",
  "e1203eb3a723e99c2220117ca6afeb66fa424f61": "9461996000000000000000",
  "18fb09188f27f1038e654031924f628a2106703d": "2000000000000000000000",
  "2eba0c6ee5a1145c1c573984963a605d880a7a20": "500000000000000000000",
  "4cefbe2398e47d52e78db4334c8b697675f193ae": "4011000000000000000000",
  "c02471e3fc2ea0532615a7571d493289c13c36ef": "20000000000000000000",
  "ba469aa5c386b19295d4a1b5473b540353390c85": "2000000000000000000000",
  "7b11673cc019626b290cbdce26046f7e6d141e21": "500000000000000000000",
  "26784ade91c8a83a8e39658c8d8277413ccc9954": "6000000000000000000000",
  "57d3df804f2beee6ef53ab94cb3ee9cf524a18d3": "393606000000000000000",
  "ccae0d3d852a7da3860f0636154c0a6ca31628d4": "106560000000000000000",
  "bfe3a1fc6e24c8f7b3250560991f93cba2cf8047": "80000000000000000000000",
  "724ce858857ec5481c86bd906e83a04882e5821d": "3000000000000000000000",
  "fb37cf6b4f81a9e222fba22e9bd24b5098b733cf": "38800000000000000000",
  "9b22a80d5c7b3374a05b446081f97d0a34079e7f": "3000000000000000000000",
  "0a29a8a4d5fd950075ffb34d77afeb2d823bd689": "200000000000000000000",
  "d01af9134faf5257174e8b79186f42ee354e642d": "1000000000000000000000",
  "7f1619988f3715e94ff1d253262dc5581db3de1c": "900000000000000000000",
  "6f137a71a6f197df2cbbf010dcbd3c444ef5c925": "2000000000000000000000",
  "11efb8a20451161b644a8ccebbc1d343a3bbcb52": "3200000000000000000000",
  "46504e6a215ac83bccf956befc82ab5a679371c8": "518898000000000000000",
  "b523fff9749871b35388438837f7e6e0dea9cb6b": "2000000000000000000000",
  "c5c6a4998a33feb764437a8be929a73ba34a0764": "50000000000000000000000",
  "3cd7f7c7c2353780cde081eeec45822b25f2860c": "200000000000000000000",
  "b3050beff9de33c80e1fa15225e28f2c413ae313": "700000000000000000000",
  "59268171b833e0aa13c54b52ccc0422e4fa03aeb": "3000000000000000000000",
  "7169724ee72271c534cad6420fb04ee644cb86fe": "410164000000000000000",
  "6e6d5bbbb9053b89d744a27316c2a7b8c09b547d": "909831000000000000000",
  "3f3f46b75cabe37bfacc8760281f4341ca7f463d": "602709000000000000000",
  "7a33834e8583733e2d52aead589bd1affb1dd256": "1000000000000000000000",
  "e94ded99dcb572b9bb1dcba32f6dee91e057984e": "394000000000000000000",
  "19336a236ded755872411f2e0491d83e3e00159e": "940000000000000000000",
  "63ac545c991243fa18aec41d4f6f598e555015dc": "600000000000000000000",
  "cfee05c69d1f29e7714684c88de5a16098e91399": "1970000000000000000000",
  "77be6b64d7c733a436adec5e14bf9ad7402b1b46": "1000000000000000000000",
  "233bdddd5da94852f4ade8d212885682d9076bc6": "4000000000000000000000",
  "952c57d2fb195107d4cd5ca300774119dfad2f78": "2000000000000000000000",
  "e237baa4dbc9926e32a3d85d1264402d54db012f": "2000000000000000000000",
  "aa91237e740d25a92f7fa146faa18ce56dc6e1f3": "925000000000000000000",
  "2339e9492870afea2537f389ac2f838302a33c06": "2000000000000000000000",
  "1d45586eb803ca2190650bf748a2b174312bb507": "1400000000000000000000",
  "c61446b754c24e3b1642d9e51765b4d3e46b34b6": "2000000000000000000000",
  "ac28b5edea05b76f8c5f97084541277c96696a4c": "1000000000000000000000",
  "1a1c9a26e0e02418a5cf687da75a275c622c9440": "5000000000000000000000",
  "299368609042a858d1ecdf1fc0ada5eaceca29cf": "2000000000000000000000",
  "095f5a51d06f6340d80b6d29ea2e88118ad730fe": "2000200000000000000000",
  "751a2ca34e7187c163d28e3618db28b13c196d26": "500000000000000000000",
  "75b0e9c942a4f0f6f86d3f95ff998022fa67963b": "1490000000000000000000",
  "d1b37f03cb107424e9c4dd575ccd4f4cee57e6cd": "2000000000000000000000",
  "7f993ddb7e02c282b898f6155f680ef5b9aff907": "20000000000000000000000",
  "a3d583a7b65b23f60b7905f3e4aa62aac87f4227": "1046779000000000000000",
  "526bb533b76e20c8ee1ebf123f1e9ff4148e40be": "197000000000000000000",
  "2160b4c02cac0a81de9108de434590a8bfe68735": "1970000000000000000000",
  "010007394b8b7565a1658af88ce463499135d6b7": "100000000000000000000",
  "64457fa33b0832506c4f7d1180dce48f46f3e0ff": "2000000000000000000000",
  "b51e558eb5512fbcfa81f8d0bd938c79ebb5242b": "715000000000000000000",
  "94f13f9f0836a3ee2437a84922d2984dc0f7d53b": "2999916000000000000000",
  "6bd457ade051795df3f2465c3839aed3c5dee978": "999925000000000000000",
  "f3dbcf135acb9dee1a489c593c024f03c2bbaece": "2000000000000000000000",
  "61b902c5a673885826820d1fe14549e4865fbdc2": "334703000000000000000",
  "2acc9c1a32240b4d5b2f777a2ea052b42fc1271c": "41764000000000000000000",
  "6ddfef639155daab0a5cb4953aa8c5afaa880453": "1820000000000000000000",
  "96ff6f509968f36cb42cba48db32f21f5676abf8": "1970000000000000000000",
  "b4c8170f7b2ab536d1d9a25bdd203ae1288dc3d5": "200000000000000000000",
  "78d4f8c71c1e68a69a98f52fcb45da8af56ea1a0": "2000000000000000000000",
  "dec99e972fca7177508c8e1a47ac22d768acab7c": "2000000000000000000000",
  "a07aa16d74aee8a9a3288d52db1551d593883297": "600000000000000000000",
  "cf1169041c1745e45b172435a2fc99b49ace2b00": "31960000000000000000",
  "526cb09ce3ada3672eec1deb46205be89a4b563e": "2468000000000000000000",
  "ee6959de2b67967b71948c891ab00d8c8f38c7dc": "118200000000000000000",
  "ca7ba3ff536c7e5f0e153800bd383db8312998e0": "169600000000000000000",
  "1ed06ee51662a86c634588fb62dc43c8f27e7c17": "200000000000000000000",
  "730447f97ce9b25f22ba1afb36df27f9586beb9b": "820000000000000000000",
  "ae5c9bdad3c5c8a1220444aea5c229c1839f1d64": "477500000000000000000",
  "a38306cb70baa8e49186bd68aa70a83d242f2907": "2000000000000000000000",
  "71213fca313404204ecba87197741aa9dfe96338": "60000000000000000000",
  "10e390ad2ba33d82b37388d09c4544c6b0225de5": "200000000000000000000",
  "3b6e814f770748a7c3997806347605480a3fd509": "2000000000000000000000",
  "fd452c3969ece3801c542020f1cdcaa1c71ed23d": "100000000000000000000000",
  "e742b1e6069a8ffc3c4767235defb0d49cbed222": "800000000000000000000",
  "d7225738dcf3578438f8e7c8b3837e42e04a262f": "445860000000000000000",
  "cd0b0257e783a3d2c2e3ba9d6e79b75ef98024d4": "2945500000000000000000",
  "e80e7fef18a5db15b01473f3ad6b78b2a2f8acd9": "500000000000000000000",
  "261575e9cf59c8226fa7aaf91de86fb70f5ac3ae": "300022000000000000000",
  "7e71171f2949fa0c3ac254254b1f0440e5e6a038": "40000000000000000000",
  "96ea6ac89a2bac95347b51dba63d8bd5ebdedce1": "2000000000000000000000",
  "e6ec5cf0c49b9c317e1e706315ef9eb7c0bf11a7": "17200000000000000000000",
  "2b99b42e4f42619ee36baa7e4af2d65eacfcba35": "40000000000000000000000",
  "c6e4cc0c7283fc1c85bc4813effaaf72b49823c0": "276926000000000000000",
  "dbc1ce0e49b1a705d22e2037aec878ee0d75c703": "250000000000000000000",
  "806f44bdeb688037015e84ff218049e382332a33": "1999000000000000000000",
  "1a3a330e4fcb69dbef5e6901783bf50fd1c15342": "4200000000000000000000",
  "d2a84f75675c62d80c88756c428eee2bcb185421": "1200000000000000000000",
  "c593b546b7698710a205ad468b2c13152219a342": "1550000000000000000000",
  "3f627a769e6a950eb87017a7cd9ca20871136831": "13790000000000000000000",
  "f2d5763ce073127e2cedde6faba786c73ca94141": "7900000000000000000000",
  "162110f29eac5f7d02b543d8dcd5bb59a5e33b73": "2000000000000000000000",
  "59473cd300fffae240f5785626c65dfec792b9af": "20000000000000000000",
  "4dcd11815818ae29b85d01367349a8a7fb12d06b": "7900000000000000000000",
  "9329ffdc268babde8874b366406c81445b9b2d35": "422415000000000000000",
  "0ab4281ebb318590abb89a81df07fa3af904258a": "500000000000000000000",
  "875061ee12e820041a01942cb0e65bb427b00060": "2800000000000000000000",
  "c9b698e898d20d4d4f408e4e4d061922aa856307": "40000000000000000000",
  "ca49a5f58adbefae23ee59eea241cf0482622eaa": "1430000000000000000000",
  "196e85df7e732b4a8f0ed03623f4db9db0b8fa31": "21165000000000000000",
  "4c760cd9e195ee4f2d6bce2500ff96da7c43ee91": "60000000000000000000000",
  "024a098ae702bef5406c9c22b78bd4eb2cc7a293": "4000000000000000000000",
  "9d81aea69aed6ad07089d61445348c17f34bfc5b": "300000000000000000000",
  "76ab87dd5a05ad839a4e2fc8c85aa6ba05641730": "2000000000000000000000",
  "c6e2f5af979a03fd723a1b6efa728318cf9c1800": "668500000000000000000",
  "5db69fe93e6fb6fbd450966b97238b110ad8279a": "40000000000000000000000",
  "a4259f8345f7e3a8b72b0fec2cf75e321fda4dc2": "1910000000000000000000",
  "095030e4b82692dcf8b8d0912494b9b378ec9328": "1340000000000000000000",
  "4b470f7ba030bc7cfcf338d4bf0432a91e2ea5ff": "2000000000000000000000",
  "99c9f93e45fe3c1418c353e4c5ac3894eef8121e": "101870000000000000000",
  "ffac3db879a6c7158e8dec603b407463ba0d31cf": "1970000000000000000000",
  "ac8e87ddda5e78fcbcb9fa7fc3ce038f9f7d2e34": "2000000000000000000000",
  "7a0589b143a8e5e107c9ac66a9f9f8597ab3e7ab": "1510990000000000000000",
  "b7d581fe0af1ec383f3b3c416783f385146a7612": "20000000000000000000000",
  "bb3fc0a29c034d710812dcc775c8cab9d28d6975": "1066806000000000000000",
  "2c603ff0fe93616c43573ef279bfea40888d6ae7": "4740000000000000000000",
  "15f2b7b16432ee50a5f55b41232f6334ed58bdc0": "400000000000000000000",
  "7f3d7203c8a447f7bf36d88ae9b6062a5eee78ae": "6000000000000000000000",
  "f067e1f1d683556a4cc4fd0c0313239f32c4cfd8": "1000000000000000000000",
  "52738c90d860e04cb12f498d96fdb5bf36fc340e": "30000000000000000000",
  "45781bbe7714a1c8f73b1c747921df4f84278b70": "2000000000000000000000",
  "4a97e8fcf4635ea7fc5e96ee51752ec388716b60": "546000000000000000000",
  "54939ff08921b467cf2946751d856378296c63ed": "1000000000000000000000",
  "6485470e61db110aebdbafd536769e3c599cc908": "600000000000000000000",
  "e20d1bcb71286dc7128a9fc7c6ed7f733892eef5": "1003400000000000000000",
  "d6eea898d4ae2b718027a19ce9a5eb7300abe3ca": "27475000000000000000",
  "014974a1f46bf204944a853111e52f1602617def": "2000000000000000000000",
  "6aa5732f3b86fb8c81efbe6b5b47b563730b06c8": "1000000000000000000000",
  "6107d71dd6d0eefb11d4c916404cb98c753e117d": "2000000000000000000000",
  "dd7bcda65924aaa49b80984ae173750258b92847": "10000000000000000000000",
  "4e7b54474d01fefd388dfcd53b9f662624418a05": "8000000000000000000000",
  "24fc73d20793098e09ddab5798506224fa1e1850": "200000000000000000000",
  "2b8488bd2d3c197a3d26151815b5a798d27168dc": "6680000000000000000000",
  "949131f28943925cfc97d41e0cea0b262973a730": "2800000000000000000000",
  "60b8d6b73b79534fb08bb8cbcefac7f393c57bfe": "1760000000000000000000",
  "d6acc220ba2e51dfcf21d443361eea765cbd35d8": "20000000000000000000",
  "c4c6cb723dd7afa7eb535615e53f3cef14f18118": "1999999000000000000000",
  "4c9a862ad115d6c8274ed0b944bdd6a5500510a7": "100000000000000000000",
  "85732c065cbd64119941aed430ac59670b6c51c4": "731345000000000000000",
  "0126e12ebc17035f35c0e9d11dd148393c405d7a": "1999600000000000000000",
  "472048cc609aeb242165eaaa8705850cf3125de0": "1000000000000000000000",
  "d2edd1ddd6d86dc005baeb541d22b640d5c7cae5": "20000000000000000000",
  "4549b15979255f7e65e99b0d5604db98dfcac8bf": "4000000000000000000000",
  "c6c7c191379897dd9c9d9a33839c4a5f62c0890d": "4000085000000000000000",
  "d367009ab658263b62c2333a1c9e4140498e1389": "2000000000000000000000",
  "143f5f1658d9e578f4f3d95f80c0b1bd3933cbda": "1490000000000000000000",
  "1a09fdc2c7a20e23574b97c69e93deba67d37220": "1998000000000000000000",
  "ac8b509aefea1dbfaf2bb33500d6570b6fd96d51": "1820000000000000000000",
  "16ffac84032940f0121a09668b858a7e79ffa3bb": "3879210000000000000000",
  "f338459f32a159b23db30ac335769ab2351aa63c": "30000000000000000000000",
  "d82251456dc1380f8f5692f962828640ab9f2a03": "4879980000000000000000",
  "47f4696bd462b20da09fb83ed2039818d77625b3": "149000000000000000000",
  "3dde8b15b3ccbaa5780112c3d674f313bba68026": "1773000000000000000000",
  "f70d637a845c06db6cdc91e6371ce7c4388a628e": "20000000000000000000",
  "68295e8ea5afd9093fc0a465d157922b5d2ae234": "19982000000000000000",
  "614e8bef3dd2c59b59a4145674401018351884ea": "20000000000000000000",
  "4737d042dc6ae73ec73ae2517acea2fdd96487c5": "1000000000000000000000",
  "cec6fc65853f9cce5f8e844676362e1579015f02": "2000000000000000000000",
  "ae47e2609cfafe369d66d415d939de05081a9872": "27060000000000000000000",
  "09a928d528ec1b3e25ffc83e218c1e0afe8928c7": "18200000000000000000",
  "9b444fd337e5d75293adcfff70e1ea01db023222": "100000000000000000000",
  "168bdec818eafc6d2992e5ef54aa0e1601e3c561": "1000110000000000000000",
  "353dbec42f92b50f975129b93c4c997375f09073": "1999000000000000000000",
  "6fcc2c732bdd934af6ccd16846fb26ef89b2aa9b": "10001242000000000000000",
  "6f2576da4de283bbe8e3ee69ddd66e5e711db3f5": "1260800000000000000000",
  "3a3dd104cd7eb04f21932fd433ea7affd39369f5": "357500000000000000000",
  "d44f4ac5fad76bdc1537a3b3af6472319b410d9d": "1600000000000000000000",
  "3d9d6be57ff83e065985664f12564483f2e600b2": "2041600000000000000000",
  "88f1045f19f2d3191816b1df18bb6e1435ad1b38": "240000000000000000000",
  "ddab75fb2ff9fecb88f89476688e2b00e367ebf9": "19400000000000000000000",
  "092e815558402d67f90d6bfe6da0b2fffa91455a": "60000000000000000000",
  "a7024cfd742c1ec13c01fea18d3042e65f1d5dee": "11272229000000000000000",
  "7f46bb25460dd7dae4211ca7f15ad312fc7dc75c": "6685000000000000000000",
  "93f18cd2526040761488c513174d1e7963768b2c": "2416500000000000000000",
  "352f25babf4a690673e35195efa8f79d05848aad": "66800000000000000000000",
  "f7b151cc5e571c17c76539dbe9964cbb6fe5de79": "2148000000000000000000",
  "ff3eee57c34d6dae970d8b311117c53586cd3502": "1700000000000000000000",
  "ae6f0c73fdd77c489727512174d9b50296611c4c": "6000000000000000000000",
  "7819b0458e314e2b53bfe00c38495fd4b9fdf8d6": "20000000000000000000",
  "7fdba031c78f9c096d62d05a369eeab0bccc55e5": "2800000000000000000000",
  "735e328666ed5637142b3306b77ccc5460e72c3d": "1968682000000000000000",
  "0bfbb6925dc75e52cf2684224bbe0550fea685d3": "1970000000000000000000",
  "6be16313643ebc91ff9bb1a2e116b854ea933a45": "500000000000000000000",
  "d6acffd0bfd99c382e7bd56ff0e6144a9e52b08e": "160000000000000000000",
  "276a006e3028ecd44cdb62ba0a77ce94ebd9f10f": "1800000000000000000000",
  "10711c3dda32317885f0a2fd8ae92e82069b0d0b": "4000000000000000000000",
  "43cb9652818c6f4d6796b0e89409306c79db6349": "2000000000000000000000",
  "7109dd011d15f3122d9d3a27588c10d77744508b": "2000000000000000000000",
  "3497dd66fd118071a78c2cb36e40b6651cc82598": "109600000000000000000",
  "9bf672d979b36652fc5282547a6a6bc212ae4368": "656000000000000000000",
  "eaed16eaf5daab5bf0295e5e077f59fb8255900b": "4000000000000000000000",
  "7ac58f6ffc4f8107ae6e30378e4e9f99c57fbb24": "40000000000000000000",
  "45a570dcc2090c86a6b3ea29a60863dde41f13b5": "232500000000000000000",
  "433a3b68e56b0df1862b90586bbd39c840ff1936": "2000000000000000000000",
  "e8eaf12944092dc3599b3953fa7cb1c9761cc246": "1800000000000000000000",
  "ec11362cec810985d0ebbd7b73451444985b369f": "30000047000000000000000",
  "78e83f80b3678c7a0a4e3e8c84dccde064426277": "1790000000000000000000",
  "0cc67f8273e1bae0867fd42e8b8193d72679dbf8": "500000000000000000000",
  "c70d856d621ec145303c0a6400cd17bbd6f5eaf7": "20000000000000000000",
  "f468906e7edf664ab0d8be3d83eb7ab3f7ffdc78": "1700000000000000000000",
  "3c286cfb30146e5fd790c2c8541552578de334d8": "10203000000000000000000",
  "c401c427cccff10decb864202f36f5808322a0a8": "3329300000000000000000",
  "afd019ff36a09155346b69974815a1c912c90aa4": "2000000000000000000000",
  "96fe59c3dbb3aa7cc8cb62480c65e56e6204a7e2": "20000000000000000000000",
  "a47779d8bc1c7bce0f011ccb39ef68b854f8de8f": "2000000000000000000000",
  "58c650ced40bb65641b8e8a924a039def46854df": "18500000000000000000",
  "86f4f40ad984fbb80933ae626e0e42f9333fdd41": "1000000000000000000000",
  "b22d5055d9623135961e6abd273c90deea16a3e7": "1400000000000000000000",
  "ee3564f5f1ba0f94ec7bac164bddbf31c6888b55": "100000000000000000000",
  "cf26b47bd034bc508e6c4bcfd6c7d30034925761": "1800000000000000000000",
  "e87dbac636a37721df54b08a32ef4959b5e4ff82": "2000000000000000000000",
  "3bf86ed8a3153ec933786a02ac090301855e576b": "450000000000000000000000",
  "cfd2728dfb8bdbf3bf73598a6e13eaf43052ea2b": "170000000000000000000",
  "85b16f0b8b34dff3804f69e2168a4f7b24d1042b": "317000000000000000000",
  "84db1459bb00812ea67ecb3dc189b72187d9c501": "148851000000000000000",
  "8c3a9ee71f729f236cba3867b4d79d8ceee25dbc": "100000000000000000000",
  "e677c31fd9cb720075dca49f1abccd59ec33f734": "7800000000000000000000",
  "8889448316ccf14ed86df8e2f478dc63c4338340": "15200000000000000000",
  "b279c7d355c2880392aad1aa21ee867c3b3507df": "1261000000000000000000",
  "12b5e28945bb2969f9c64c63cc05b6f1f8d6f4d5": "7722162000000000000000",
  "8d2303341e1e1eb5e8189bde03f73a60a2a54861": "100000000000000000000",
  "94d81074db5ae197d2bb1373ab80a87d121c4bd3": "9400000000000000000000",
  "752c9febf42f66c4787bfa7eb17cf5333bba5070": "1966448000000000000000",
  "16816aac0ede0d2d3cd442da79e063880f0f1d67": "2000000000000000000000",
  "daac91c1e859d5e57ed3084b50200f9766e2c52b": "400000000000000000000",
  "32c2fde2b6aabb80e5aea2b949a217f3cb092283": "5614827000000000000000",
  "cdab46a5902080646fbf954204204ae88404822b": "544942000000000000000",
  "fdf42343019b0b0c6bf260b173afab7e45b9d621": "1999944000000000000000",
  "791f6040b4e3e50dcf3553f182cd97a90630b75d": "4000000000000000000000",
  "4b762166dd1118e84369f804c75f9cd657bf730c": "500000000000000000000",
  "a76d3f156251b72c0ccf4b47a3393cbd6f49a9c5": "1337000000000000000000",
  "c5eb42295e9cadeaf2af12dede8a8d53c579c469": "3820000000000000000000",
  "db9371b30c4c844e59e03e924be606a938d1d310": "2000000000000000000000",
  "2cd39334ac7eac797257abe3736195f5b4b5ce0f": "99964000000000000000",
  "ad44357e017e244f476931c7b8189efee80a5d0a": "300000000000000000000",
  "4ca7b717d9bc8793b04e051a8d23e1640f5ba5e3": "1248980000000000000000",
  "73e4a2b60cf48e8baf2b777e175a5b1e4d0c2d8f": "100000000000000000000",
  "5a1d2d2d1d520304b6208849570437eb3091bb9f": "1970000000000000000000",
  "53047dc8ac9083d90672e8b3473c100ccd278323": "40000000000000000000",
  "26fe174cbf526650e0cd009bd6126502ce8e684d": "11640000000000000000000",
  "e2df23f6ea04becf4ab701748dc0963184555cdb": "2000000000000000000000",
  "c1170dbaadb3dee6198ea544baec93251860fda5": "1200000000000000000000",
  "8bbeacfc29cfe93402db3c41d99ab759662e73ec": "2000000000000000000000",
  "165305b787322e25dc6ad0cefe6c6f334678d569": "2000000000000000000000",
  "095457f8ef8e2bdc362196b9a9125da09c67e3ab": "200000000000000000000",
  "702802f36d00250fab53adbcd696f0176f638a49": "2000000000000000000000",
  "489334c2b695c8ee0794bd864217fb9fd8f8b135": "18200000000000000000",
  "fa8cf4e627698c5d5788abb7880417e750231399": "4244640000000000000000",
  "3329eb3baf4345d600ced40e6e9975656f113742": "4999711000000000000000",
  "b4dd5499daeb2507fb2de12297731d4c72b16bb0": "20000000000000000000",
  "88c2516a7cdb09a6276d7297d30f5a4db1e84b86": "4000000000000000000000",
  "612ced8dc0dc9e899ee46f7962333315f3f55e44": "338830000000000000000",
  "d71e43a45177ad51cbe0f72184a5cb503917285a": "200000000000000000000",
  "2fb566c94bbba4e3cb67cdda7d5fad7131539102": "2000000000000000000000",
  "03be5b4629aefbbcab9de26d39576cb7f691d764": "200550000000000000000",
  "025367960304beee34591118e9ac2d1358d8021a": "2000000000000000000000",
  "a5d5b8b62d002def92413710d13b6ff8d4fc7dd3": "400000000000000000000",
  "df3b72c5bd71d4814e88a62321a93d4011e3578b": "4000000000000000000000",
  "3588895ac9fbafec012092dc05c0c302d90740fa": "3000000000000000000000",
  "6021e85a8814fce1e82a41abd1d3b2dad2faefe0": "2000000000000000000000",
  "17ee9f54d4ddc84d670eff11e54a659fd72f4455": "16000000000000000000000",
  "873c6f70efb6b1d0f2bbc57eebcd70617c6ce662": "1013478000000000000000",
  "1fcc7ce6a8485895a3199e16481f72e1f762defe": "1000000000000000000000",
  "d0a7209b80cf60db62f57d0a5d7d521a69606655": "160000000000000000000",
  "a514d00edd7108a6be839a638db2415418174196": "30000000000000000000000",
  "046377f864b0143f282174a892a73d3ec8ec6132": "191000000000000000000",
  "c126573d87b0175a5295f1dd07c575cf8cfa15f2": "10000000000000000000000",
  "0e123d7da6d1e6fac2dcadd27029240bb39052fe": "1000000000000000000000",
  "ad5a8d3c6478b69f657db3837a2575ef8e1df931": "36990000000000000000",
  "db882eacedd0eff263511b312adbbc59c6b8b25b": "9100000000000000000000",
  "0b43bd2391025581d8956ce42a072579cbbfcb14": "18800000000000000000",
  "affea0473722cb7f0e0e86b9e11883bf428d8d54": "1940000000000000000000",
  "e32b1c4725a1875449e98f970eb3e54062d15800": "200000000000000000000",
  "98f4af3af0aede5fafdc42a081ecc1f89e3ccf20": "9400000000000000000000",
  "3b4768fd71e2db2cbe7fa050483c27b4eb931df3": "2000000000000000000000",
  "d5f7c41e07729dfa6dfc64c4423160a22c609fd3": "1790000000000000000000",
  "d944c8a69ff2ca1249690c1229c7192f36251062": "1970000000000000000000",
  "5ae64e853ba0a51282cb8db52e41615e7c9f733f": "2000000000000000000000",
  "b13f93af30e8d7667381b2b95bc1a699d5e3e129": "420000000000000000000",
  "8a20e5b5cee7cd1f5515bace3bf4f77ffde5cc07": "80000000000000000000",
  "2448596f91c09baa30bc96106a2d37b5705e5d28": "2000000000000000000000",
  "ccca24d8c56d6e2c07db086ec07e585be267ac8d": "200000000000000000000",
  "f67bb8e2118bbcd59027666eedf6943ec9f880a5": "4000000000000000000000",
  "7ae659eb3bc46852fa86fac4e21c768d50388945": "286000000000000000000",
  "467e0ed54f3b76ae0636176e07420815a021736e": "2000000000000000000000",
  "a46cd237b63eea438c8e3b6585f679e4860832ac": "1000000000000000000000",
  "6b760d4877e6a627c1c967bee451a8507ddddbab": "910000000000000000000",
  "593044670faeff00a55b5ae051eb7be870b11694": "133700000000000000000",
  "533c06928f19d0a956cc28866bf6c8d8f4191a94": "292320000000000000000",
  "262dc1364ccf6df85c43268ee182554dae692e29": "4927600000000000000000",
  "e4368bc1420b35efda95fafbc73090521916aa34": "4000000000000000000000",
  "feb92d30bf01ff9a1901666c5573532bfa07eeec": "1000000000000000000000",
  "ee25b9a7032679b113588ed52c137d1a053a1e94": "199820000000000000000",
  "20134cbff88bfadc466b52eceaa79857891d831e": "1000000000000000000000",
  "07b1a306cb4312df66482c2cae72d1e061400fcd": "20000000000000000000000",
  "e791d585b89936b25d298f9d35f9f9edc25a2932": "2000000000000000000000",
  "2e6933543d4f2cc00b5350bd8068ba9243d6beb0": "2000000000000000000000",
  "dae0d33eaa341569fa9ff5982684854a4a328a6e": "1000000000000000000000",
  "125cc5e4d56b2bcc2ee1c709fb9e68fb177440bd": "2000000000000000000000",
  "ec99e95dece46ffffb175eb6400fbebb08ee9b95": "100000000000000000000",
  "c538a0ff282aaa5f4b75cfb62c70037ee67d4fb5": "2000000000000000000000",
  "60676d1fa21fca052297e24bf96389c5b12a70d7": "241500000000000000000",
  "4b3dfbdb454be5279a3b8addfd0ed1cd37a9420d": "2000000000000000000000",
  "cdb597299030183f6e2d238533f4642aa58754b6": "400000000000000000000",
  "1ef2dcbfe0a500411d956eb8c8939c3d6cfe669d": "776000000000000000000",
  "a7247c53d059eb7c9310f628d7fc6c6a0a773f08": "500000000000000000000",
  "9799ca21dbcf69bfa1b3f72bac51b9e3ca587cf9": "1700000000000000000000",
  "ddf95c1e99ce2f9f5698057c19d5c94027ee4a6e": "6000000000000000000000",
  "83563bc364ed81a0c6da3b56ff49bbf267827a9c": "17332000000000000000000",
  "a192698007cc11aa603d221d5feea076bcf7c30d": "2000000000000000000000",
  "0134ff38155fabae94fd35c4ffe1d79de7ef9c59": "985000000000000000000",
  "80977316944e5942e79b0e3abad38da746086519": "38800000000000000000",
  "193d37ed347d1c2f4e35350d9a444bc57ca4db43": "60000000000000000000",
  "009a6d7db326679b77c90391a7476d238f3ba33e": "200200000000000000000",
  "337b3bdf86d713dbd07b5dbfcc022b7a7b1946ae": "3980000000000000000000",
  "7de7fe419cc61f91f408d234cc80d5ca3d054d99": "20000000000000000000",
  "f47bb134da30a812d003af8dccb888f44bbf5724": "5190000000000000000000",
  "fd920f722682afb5af451b0544d4f41b3b9d5742": "2330200000000000000000",
  "0a917f3b5cb0b883047fd9b6593dbcd557f453b9": "1000000000000000000000",
  "ce9786d3712fa200e9f68537eeaa1a06a6f45a4b": "1790000000000000000000",
  "9ab98d6dbb1eaae16d45a04568541ad3d8fe06cc": "272451000000000000000",
  "0b7bb342f01bc9888e6a9af4a887cbf4c2dd2caf": "16000000000000000000000",
  "4c0b1515dfced7a13e13ee12c0f523ae504f032b": "50000000000000000000000",
  "ac2889b5966f0c7f9edb42895cb69d1c04f923a2": "5000000000000000000000",
  "d008513b27604a89ba1763b6f84ce688b346945b": "1000000000000000000000",
  "a4b09de6e713dc69546e76ef0acf40b94f0241e6": "322656000000000000000",
  "b153f828dd076d4a7c1c2574bb2dee1a44a318a8": "400000000000000000000",
  "02ade5db22f8b758ee1443626c64ec2f32aa0a15": "20000000000000000000000",
  "0a0650861f785ed8e4bf1005c450bbd06eb48fb6": "3066860000000000000000",
  "b75149e185f6e3927057739073a1822ae1cf0df2": "4000086000000000000000",
  "84cb7da0502df45cf561817bbd2362f451be02da": "1337000000000000000000",
  "c91bb562e42bd46130e2d3ae4652b6a4eb86bc0f": "540000000000000000000",
  "b234035f7544463ce1e22bc553064684c513cd51": "249750000000000000000",
  "e5e33800a1b2e96bde1031630a959aa007f26e51": "1337000000000000000000",
  "ae5ce3355a7ba9b332760c0950c2bc45a85fa9a0": "400000000000000000000",
  "e6f5eb649afb99599c414b27a9c9c855357fa878": "2674000000000000000000",
  "7010be2df57bd0ab9ae8196cd50ab0c521aba9f9": "1970000000000000000000",
  "ca4288014eddc5632f5facb5e38517a8f8bc5d98": "340000000000000000000",
  "2784903f1d7c1b5cd901f8875d14a79b3cbe2a56": "22388000000000000000000",
  "f8dce867f0a39c5bef9eeba609229efa02678b6c": "2000000000000000000000",
  "e020e86362b487752836a6de0bc02cd8d89a8b6a": "6000000000000000000000",
  "c4088c025f3e85013f5439fb3440a17301e544fe": "2325000000000000000000",
  "befb448c0c5f683fb67ee570baf0db5686599751": "1970000000000000000000",
  "2f187d5a704d5a338c5b2876a090dce964284e29": "4000000000000000000000",
  "ec0e18a01dc4dc5daae567c3fa4c7f8f9b590205": "315900000000000000000",
  "637f5869d6e4695f0eb9e27311c4878aff333380": "1969212000000000000000",
  "d1100dd00fe2ddf18163ad964d0b69f1f2e9658a": "5959598000000000000000",
  "17ef4acc1bf147e326749d10e677dcffd76f9e06": "39980000000000000000000",
  "200dfc0b71e359b2b465440a36a6cdc352773007": "1500000000000000000000",
  "efe0675da98a5dda70cd96196b87f4e726b43348": "1164000000000000000000",
  "d5bd5e8455c130169357c471e3e681b7996a7276": "841500000000000000000",
  "9c7b6dc5190fe2912963fcd579683ec7395116b0": "776000000000000000000",
  "b105dd3d987cffd813e9c8500a80a1ad257d56c6": "1999944000000000000000",
  "145250b06e4fa7cb2749422eb817bdda8b54de5f": "219000000000000000000",
  "d96db33b7b5a950c3efa2dc31b10ba10a532ef87": "2000000000000000000000",
  "af529bdb459cc185bee5a1c58bf7e8cce25c150d": "197000000000000000000",
  "185546e8768d506873818ac9751c1f12116a3bef": "200000000000000000000",
  "51d24bc3736f88dd63b7222026886630b6eb878d": "2000000000000000000000",
  "69af28b0746cac0da17084b9398c5e36bb3a0df2": "1004700000000000000000",
  "76f83ac3da30f7092628c7339f208bfc142cb1ee": "2842600000000000000000",
  "00f463e137dcf625fbf3bca39eca98d2b968cf7f": "5910000000000000000000",
  "2084fce505d97bebf1ad8c5ff6826fc645371fb2": "30000000000000000000",
  "53a714f99fa00fef758e23a2e746326dad247ca7": "1490000000000000000000",
  "0bf064428f83626722a7b5b26a9ab20421a7723e": "133700000000000000000",
  "ac6f68e837cf1961cb14ab47446da168a16dde89": "1337000000000000000000",
  "4b3c7388cc76da3d62d40067dabccd7ef0433d23": "100076000000000000000",
  "deb9a49a43873020f0759185e20bbb4cf381bb8f": "211628000000000000000",
  "5bf9f2226e5aeacf1d80ae0a59c6e38038bc8db5": "6000000000000000000000",
  "9d0e7d92fb305853d798263bf15e97c72bf9d7e0": "1000000000000000000000",
  "2b5c60e84535eeb4d580de127a12eb2677ccb392": "20000000000000000000000",
  "d8d65420c18c2327cc5af97425f857e4a9fd51b3": "1760000000000000000000",
  "30ec9392244a2108c987bc5cdde0ed9f837a817b": "1560562000000000000000",
  "56a1d60d40f57f308eebf087dee3b37f1e7c2cba": "1159600000000000000000",
  "a9a1cdc33bfd376f1c0d76fb6c84b6b4ac274d68": "5000000000000000000000",
  "a67f38819565423aa85f3e3ab61bc763cbab89dd": "2130000000000000000000",
  "62d5cc7117e18500ac2f9e3c26c86b0a94b0de15": "105000000000000000000",
  "4970d3acf72b5b1f32a7003cf102c64ee0547941": "140000000000000000000000",
  "76628150e2995b5b279fc83e0dd5f102a671dd1c": "40000000000000000000000",
  "3d8f39881b9edfe91227c33fa4cdd91e678544b0": "86111000000000000000",
  "ff0b7cb71da9d4c1ea6ecc28ebda504c63f82fd1": "1043000000000000000000",
  "8d795c5f4a5689ad62da961671f028065286d554": "2048000000000000000000",
  "be2346a27ff9b702044f500deff2e7ffe6824541": "20000000000000000000",
  "0dbd417c372b8b0d01bcd944706bd32e60ae28d1": "340000000000000000000",
  "467fbf41441600757fe15830c8cd5f4ffbbbd560": "10000000000000000000000",
  "090cd67b60e81d54e7b5f6078f3e021ba65b9a1e": "1000000000000000000000",
  "55a4cac0cb8b582d9fef38c5c9fff9bd53093d1f": "1970000000000000000000",
  "3b7b4f53c45655f3dc5f017edc23b16f9bc536fa": "100000000000000000000",
  "d508d39c70916f6abc4cc7f999f011f077105802": "100470000000000000000",
  "037dd056e7fdbd641db5b6bea2a8780a83fae180": "140000000000000000000",
  "660557bb43f4be3a1b8b85e7df7b3c5bcd548057": "6000000000000000000000",
  "02089361a3fe7451fb1f87f01a2d866653dc0b07": "39976000000000000000",
  "c4bec96308a20f90cab18399c493fd3d065abf45": "14000000000000000000000",
  "cca07bb794571d4acf041dad87f0d1ef3185b319": "2000000000000000000000",
  "f2d0e986d814ea13c8f466a0538c53dc922651f0": "1380000000000000000000",
  "662cfa038fab37a01745a364e1b98127c503746d": "3940000000000000000000",
  "3336c3ef6e8b50ee90e037b164b7a8ea5faac65d": "272712000000000000000",
  "30e33358fc21c85006e40f32357dc8895940aaf0": "1910000000000000000000",
  "41a9a404fc9f5bfee48ec265b12523338e29a8bf": "388000000000000000000",
  "6af235d2bbe050e6291615b71ca5829658810142": "3000000000000000000000",
  "fd5a63157f914fd398eab19c137dd9550bb7715c": "100000000000000000000",
  "8a4314fb61cd938fc33e15e816b113f2ac89a7fb": "432800000000000000000",
  "b216dc59e27c3d7279f5cd5bb2becfb2606e14d9": "400000000000000000000",
  "f5a5459fcdd5e5b273830df88eea4cb77ddadfb9": "74500000000000000000",
  "df31025f5649d2c6eea41ed3bdd3471a790f759a": "20000000000000000000",
  "721f9d17e5a0e74205947aeb9bc6a7938961038f": "51900000000000000000",
  "08d0864dc32f9acb36bf4ea447e8dd6726906a15": "2000200000000000000000",
  "54575c3114751e3c631971da6a2a02fd3ffbfcc8": "1940000000000000000000",
  "8f60895fbebbb5017fcbff3cdda397292bf25ba6": "429177000000000000000",
  "91fe8a4c6164df8fa606995d6ba7adcaf1c893ce": "17000000000000000000000",
  "889087f66ff284f8b5efbd29493b706733ab1447": "9850000000000000000000",
  "051633080d07a557adde319261b074997f14692d": "5800000000000000000000",
  "59a12df2e3ef857aceff9306b309f6a500f70134": "1000000000000000000000",
  "9f64a8e8dacf4ade30d10f4d59b0a3d5abfdbf74": "1000060000000000000000",
  "8846928d683289a2d11df8db7a9474988ef01348": "10000000000000000000000",
  "dff1b220de3d8e9ca4c1b5be34a799bcded4f61c": "385428000000000000000",
  "7e7c1e9a61a08a83984835c70ec31d34d3eaa87f": "191000000000000000000",
  "fe210b8f04dc6d4f76216acfcbd59ba83be9b630": "20000000000000000000",
  "dc8c2912f084a6d184aa73638513ccbc326e0102": "1295000000000000000000",
  "dddd7b9e6eab409b92263ac272da801b664f8a57": "500000000000000000000000",
  "86a5f8259ed5b09e188ce346ee92d34aa5dd93fa": "200000000000000000000",
  "dc1f1979615f082140b8bb78c67b27a1942713b1": "60000000000000000000",
  "ea66e7b84dcdbf36eea3e75b85382a75f1a15d96": "1729135000000000000000",
  "039e7a4ebc284e2ccd42b1bdd60bd6511c0f7706": "17300000000000000000",
  "36bfe1fa3b7b70c172eb042f6819a8972595413e": "1000000000000000000000",
  "039ef1ce52fe7963f166d5a275c4b1069fe3a832": "400008000000000000000",
  "f1df55dcc34a051012b575cb968bc9c458ea09c9": "4000000000000000000000",
  "168b5019b818691644835fe69bf229e17112d52c": "28000000000000000000000",
  "f60bd735543e6bfd2ea6f11bff627340bc035a23": "2000000000000000000000",
  "2cbb0c73df91b91740b6693b774a7d05177e8e58": "1850000000000000000000",
  "9ffcf5ef46d933a519d1d16c6ba3189b27496224": "1000000000000000000000",
  "0e11d77a8977fac30d268445e531149b31541a24": "2000000000000000000000",
  "dfb1626ef48a1d7d7552a5e0298f1fc23a3b482d": "1713860000000000000000",
  "cc943be1222cd1400a2399dd1b459445cf6d54a9": "12530000000000000000000",
  "b37c2b9f50637bece0ca959208aefee6463ba720": "400000000000000000000",
  "96b906ea729f4655afe3e57d35277c967dfa1577": "1000000000000000000000",
  "7995bd8ce2e0c67bf1c7a531d477bca1b2b97561": "5945100000000000000000",
  "96f820500b70f4a3e3239d619cff8f222075b135": "200000000000000000000",
  "ad3565d52b688added08168b2d3872d17d0a26ae": "100000000000000000000",
  "9e7c2050a227bbfd60937e268cea3e68fea8d1fe": "100000000000000000000",
  "7e59dc60be8b2fc19abd0a5782c52c28400bce97": "1000000000000000000000",
  "01ed5fba8d2eab673aec042d30e4e8a611d8c55a": "2000000000000000000000",
  "59a087b9351ca42f58f36e021927a22988284f38": "18500000000000000000",
  "2fe0023f5722650f3a8ac01009125e74e3f82e9b": "3000000000000000000000",
  "bd1803370bddb129d239fd16ea8526a6188ae58e": "500000000000000000000",
  "c70527d444c490e9fc3f5cc44e66eb4f306b380f": "4000000000000000000000",
  "0f206e1a1da7207ea518b112418baa8b06260328": "600000000000000000000",
  "6e1a046caf5b4a57f4fd4bc173622126b4e2fd86": "1790000000000000000000",
  "84008a72f8036f3feba542e35078c057f32a8825": "100000000000000000000",
  "246291165b59332df5f18ce5c98856fae95897d6": "1700000000000000000000",
  "7e99dfbe989d3ba529d19751b7f4317f8953a3e2": "400000000000000000000",
  "748c285ef1233fe4d31c8fb1378333721c12e27a": "2000000000000000000000",
  "3dd12e556a603736feba4a6fa8bd4ac45d662a04": "167450000000000000000000",
  "d0ae735d915e946866e1fea77e5ea466b5cadd16": "2000000000000000000000",
  "4f767bc8794aef9a0a38fea5c81f14694ff21a13": "512200000000000000000",
  "0e2f8e28a681f77c583bd0ecde16634bdd7e00cd": "95060000000000000000",
  "d74a6e8d6aab34ce85976814c1327bd6ea0784d2": "100000000000000000000000",
  "629be7ab126a5398edd6da9f18447e78c692a4fd": "2000000000000000000000",
  "2e46fcee6a3bb145b594a243a3913fce5dad6fba": "10000000000000000000000",
  "e39b11a8ab1ff5e22e5ae6517214f73c5b9b55dc": "2000000000000000000000",
  "119aa64d5b7d181dae9d3cb449955c89c1f963fa": "700000000000000000000",
  "ce079f51887774d8021cb3b575f58f18e9acf984": "180000000000000000000",
  "550c306f81ef5d9580c06cb1ab201b95c748a691": "665800000000000000000",
  "06dc7f18cee7edab5b795337b1df6a9e8bd8ae59": "400000000000000000000",
  "e21c778ef2a0d7f751ea8c074d1f812243863e4e": "5308559000000000000000",
  "45d4b54d37a8cf599821235f062fa9d170ede8a4": "324000000000000000000",
  "893a6c2eb8b40ab096b4f67e74a897b840746e86": "1730000000000000000000",
  "d44d81e18f46e2cfb5c1fcf5041bc8569767d100": "36381800000000000000000",
  "c5de1203d3cc2cea31c82ee2de5916880799eafd": "5000000000000000000000",
  "7f0f04fcf37a53a4e24ede6e93104e78be1d3c9e": "2000000000000000000000",
  "3ce1dc97fcd7b7c4d3a18a49d6f2a5c1b1a906d7": "200000000000000000000",
  "ac4ee9d502e7d2d2e99e59d8ca7d5f00c94b4dd6": "1000000000000000000000",
  "7640a37f8052981515bce078da93afa4789b5734": "2000000000000000000000",
  "76cac488111a4fd595f568ae3a858770fc915d5f": "200000000000000000000",
  "ff4a408f50e9e72146a28ce4fc8d90271f116e84": "1970000000000000000000",
  "249db29dbc19d1235da7298a04081c315742e9ac": "1801800000000000000000",
  "3a04572847d31e81f7765ca5bfc9d557159f3683": "133031000000000000000",
  "b6771b0bf3427f9ae7a93e7c2e61ee63941fdb08": "18800000000000000000000",
  "30c26a8e971baa1855d633ba703f028cc7873140": "10000000000000000000000",
  "167e3e3ae2003348459392f7dfce44af7c21ad59": "500000000000000000000",
  "43f16f1e75c3c06a9478e8c597a40a3cb0bf04cc": "2914000000000000000000",
  "056b1546894f9a85e203fb336db569b16c25e04f": "169397000000000000000",
  "70616e2892fa269705b2046b8fe3e72fa55816d3": "20000000000000000000000",
  "8f4d1d41693e462cf982fd81d0aa701d3a5374c9": "4000000000000000000000",
  "c518799a5925576213e21896e0539abb85b05ae3": "1000000000000000000000",
  "0e3a28c1dfafb0505bdce19fe025f506a6d01ceb": "2000000000000000000000",
  "e4a47e3933246c3fd62979a1ea19ffdf8c72ef37": "148273000000000000000",
  "d231929735132102471ba59007b6644cc0c1de3e": "1000090000000000000000",
  "555d8d3ce1798aca902754f164b8be2a02329c6c": "10000000000000000000000",
  "5ab1a5615348001c7c775dc75748669b8be4de14": "690200000000000000000",
  "2fee36a49ee50ecf716f1047915646779f8ba03f": "1056230000000000000000",
  "54db5e06b4815d31cb56a8719ba33af2d73e7252": "670000000000000000000",
  "7c8bb65a6fbb49bd413396a9d7e31053bbb37aa9": "6000000000000000000000",
  "c1384c6e717ebe4b23014e51f31c9df7e4e25b31": "500000000000000000000",
  "474158a1a9dc693c133f65e47b5c3ae2f773a86f": "200200000000000000000",
  "2934c0df7bbc172b6c186b0b72547ace8bf75454": "60000000000000000000",
  "6966063aa5de1db5c671f3dd699d5abe213ee902": "8000000000000000000000",
  "9225d46a5a80943924a39e5b84b96da0ac450581": "40000000000000000000000",
  "671bbca099ff899bab07ea1cf86965c3054c8960": "50000000000000000000",
  "f1f766b0e46d73fcd4d52e7a72e1b9190cc632b3": "8000000000000000000000",
  "ef0dc7dd7a53d612728bcbd2b27c19dd4d7d666f": "705668000000000000000",
  "38d2e9154964b41c8d50a7487d391e7ee2c3d3c2": "3500000000000000000000",
  "352a785f4a921632504ce5d015f83c49aa838d6d": "4314800000000000000000",
  "743de50026ca67c94df54f066260e1d14acc11ac": "2000000000000000000000",
  "b188078444027e386798a8ae68698919d5cc230d": "267400000000000000000",
  "53608105ce4b9e11f86bf497ffca3b78967b5f96": "20000000000000000000000",
  "3b159099075207c6807663b1f0f7eda54ac8cce3": "1969543000000000000000",
  "141a5e39ee2f680a600fbf6fa297de90f3225cdd": "10000000000000000000000",
  "44fff37be01a3888d3b8b8e18880a7ddefeeead3": "259145000000000000000",
  "c5a629a3962552cb8eded889636aafbd0c18ce65": "10000000000000000000000",
  "fdba5359f7ec3bc770ac49975d844ec9716256f1": "1000000000000000000000",
  "7c1df24a4f7fb2c7b472e0bb006cb27dcd164156": "1000000000000000000000",
  "ab7d54c7c6570efca5b4b8ce70f52a5773e5d53b": "279600000000000000000",
  "3f173aa6edf469d185e59bd26ae4236b92b4d8e1": "320000000000000000000",
  "a3f4ad14e0bb44e2ce2c14359c75b8e732d37054": "200000000000000000000",
  "ac5f627231480d0d95302e6d89fc32cb1d4fe7e3": "200000000000000000000",
  "d0775dba2af4c30a3a78365939cd71c2f9de95d2": "1940000000000000000000",
  "ad94235fc3b3f47a2413af31e884914908ef0c45": "500008000000000000000",
  "eaedcc6b8b6962d5d9288c156c579d47c0a9fcff": "85000000000000000000",
  "7ac48d40c664cc9a6d89f1c5f5c80a1c70e744e6": "3008000000000000000000",
  "ec73114c5e406fdbbe09b4fa621bd70ed54ea1ef": "24500000000000000000000",
  "a690f1a4b20ab7ba34628620de9ca040c43c1963": "4000000000000000000000",
  "cad14f9ebba76680eb836b079c7f7baaf481ed6d": "238600000000000000000",
  "6c714a58fff6e97d14b8a5e305eb244065688bbd": "4000000000000000000000",
  "3e618350fa01657ab0ef3ebac8e37012f8fc2b6f": "2804400000000000000000",
  "c946d5acc1346eba0a7279a0ac1d465c996d827e": "16385128000000000000000",
  "1164caaa8cc5977afe1fad8a7d6028ce2d57299b": "400000000000000000000",
  "7917e5bd82a9790fd650d043cdd930f7799633db": "3999800000000000000000",
  "d52aecc6493938a28ca1c367b701c21598b6a02e": "1100000000000000000000",
  "98bed3a72eccfbafb923489293e429e703c7e25b": "2000000000000000000000",
  "42db0b902559e04087dd5c441bc7611934184b89": "2014420000000000000000",
  "43bc2d4ddcd6583be2c7bc094b28fb72e62ba83b": "2000000000000000000000",
  "85f0e7c1e3aff805a627a2aaf2cff6b4c0dbe9cb": "20000000000000000000",
  "581b9fd6eae372f3501f42eb9619eec820b78a84": "19699015000000000000000",
  "541db20a80cf3b17f1621f1b3ff79b882f50def3": "1000000000000000000000",
  "4e8a6d63489ccc10a57f885f96eb04ecbb546024": "18500000000000000000000",
  "28349f7ef974ea55fe36a1583b34cec3c45065f0": "234490000000000000000",
  "a3241d890a92baf52908dc4aa049726be426ebd3": "19999560000000000000000",
  "b4b11d109f608fa8edd3fea9f8c315649aeb3d11": "5000000000000000000000",
  "5f321b3daaa296cadf29439f9dab062a4bffedd6": "81868000000000000000",
  "c5ae86b0c6c7e3900f1368105c56537faf8d743e": "188000000000000000000",
  "9a8eca4189ff4aa8ff7ed4b6b7039f0902219b15": "20000000000000000000",
  "a3facc50195c0b4933c85897fecc5bbd995c34b8": "20000000000000000000",
  "f07bd0e5c2ce69c7c4a724bd26bbfa9d2a17ca03": "5910000000000000000000",
  "640aba6de984d94517377803705eaea7095f4a11": "10000000000000000000000",
  "204ac98867a7c9c7ed711cb82f28a878caf69b48": "6000000000000000000000",
  "9d34dac25bd15828faefaaf28f710753b39e89dc": "1090400000000000000000",
  "fe418b421a9c6d373602790475d2303e11a75930": "1015200000000000000000",
  "3f472963197883bbda5a9b7dfcb22db11440ad31": "481445000000000000000",
  "1578bdbc371b4d243845330556fff2d5ef4dff67": "100000000000000000000",
  "dba4796d0ceb4d3a836b84c96f910afc103f5ba0": "166666000000000000000",
  "466fda6b9b58c5532750306a10a2a8c768103b07": "199955000000000000000",
  "2770f14efb165ddeba79c10bb0af31c31e59334c": "3000000000000000000000",
  "7c382c0296612e4e97e440e02d3871273b55f53b": "197600000000000000000",
  "1fb7bd310d95f2a6d9baaf8a8a430a9a04453a8b": "3000000000000000000000",
  "a9acf600081bb55bb6bfbab1815ffc4e17e85a95": "200000000000000000000",
  "f93d5bcb0644b0cce5fcdda343f5168ffab2877d": "209978000000000000000",
  "db0cc78f74d9827bdc8a6473276eb84fdc976212": "2000000000000000000000",
  "b66411e3a02dedb726fa79107dc90bc1cae64d48": "2000000000000000000000",
  "4d6e8fe109ccd2158e4db114132fe75fecc8be5b": "25019000000000000000",
  "6fd947d5a73b175008ae6ee8228163da289b167d": "30000000000000000000000",
  "32d950d5e93ea1d5b48db4714f867b0320b31c0f": "1015200000000000000000",
  "9c99b62606281b5cefabf36156c8fe62839ef5f3": "4000000000000000000000",
  "86c8d0d982b539f48f9830f9891f9d607a942659": "13260000000000000000000",
  "f2127d54188fedef0f338a5f38c7ff73ad9f6f42": "20000000000000000000000",
  "e864fec07ed1214a65311e11e329de040d04f0fd": "1656353000000000000000",
  "1d09ad2412691cc581c1ab36b6f9434cd4f08b54": "7000000000000000000000",
  "4ea70f04313fae65c3ff224a055c3d2dab28dddf": "19999800000000000000000",
  "e0668fa82c14d6e8d93a53113ef2862fa81581bc": "870400000000000000000",
  "f0d858105e1b648101ac3f85a0f8222bf4f81d6a": "600000000000000000000",
  "0f3a1023cac04dbf44f5a5fa6a9cf8508cd4fddf": "1820000000000000000000",
  "5793abe6f1533311fd51536891783b3f9625ef1c": "827268000000000000000",
  "8d667637e29eca05b6bfbef1f96d460eefbf9984": "4000000000000000000000",
  "d76dbaebc30d4ef67b03e6e6ecc6d84e004d502d": "2019250000000000000000",
  "42d1a6399b3016a8597f8b640927b8afbce4b215": "2980000000000000000000",
  "21fd47c5256012198fa5abf131c06d6aa1965f75": "7880000000000000000000",
  "2f2bba1b1796821a766fce64b84f28ec68f15aea": "20000000000000000000",
  "d24bf12d2ddf457decb17874efde2052b65cbb49": "14000000000000000000000",
  "88de13b09931877c910d593165c364c8a1641bd3": "3000000000000000000000",
  "555ca9f05cc134ab54ae9bea1c3ff87aa85198ca": "100000000000000000000",
  "ae9ecd6bdd952ef497c0050ae0ab8a82a91898ce": "30000000000000000000",
  "ad8bfef8c68a4816b3916f35cb7bfcd7d3040976": "40000000000000000000000",
  "dad136b88178b4837a6c780feba226b98569a94c": "200000000000000000000",
  "800e7d631c6e573a90332f17f71f5fd19b528cb9": "152000000000000000000",
  "94a9a71691317c2064271b51c9353fbded3501a8": "3340000000000000000000",
  "80a0f6cc186cf6201400736e065a391f52a9df4a": "10000000000000000000000",
  "712ff7370a13ed360973fedc9ff5d2c93a505e9e": "3940000000000000000000",
  "42399659aca6a5a863ea2245c933fe9a35b7880e": "2044000000000000000000",
  "ae239acffd4ebe2e1ba5b4170572dc79cc6533ec": "12000000000000000000000",
  "007b9fc31905b4994b04c9e2cfdc5e2770503f42": "1999000000000000000000",
  "7480de62254f2ba82b578219c07ba5be430dc3cb": "7040000000000000000000",
  "917b8f9f3a8d09e9202c52c29e724196b897d35e": "161000000000000000000",
  "708ea707bae4357f1ebea959c3a250acd6aa21b3": "500000000000000000000",
  "6dc7053a718616cfc78bee6382ee51add0c70330": "2000000000000000000000",
  "c4dac5a8a0264fbc1055391c509cc3ee21a6e04c": "6501000000000000000000",
  "c1b2a0fb9cad45cd699192cd27540b88d3384279": "500000000000000000000",
  "b07cb9c12405b711807543c4934465f87f98bd2d": "2000000000000000000000",
  "c7f72bb758016b374714d4899bce22b4aec70a31": "1072706000000000000000",
  "0c480de9f7461002908b49f60fc61e2b62d3140b": "10000000000000000000000",
  "83d532d38d6dee3f60adc68b936133c7a2a1b0dd": "500000000000000000000",
  "12afbcba1427a6a39e7ba4849f7ab1c4358ac31b": "20000000000000000000000",
  "f8f6645e0dee644b3dad81d571ef9baf840021ad": "2000000000000000000000",
  "40cf890591eae4a18f812a2954cb295f633327e6": "48132000000000000000",
  "735b97f2fc1bd24b12076efaf3d1288073d20c8c": "20000000000000000000",
  "47c7e5efb48b3aed4b7c6e824b435f357df4c723": "18200000000000000000",
  "d34d708d7398024533a5a2b2309b19d3c55171bb": "400000000000000000000",
  "64370e87202645125a35b207af1231fb6072f9a7": "200000000000000000000",
  "b055af4cadfcfdb425cf65ba6431078f07ecd5ab": "100000000000000000000",
  "c7de5e8eafb5f62b1a0af2195cf793c7894c9268": "1000000000000000000000",
  "c63cd7882118b8a91e074d4c8f4ba91851303b9a": "260000000000000000000",
  "164d7aac3eecbaeca1ad5191b753f173fe12ec33": "744090000000000000000",
  "e4fb26d1ca1eecba3d8298d9d148119ac2bbf580": "400000000000000000000",
  "613ac53be565d46536b820715b9b8d3ae68a4b95": "3760000000000000000000",
  "7f616c6f008adfa082f34da7d0650460368075fb": "1000000000000000000000",
  "9af100cc3dae83a33402051ce4496b16615483f6": "2000000000000000000000",
  "b45cca0d36826662683cf7d0b2fdac687f02d0c4": "1000000000000000000000",
  "93a6b3ab423010f981a7489d4aad25e2625c5741": "20190033000000000000000",
  "ee049af005974dd1c7b3a9ca8d9aa77175ba53aa": "333333000000000000000",
  "687927e3048bb5162ae7c15cf76bd124f9497b9e": "2000000000000000000000",
  "1aa40270d21e5cde86b6316d1ac3c533494b79ed": "20000000000000000000",
  "426259b0a756701a8b663528522156c0288f0f24": "9900000000000000000000",
  "91c75e3cb4aa89f34619a164e2a47898f5674d9c": "2000000000000000000000",
  "437983388ab59a4ffc215f8e8269461029c3f1c1": "20000000000000000000000",
  "272a131a5a656a7a3aca35c8bd202222a7592258": "2674000000000000000000",
  "bc0ca4f217e052753614d6b019948824d0d8688b": "400000000000000000000",
  "cc6c03bd603e09de54e9c4d5ac6d41cbce715724": "98500000000000000000",
  "d79aff13ba2da75d46240cac0a2467c656949823": "1730000000000000000000",
  "477b24eee8839e4fd19d1250bd0b6645794a61ca": "8000000000000000000000",
  "79fd6d48315066c204f9651869c1096c14fc9781": "2000000000000000000000",
  "1463a873555bc0397e575c2471cf77fa9db146e0": "10000000000000000000000",
  "89ab13ee266d779c35e8bb04cd8a90cc2103a95b": "60000000000000000000000",
  "90acced7e48c08c6b934646dfa0adf29dc94074f": "56154000000000000000",
  "31ea6eab19d00764e9a95e183f2b1b22fc7dc40f": "20000000000000000000",
  "87a53ea39f59a35bada8352521645594a1a714cb": "1910000000000000000000",
  "1e1aed85b86c6562cb8fa1eb6f8f3bc9dcae6e79": "4516200000000000000000",
  "e36a8ea87f1e99e8a2dc1b2608d166667c9dfa01": "100000000000000000000",
  "ec2cb8b9378dff31aec3c22e0e6dadff314ab5dd": "2000000000000000000000",
  "3cadeb3d3eed3f62311d52553e70df4afce56f23": "4000000000000000000000",
  "3ceca96bb1cdc214029cbc5e181d398ab94d3d41": "80000000000000000000000",
  "3283eb7f9137dd39bed55ffe6b8dc845f3e1a079": "66224000000000000000",
  "0954a8cb5d321fc3351a7523a617d0f58da676a7": "2506000000000000000000",
  "de33d708a3b89e909eaf653b30fdc3a5d5ccb4b3": "177300000000000000000",
  "1c6702b3b05a5114bdbcaeca25531aeeb34835f4": "26071500000000000000000",
  "e5b96fc9ac03d448c1613ac91d15978145dbdfd1": "200000000000000000000",
  "fbf204c813f836d83962c7870c7808ca347fd33e": "20000000000000000000",
  "3b13631a1b89cb566548899a1d60915cdcc4205b": "2000000000000000000000",
  "a87f7abd6fa31194289678efb63cf584ee5e2a61": "4000000000000000000000",
  "c0a39308a80e9e84aaaf16ac01e3b01d74bd6b2d": "136499000000000000000",
  "ffd6da958eecbc016bab91058440d39b41c7be83": "20000000000000000000000",
  "0e3dd7d4e429fe3930a6414035f52bdc599d784d": "40110000000000000000",
  "e0663e8cd66792a641f56e5003660147880f018e": "2000000000000000000000",
  "5b78eca27fbdea6f26befba8972b295e7814364b": "2000000000000000000000",
  "ec9851bd917270610267d60518b54d3ca2b35b17": "40000000000000000000000",
  "bc9c95dfab97a574cea2aa803b5caa197cef0cff": "420000000000000000000",
  "100b4d0977fcbad4debd5e64a0497aeae5168fab": "314500000000000000000",
  "1b6610fb68bad6ed1cfaa0bbe33a24eb2e96fafb": "152000000000000000000",
  "b4524c95a7860e21840296a616244019421c4aba": "8000000000000000000000",
  "88975a5f1ef2528c300b83c0c607b8e87dd69315": "83500000000000000000",
  "853e6abaf44469c72f151d4e223819aced4e3728": "2000000000000000000000",
  "d604abce4330842e3d396ca73ddb5519ed3ec03f": "163940000000000000000",
  "d209482bb549abc4777bea6d7f650062c9c57a1c": "320880000000000000000",
  "590acbda37290c0d3ec84fc2000d7697f9a4b15d": "500000000000000000000",
  "571950ea2c90c1427d939d61b4f2de4cf1cfbfb0": "20000000000000000000",
  "cb94e76febe208116733e76e805d48d112ec9fca": "1000000000000000000000",
  "fa8e3b1f13433900737daaf1f6299c4887f85b5f": "715000000000000000000",
  "162d76c2e6514a3afb6fe3d3cb93a35c5ae783f1": "2000000000000000000000",
  "4bea288eea42c4955eb9faad2a9faf4783cbddac": "28790618000000000000000",
  "c8ab1a3cf46cb8b064df2e222d39607394203277": "2000000000000000000000",
  "318b2ea5f0aaa879c4d5e548ac9d92a0c67487b7": "200000000000000000000",
  "53c5fe0119e1e848640cee30adea96940f2a5d8b": "21746000000000000000000",
  "0701f9f147ec486856f5e1b71de9f117e99e2105": "173360000000000000000",
  "337cfe1157a5c6912010dd561533791769c2b6a6": "1000000000000000000000",
  "fd60d2b5af3d35f7aaf0c393052e79c4d823d985": "56400000000000000000",
  "0f049a8bdfd761de8ec02cee2829c4005b23c06b": "252000000000000000000",
  "924bce7a853c970bb5ec7bb759baeb9c7410857b": "13700000000000000000",
  "16abb8b021a710bdc78ea53494b20614ff4eafe8": "158000000000000000000",
  "9e7f65a90e8508867bccc914256a1ea574cf07e3": "1240000000000000000000",
  "01d03815c61f416b71a2610a2daba59ff6a6de5b": "9553100000000000000000",
  "3df762049eda8ac6927d904c7af42f94e5519601": "2000000000000000000000",
  "5593c9d4b664730fd93ca60151c25c2eaed93c3b": "200000000000000000000",
  "e023f09b2887612c7c9cf1988e3a3a602b3394c9": "2000000000000000000000",
  "4c13980c32dcf3920b78a4a7903312907c1b123f": "60024000000000000000",
  "a282e969cac9f7a0e1c0cd90f5d0c438ac570da3": "627760000000000000000",
  "3b22da2a0271c8efe102532773636a69b1c17e09": "502000000000000000000",
  "1aa1021f550af158c747668dd13b463160f95a40": "1470000000000000000000",
  "f15178ffc43aa8070ece327e930f809ab1a54f9d": "197600000000000000000",
  "db1293a506e90cad2a59e1b8561f5e66961a6788": "2000000000000000000000",
  "88c361640d6b69373b081ce0c433bd590287d5ec": "50000000000000000000000",
  "3737216ee91f177732fb58fa4097267207e2cf55": "1520000000000000000000",
  "a16d9e3d63986159a800b46837f45e8bb980ee0b": "2030400000000000000000",
  "ec76f12e57a65504033f2c0bce6fc03bd7fa0ac4": "3580000000000000000000",
  "d9f1b26408f0ec67ad1d0d6fe22e8515e1740624": "24000000000000000000",
  "716ba01ead2a91270635f95f25bfaf2dd610ca23": "44750000000000000000000",
  "42a98bf16027ce589c4ed2c95831e2724205064e": "10000000000000000000000",
  "0f88aac9346cb0e7347fba70905475ba8b3e5ece": "10000000000000000000000",
  "2d8c52329f38d2a2fa9cbaf5c583daf1490bb11c": "20000000000000000000",
  "3cea302a472a940379dd398a24eafdbadf88ad79": "3000000000000000000000",
  "a29d5bda74e003474872bd5894b88533ff64c2b5": "10000000000000000000000",
  "2d23766b6f6b05737dad80a419c40eda4d77103e": "3820000000000000000000",
  "b07249e055044a9155359a402937bbd954fe48b6": "100000000000000000000",
  "f1e980c559a1a8e5e50a47f8fffdc773b7e06a54": "30104784000000000000000",
  "8275cd684c3679d5887d03664e338345dc3cdde1": "15800000000000000000",
  "b27c1a24204c1e118d75149dd109311e07c073ab": "3100000000000000000000",
  "451b3699475bed5d7905f8905aa3456f1ed788fc": "2560000000000000000000",
  "31ad4d9946ef09d8e988d946b1227f9141901736": "22880000000000000000000",
  "52b8a9592634f7300b7c5c59a3345b835f01b95c": "2000000000000000000000",
  "b161725fdcedd17952d57b23ef285b7e4b1169e8": "50071000000000000000",
  "74fc5a99c0c5460503a13b0509459da19ce7cd90": "200000000000000000000",
  "d99df7421b9382e42c89b006c7f087702a0757c0": "480000000000000000000",
  "8a4f4a7f52a355ba105fca2072d3065fc8f7944b": "500000000000000000000",
  "12316fc7f178eac22eb2b25aedeadf3d75d00177": "19999999000000000000000",
  "f598db2e09a8a5ee7d720d2b5c43bb126d11ecc2": "200000000000000000000",
  "37b8beac7b1ca38829d61ab552c766f48a10c32f": "400000000000000000000",
  "851dc38adb4593729a76f33a8616dab6f5f59a77": "100000000000000000000",
  "bf4096bc547dbfc4e74809a31c039e7b389d5e17": "3940000000000000000000",
  "98d3731992d1d40e1211c7f735f2189afa0702e0": "8000000000000000000000",
  "0f4073c1b99df60a1549d69789c7318d9403a814": "20000000000000000000000",
  "a430995ddb185b9865dbe62539ad90d22e4b73c2": "10000000000000000000000",
  "898c72dd736558ef9e4be9fdc34fef54d7fc7e08": "1000000000000000000000",
  "f9b617f752edecae3e909fbb911d2f8192f84209": "2674000000000000000000",
  "e1ae029b17e373cde3de5a9152201a14cac4e119": "99968000000000000000",
  "d8e8474292e7a051604ca164c0707783bb2885e8": "13370000000000000000000",
  "f476f2cb7208a32e051fd94ea8662992638287a2": "100000000000000000000",
  "3a84e950ed410e51b7e8801049ab2634b285fea1": "18690000000000000000000",
  "5b7784caea01799ca30227827667ce207c5cbc76": "2000000000000000000000",
  "3af65b3e28895a4a001153391d1e69c31fb9db39": "3940000000000000000000",
  "95fb5afb14c1ef9ab7d179c5c300503fd66a5ee2": "34225000000000000000",
  "a8446c4781a737ac4328b1e15b8a0b3fbb0fd668": "21390500000000000000000",
  "4888fb25cd50dbb9e048f41ca47d78b78a27c7d9": "17300000000000000000000",
  "566c10d638e8b88b47d6e6a414497afdd00600d4": "99960000000000000000",
  "bd47f5f76e3b930fd9485209efa0d4763da07568": "1000000000000000000000",
  "1e1c6351776ac31091397ecf16002d979a1b2d51": "1400000000000000000000",
  "edf603890228d7d5de9309942b5cad4219ef9ad7": "5000000000000000000000",
  "1923cfc68b13ea7e2055803645c1e320156bd88d": "1337000000000000000000",
  "8f8f37d0ad8f335d2a7101b41156b688a81a9cbe": "70000000000000000000",
  "63334fcf1745840e4b094a3bb40bb76f9604c04c": "3978000000000000000000",
  "001762430ea9c3a26e5749afdb70da5f78ddbb8c": "200000000000000000000",
  "512116817ba9aaf843d1507c65a5ea640a7b9eec": "50000000000000000000",
  "2961fb391c61957cb5c9e407dda29338d3b92c80": "999942000000000000000",
  "fc2952b4c49fedd0bc0528a308495e6d6a1c71d6": "2000000000000000000000",
  "13ec812284026e409bc066dfebf9d5a4a2bf801e": "1610000000000000000000",
  "ef463c2679fb279164e20c3d2691358773a0ad95": "2000000000000000000000",
  "3aadf98b61e5c896e7d100a3391d3250225d61df": "234000000000000000000",
  "e8137fc1b2ec7cc7103af921899b4a39e1d959a1": "1490000000000000000000",
  "b1a2b43a7433dd150bb82227ed519cd6b142d382": "2738000000000000000000",
  "c1f39bd35dd9cec337b96f47c677818160df37b7": "20000000000000000000",
  "b587b44a2ca79e4bc1dd8bfdd43a207150f2e7e0": "630400000000000000000",
  "41485612d03446ec4c05e5244e563f1cbae0f197": "970000000000000000000",
  "a12623e629df93096704b16084be2cd89d562da4": "8500000000000000000000",
  "3f2f381491797cc5c0d48296c14fd0cd00cdfa2d": "804000000000000000000",
  "9470cc36594586821821c5c996b6edc83b6d5a32": "24000000000000000000",
  "3605372d93a9010988018f9f315d032ed1880fa1": "500066000000000000000",
  "12632388b2765ee4452b50161d1fffd91ab81f4a": "740000000000000000000",
  "274a3d771a3d709796fbc4d5f48fce2fe38c79d6": "20000000000000000000",
  "d60a52580728520df7546bc1e283291788dbae0c": "999910000000000000000",
  "1ab53a11bcc63ddfaa40a02b9e186496cdbb8aff": "1996800000000000000000",
  "c282e6993fbe7a912ea047153ffd9274270e285b": "139939000000000000000",
  "a291e9c7990d552dd1ae16cebc3fca342cbaf1d1": "20000000000000000000000",
  "5547fdb4ae11953e01292b7807fa9223d0e4606a": "98940000000000000000",
  "bded11612fb5c6da99d1e30e320bc0995466141e": "400000000000000000000",
  "b73b4ff99eb88fd89b0b6d57a9bc338e886fa06a": "32000000000000000000",
  "b1c751786939bba0d671a677a158c6abe7265e46": "10000000000000000000000",
  "e881bbbe69722d81efecaa48d1952a10a2bfac8f": "16000000000000000000000",
  "fe96c4cd381562401aa32a86e65b9d52fa8aee27": "2640000000000000000000",
  "683dba36f7e94f40ea6aea0d79b8f521de55076e": "140000000000000000000",
  "5ac2908b0f398c0df5bac2cb13ca7314fba8fa3d": "199800000000000000000",
  "8914a680a5aec5226d4baaec2e5552b44dd7c874": "100076000000000000000",
  "041170f581de80e58b2a045c8f7c1493b001b7cb": "889800000000000000000",
  "4665e47396c7db97eb2a03d90863d5d4ba319a94": "600000000000000000000",
  "ed4be04a052d7accb3dcce90319dba4020ab2c68": "37547947000000000000000",
  "4b0619d9d8aa313a9531ac7dbe04ca0d6a5ad1b6": "2000000000000000000000",
  "a21442ab05340ade68c915f3c3399b9955f3f7eb": "775000000000000000000",
  "655934da8e744eaa3de34dbbc0894c4eda0b61f2": "200000000000000000000",
  "6038740ae28d66ba93b0be08482b3205a0f7a07b": "316000000000000000000",
  "99924a9816bb7ddf3fec1844828e9ad7d06bf4e6": "1760000000000000000000",
  "6847825bdee8240e28042c83cad642f286a3bddc": "1500000000000000000000",
  "a718aaad59bf395cba2b23e09b02fe0c89816247": "999600000000000000000",
  "2c89f5fdca3d155409b638b98a742e55eb4652b7": "98500000000000000000000",
  "1a7044e2383f8708305b495bd1176b92e7ef043a": "200000000000000000000",
  "282e80a554875a56799fa0a97f5510e795974c4e": "1000000000000000000000",
  "ffb3bcc3196a8c3cb834cec94c34fed35b3e1054": "1340000000000000000000",
  "d135794b149a18e147d16e621a6931f0a40a969a": "20000000000000000000000",
  "6b94615db750656ac38c7e1cf29a9d13677f4e15": "12000000000000000000000",
  "ecbe425e670d39094e20fb5643a9d818eed236de": "5000000000000000000000",
  "511e0efb04ac4e3ff2e6550e498295bfcd56ffd5": "668500000000000000000",
  "ff65511cada259260c1ddc41974ecaecd32d6357": "1760000000000000000000",
  "9ffc5fe06f33f5a480b75aa94eb8556d997a16c0": "20000000000000000000",
  "57df23bebdc65eb75feb9cb2fad1c073692b2baf": "4000000000000000000000",
  "207ef80b5d60b6fbffc51f3a64b8c72036a5abbd": "6685000000000000000000",
  "c573e841fa08174a208b060ccb7b4c0d7697127f": "668500000000000000000",
  "411610b178d5617dfab934d293f512a93e5c10e1": "170000000000000000000",
  "9991614c5baa47dd6c96874645f97add2c3d8380": "1970000000000000000000",
  "2d3480bf0865074a72c7759ee5137b4d70c51ce9": "200000000000000000000",
  "9d40e012f60425a340d82d03a1c757bfabc706fb": "169799000000000000000",
  "47648bed01f3cd3249084e635d14daa9e7ec3c8a": "194000000000000000000",
  "a5ff62222d80c013cec1a0e8850ed4d354dac16d": "207600000000000000000",
  "f80d3619702fa5838c48391859a839fb9ce7160f": "1992800000000000000000",
  "7c0f5e072043c9ee740242197e78cc4b98cdf960": "200000000000000000000",
  "a40aa2bbce0c72b4d0dfffcc42715b2b54b01bfa": "1000000000000000000000",
  "2eeed50471a1a2bf53ee30b1232e6e9d80ef866d": "20000000000000000000",
  "0c2808b951ed9e872d7b32790fcc5994ae41ffdc": "102000000000000000000000",
  "7f06c89d59807fa60bc60136fcf814cbaf2543bd": "10000000000000000000000",
  "8d4b603c5dd4570c34669515fdcc665890840c77": "18200000000000000000",
  "d5e5c135d0c4c3303934711993d0d16ff9e7baa0": "2000000000000000000000",
  "241361559feef80ef137302153bd9ed2f25db3ef": "20000000000000000000000",
  "db63122de7037da4971531fae9af85867886c692": "277000000000000000000",
  "417e4e2688b1fd66d821529e46ed4f42f8b3db3d": "2000000000000000000000",
  "127db1cadf1b771cbd7475e1b272690f558c8565": "14000000000000000000000",
  "48659d8f8c9a2fd44f68daa55d23a608fbe500dc": "2000000000000000000000",
  "b3a64b1176724f5409e1414a3523661baee74b4a": "25610000000000000000",
  "aa14422d6f0ae5a758194ed15780c838d67f1ee1": "28503824000000000000000",
  "a0a0e65204541fca9b2fb282cd95138fae16f809": "10000000000000000000000",
  "d2107b353726c3a2b46566eaa7d9f80b5d21dbe3": "20000000000000000000",
  "e4cafb727fb5c6b70bb27533b8a9ccc9ef6888e1": "300443000000000000000",
  "09f3f601f605441140586ce0656fa24aa5b1d9ae": "1539400000000000000000",
  "87fcbe7c4193ffcb08143779c9bec83fe7fda9fc": "100275000000000000000",
  "03ebc63fda6660a465045e235fbe6e5cf195735f": "141840000000000000000",
  "bdbaf6434d40d6355b1e80e40cc4ab9c68d96116": "100000000000000000000",
  "4e2225a1bb59bc88a2316674d333b9b0afca6655": "155000000000000000000",
  "4dc3da13b2b4afd44f5d0d3189f444d4ddf91b1b": "2000000000000000000000",
  "4ba8e0117fc0b6a3e56b24a3a58fe6cef442ff98": "5640000000000000000000",
  "27146913563aa745e2588430d9348e86ea7c3510": "400000000000000000000",
  "4c5afe40f18ffc48d3a1aec41fc29de179f4d297": "2000000000000000000000",
  "8a810114b2025db9fbb50099a6e0cb9e2efa6bdc": "1910000000000000000000",
  "2dee90a28f192d676a8773232b56f18f239e2fad": "18587970000000000000000",
  "60676e92d18b000509c61de540e6c5ddb676d509": "1200000000000000000000",
  "9bfc659c9c601ea42a6b21b8f17084ec87d70212": "10000000000000000000000",
  "5d5d6e821c6eef96810c83c491468560ef70bfb5": "2000000000000000000000",
  "d5787668c2c5175b01a8ee1ac3ecc9c8b2aba95a": "1999944000000000000000",
  "33b336f5ba5edb7b1ccc7eb1a0d984c1231d0edc": "2000000000000000000000",
  "3abb8adfc604f48d5984811d7f1d52fef6758270": "4475000000000000000000",
  "980a84b686fc31bdc83c221058546a71b11f838a": "779471000000000000000",
  "0b507cf553568daaf65504ae4eaa17a8ea3cdbf5": "2000000000000000000000",
  "896009526a2c7b0c09a6f63a80bdf29d9c87de9c": "3462830000000000000000",
  "9696052138338c722f1140815cf7749d0d3b3a74": "500000000000000000000",
  "3831757eae7557cb8a37a4b10644b63e4d3b3c75": "200000000000000000000",
  "62dc72729024375fc37cbb9c7c2393d10233330f": "2000000000000000000000",
  "44098866a69b68c0b6bc168229b9603587058967": "188000000000000000000",
  "25adb8f96f39492c9bb47c5edc88624e46075697": "26740000000000000000000",
  "fd4de8e3748a289cf7d060517d9d38388db01fb8": "250000000000000000000",
  "6be7595ea0f068489a2701ec4649158ddc43e178": "2000000000000000000000",
  "d402b4f6a099ebe716cb14df4f79c0cd01c6071b": "2000000000000000000000",
  "a07682000b1bcf3002f85c80c0fa2949bd1e82fd": "4000000000000000000000",
  "eb4f00e28336ea09942588eeac921811c522143c": "2000000000000000000000",
  "8f31c7005197ec997a87e69bec48649ab94bb2a5": "4000000000000000000000",
  "e7fd8fd959aed2767ea7fa960ce1db53af802573": "1000000000000000000000",
  "a8ef9ad274436042903e413c3b0c62f5f52ed584": "10000000000000000000000",
  "d83ad260e9a6f432fb6ea28743299b4a09ad658c": "2000000000000000000000",
  "b5c816a8283ca4df68a1a73d63bd80260488df08": "200000000000000000000",
  "d7d3c75920590438b82c3e9515be2eb6ed7a8b1a": "60000000000000000000000",
  "af3cb5965933e7dad883693b9c3e15beb68a4873": "2000000000000000000000",
  "6e899e59a9b41ab7ea41df7517860f2acb59f4fd": "20000000000000000000000",
  "527a8ca1268633a6c939c5de1b929aee92aeac8d": "900000000000000000000",
  "1680cec5021ee93050f8ae127251839e74c1f1fd": "13098657000000000000000",
  "ff7843c7010aa7e61519b762dfe49124a76b0e4e": "933580000000000000000000",
  "140fba58dbc04803d84c2130f01978f9e0c73129": "400000000000000000000",
  "0261ad3a172abf1315f0ffec3270986a8409cb25": "203500000000000000000",
  "ab5a79016176320973e8cd38f6375530022531c0": "1000000000000000000000",
  "fca73eff8771c0103ba3cc1a9c259448c72abf0b": "1000000000000000000000",
  "07d41217badca5e0e60327d845a3464f0f27f84a": "4000000000000000000000",
  "2c1c19114e3d6de27851484b8d2715e50f8a1065": "100000000000000000000",
  "abd21eff954fc6a7de26912a7cbb303a6607804e": "1517000000000000000000",
  "f303d5a816affd97e83d9e4dac2f79072bb0098f": "960000000000000000000",
  "114cfefe50170dd97ae08f0a44544978c599548d": "863000000000000000000",
  "647b85044df2cf0b4ed4882e88819fe22ae5f793": "1000032000000000000000",
  "1b130d6fa51d5c48ec8d1d52dc8a227be8735c8a": "2000000000000000000000",
  "0d9d3f9bc4a4c6efbd59679b69826bc1f63d9916": "600000000000000000000",
  "c765e00476810947816af142d46d2ee7bca8cc4f": "500000000000000000000",
  "b57b04fa23d1203fae061eac4542cb60f3a57637": "191000000000000000000",
  "e192489b85a982c1883246d915b229cb13207f38": "5000000000000000000000",
  "5f483ffb8f680aedf2a38f7833afdcde59b61e4b": "2000000000000000000000",
  "b46d1182e5aacaff0d26b2fcf72f3c9ffbcdd97d": "3139000000000000000000",
  "59c7f785c93160e5807ed34e5e534bc6188647a7": "640000000000000000000",
  "18e4ce47483b53040adbab35172c01ef64506e0c": "9000000000000000000000",
  "296d66b521571a4e4103a7f562c511e6aa732d81": "668500000000000000000",
  "bcd99edc2160f210a05e3a1fa0b0434ced00439b": "2000000000000000000000",
  "f14f0eb86db0eb68753f16918e5d4b807437bd3e": "200000000000000000000",
  "60d5667140d12614b21c8e5e8a33082e32dfcf23": "20000000000000000000000",
  "8ccabf25077f3aa41545344d53be1b2b9c339000": "1695400000000000000000",
  "8cc0d7c016fa7aa950114aa1db094882eda274ea": "159800000000000000000",
  "c71145e529c7a714e67903ee6206e4c3042b6727": "1430000000000000000000",
  "c5e9939334f1252ed2ba26814487dfd2982b3128": "70000000000000000000",
  "f09b3e87f913ddfd57ae8049c731dba9b636dfc3": "608000000000000000000",
  "4349225a62f70aea480a029915a01e5379e64fa5": "2598000000000000000000",
  "666b4f37d55d63b7d056b615bb74c96b3b01991a": "4000000000000000000000",
  "8bd6b1c6d74d010d1008dba6ef835d4430b35c32": "50000000000000000000",
  "7363cd90fbab5bb8c49ac20fc62c398fe6fb744c": "2000000000000000000000",
  "b7479dab5022c4d5dbaaf8de171b4e951dd1a457": "80000000000000000000",
  "5a5468fa5ca226c7532ecf06e1bc1c45225d7ec9": "1910000000000000000000",
  "32a20d028e2c6218b9d95b445c771524636a22ef": "9500000000000000000000",
  "1bd28cd5c78aee51357c95c1ef9235e7c18bc854": "2000000000000000000000",
  "693492a5c51396a482881669ccf6d8d779f00951": "345827000000000000000",
  "bd723b289a7367b6ece2455ed61edb49670ab9c4": "4999995000000000000000",
  "1be3542c3613687465f15a70aeeb81662b65cca8": "2000000000000000000000",
  "5803e68b34da121aef08b602badbafb4d12481ca": "18000000000000000000000",
  "9ac907ee85e6f3e223459992e256a43fa08fa8b2": "10000000000000000000000",
  "833b6a8ec8da408186ac8a7d2a6dd61523e7ce84": "16000000000000000000000",
  "64628c6fb8ec743adbd87ce5e018d531d9210437": "26740000000000000000",
  "566c28e34c3808d9766fe8421ebf4f2b1c4f7d77": "1970000000000000000000",
  "171ad9a04bedc8b861e8ed4bddf5717813b1bb48": "400000000000000000000",
  "4f85bc1fc5cbc9c001e8f1372e07505370d8c71f": "940000000000000000000",
  "6d2f976734b9d0070d1883cf7acab8b3e4920fc1": "10000000000000000000000",
  "357a02c0a9dfe287de447fb67a70ec5b62366647": "26740000000000000000",
  "44a01fb04ac0db2cce5dbe281e1c46e28b39d878": "1999944000000000000000",
  "3630c5e565ceaa8a0f0ffe32875eae2a6ce63c19": "170016000000000000000",
  "334340ee4b9cdc81f850a75116d50ee9b69825bf": "2000000000000000000000",
  "c0afb7d8b79370cfd663c68cc6b9702a37cd9eff": "1000000000000000000000",
  "2016895df32c8ed5478269468423aea7b7fbce50": "20000000000000000000",
  "1e2fe4e4a77d141ff49a0c7fbc95b0a2b283eeeb": "2000000000000000000000",
  "260df8943a8c9a5dba7945327fd7e0837c11ad07": "200000000000000000000",
  "32fbeed6f626fcdfd51acafb730b9eeff612f564": "2000000000000000000000",
  "9bd88068e13075f3a8cac464a5f949d6d818c0f6": "6000000000000000000000",
  "ab4572fbb1d72b575d69ec6ad17333873e8552fc": "1999942000000000000000",
  "e44ea51063405154aae736be2bf1ee3b9be639ae": "4000000000000000000000",
  "617f20894fa70e94a86a49cd74e03238f64d3cd9": "5000057000000000000000",
  "3e914e3018ac00449341c49da71d04dfeeed6221": "4000000000000000000000",
  "590181d445007bd0875aaf061c8d51153900836a": "2000000000000000000000",
  "27987110221a880826adb2e7ab5eca78c6e31aec": "4000000000000000000000",
  "06618e9d5762df62028601a81d4487d6a0ecb80e": "1337000000000000000000",
  "8cc652dd13e7fe14dabbb36d5d320db9ffee8a54": "1790000000000000000000",
  "8973aefd5efaee96095d9e288f6a046c97374b43": "141000000000000000000",
  "dbd51cdf2c3bfacdff106221de2e19ad6d420414": "1760000000000000000000",
  "25697ef20cccaa70d32d376f8272d9c1070c3d78": "200000000000000000000",
  "0726c42e00f45404836eb1e280d073e7059687f5": "1623331000000000000000",
  "5e0785532c7723e4c0af9357d5274b73bdddddde": "25000088000000000000000",
  "38430e931d93be01b4c3ef0dc535f1e0a9610063": "10000000000000000000000",
  "143d536b8b1cb84f56a39e0bc81fd5442bcacce1": "100000000000000000000",
  "5c6d041da7af4487b9dc48e8e1f60766d0a56dbc": "1457800000000000000000",
  "f9bfb59d538afc4874d4f5941b08c9730e38e24b": "40000000000000000000",
  "83dbfd8eda01d0de8e158b16d0935fc2380a5dc7": "600000000000000000000",
  "0e6cd664ad9c1ed64bf98749f40644b626e3792c": "60000000000000000000000",
  "ce2e0da8934699bb1a553e55a0b85c169435bea3": "4999962000000000000000",
  "a39bfee4aec9bd75bd22c6b672898ca9a1e95d32": "10000000000000000000000",
  "1bc44c8761231ba1f11f5faa40fa669a013e12ce": "203586000000000000000",
  "68809af5d532a11c1a4d6e32aac75c4c52b08ead": "10000000000000000000000",
  "80cc21bd99f39005c58fe4a448909220218f66cb": "1000072000000000000000",
  "1080c1d8358a15bc84dac8253c6883319020df2c": "2674000000000000000000",
  "9eaf6a328a4076024efa6b67b48b21eedcc0f0b8": "158000000000000000000",
  "1e7b5e4d1f572becf2c00fc90cb4767b4a6e33d4": "112970000000000000000",
  "acbd185589f7a68a67aa4b1bd65077f8c64e4e21": "200000000000000000000",
  "ff78541756ab2b706e0d70b18adb700fc4f1643d": "43250000000000000000000",
  "7f0ec3db804692d4d1ea3245365aab0590075bc4": "4000000000000000000000",
  "4a918032439159bb315b6725b6830dc83697739f": "343800000000000000000",
  "bc1b021a78fde42d9b5226d6ec26e06aa3670090": "80000000000000000000",
  "2f2523cc834f0086052402626296675186a8e582": "16000000000000000000000",
  "9db2e15ca681f4c66048f6f9b7941ed08b1ff506": "4000000000000000000000",
  "20b9a9e6bd8880d9994ae00dd0b9282a0beab816": "500000000000000000000",
  "3bddbc8134f77d55597fc97c26d26698090604eb": "13700000000000000000",
  "80c3a9f695b16db1597286d1b3a8b7696c39fa27": "100000000000000000000",
  "53194d8afa3e883502767edbc30586af33b114d3": "2000000000000000000000",
  "e2efd0a9bc407ece03d67e8ec8e9d283f48d2a49": "12280000000000000000000",
  "1cb450920078aab2317c7db3b38af7dd298b2d41": "340000000000000000000",
  "ca8276c477b4a07b80107b843594189607b53bec": "6000000000000000000000",
  "147f4210ab5804940a0b7db8c14c28396b62a6bf": "2000000000000000000000",
  "d3df3b53cb3b4755de54e180451cc44c9e8ae0aa": "659801000000000000000",
  "f7c708015071d4fb0a3a2a09a45d156396e3349e": "3000000000000000000000",
  "a8cafac32280d021020bf6f2a9782883d7aabe12": "100000000000000000000",
  "399aa6f5d078cb0970882bc9992006f8fbdf3471": "1000000000000000000000",
  "15669180dee29598869b08a721c7d24c4c0ee63f": "1000000000000000000000",
  "bba8ab22d2fedbcfc63f684c08afdf1c175090b5": "99091000000000000000",
  "5e5a441974a83d74c687ebdc633fb1a49e7b1ad7": "3000000000000000000000",
  "98b769cc305cecfb629a00c907069d7ef9bc3a12": "26000000000000000000",
  "c820c711f07705273807aaaa6de44d0e4b48be2e": "155000000000000000000",
  "12aa7d86ddfbad301692feac8a08f841cb215c37": "137000000000000000000",
  "6ff5d361b52ad0b68b1588607ec304ae5665fc98": "1940000000000000000000",
  "2382a9d48ec83ea3652890fd0ee79c907b5b2dc1": "133700000000000000000",
  "b2a144b1ea67b9510f2267f9da39d3f93de26642": "2000000000000000000000",
  "b3e20eb4de18bd060221689894bee5aeb25351ee": "73535000000000000000",
  "101a0a64f9afcc448a8a130d4dfcbee89537d854": "15200000000000000000000",
  "1b826fb3c012b0d159e294ba5b8a499ff3c0e03c": "2000000000000000000000",
  "aafb7b013aa1f8541c7e327bf650adbd194c208f": "1358000000000000000000",
  "96eb523e832f500a017de13ec27f5d366c560eff": "307600000000000000000",
  "c7bf17c4c11f98941f507e77084fffbd2dbd3db5": "1000000000000000000000",
  "840ec83ea93621f034e7bb3762bb8e29ded4c479": "2500000000000000000000",
  "0e9c511864a177f49be78202773f60489fe04e52": "6000000000000000000000",
  "f6f1a44309051c6b25e47dff909b179bb9ab591c": "1940000000000000000000",
  "63fe6bcc4b8a9850abbe75803730c932251f145b": "18200000000000000000",
  "f88b58db37420b464c0be88b45ee2b95290f8cfa": "40000000000000000000",
  "9d4d321177256ebd9afbda304135d517c3dc5693": "616000000000000000000",
  "8c1fbe5f0aea359c5aa1fa08c8895412ca8e05a6": "1000000000000000000000",
  "cb0dd7cf4e5d8661f6028943a4b9b75c914436a7": "120000000000000000000000",
  "a3979a92760a135adf69d72f75e167755f1cb8c3": "100000000000000000000",
  "ca22cda3606da5cad013b8074706d7e9e721a50c": "6816200000000000000000",
  "157559adc55764cc6df79323092534e3d6645a66": "6000000000000000000000",
  "4f52ad6170d25b2a2e850eadbb52413ff2303e7f": "3040000000000000000000",
  "eed28c3f068e094a304b853c950a6809ebcb03e0": "17300000000000000000000",
  "2e47f287f498233713850d3126823cc67dcee255": "14600000000000000000",
  "6c359e58a13d4578a9338e335c67e7639f5fb4d7": "218000000000000000000",
  "4968a2cedb457555a139295aea28776e54003c87": "10092310000000000000000",
  "4041374b0feef4792e4b33691fb86897a4ff560c": "365000000000000000000",
  "83e48055327c28b5936fd9f4447e73bdb2dd3376": "2674000000000000000000",
  "32b7feebc5c59bf65e861c4c0be42a7611a5541a": "2212000000000000000000",
  "21a6db6527467bc6dad54bc16e9fe2953b6794ed": "14000000000000000000000",
  "e8ead1bb90ccc3aea2b0dcc5b58056554655d1d5": "7760000000000000000000",
  "7a94b19992ceb8ce63bc92ee4b5aded10c4d9725": "16770000000000000000000",
  "90e93e4dc17121487952333614002be42356498e": "1910000000000000000000",
  "aab00abf5828d7ebf26b47ceaccdb8ba03325166": "10000000000000000000000",
  "0a9ab2638b1cfd654d25dab018a0aebddf85fd55": "21801000000000000000",
  "b12ed07b8a38ad5506363fc07a0b6d799936bdaf": "10000000000000000000000",
  "f4a9d00cefa97b7a58ef9417fc6267a5069039ee": "21800000000000000000",
  "04a1cada1cc751082ff8da928e3cfa000820a9e9": "40000000000000000000",
  "9018cc1f48d2308e252ab6089fb99a7c1d569410": "200000000000000000000",
  "895d694e880b13ccd0848a86c5ce411f88476bbf": "199955000000000000000",
  "40a7f72867a7dc86770b162b7557a434ed50cce9": "1000000000000000000000",
  "467ea10445827ef1e502daf76b928a209e0d4032": "2000000000000000000000",
  "7553aa23b68aa5f57e135fe39fdc235eaca8c98c": "1000000000000000000000",
  "31b43b015d0081643c6cda46a7073a6dfdbca825": "50019600000000000000000",
  "d82fd9fdf6996bedad2843159c06f37e0924337d": "1688800000000000000000",
  "24a4eb36a7e498c36f99975c1a8d729fd6b305d7": "258000000000000000000",
  "91d66ea6288faa4b3d606c2aa45c7b6b8a252739": "2000000000000000000000",
  "83a402438e0519773d5448326bfb61f8b20cf52d": "1520000000000000000000",
  "c2fafdd30acb6d6706e9293cb02641f9edbe07b5": "1494224000000000000000",
  "79dba256472db4e058f2e4cdc3ea4e8a42773833": "1460000000000000000000",
  "498abdeb14c26b7b7234d70fceaef361a76dff72": "3000000000000000000000",
  "7b73242d75ca9ad558d650290df17692d54cd8b8": "2000200000000000000000",
  "6ec3659571b11f889dd439bcd4d67510a25be57e": "123000000000000000000",
  "ab098633eeee0ccefdf632f9575456f6dd80fc86": "200000000000000000000000",
  "f4a51fce4a1d5b94b0718389ba4e7814139ca738": "300000000000000000000",
  "8f561b41b209f248c8a99f858788376250609cf3": "1700000000000000000000",
  "05d0f4d728ebe82e84bf597515ad41b60bf28b39": "4200000000000000000000",
  "dfdf43393c649caebe1bb18059decb39f09fb4e8": "400000000000000000000",
  "0089508679abf8c71bf6781687120e3e6a84584d": "1800000000000000000000",
  "80907f593148b57c46c177e23d25abc4aae18361": "100000000000000000000",
  "94fcceadfe5c109c5eaeaf462d43873142c88e22": "4800000000000000000000",
  "e89249738b7eced7cb666a663c49cbf6de8343ea": "2000000000000000000000",
  "23c99ba087448e19c9701df66e0cab52368331fa": "2000000000000000000000",
  "a68e0c30cba3bc5a883e540320f999c7cd558e5c": "1799869000000000000000",
  "88888a57bd9687cbf950aeeacf9740dcc4d1ef59": "1820000000000000000000",
  "e9b36fe9b51412ddca1a521d6e94bc901213dda8": "10000000000000000000000",
  "a9145046fa3628cf5fd4c613927be531e6db1fdd": "112000000000000000000",
  "e82c58c579431b673546b53a86459acaf1de9b93": "1000000000000000000000",
  "bd6a474d66345bcdd707594adb63b30c7822af54": "4000000000000000000000",
  "6a6159074ab573e0ee581f0f3df2d6a594629b74": "310000000000000000000",
  "2e7f465520ec35cc23d68e75651bb6689544a196": "1050049000000000000000",
  "ac6d02e9a46b379fac4ac9b1d7b5d47bc850ce16": "1760000000000000000000",
  "bd59094e074f8d79142ab1489f148e32151f2089": "20000000000000000000",
  "0ba6e46af25a13f57169255a34a4dac7ce12be04": "500000000000000000000",
  "35145f620397c69cb8e00962961f0f4886643989": "6000000000000000000000",
  "d84b922f7841fc5774f00e14604ae0df42c8551e": "4011000000000000000000",
  "44232ff66ddad1fd841266380036afd7cf7d7f42": "200000000000000000000",
  "516954025fca2608f47da81c215eedfd844a09ff": "382000000000000000000",
  "e5aa0b833bb916dc19a8dd683f0ede241d988eba": "3000000000000000000000",
  "80ea1acc136eca4b68c842a95adf6b7fee7eb8a2": "4000000000000000000000",
  "98a0e54c6d9dc8be96276cebf4fec460f6235d85": "1969803000000000000000",
  "91620f3eb304e813d28b0297556d65dc4e5de5aa": "3820000000000000000000",
  "7bb984c6dbb9e279966afafda59c01d02627c804": "8050000000000000000000",
  "41f489a1ec747bc29c3e5f9d8db97877d4d1b4e9": "133700000000000000000",
  "8dbc3e6cb433e194f40f82b40faadb1f8b856116": "1910000000000000000000",
  "889da40fb1b60f9ea9bd7a453e584cf7b1b4d9f7": "40000000000000000000",
  "debbdd831e0f20ae6e378252decdf92f7cf0c658": "2000000000000000000000",
  "a22ade0ddb5c6ef8d0cd8de94d82b11082cb2e91": "1020000000000000000000",
  "823219a25976bb2aa4af8bad41ac3526b493361f": "2000000000000000000000",
  "6d39a9e98f81f769d73aad2cead276ac1387babe": "394000000000000000000",
  "751abcb6cc033059911815c96fd191360ab0442d": "8000000000000000000000",
  "64d80c3b8ba68282290b75e65d8978a15a87782c": "1970000000000000000000",
  "6ba8f7e25fc2d871618e24e40184199137f9f6aa": "400020000000000000000",
  "25a74c2ac75dc8baa8b31a9c7cb4b7829b2456da": "2000000000000000000000",
  "0f7b61c59b016322e8226cafaee9d9e76d50a1b3": "4000000000000000000000",
  "7526e482529f0a14eec98871dddd0e721b0cd9a2": "20000000000000000000",
  "071dd90d14d41f4ff7c413c24238d3359cd61a07": "36400000000000000000000",
  "a986762f7a4f294f2e0b173279ad2c81a2223458": "20000000000000000000",
  "e667f652f957c28c0e66d0b63417c80c8c9db878": "601650000000000000000",
  "7b98e23cb96beee80a168069ebba8f20edd55ccf": "214500000000000000000",
  "2d8e5bb8d3521695c77e7c834e0291bfacee7408": "1970000000000000000000",
  "f23d01589eb12d439f7448ff54307529f191858d": "2000000000000000000000",
  "abd9605b3e91acfd777830d16463478ae0fc7720": "133700000000000000000",
  "eabb90d37989aab31feae547e0e6f3999ce6a35d": "2000000000000000000000",
  "0abfb39b11486d79572866195ba26c630b6784db": "121500000000000000000000",
  "d56a144d7af0ae8df649abae535a15983aa04d02": "5000000000000000000000",
  "998c1f93bcdb6ff23c10d0dc924728b73be2ff9f": "1002750000000000000000",
  "bc62b3096a91e7dc11a1592a293dd2542150d751": "1000000000000000000000",
  "0c8f66c6017bce5b20347204b602b743bad78d60": "2000000000000000000000",
  "4c5b3dc0e2b9360f91289b1fe13ce12c0fbda3e1": "2000000000000000000000",
  "b44605552471a6eee4daab71ff3bb41326d473e0": "839200000000000000000",
  "fc3d226bb36a58f526568857b0bb12d109ec9301": "2000000000000000000000",
  "adc8228ef928e18b2a807d00fb3c6c79cd1d9e96": "22800000000000000000",
  "9df32a501c0b781c0281022f42a1293ffd7b892a": "9000000000000000000000",
  "e7da609d40cde80f00ce5b4ffb6aa9d0b03494fc": "1000000000000000000000",
  "9b64d3cd8d2b73f66841b5c46bb695b88a9ab75d": "20769000000000000000",
  "8e9c08f738661f9676236eff82ba6261dd3f4822": "100000000000000000000",
  "deb97254474c0d2f5a7970dcdb2f52fb1098b896": "1000000000000000000000",
  "b4256273962bf631d014555cc1da0dcc31616b49": "2000000000000000000000",
  "23abd9e93e7957e5b636be6579051c15e5ce0b0e": "17188400000000000000000",
  "382591e7217b435e8e884cdbf415fe377a6fe29e": "8022000000000000000000",
  "f17adb740f45cbbde3094e7e13716f8103f563bd": "2000000000000000000000",
  "61ed5596c697207f3d55b2a51aa7d50f07fa09e8": "2000000000000000000000",
  "788e809741a3b14a22a4b1d937c82cfea489eebe": "7000000000000000000000",
  "992646ac1acaabf5ddaba8f9429aa6a94e7496a7": "1000110000000000000000",
  "51296f5044270d17707646129c86aad1645eadc1": "1337133000000000000000",
  "6ee8aad7e0a065d8852d7c3b9a6e5fdc4bf50c00": "20000000000000000000",
  "30db6b9b107e62102f434a9dd0960c2021f5ce4c": "599742000000000000000",
  "63fc93001305adfbc9b85d29d9291a05f8f1410b": "1000000000000000000000",
  "df6ed6006a6abe886ed33d95a4de28fc12183927": "910000000000000000000",
  "4745ab181a36aa8cbf2289d0c45165bc7ebe2381": "39400000000000000000",
  "7bb0fdf5a663b5fba28d9c902af0c811e252f298": "200000000000000000000",
  "e0ff0bd9154439c4a5b7233e291d7d868af53f33": "396110000000000000000",
  "09261f9acb451c3788844f0c1451a35bad5098e3": "8664000000000000000000",
  "2813d263fc5ff2479e970595d6b6b560f8d6d6d1": "2000000000000000000000",
  "2cd19694d1926a0fa9189edebafc671cf1b2caa5": "1000000000000000000000",
  "05336e9a722728d963e7a1cf2759fd0274530fca": "915583000000000000000",
  "e5b7af146986c0ff8f85d22e6cc334077d84e824": "2000000000000000000000",
  "3e4fbd661015f6461ed6735cefef01f31445de3a": "16200000000000000000000",
  "4f5df5b94357de948604c51b7893cddf6076baad": "3760000000000000000000",
  "9567a0de811de6ff095b7ee64e7f1b83c2615b80": "267400000000000000000",
  "955db3b74360b9a268677e73cea821668af6face": "30000000000000000000000",
  "3e040d40cb80ba0125f3b15fdefcc83f3005da1b": "1038000000000000000000",
  "43f470ed659e2991c375957e5ddec5bd1d382231": "100000000000000000000",
  "047f9bf1529daf87d407175e6f171b5e59e9ff3e": "650000000000000000000",
  "15e3b584056b62c973cf5eb096f1733e54c15c91": "936702000000000000000",
  "c03de42a109b657a64e92224c08dc1275e80d9b2": "20000000000000000000",
  "e4fc13cfcbac1b17ce7783acd423a845943f6b3a": "20000000000000000000",
  "65ff874fafce4da318d6c93d57e2c38a0d73e820": "1000160000000000000000",
  "8b997dbc078ad02961355da0a159f2927ed43d64": "197000000000000000000",
  "2f5080b83f7e2dc0a1dd11b092ad042bff788f4c": "3338355000000000000000",
  "1b3920d001c43e72b24e7ca46f0fd6e0c20a5ff2": "2000000000000000000000",
  "5ade77fd81c25c0af713b10702768c1eb2f975e7": "20000000000000000000",
  "acaaddcbf286cb0e215dda55598f7ff0f4ada5c6": "1000000000000000000000",
  "64e0217a5b38aa40583625967fa9883690388b6f": "200000000000000000000",
  "ae648155a658370f929be384f7e001047e49dd46": "13561000000000000000000",
  "f7c1b443968b117b5dd9b755572fcd39ca5ec04b": "456082000000000000000",
  "de027efbb38503226ed871099cb30bdb02af1335": "1000000000000000000000",
  "49cf1e54be363106b920729d2d0ba46f0867989a": "268000000000000000000",
  "e7f4d7fe6f561f7fa1da3005fd365451ad89df89": "200000000000000000000",
  "b036916bdacf94b69e5a8a65602975eb026104dd": "20000000000000000000",
  "e923c06177b3427ea448c0a6ff019b54cc548d95": "36281000000000000000",
  "ad927e03d1599a78ca2bf0cad2a183dceb71eac0": "1970000000000000000000",
  "ef39ca9173df15531d73e6b72a684b51ba0f2bb4": "1598000000000000000000",
  "6443b8ae639de91cf73c5ae763eeeed3ddbb9253": "2000000000000000000000",
  "8026435aac728d497b19b3e7e57c28c563954f2b": "1730000000000000000000",
  "ed327a14d5cfadd98103fc0999718d7ed70528ea": "1440000000000000000000",
  "38a3dccf2fcfe0c91a2624bd0cbf88ee4a076c33": "2000000000000000000000",
  "f0b1f9e27832c6de6914d70afc238c749995ace4": "2000000000000000000000",
  "770d98d31b4353fceee8560c4ccf803e88c0c4e0": "600000000000000000000",
  "ba1f0e03cb9aa021f4dcebfa94e5c889c9c7bc9e": "32200000000000000000000",
  "233842b1d0692fd11140cf5acda4bf9630bae5f8": "2000000000000000000000",
  "b5dd50a15da34968890a53b4f13fe1af081baaaa": "4000000000000000000000",
  "72072a0ef1cff3d567cdd260e708ddc11cbc9a31": "100000000000000000000",
  "81a88196fac5f23c3e12a69dec4b880eb7d97310": "2000000000000000000000",
  "6c63f84556d290bfcd99e434ee9997bfd779577a": "2000000000000000000000",
  "5f167aa242bc4c189adecb3ac4a7c452cf192fcf": "1999980000000000000000",
  "445cb8de5e3df520b499efc980f52bff40f55c76": "2000000000000000000000",
  "aec27ce2133e82d052520afb5c576d9f7eb93ed2": "65232380000000000000000",
  "07dc2bf83bc6af19a842ffea661af5b41b67fda1": "1500000000000000000000",
  "febd48d0ffdbd5656cd5e686363a61145228f279": "2800000000000000000000",
  "a86db07d9f812f4796622d40e03d135874a88a74": "20000000000000000000",
  "5413c97ffa4a6e2a7bba8961dc9fce8530a787d7": "1000000000000000000000",
  "e2ff9ee4b6ecc14141cc74ca52a9e7a2ee14d908": "1400000000000000000000",
  "2e8eb30a716e5fe15c74233e039bfb1106e81d12": "100000000000000000000",
  "fd88d114220f081cb3d5e15be8152ab07366576a": "300000000000000000000",
  "e408fceaa1b98f3c640f48fcba39f056066d6308": "10000000000000000000000",
  "057dd29f2d19aa3da42327ea50bce86ff5c911d9": "4000000000000000000000",
  "ed1065dbcf9d73c04ffc7908870d881468c1e132": "2000000000000000000000",
  "bbc9d8112e5beb02dd29a2257b1fe69b3536a945": "2000000000000000000000",
  "79c1be19711f73bee4e6316ae7549459aacea2e0": "400000000000000000000",
  "1bcf3441a866bdbe963009ce33c81cbb0261b02c": "182000000000000000000",
  "e2e26e4e1dcf30d048cc6ecf9d51ec1205a4e926": "4000000000000000000000",
  "77701e2c493da47c1b58f421b5495dee45bea39b": "6068279000000000000000",
  "37a05aceb9395c8635a39a7c5d266ae610d10bf2": "30000000000000000000000",
  "c6355ec4768c70a49af69513cd83a5bca7e3b9cd": "6000000000000000000000",
  "e3c0c128327a9ad80148139e269773428e638cb0": "2000000000000000000000",
  "f7f4898c4c526d955f21f055cb6e47b915e51964": "2288000000000000000000",
  "29824e94cc4348bc963279dcdf47391715324cd3": "1940000000000000000000",
  "eaa45cea02d87d2cc8fda9434e2d985bd4031584": "1920750000000000000000",
  "e08b9aba6bd9d28bc2056779d2fbf0f2855a3d9d": "2000000000000000000000",
  "87c498170934b8233d1ad1e769317d5c475f2f40": "1015200000000000000000",
  "352d29a26e8a41818181746467f582e6e84012e0": "6000000000000000000000",
  "403220600a36f73f24e190d1edb2d61be3f41354": "304000000000000000000",
  "0a48296f7631708c95d2b74975bc4ab88ac1392a": "5000000000000000000000",
  "ffe0e997f1977a615f5a315af413fd4869343ba0": "100076000000000000000",
  "ca66b2280fa282c5b67631ce552b62ee55ad8474": "1969488000000000000000",
  "2b6ed29a95753c3ad948348e3e7b1a251080ffb9": "250000000000000000000000",
  "492e70f04d18408cb41e25603730506b35a2876b": "39400000000000000000",
  "0e6baaa3deb989f289620076668618e9ac332865": "200000000000000000000",
  "b753a75f9ed10b21643a0a3dc0517ac96b1a4068": "401800000000000000000",
  "3ad915d550b723415620f5a9b5b88a85f382f035": "1000000000000000000000",
  "c992be59c6721caf4e028f9e8f05c25c55515bd4": "20000000000000000000",
  "02b643d6fabd437a851accbe79abb7fde126dccf": "7200000000000000000000",
  "88797e58675ed5cc4c19980783dbd0c956085153": "2000000000000000000000",
  "ac142eda1157b9a9a64390df7e6ae694fac98905": "200000000000000000000",
  "656579daedd29370d9b737ee3f5cd9d84bc2b342": "1430000000000000000000",
  "9bb9b02a26bfe1ccc3f0c6219e261c397fc5ca78": "1337000000000000000000",
  "bee8d0b008421954f92d000d390fb8f8e658eaee": "1000000000000000000000",
  "7989d09f3826c3e5af8c752a8115723a84d80970": "415554000000000000000",
  "7cd5d81eab37e11e6276a3a1091251607e0d7e38": "62856000000000000000",
  "6ce1b0f6adc47051e8ab38b39edb4186b03babcc": "1207800000000000000000",
  "abfcf5f25091ce57875fc674dcf104e2a73dd2f2": "19700000000000000000",
  "1c3ef05dae9dcbd489f3024408669de244c52a02": "20000000000000000000000",
  "cfa8b37127149bdbfee25c34d878510951ea10eb": "2000000000000000000000",
  "74863acec75d03d53e860e64002f2c165e538377": "1000000000000000000000",
  "59b9e733cba4be00429b4bd9dfa64732053a7d55": "20000000000000000000",
  "aeadfcd0978edad74a32bd01a0a51d37f246e661": "260000000000000000000",
  "08090876baadfee65c3d363ba55312748cfa873d": "1700170000000000000000",
  "e589fa76984db5ec4004b46ee8a59492c30744ce": "2800000000000000000000",
  "3485361ee6bf06ef6508ccd23d94641f814d3e2f": "2000000000000000000000",
  "5cb731160d2e8965670bde925d9de5510935347d": "40000000000000000000",
  "8ef4d8a2c23c5279187b64e96f741404085385f3": "299598000000000000000",
  "e246683cc99db7c4a52bcbacaab0b32f6bfc93d7": "2000000000000000000000",
  "7d273e637ef1eac481119413b91c989dc5eac122": "500000000000000000000",
  "6efba8fb2ac5b6730729a972ec224426a287c3ad": "283152000000000000000",
  "0773eeacc050f74720b4a1bd57895b1cceeb495d": "10000000000000000000000",
  "88a122a2382c523931fb51a0ccad3beb5b7259c3": "2000000000000000000000",
  "b0b779b94bfa3c2e1f587bcc9c7e21789222378f": "1550000000000000000000",
  "86f95c5b11a293940e35c0b898d8b75f08aab06d": "29605000000000000000000",
  "cf2288ef4ebf88e86db13d8a0e0bf52a056582c3": "2533000000000000000000",
  "71ea5b11ad8d29b1a4cb67bf58ca6c9f9c338c16": "1600000000000000000000",
  "9917d68d4af341d651e7f0075c6de6d7144e7409": "5660000000000000000000",
  "1e5800227d4dcf75e30f5595c5bed3f72e341e3b": "248300000000000000000",
  "123759f333e13e3069e2034b4f05398918119d36": "20000000000000000000000",
  "f798d16da4e460c460cd485fae0fa0599708eb82": "1000000000000000000000",
  "864bec5069f855a4fd5892a6c4491db07c88ff7c": "1000000000000000000000",
  "fa283299603d8758e8cab082125d2c8f7d445429": "6415633000000000000000",
  "c811c2e9aa1ac3462eba5e88fcb5120e9f6e2ca2": "1400140000000000000000",
  "61547d376e5369bcf978fc162c3c56ae453547e8": "200000000000000000000",
  "0d747ee5969bf79d57381d6fe3a2406cd0d8ce27": "100000000000000000000000",
  "f8962b75db5d24c7e8b7cef1068c3e67cebb30a5": "280000000000000000000",
  "35bf6688522f35467a7f75302314c02ba176800e": "17400000000000000000000",
  "05cb6c3b0072d3116761b532b218443b53e8f6c5": "141722000000000000000000",
  "91c80caa081b38351d2a0e0e00f80a34e56474c1": "1000000000000000000000",
  "d75a502a5b677287470f65c5aa51b87c10150572": "907400000000000000000",
  "3e194b4ecef8bb711ea2ff24fec4e87bd032f7d1": "2575465000000000000000",
  "736bf1402c83800f893e583192582a134eb532e9": "9999996000000000000000",
  "c2cb1ada5da9a0423873814793f16144ef36b2f3": "1334326000000000000000",
  "efcce06bd6089d0e458ef561f5a689480afe7000": "600000000000000000000",
  "bfe6bcb0f0c07852643324aa5df5fd6225abc3ca": "74500000000000000000",
  "9d799e943e306ba2e5b99c8a6858cbb52c0cf735": "300000000000000000000",
  "f45b1dcb2e41dc27ffa024daadf619c11175c087": "19700000000000000000",
  "08e38ee0ce48c9ca645c1019f73b5355581c56e6": "1600000000000000000000",
  "2cb4c3c16bb1c55e7c6b7a19b127a1ac9390cc09": "3397053000000000000000",
  "bdc02cd4330c93d6fbda4f6db2a85df22f43c233": "2000000000000000000000",
  "acec91ef6941cf630ba9a3e787a012f4a2d91dd4": "80000000000000000000000",
  "27ac073be79ce657a93aa693ee43bf0fa41fef04": "50000000000000000000000",
  "22fe884d9037291b4d52e6285ae68dea0be9ffb5": "2000000000000000000000",
  "c3107a9af3322d5238df0132419131629539577d": "492650000000000000000",
  "b5cac5ed03477d390bb267d4ebd46101fbc2c3da": "197000000000000000000",
  "58fb947364e7695765361ebb1e801ffb8b95e6d0": "200000000000000000000",
  "32860997d730b2d83b73241a25d3667d51c908ef": "499938000000000000000",
  "c79d5062c796dd7761f1f13e558d73a59f82f38b": "8000000000000000000000",
  "fa142fe47eda97e6503b386b18a2bedd73ccb5b1": "850080000000000000000",
  "6ca5de00817de0cedce5fd000128dede12648b3c": "20000000000000000000",
  "214b743955a512de6e0d886a8cbd0282bee6d2a2": "2000000000000000000000",
  "ede79ae1ff4f1606d59270216fa46ab2ddd4ecaa": "146000000000000000000",
  "528101ce46b720a2214dcdae6618a53177ffa377": "508876000000000000000",
  "b5870ce342d43343333673038b4764a46e925f3e": "1000000000000000000000",
  "843bd3502f45f8bc4da370b323bdac3fcf5f19a6": "1476000000000000000000",
  "5067f4549afbfe884c59cbc12b96934923d45db0": "1000000000000000000000",
  "6f2a42e6e033d01061131929f7a6ee1538021e52": "2000000000000000000000",
  "e9e1f7cb00a110edd0ebf8b377ef8a7bb856117f": "200000000000000000000",
  "a387ecde0ee4c8079499fd8e03473bd88ad7522a": "1970000000000000000000",
  "6dff90e6dc359d2590882b1483edbcf887c0e423": "1000000000000000000000",
  "22e512149a18d369b73c71efa43e86c9edabaf1d": "1455000000000000000000",
  "a3203095edb7028e6871ce0a84f548459f83300a": "4000000000000000000000",
  "93b4bf3fdff6de3f4e56ba6d7799dc4b93a6548f": "19100000000000000000",
  "8c75956e8fed50f5a7dd7cfd27da200f6746aea6": "1000000000000000000000",
  "afc8ebe8988bd4105acc4c018e546a1e8f9c7888": "500000000000000000000",
  "bf9acd4445d9c9554689cabbbab18800ff1741c2": "1000000000000000000000",
  "603f2fab7afb6e017b94766069a4b43b38964923": "1656954000000000000000",
  "a1f765c44fe45f790677944844be4f2d42165fbd": "3687750000000000000000",
  "4dc9d5bb4b19cecd94f19ec25d200ea72f25d7ed": "2000000000000000000000",
  "48f60a35484fe7792bcc8a7b6393d0dda1f6b717": "3600000000000000000000",
  "588ed990a2aff44a94105d58c305257735c868ac": "16100000000000000000000",
  "710be8fd5e2918468be2aabea80d828435d79612": "17600000000000000000",
  "03ea6d26d080e57aee3926b18e8ed73a4e5b2826": "200000000000000000000",
  "20824ba1dbebbef9846ef3d0f6c1b017e6912ec4": "7170194000000000000000",
  "f7500c166f8bea2f82347606e5024be9e4f4ce99": "20000000000000000000",
  "9d369165fb70b81a3a765f188fd60cbe5e7b0968": "2000000000000000000000",
  "6fddbd9bca66e28765c2162c8433548c1052ed11": "82720000000000000000000",
  "8b81156e698639943c01a75272ad3d35851ab282": "344946000000000000000",
  "75804aac64b4199083982902994d9c5ed8828f11": "557800000000000000000",
  "d6e8e97ae9839b9ee507eedb28edfb7477031439": "2000000000000000000000",
  "6c808cabb8ff5fbb6312d9c8e84af8cf12ef0875": "4000086000000000000000",
  "afa539586e4719174a3b46b9b3e663a7d1b5b987": "5000000000000000000000",
  "f8a065f287d91d77cd626af38ffa220d9b552a2b": "1910000000000000000000",
  "30e60900cacc7203f314dc604347255167fc2a0f": "2000000000000000000000",
  "796f87ba617a2930b1670be92ed1281fb0b346e1": "128400000000000000000",
  "f114ff0d0f24eff896edde5471dea484824a99b3": "13700000000000000000",
  "0b80fc70282cbdd5fde35bf78984db3bdb120188": "1000160000000000000000",
  "da7ad025ebde25d22243cb830ea1d3f64a566323": "500000000000000000000",
  "65a52141f56bef98991724c6e7053381da8b5925": "60140000000000000000",
  "bbc8eaff637e94fcc58d913c7770c88f9b479277": "200000000000000000000",
  "0469e8c440450b0e512626fe817e6754a8152830": "2000000000000000000000",
  "0727be0a2a00212048b5520fbefb953ebc9d54a0": "10000000000000000000000",
  "7d858493f07415e0912d05793c972113eae8ae88": "1818000000000000000000",
  "7091303116d5f2389b23238b4d656a8596d984d3": "1094014000000000000000",
  "3702e704cc21617439ad4ea27a5714f2fda1e932": "1000000000000000000000",
  "b87de1bcd29269d521b8761cc39cfb4319d2ead5": "1000000000000000000000",
  "f639ac31da9f67271bd10402b7654e5ce763bd47": "399996000000000000000",
  "e7735ec76518fc6aa92da8715a9ee3f625788f13": "1997803000000000000000",
  "51277fe7c81eebd252a03df69a6b9f326e272207": "59965000000000000000",
  "3b8098533f7d9bdcd307dbb23e1777ca18418936": "2000000000000000000000",
  "2cba6d5d0dc204ea8a25ada2e26f5675bd5f2fdc": "1330755000000000000000",
  "5c3c1c645b917543113b3e6c1c054da1fe742b9a": "800000000000000000000",
  "5ecdbaeab9106ffe5d7b519696609a05baeb85ad": "20000000000000000000",
  "45a820a0672f17dc74a08112bc643fd1167736c3": "199943000000000000000",
  "beef94213879e02622142bea61290978939a60d7": "5728109000000000000000",
  "6cd212aee04e013f3d2abad2a023606bfb5c6ac7": "1999944000000000000000",
  "92698e345378c62d8eda184d94366a144b0c105b": "1400000000000000000000",
  "2d5b42fc59ebda0dfd66ae914bc28c1b0a6ef83a": "206764195000000000000000",
  "b7a6791c16eb4e2162f14b6537a02b3d63bfc602": "780700000000000000000",
  "fa105f1a11b6e4b1f56012a27922e2ac2da4812f": "9550000000000000000000",
  "2306df931a940d58c01665fa4d0800802c02edfe": "1000000000000000000000",
  "f37bf78c5875154711cb640d37ea6d28cfcb1259": "200000000000000000000",
  "66201bd227ae6dc6bdfed5fbde811fecfe5e9dd9": "594808000000000000000",
  "2bafbf9e9ed2c219f7f2791374e7d05cb06777e7": "220000000000000000000",
  "8e9b35ad4a0a86f758446fffde34269d940ceacd": "4000000000000000000000",
  "1b43232ccd4880d6f46fa751a96cd82473315841": "80000000000000000000",
  "6eefdc850e87b715c72791773c0316c3559b58a4": "4000000000000000000000",
  "f2c03e2a38998c21648760f1e5ae7ea3077d8522": "2642456000000000000000",
  "0625d06056968b002206ff91980140242bfaa499": "1000000000000000000000",
  "6158e107c5eb54cb7604e0cd8dc1e07500d91c3c": "50000000000000000000",
  "02477212ffdd75e5155651b76506b1646671a1eb": "1760000000000000000000",
  "fa44a855e404c86d0ca8ef3324251dfb349c539e": "1552000000000000000000",
  "49897fe932bbb3154c95d3bce6d93b6d732904dd": "4000000000000000000000",
  "9b6641b13e172fc072ca4b8327a3bc28a15b66a9": "120000000000000000000",
  "a46b4387fb4dcce011e76e4d73547d4481e09be5": "1337000000000000000000",
  "72bb27cb99f3e2c2cf90a98f707d30e4a201a071": "1640000000000000000000",
  "b6bfe1c3ef94e1846fb9e3acfe9b50c3e9069233": "1999944000000000000000",
  "e6cb3f3124c9c9cc3834b1274bc3336456a38bac": "427382000000000000000",
  "fcbc5c71ace79741450b012cf6b8d3f17db68a70": "9550000000000000000000",
  "15dbb48c98309764f99ced3692dcca35ee306bac": "150000000000000000000000",
  "2e10910ba6e0bc17e055556614cb87090f4d7e5b": "200000000000000000000",
  "e5fbe34984b637196f331c679d0c0c47d83410e1": "2000050000000000000000",
  "6d120f0caae44fd94bcafe55e2e279ef96ba5c7a": "4000000000000000000000",
  "aa5afcfd8309c2df9d15be5e6a504e7d706624c5": "5846763000000000000000",
  "37959c20b7e9931d72f5a8ae869dafddad3b6d5c": "200000000000000000000",
  "b041310fe9eed6864cedd4bee58df88eb4ed3cac": "10000000000000000000000",
  "986df47e76e4d7a789cdee913cc9831650936c9d": "5000000000000000000000",
  "35aaa0465d1c260c420fa30e2629869fb6559207": "704976000000000000000",
  "7f655c6789eddf455cb4b88099720639389eebac": "6000000000000000000000",
  "9e3eb509278fe0dcd8e0bbe78a194e06b6803943": "940000000000000000000",
  "3e9410d3b9a87ed5e451a6b91bb8923fe90fb2b5": "200000000000000000000",
  "9e960dcd03d5ba99cb115d17ff4c09248ad4d0be": "200000000000000000000",
  "f057aa66ca767ede124a1c5b9cc5fc94ef0b0137": "2077730000000000000000",
  "f38a6ca80168537e974d14e1c3d13990a44c2c1b": "6000000000000000000000",
  "229e430de2b74f442651ddcdb70176bc054cad54": "13545000000000000000",
  "27bf9f44ba7d05c33540c3a53bb02cbbffe7c3c6": "2000000000000000000000",
  "10389858b800e8c0ec32f51ed61a355946cc409b": "200000000000000000000",
  "fd2929271e9d2095a264767e7b0df52ea0d1d400": "3000040000000000000000",
  "44250d476e062484e9080a3967bf3a4a732ad73f": "20000000000000000000",
  "0c67033dd8ee7f0c8ae534d42a51f7d9d4f7978f": "200000000000000000000",
  "e083d34863e0e17f926b7928edff317e998e9c4b": "400000000000000000000",
  "7f7192c0df1c7db6d9ed65d71184d8e4155a17ba": "79800000000000000000",
  "51e7b55c2f9820eed73884361b5066a59b6f45c6": "2000000000000000000000",
  "4fa983bb5e3073a8edb557effeb4f9fb1d60ef86": "1599800000000000000000",
  "5a5ee8e9bb0e8ab2fecb4b33d29478be50bbd44b": "776000000000000000000",
  "1f3959fc291110e88232c36b7667fc78a379613f": "18200000000000000000",
  "2d7d5c40ddafc450b04a74a4dabc2bb5d665002e": "2000000000000000000000",
  "5215183b8f80a9bc03d26ce91207832a0d39e620": "1000000000000000000000",
  "5607590059a9fec1881149a44b36949aef85d560": "2000000000000000000000",
  "f7c50f922ad16b61c6d1baa045ed816815bac48f": "12566370000000000000000",
  "da10978a39a46ff0bb848cf65dd9c77509a6d70e": "2000000000000000000000",
  "a7dcbba9b9bf6762c145416c506a71e3b497209c": "1999944000000000000000",
  "54e01283cc8b384538dd646770b357c960d6cacd": "5000000000000000000000",
  "78cf8336b328db3d87813a472b9e89b75e0cf3bc": "1000000000000000000000",
  "ba24fc436753a739db2c8d40e6d4d04c528e86fa": "13000000000000000000000",
  "dfe929a61c1b38eddbe82c25c2d6753cb1e12d68": "402500000000000000000",
  "2b49fba29830360fcdb6da23bbfea5c0bbac5281": "20000000000000000000",
  "76becae4a31d36f3cb577f2a43594fb1abc1bb96": "24860000000000000000000",
  "e0cf698a053327ebd16b7d7700092fe2e8542446": "95275000000000000000",
  "a3802d8a659e89a2c47e905430b2a827978950a7": "1000000000000000000000",
  "75636cdb109050e43d5d6ec47e359e218e857eca": "22886800000000000000000",
  "3d813ff2b6ed57b937dabf2b381d148a411fa085": "100000000000000000000",
  "a9252551a624ae513719dabe5207fbefb2fd7749": "40000000000000000000",
  "c749668042e71123a648975e08ed6382f83e05e2": "14000000000000000000000",
  "04eca501630abce35218b174956b891ba25efb23": "1000060000000000000000",
  "790f91bd5d1c5cc4739ae91300db89e1c1303c93": "2000000000000000000000",
  "009560a3de627868f91fa8bfe1c1b7afaf08186b": "524000000000000000000",
  "1329dd19cd4baa9fc64310efeceab22117251f12": "200000000000000000000",
  "7005a772282b1f62afda63f89b5dc6ab64c84cb9": "18000000000000000000000",
  "abfe936425dcc7b74b955082bbaaf2a11d78bc05": "1400000000000000000000",
  "97d0d9725e3b70e675843173938ed371b62c7fac": "170000000000000000000",
  "41ed2d8e7081482c919fc23d8f0091b3c82c4685": "1295460000000000000000",
  "992365d764c5ce354039ddfc912e023a75b8e168": "18200000000000000000",
  "e1c607c0a8a060da8f02a8eb38a013ea8cda5b8c": "805000000000000000000",
  "3b2c45990e21474451cf4f59f01955b331c7d7c9": "2000000000000000000000",
  "29ac2b458454a36c7e96c73a8667222a12242c71": "4000000000000000000000",
  "b8555010776e3c5cb311a5adeefe9e92bb9a64b9": "4000000000000000000000",
  "30380087786965149e81423b15e313ba32c5c783": "18200000000000000000",
  "a2f86bc061884e9eef05640edd51a2f7c0596c69": "2000050000000000000000",
  "9f98eb34d46979b0a6de8b05aa533a89b825dcf1": "86500000000000000000",
  "c81fb7d20fd2800192f0aac198d6d6a37d3fcb7d": "259500000000000000000",
  "a4035ab1e5180821f0f380f1131b7387c8d981cd": "20000000000000000000",
  "782f52f0a676c77716d574c81ec4684f9a020a97": "850055000000000000000",
  "261e0fa64c51137465eecf5b90f197f7937fdb05": "18000000000000000000000",
  "276fd7d24f8f883f5a7a28295bf17151c7a84b03": "2000000000000000000000",
  "a1f5b840140d5a9acef402ac3cc3886a68cad248": "2000000000000000000000",
  "d2bf67a7f3c6ce56b7be41675dbbadfe7ea93a33": "400000000000000000000",
  "8ee584337ddbc80f9e3498df55f0a21eacb57fb1": "20000000000000000000",
  "34393c5d91b9de597203e75bac4309b5fa3d28c3": "194000000000000000000",
  "114cbbbf6fb52ac414be7ec61f7bb71495ce1dfa": "3000000000000000000000",
  "ab7c42c5e52d641a07ad75099c62928b7f86622f": "335940000000000000000",
  "80bf995ed8ba92701d10fec49f9e7d014dbee026": "572153000000000000000",
  "4a192035e2619b24b0709d56590e9183ccf2c1d9": "10000000000000000000000",
  "376cd7577383e902951b60a2017ba7ea29e33576": "2000000000000000000000",
  "f5437e158090b2a2d68f82b54a5864b95dd6dbea": "4010732000000000000000",
  "13a5eecb38305df94971ef2d9e179ae6cebab337": "330000000000000000000",
  "efc8cf1963c9a95267b228c086239889f4dfd467": "10000000000000000000000",
  "db77b88dcb712fd17ee91a5b94748d720c90a994": "2000000000000000000000",
  "9aaafa0067647ed999066b7a4ca5b4b3f3feaa6f": "1000000000000000000000",
  "ae36f7452121913e800e0fcd1a65a5471c23846f": "164000000000000000000",
  "b124bcb6ffa430fcae2e86b45f27e3f21e81ee08": "2000000000000000000000",
  "f2813a64c5265d020235cb9c319b6c96f906c41e": "350000000000000000000",
  "e848ca7ebff5c24f9b9c316797a43bf7c356292d": "114000000000000000000",
  "21a6feb6ab11c766fdd977f8df4121155f47a1c0": "57200000000000000000",
  "e95e92bbc6de07bf3a660ebf5feb1c8a3527e1c5": "18200000000000000000",
  "0b369e002e1b4c7913fcf00f2d5e19c58165478f": "64520000000000000000",
  "0909648c18a3ce5bae7a047ec2f868d24cdda81d": "3820000000000000000000",
  "d32b45564614516c91b07fa9f72dcf787cce4e1c": "291000000000000000000",
  "cf1bdb799b2ea63ce134668bdc198b54840f180b": "18200000000000000000",
  "ae062c448618643075de7a0030342dced63dbad7": "825982000000000000000",
  "99dfd0504c06c743e46534fd7b55f1f9c7ec3329": "2000000000000000000000",
  "87fc4635263944ce14a46c75fa4a821f39ce7f72": "20000000000000000000",
  "27c2d7ca504daa3d9066dc09137dc42f3aaab452": "600000000000000000000",
  "cc60f836acdef3548a1fefcca13ec6a937db44a0": "86500000000000000000",
  "c910a970556c9716ea53af66ddef93143124913d": "1580000000000000000000",
  "8173c835646a672e0152be10ffe84162dd256e4c": "492000000000000000000",
  "e989733ca1d58d9e7b5029ba5d444858bec03172": "581595000000000000000",
  "86806474c358047d9406e6a07f40945bc8328e67": "6884000000000000000000",
  "5395a4455d95d178b4532aa4725b193ffe512961": "1000000000000000000000",
  "56397638bb3cebf1f62062794b5eb942f916171d": "2000000000000000000000",
  "6958f83bb2fdfb27ce0409cd03f9c5edbf4cbedd": "20000000000000000000000",
  "26ff0a51e7cece8400276978dbd6236ef162c0e6": "100020000000000000000000",
  "4ca783b556e5bf53aa13c8116613d65782c9b642": "25200000000000000000000",
  "15a0aec37ff9ff3d5409f2a4f0c1212aaccb0296": "1000000000000000000000",
  "50378af7ef54043f892ab7ce97d647793511b108": "19700000000000000000",
  "e7c6b5fc05fc748e5b4381726449a1c0ad0fb0f1": "2000000000000000000000",
  "5317ecb023052ca7f5652be2fa854cfe4563df4d": "499986000000000000000",
  "c94f7c35c027d47df8ef4f9df85a9248a17dd23b": "29944000000000000000",
  "6a63fc89abc7f36e282d80787b7b04afd6553e71": "160000000000000000000",
  "5fd3d6777ec2620ae83a05528ed425072d3ca8fd": "2000000000000000000000",
  "29adcf83b6b20ac6a434abb1993cbd05c60ea2e4": "10000000000000000000000",
  "8c6f9f4e5b7ae276bf58497bd7bf2a7d25245f64": "2730000000000000000000",
  "d94a57882a52739bbe2a0647c80c24f58a2b4f1c": "1341230000000000000000",
  "7286e89cd9de8f7a8a00c86ffdb53992dd9251d1": "1940000000000000000000",
  "5773b6026721a1dd04b7828cd62b591bfb34534c": "27000000000000000000000",
  "11fefb5dc1a4598aa712640c517775dfa1d91f8c": "10000000000000000000000",
  "c6e324beeb5b36765ecd464260f7f26006c5c62e": "2000000000000000000000",
  "118fbd753b9792395aef7a4d78d263cdcaabd4f7": "999800000000000000000",
  "f8298591523e50b103f0b701d623cbf0f74556f6": "200000000000000000000",
  "ab0ced762e1661fae1a92afb1408889413794825": "1910000000000000000000",
  "fa67b67b4f37a0150915110ede073b05b853bda2": "647490000000000000000",
  "ca122cf0f2948896b74843f49afed0ba1618eed7": "560000000000000000000",
  "186b95f8e5effddcc94f1a315bf0295d3b1ea588": "1999944000000000000000",
  "2915624bcb679137b8dae9ab57d11b4905eaee4b": "20000000000000000000",
  "0c6845bf41d5ee273c3ee6b5b0d69f6fd5eabbf7": "3000026000000000000000",
  "cb7479109b43b26657f4465f4d18c6f974be5f42": "1820000000000000000000",
  "8dd6a9bae57f518549ada677466fea8ab04fd9b4": "4000000000000000000000",
  "34958a46d30e30b273ecc6e5d358a212e5307e8c": "2000000000000000000000",
  "2003717907a72560f4307f1beecc5436f43d21e7": "500000000000000000000",
  "55ab99b0e0e55d7bb874b7cfe834de631c97ec23": "1031400000000000000000",
  "79b48d2d6137c3854d611c01ea42427a0f597bb7": "191000000000000000000",
  "d609ec0be70d0ad26f6e67c9d4762b52ee51122c": "1000000000000000000000",
  "e8c3f045bb7d38c9d2f395b0ba8492b253230901": "9000000000000000000000",
  "aaca60d9d700e78596bbbbb1f1e2f70f4627f9d8": "999996000000000000000",
  "89d75b8e0831e46f80bc174188184e006fde0eae": "1000000000000000000000",
  "b3667894b7863c068ad344873fcff4b5671e0689": "20000000000000000000000",
  "bc1609d685b76b48ec909aa099219022f89b2ccd": "1182000000000000000000",
  "88ee7f0efc8f778c6b687ec32be9e7d6f020b674": "2000000000000000000000",
  "470ac5d1f3efe28f3802af925b571e63868b397d": "2000000000000000000000",
  "abf8ffe0708a99b528cc1ed4e9ce4b0d0630be8c": "2263600000000000000000",
  "8cee38d6595788a56e3fb94634b3ffe1fbdb26d6": "20000000000000000000000",
  "19798cbda715ea9a9b9d6aab942c55121e98bf91": "1200000000000000000000",
  "e25a167b031e84616d0f013f31bda95dcc6350b9": "10560000000000000000000",
  "6196c3d3c0908d254366b7bca55745222d9d4db1": "4000000000000000000000",
  "e8e9850586e94f5299ab494bb821a5f40c00bd04": "3820000000000000000000",
  "1059cbc63e36c43e88f30008aca7ce058eeaa096": "100000000000000000000000",
  "c4f2913b265c430fa1ab8adf26c333fc1d9b66f2": "20000000000000000000",
  "26e9e2ad729702626417ef25de0dc800f7a779b3": "1000000000000000000000",
  "0dfbd4817050d91d9d625c02053cf61a3ee28572": "340000000000000000000",
  "709fe9d2c1f1ce42207c9585044a60899f35942f": "2000000000000000000000",
  "7ad82caea1a8b4ed05319b9c9870173c814e06ee": "616000000000000000000",
  "2a595f16eee4cb0c17d9a2d939b3c10f6c677243": "1100000000000000000000",
  "a8f89dd5cc6e64d7b1eeace00702022cd7d2f03d": "700000000000000000000",
  "c0a6cbad77692a3d88d141ef769a99bb9e3c9951": "100000000000000000000",
  "868c23be873466d4c74c220a19b245d1787e807f": "1366481000000000000000",
  "2905b192e83ce659aa355b9d0c204e3e95f9bb9a": "2160817000000000000000",
  "50b9fef0a1329b02d16506255f5a2db71ec92d1f": "1325464000000000000000",
  "fc10b7a67b3268d5331bfb6a14def5ea4a162ca3": "200000000000000000000",
  "85eb256b51c819d60ea61a82d12c9358d59c1cae": "460000000000000000000",
  "75de7e9352e90b13a59a5878ffecc7831cac4d82": "2740000000000000000000",
  "d32b2c79c36478c5431901f6d700b04dbe9b8810": "396000000000000000000",
  "2d0326b23f0409c0c0e9236863a133075a94ba18": "210380000000000000000",
  "d2e21ed56868fab28e0947927adaf29f23ebad6c": "1994000000000000000000",
  "2ad6c9d10c261819a1a0ca2c48d8c7b2a71728df": "1000000000000000000000",
  "7d445267c59ab8d2a2d9e709990e09682580c49f": "1000000000000000000000",
  "b6047cdf932db3e4045f4976122341537ed5961e": "20000000000000000000",
  "2b3cf97311ff30f460945a9d8099f4a88e26d456": "2000000000000000000000",
  "7f4f593b618c330ba2c3d5f41eceeb92e27e426c": "2775000000000000000000",
  "72a2fc8675feb972fa41b50dffdbbae7fa2adfb7": "2853840000000000000000",
  "076561a856455d7ef86e63f87c73dbb628a55f45": "900000000000000000000",
  "03d1724fd00e54aabcd2de2a91e8462b1049dd3a": "2640000000000000000000",
  "7ea0f96ee0a573a330b56897761f3d4c0130a8e3": "1337000000000000000000",
  "fe65c4188d7922576909642044fdc52395560165": "4000000000000000000000",
  "57883010b4ac857fedac03eab2551723a8447ffb": "1000000000000000000000",
  "0729a8a4a5ba23f579d0025b1ad0f8a0d35cdfd2": "9700000000000000000000",
  "e75c1fb177089f3e58b1067935a6596ef1737fb5": "99910000000000000000",
  "e0e978753d982f7f9d1d238a18bd4889aefe451b": "9700000000000000000000",
  "5620f46d1451c2353d6243a5d4b427130be2d407": "60000000000000000000",
  "f3d688f06bbdbf50f9932c4145cbe48ecdf68904": "20000000000000000000",
  "3aa948ea02397755effb2f9dc9392df1058f7e33": "850000000000000000000",
  "20d1417f99c569e3beb095856530fe12d0fceaaa": "1182175000000000000000",
  "ac77bdf00fd5985b5db12bbef800380abc2a0677": "1000000000000000000000",
  "267a7e6e82e1b91d51deddb644f0e96dbb1f7f7e": "20000000000000000000",
  "4bbcbf38b3c90163a84b1cd2a93b58b2a3348d87": "8000000000000000000000",
  "4c6b93a3bec16349540cbfcae96c9621d6645010": "2000000000000000000000",
  "c9308879056dfe138ef8208f79a915c6bc7e70a8": "10000000000000000000000",
  "c48b693cacefdbd6cb5d7895a42e3196327e261c": "1000000000000000000000",
  "a0951970dfd0832fb83bda12c23545e79041756c": "600000000000000000000",
  "7cdf74213945953db39ad0e8a9781add792e4d1d": "2000000000000000000000",
  "75621865b6591365606ed378308c2d1def4f222c": "3100000000000000000000",
  "67d6a8aa1bf8d6eaf7384e993dfdf10f0af68a61": "198067000000000000000",
  "8f0af37566d152802f1ae8f928b25af9b139b448": "200000000000000000000",
  "2c6afcd4037c1ed14fa74ff6758e0945a185a8e8": "17600000000000000000",
  "c1b2aa8cb2bf62cdc13a47ecc4657facaa995f98": "1000129000000000000000",
  "9e8144e08e89647811fe6b72d445d6a5f80ad244": "10000000000000000000000",
  "e04ff5e5a7e2af995d8857ce0290b53a2b0eda5d": "1000000000000000000000",
  "03dedfcd0b3c2e17c705da248790ef98a6bd5751": "1337000000000000000000",
  "698a8a6f01f9ab682f637c7969be885f6c5302bf": "19400000000000000000",
  "d82c6fedbdac98af2eed10b00f32b00056ca5a6d": "200000000000000000000",
  "2697b339813b0c2d964b2471eb1c606f4ecb9616": "1154000000000000000000",
  "987c9bcd6e3f3990a52be3eda4710c27518f4f72": "400000000000000000000",
  "c5d48ca2db2f85d8c555cb0e9cfe826936783f9e": "200000000000000000000",
  "da214c023e2326ff696c00393168ce46ffac39ec": "1000000000000000000000",
  "86570ab259c9b1c32c9729202f77f590c07dd612": "200000000000000000000",
  "a646a95c6d6f59f104c6541d7760757ab392b08c": "4200000000000000000000",
  "1933e334c40f3acbad0c0b851158206924beca3a": "7551541000000000000000",
  "3552a496eba67f12be6eedab360cd13661dc7480": "300000000000000000000",
  "2a9c96c19151ffcbe29a4616d0c52b3933b4659f": "69263000000000000000",
  "3b7b8e27de33d3ce7961b98d19a52fe79f6c25be": "100000000000000000000000",
  "a1911405cf6e999ed011f0ddcd2a4ff7c28f2526": "40000000000000000000",
  "0cae108e6db99b9e637876b064c6303eda8a65c8": "3000000000000000000000",
  "3883becc08b9be68ad3b0836aac3b620dc0017ef": "2000000000000000000000",
  "d0abcc70c0420e0e172f97d43b87d5e80c336ea9": "10000000000000000000000",
  "cbf16a0fe2745258cd52db2bf21954c975fc6a15": "300000000000000000000",
  "1b23cb8663554871fbbe0d9e60397efb6faedc3e": "200000000000000000000",
  "fbede32c349f3300ef4cd33b4de7dc18e443d326": "3160000000000000000000",
  "5e806e845730f8073e6cc9018ee90f5c05f909a3": "9480000000000000000000",
  "425c338a1325e3a1578efa299e57d986eb474f81": "2000000000000000000000",
  "8bf297f8f453523ed66a1acb7676856337b93bf0": "4000000000000000000000",
  "38e8a31af2d265e31a9fff2d8f46286d1245a467": "20000000000000000000",
  "7edafba8984baf631a820b6b92bbc2c53655f6bd": "2000000000000000000000",
  "aa0200f1d17e9c54da0647bb96395d57a78538d8": "1056000000000000000000",
  "433eb94a339086ed12d9bde9cd1d458603c97dd6": "100000000000000000000000",
  "cd7e47909464d871b9a6dc76a8e9195db3485e7a": "9850000000000000000000",
  "5975d78d974ee5bb9e4d4ca2ae77c84b9c3b4b82": "1370000000000000000000",
  "cea2896623f4910287a2bdc5be83aea3f2e6de08": "9359000000000000000000",
  "cb4ad0c723da46ab56d526da0c1d25c73daff10a": "510000000000000000000",
  "e2cf360aa2329eb79d2bf7ca04a27a17c532e4d8": "102000000000000000000",
  "ea60549ec7553f511d2149f2d4666cbd9243d93c": "2000000000000000000000",
  "cbb7be17953f2ccc93e1bc99805bf45511434e4c": "50440000000000000000000",
  "3549bd40bbbc2b30095cac8be2c07a0588e0aed6": "20000000000000000000",
  "6510df42a599bcb0a519cca961b488759a6f6777": "2000000000000000000000",
  "ed12a1ba1fb8adfcb20dfa19582e525aa3b74524": "6685000000000000000000",
  "135eb8c0e9e101deedec11f2ecdb66ae1aae8867": "20000000000000000000000",
  "ee906d7d5f1748258174be4cbc38930302ab7b42": "200000000000000000000",
  "253f1e742a2cec86b0d7b306e5eacb6ccb2f8554": "20040000000000000000000",
  "ecd1a62802351a41568d23033004acc6c005a5d3": "50000000000000000000",
  "558c54649a8a6e94722bd6d21d14714f71780534": "2000000000000000000000",
  "ca657ec06fe5bc09cf23e52af7f80cc3689e6ede": "900000000000000000000",
  "74bf7a5ab59293149b5c60cf364263e5ebf1aa0d": "115800000000000000000",
  "7a6d781c77c4ba1fcadf687341c1e31799e93d27": "274000000000000000000",
  "77028e409cc43a3bd33d21a9fc53ec606e94910e": "3880000000000000000000",
  "4781a10a4df5eebc82f4cfe107ba1d8a7640bd66": "1790000000000000000000",
  "78e08bc533413c26e291b3143ffa7cc9afb97b78": "200000000000000000000",
  "03ef6ad20ff7bd4f002bac58d47544cf879ae728": "6895000000000000000000",
  "0e3696cf1f4217b163d1bc12a5ea730f1c32a14a": "4000000000000000000000",
  "825135b1a7fc1605614c8aa4d0ac6dbad08f480e": "1430000000000000000000",
  "286b186d61ea1fd78d9930fe12b06537b05c3d51": "1000000000000000000000",
  "8d6657f59711b1f803c6ebef682f915b62f92dc9": "2000000000000000000000",
  "da8bbee182e455d2098acb338a6d45b4b17ed8b6": "2000000000000000000000",
  "3f2da093bb16eb064f8bfa9e30b929d15f8e1c4c": "2000000000000000000000",
  "f5d9cf00d658dd45517a48a9d3f5f633541a533d": "116400000000000000000",
  "c5f64babb7033142f20e46d7aa6201ed86f67103": "2000000000000000000000",
  "a2e2b5941e0c01944bfe1d5fb4e8a34b922ccfb1": "200000000000000000000",
  "6114b0eae5576903f80bfb98842d24ed92237f1e": "100000000000000000000",
  "38df0c4abe7ded5fe068eadf154ac691774324a4": "1790000000000000000000",
  "1c2010bd662df417f2a271879afb13ef4c88a3ae": "4000000000000000000000",
  "918967918cd897dd0005e36dc6c883ef438fc8c7": "140000000000000000000",
  "a522de7eb6ae1250522a513133a93bd42849475c": "20000000000000000000000",
  "7de442c82386154d2e993cbd1280bb7ca6b12ada": "4002000000000000000000",
  "66424bd8785b8cb461102a900283c35dfa07ef6a": "40221000000000000000",
  "7bbbec5e70bdead8bb32b42805988e9648c0aa97": "1000076000000000000000",
  "fec06fe27b44c784b2396ec92f7b923ad17e9077": "2000000000000000000000",
  "95d550427b5a514c751d73a0f6d29fb65d22ed10": "300000000000000000000",
  "8dde60eb08a099d7daa356daaab2470d7b025a6b": "197000000000000000000",
  "81bccbff8f44347eb7fca95b27ce7c952492aaad": "152240000000000000000",
  "3995e096b08a5a726800fcd17d9c64c64e088d2b": "200000000000000000000",
  "4ee13c0d41200b46d19dee5c4bcec71d82bb8e38": "7893915000000000000000",
  "c41461a3cfbd32c9865555a4813137c076312360": "999999000000000000000",
  "3300fb149aded65bcba6c04e9cd6b7a03b893bb1": "18200000000000000000",
  "29f9286c0e738d1721a691c6b95ab3d9a797ede8": "200000000000000000000000",
  "34c8e5f1330fcb4b14ca75cb2580a4b93d204e36": "2000000000000000000000",
  "ec5df227bfa85d7ad76b426e1cee963bc7f519dd": "1000000000000000000000",
  "797510e386f56393ced8f477378a444c484f7dad": "1000000000000000000000",
  "0191eb547e7bf6976b9b1b577546761de65622e2": "1999980000000000000000",
  "615a6f36777f40d6617eb5819896186983fd3731": "5910000000000000000000",
  "17580b766f7453525ca4c6a88b01b50570ea088c": "100000000000000000000",
  "945d96ea573e8df7262bbfa572229b4b16016b0f": "209300000000000000000",
  "2de0964400c282bdd78a919c6bf77c6b5f796179": "200000000000000000000",
  "304ec69a74545721d7316aef4dcfb41ac59ee2f0": "200000000000000000000",
  "be2b326e78ed10e550fee8efa8f8070396522f5a": "39400000000000000000000",
  "1a0841b92a7f7075569dc4627e6b76cab05ade91": "1520000000000000000000",
  "5fa61f152de6123516c751242979285f796ac791": "204000000000000000000",
  "68c8791dc342c373769ea61fb7b510f251d32088": "1000000000000000000000",
  "4167cd48e733418e8f99ffd134121c4a4ab278c4": "3640000000000000000000",
  "598aaabae9ed833d7bc222e91fcaa0647b77580b": "1800000000000000000000",
  "979f30158b574b999aab348107b9eed85b1ff8c1": "970000000000000000000",
  "3ad06149b21c55ff867cc3fb9740d2bcc7101231": "197000000000000000000000",
  "7133843a78d939c69d4486e10ebc7b602a349ff7": "329000000000000000000",
  "8bdfda6c215720eda2136f91052321af4e936c1f": "1000008000000000000000",
  "3e1c53300e4c168912163c7e99b95da268ad280a": "1003200000000000000000",
  "e07ebbc7f4da416e42c8d4f842aba16233c12580": "2000000000000000000000",
  "bac8922c4acc7d2cb6fd59a14eb45cf3e702214b": "800000000000000000000",
  "bb6c284aac8a69b75cddb00f28e145583b56bece": "2000000000000000000000",
  "0372ee5508bf8163ed284e5eef94ce4d7367e522": "100000000000000000000",
  "17125b59ac51cee029e4bd78d7f5947d1ea49bb2": "22000000000000000000000",
  "c88ca1e6e5f4d558d13780f488f10d4ad3130d34": "1550000000000000000000",
  "a825fd5abb7926a67cf36ba246a24bd27be6f6ed": "17600000000000000000",
  "04241b41ecbd0bfdf1295e9d4fa59ea09e6c6186": "1870000000000000000000",
  "6de4d15219182faf3aa2c5d4d2595ff23091a727": "1580000000000000000000",
  "b203d29e6c56b92699c4b92d1f6f84648dc4cfbc": "400000000000000000000",
  "80b42de170dbd723f454e88f7716452d92985092": "300202000000000000000",
  "0a5b79d8f23b6483dbe2bdaa62b1064cc76366ae": "1969803000000000000000",
  "32034e8581d9484e8af42a28df190132ec29c466": "3460000000000000000000",
  "7ee604c7a9dc2909ce321de6b9b24f5767577555": "5533575000000000000000",
  "a387ce4e961a7847f560075c64e1596b5641d21c": "668500000000000000000",
  "fcc9d4a4262e7a027ab7519110d802c495ceea39": "6370000000000000000000",
  "ff8a2ca5a81333f19998255f203256e1a819c0aa": "224000000000000000000",
  "f9811fa19dadbf029f8bfe569adb18228c80481a": "200000000000000000000",
  "0d1f2a57713ebc6e94de29846e8844d376665763": "5000000000000000000000",
  "eab0bd148309186cf8cbd13b7232d8095acb833a": "10691800000000000000000",
  "36928b55bc861509d51c8cf1d546bfec6e3e90af": "1970000000000000000000",
  "30480164bcd84974ebc0d90c9b9afab626cd1c73": "800000000000000000000",
  "36339f84a5c2b44ce53dfdb6d4f97df78212a7df": "321600000000000000000",
  "cfeacaaed57285e0ac7268ce6a4e35ecfdb242d7": "1086400000000000000000",
  "572dd8cd3fe399d1d0ec281231b7cefc20b9e4bb": "10400000000000000000000",
  "5dded049a6e1f329dc4b971e722c9c1f2ade83f0": "1000000000000000000000",
  "9756e176c9ef693ee1eec6b9f8b151d313beb099": "1200000000000000000000",
  "01e6415d587b065490f1ed7f21d6e0f386ee6747": "2000000000000000000000",
  "b4413576869c08f9512ad311fe925988a52d3414": "10000000000000000000000",
  "da9f55460946d7bfb570ddec757ca5773b58429a": "507600000000000000000",
  "7180b83ee5574317f21c8072b191d895d46153c3": "460000000000000000000",
  "0aca9a5626913b08cfc9a66d40508dce52b60f87": "1910000000000000000000",
  "5cd0e475b54421bdfc0c12ea8e082bd7a5af0a6a": "59000000000000000000",
  "7edb02c61a227287611ad950696369cc4e647a68": "274000000000000000000",
  "b2676841ee9f2d31c172e82303b0fe9bbf9f1e09": "200000000000000000000",
  "a2222259dd9c3e3ded127084f808e92a1887302c": "162000000000000000000",
  "4b3a7cc3a7d7b00ed5282221a60259f25bf6538a": "1000000000000000000000",
  "e33ff987541dde5cdee0a8a96dcc3f33c3f24cc2": "200000000000000000000000",
  "1e1a4828119be309bd88236e4d482b504dc55711": "2955000000000000000000",
  "9b1811c3051f46e664ae4bc9c824d18592c4574a": "199955000000000000000",
  "59fe00696dbd87b7976b29d1156c8842a2e17914": "2000000000000000000000",
  "48010ef3b8e95e3f308f30a8cb7f4eb4bf60d965": "2000000000000000000000",
  "c90300cb1d4077e6a6d7e169a460468cf4a492d7": "2000000000000000000000",
  "6dedf62e743f4d2c2a4b87a787f5424a7aeb393c": "180000000000000000000",
  "fb744b951d094b310262c8f986c860df9ab1de65": "52009000000000000000",
  "193ac65183651800e23580f8f0ead3bb597eb8a4": "50020000000000000000",
  "bf05ff5ecf0df2df887759fb8274d93238ac267d": "800000000000000000000",
  "6c0e712f405c59725fe829e9774bf4df7f4dd965": "57413800000000000000000",
  "2744ff67464121e35afc2922177164fa2fcb0267": "100000000000000000000",
  "d09cb2e6082d693a13e8d2f68dd1dd8461f55840": "1000000000000000000000",
  "bc171e53d17ac9b61241ae436deec7af452e7496": "5348000000000000000000",
  "71fa22cc6d33206b7d701a163a0dab31ae4d31d6": "1610000000000000000000",
  "4da8030769844bc34186b85cd4c7348849ff49e9": "10000000000000000000000",
  "c8616b4ec09128cdff39d6e4b9ac86eec471d5f2": "19400000000000000000",
  "407295ebd94b48269c2d569c9b9af9aa05e83e5e": "10000000000000000000000",
  "d45d5daa138dd1d374c71b9019916811f4b20a4e": "576000000000000000000",
  "42c6edc515d35557808d13cd44dcc4400b2504e4": "197876000000000000000",
  "0bc95cb32dbb574c832fa8174a81356d38bc92ac": "2000000000000000000000",
  "5a6071bcebfcba4ab57f4db96fc7a68bece2ba5b": "2000000000000000000000",
  "54c93e03a9b2e8e4c3672835a9ee76f9615bc14e": "19400000000000000000",
  "3c03bbc023e1e93fa3a3a6e428cf0cd8f95e1ec6": "1520000000000000000000",
  "ba1531fb9e791896bcf3a80558a359f6e7c144bd": "3940000000000000000000",
  "aa56a65dc4abb72f11bae32b6fbb07444791d5c9": "748600000000000000000",
  "e437acbe0f6227b0e36f36e4bcf7cf613335fb68": "200000000000000000000",
  "39d4a931402c0c79c457186f24df8729cf957031": "4000000000000000000000",
  "e22b20c77894463baf774cc256d5bddbbf7ddd09": "1000000000000000000000",
  "70a4067d448cc25dc8e70e651cea7cf84e92109e": "176000000000000000000",
  "aa3925dc220bb4ae2177b2883078b6dc346ca1b2": "8000000000000000000000",
  "ad57aa9d00d10c439b35efcc0becac2e3955c313": "200000000000000000000",
  "e93d47a8ca885d540c4e526f25d5c6f2c108c4b8": "112640000000000000000000",
  "232ce782506225fd9860a2edc14a7a3047736da2": "20000000000000000000",
  "49a645e0667dfd7b32d075cc2467dd8c680907c4": "129560000000000000000",
  "cf2e734042a355d05ffb2e3915b16811f45a695e": "2000000000000000000000",
  "39b1c471ae94e12164452e811fbbe2b3cd7275ac": "2000000000000000000000",
  "ffad3dd74e2c1f796ac640de56dc99b4c792a402": "5000000000000000000000",
  "a69d7cd17d4842fe03f62a90b2fbf8f6af7bb380": "100000000000000000000",
  "2001bef77b66f51e1599b02fb110194a0099b78d": "2000000000000000000000",
  "95e7616424cd0961a71727247437f0069272280e": "400000000000000000000",
  "c04f4bd4049f044685b883b62959ae631d667e35": "5820000000000000000000",
  "ede0147ec032c3618310c1ff25690bf172193dac": "2000000000000000000000",
  "66719c0682b2ac7f9e27abebec7edf8decf0ae0d": "20000000000000000000",
  "45272b8f62e9f9fa8ce04420e1aea3eba9686eac": "4000000000000000000000",
  "d1da0c8fb7c210e0f2ec618f85bdae7d3e734b1c": "1970000000000000000000",
  "e9133e7d31845d5f2b66a2618792e869311acf66": "24050000000000000000000",
  "ebb62cf8e22c884b1b28c6fa88fbbc17938aa787": "798000000000000000000",
  "6205c2d5647470848a3840f3887e9b015d34755c": "1800000000000000000000",
  "76ca22bcb8799e5327c4aa2a7d0949a1fcce5f29": "1524180000000000000000",
  "6b925dd5d8ed6132ab6d0860b82c44e1a51f1fee": "1480000000000000000000",
  "797bb7f157d9feaa17f76da4f704b74dc1038341": "3340000000000000000000",
  "ae8954f8d6166de507cf61297d0fc7ca6b9e7128": "300000000000000000000",
  "75c1ad23d23f24b384d0c3149177e86697610d21": "6426082000000000000000",
  "805d846fb0bc02a7337226d685be9ee773b9198a": "19999800000000000000000",
  "c3cb6b36af443f2c6e258b4a39553a818747811f": "1610000000000000000000",
  "cea43f7075816b60bbfce68b993af0881270f6c4": "2000000000000000000000",
  "e0388aeddd3fe2ad56f85748e80e710a34b7c92e": "500000000000000000000",
  "e131f87efc5ef07e43f0f2f4a747b551d750d9e6": "19999000000000000000000",
  "c2b2cbe65bc6c2ee7a3c75b2e47c189c062e8d8b": "20000000000000000000000",
  "bd8765f41299c7f479923c4fd18f126d7229047d": "4000000000000000000000",
  "c83ba6dd9549be1d3287a5a654d106c34c6b5da2": "7000000000000000000000",
  "f870995fe1e522321d754337a45c0c9d7b38951c": "20000000000000000000",
  "0d8ed7d0d15638330ed7e4eaccab8a458d75737e": "2000000000000000000000",
  "36c510bf8d6e569bf2f37d47265dbcb502ff2bce": "30000000000000000000000",
  "0eccf617844fd61fba62cb0e445b7ac68bcc1fbe": "387260000000000000000",
  "ae10e27a014f0d306baf266d4897c89aeee2e974": "20000000000000000000000",
  "1827039f09570294088fddf047165c33e696a492": "9550000000000000000000",
  "23378f42926d0184b793b0c827a6dd3e3d334fcd": "56000000000000000000",
  "467124ae7f452f26b3d574f6088894fa5d1cfb3b": "2700000000000000000000",
  "aae61e43cb0d0c96b30699f77e00d711d0a3979b": "1000000000000000000000",
  "15c7edb8118ee27b342285eb5926b47a855bc7a5": "20000000000000000000",
  "0d5d98565c647ca5f177a2adb9d3022fac287f21": "200000000000000000000",
  "7222fec7711781d26eaa4e8485f7aa3fac442483": "456000000000000000000",
  "dc44275b1715baea1b0345735a29ac42c9f51b4f": "1164000000000000000000",
  "04d82af9e01a936d97f8f85940b970f9d4db9936": "200000000000000000000",
  "45533390e340fe0de3b3cf5fb9fc8ea552e29e62": "1460000000000000000000",
  "1284f0cee9d2ff2989b65574d06ffd9ab0f7b805": "400000000000000000000",
  "ed9ebccba42f9815e78233266dd6e835b6afc31b": "6000000000000000000000",
  "e4324912d64ea3aef76b3c2ff9df82c7e13ae991": "2000000000000000000000",
  "94c742fd7a8b7906b3bfe4f8904fc0be5c768033": "20000000000000000000000",
  "62fb8bd1f0e66b90533e071e6cbe6111fef0bc63": "17600000000000000000000",
  "2c83aeb02fcf067d65a47082fd977833ab1cec91": "150400000000000000000",
  "06cbfa08cdd4fba737bac407be8224f4eef35828": "593459000000000000000",
  "67ee406ea4a7ae6a3a381eb4edd2f09f174b4928": "1036000000000000000000",
  "83c23d8a502124ee150f08d71dc6727410a0f901": "33999600000000000000000",
  "f7c00cdb1f020310d5acab7b496aaa44b779085e": "1670000000000000000000",
  "d096565b7c7407d06536580355fdd6d239144aa1": "250000000000000000000",
  "f8d52dcc5f96cc28007b3ecbb409f7e22a646caa": "149200000000000000000",
  "0c222c7c41c9b048efcce0a232434362e12d673b": "10007600000000000000000",
  "503bdbd8bc421c32a443032deb2e3e4cd5ba8b4e": "2000000000000000000000",
  "77da5e6c72fb36bce1d9798f7bcdf1d18f459c2e": "22380000000000000000",
  "e62f98650712eb158753d82972b8e99ca3f61877": "2000000000000000000000",
  "87a7c508ef71582dd9a54372f89cb01f252fb180": "200000000000000000000",
  "f61283b4bd8504058ca360e993999b62cbc8cd67": "255000000000000000000",
  "9ccddcb2cfc2b25b08729a0a98d9e6f0202ea2c1": "100000000000000000000",
  "d460a4b908dd2b056759b488850b66a838fc77a8": "1970000000000000000000",
  "5431b1d18751b98fc9e2888ac7759f1535a2db47": "2000000000000000000000",
  "da2a14f9724015d79014ed8e5909681d596148f1": "48499000000000000000",
  "c989434f825aaf9c552f685eba7c11db4a5fc73a": "501000000000000000000",
  "2b701d16c0d3cc1e4cd85445e6ad02eea4ac012d": "600000000000000000000",
  "78b978a9d7e91ee529ea4fc4b76feaf8762f698c": "32000000000000000000000",
  "c89cf504b9f3f835181fd8424f5ccbc8e1bddf7d": "10000000000000000000000",
  "e94941b6036019b4016a30c1037d5a6903babaad": "780000000000000000000",
  "95d98d0c1069908f067a52acac2b8b534da37afd": "2054053000000000000000",
  "8284923b62e68bbf7c2b9f3414d13ef6c812a904": "3880000000000000000000",
  "3e5a39fdda70df1126ab0dc49a7378311a537a1f": "2400000000000000000000",
  "a2ace4c993bb1e5383f8ac74e179066e814f0591": "100000000000000000000",
  "0609d83a6ce1ffc9b690f3e9a81e983e8bdc4d9d": "70000000000000000000000",
  "d119417c46732cf34d1a1afb79c3e7e2cd8eece4": "2000000000000000000000",
  "fdb33944f2360615e5be239577c8a19ba52d9887": "601650000000000000000",
  "dd95dbe30f1f1877c5dd7684aeef302ab6885192": "8372000000000000000000",
  "413f4b02669ccff6806bc826fcb7deca3b0ea9bc": "20000000000000000000",
  "5800cd8130839e94495d2d8415a8ea2c90e0c5cb": "200000000000000000000",
  "65053191319e067a25e6361d47f37f6318f83419": "394000000000000000000",
  "9bc573bcda23b8b26f9073d90c230e8e71e0270b": "999544000000000000000",
  "97f7760657c1e202759086963eb4211c5f8139b9": "49770000000000000000000",
  "126897a311a14ad43b78e0920100c4426bfd6bdd": "973581000000000000000",
  "d5276f0cd5ffd5ffb63f98b5703d5594ede0838b": "400000000000000000000",
  "e9c35c913ca1fceab461582fe1a5815164b4fd21": "8000000000000000000000",
  "b43067fe70d9b55973ba58dc64dd7f311e554259": "200000000000000000000",
  "6f8f0d15cc96fb7fe94f1065bc6940f8d12957b2": "1000000000000000000000",
  "b1dba5250ba9625755246e067967f2ad2f0791de": "80000000000000000000000",
  "72b7a03dda14ca9c661a1d469fd33736f673c8e8": "2000000000000000000000",
  "e792349ce9f6f14f81d0674096befa1f9221cdea": "1685365000000000000000",
  "1815279dff9952da3be8f77249dbe22243377be7": "4749800000000000000000",
  "33481e856ebed48ea708a27426ef28e867f57cd1": "200000000000000000000",
  "8eb8c71982a00fb84275293253f8044544b66b49": "400000000000000000000",
  "65f5870f26bce089677dfc23b5001ee492483428": "5067230000000000000000",
  "8e23facd12c765c36ab81a6dd34d8aa9e68918ae": "167310000000000000000",
  "4912d902931676ff39fc34fe3c3cc8fb2182fa7a": "20000000000000000000",
  "c09a66172aea370d9a63da04ff71ffbbfcff7f94": "2000000000000000000000",
  "e969ea1595edc5c4a707cfde380929633251a2b0": "200000000000000000000",
  "4f2b47e2775a1fa7178dad92985a5bbe493ba6d6": "200000000000000000000",
  "cab9a97ada065c87816e6860a8f1426fe6b3d775": "1000000000000000000000",
  "cdfd8217339725d7ebac11a63655f265eff1cc3d": "4999962000000000000000",
  "ab4004c0403f7eabb0ea586f212156c4203d67f1": "1999944000000000000000",
  "1c7cb2fe6bf3e09cbcdc187af38fa8f5053a70b6": "9970823000000000000000",
  "a951b244ff50cfae591d5e1a148df6a938ef2a1a": "1734000000000000000000",
  "b158db43fa62d30e65f3d09bf781c7b67372ebaa": "1999000000000000000000",
  "25e037f00a18270ba5ec3420229ddb0a2ce38fa2": "10000000000000000000000",
  "2aaea1f1046f30f109faec1c63ef5c7594eb08da": "4000000000000000000000",
  "73d7269ff06c9ffd33754ce588f74a966abbbbba": "6600000000000000000000",
  "4c767b65fd91161f4fbdcc6a69e2f6ad711bb918": "720000000000000000000",
  "92ae5b7c7eb492ff1ffa16dd42ad9cad40b7f8dc": "865000000000000000000",
  "a04f2ae02add14c12faf65cb259022d0830a8e26": "100000000000000000000000",
  "63ef2fbc3daf5edaf4a295629ccf31bcdf4038e5": "1460000000000000000000",
  "749ad6f2b5706bbe2f689a44c4b640b58e96b992": "100000000000000000000",
  "4d836d9d3b0e2cbd4de050596faa490cffb60d5d": "300000000000000000000",
  "59f6247b0d582aaa25e5114765e4bf3c774f43c2": "50000000000000000000",
  "1293c78c7d6a443b9d74b0ba5ee7bb47fd418588": "6685000000000000000000",
  "67bc85e87dc34c4e80aafa066ba8d29dbb8e438e": "402500000000000000000",
  "a09f4d5eaa65a2f4cb750a49923401dae59090af": "140000000000000000000",
  "ebbd4db9019952d68b1b0f6d8cf0683c00387bb5": "332330000000000000000",
  "b16479ba8e7df8f63e1b95d149cd8529d735c2da": "846477000000000000000",
  "e1b2aca154b8e0766c4eba30bc10c7f35036f368": "19980000000000000000",
  "5c464197791c8a3da3c925436f277ab13bf2faa2": "8000000000000000000000",
  "170a88a8997f92d238370f1affdee6347050b013": "3000800000000000000000",
  "dadbfafd8b62b92a24efd75256dd83abdbd7bbdb": "19700000000000000000",
  "bb993b96ee925ada7d99d786573d3f89180ce3aa": "2000000000000000000000",
  "f2c362b0ef991bc82fb36e66ff75932ae8dd8225": "74000000000000000000",
  "7f2382ffd8f83956467937f9ba72374623f11b38": "600000000000000000000",
  "74d1a4d0c7524e018d4e06ed3b648092b5b6af2c": "50000000000000000000",
  "24a750eae5874711116dd7d47b7186ce990d3103": "200000000000000000000",
  "a8e42a4e33d7526cca19d9a36dcd6e8040d0ea73": "1080000000000000000000",
  "3e1b2230afbbd310b4926a4c776d5ae7819c661d": "30000000000000000000000",
  "6af9f0dfeeaebb5f64bf91ab771669bf05295553": "400000000000000000000",
  "41e4a20275e39bdcefeb655c0322744b765140c2": "10000000000000000000000",
  "ceb089ec8a78337e8ef88de11b49e3dd910f748f": "1000000000000000000000",
  "e6bcd30a8fa138c5d9e5f6c7d2da806992812dcd": "260000000000000000000000",
  "e08c60313106e3f9334fe6f7e7624d211130c077": "40000000000000000000",
  "f5cffbba624e7eb321bc83c60ca68199b4e36671": "2000000000000000000000",
  "d7c2803ed7b0e0837351411a8e6637d168bc5b05": "29549015000000000000000",
  "0f3665d48e9f1419cd984fc7fa92788710c8f2e4": "2000000000000000000000",
  "b48921c9687d5510744584936e8886bdbf2df69b": "1000000000000000000000",
  "a94bbb8214cf8da0c2f668a2ac73e86248528d4b": "960000000000000000000",
  "be0c2a80b9de084b172894a76cf4737a4f529e1a": "1999944000000000000000",
  "fcf199f8b854222f182e4e1d099d4e323e2aae01": "1000000000000000000000",
  "b52dfb45de5d74e3df208332bc571c809b8dcf32": "6000000000000000000000",
  "704819d2e44d6ed1da25bfce84c49fcca25613e5": "400000000000000000000",
  "6ff6cc90d649de4e96cffee1077a5b302a848dcb": "28600000000000000000",
  "4d9c77d0750c5e6fbc247f2fd79274686cb353d6": "20000000000000000000",
  "68e8022740f4af29eb48db32bcecddfd148d3de3": "1000000000000000000000",
  "2cb615073a40dcdb99faa848572e987b3b056efb": "799600000000000000000",
  "64adcceec53dd9d9dd15c8cc1a9e736de4241d2c": "56000000000000000000",
  "2aec809df9325b9f483996e99f7331097f08aa0e": "4000000000000000000000",
  "438c2f54ff8e629bab36b1442b760b12a88f02ae": "2000000000000000000000",
  "9e35399071a4a101e9194daa3f09f04a0b5f9870": "4000000000000000000000",
  "a5c336083b04f9471b8c6ed73679b74d66c363ec": "3014100000000000000000",
  "7ad3f307616f19dcb143e6444dab9c3c33611f52": "50000000000000000000",
  "455cb8ee39ffbc752331e5aefc588ef0ee593454": "999963000000000000000",
  "c4c01afc3e0f045221da1284d7878574442fb9ac": "7419944000000000000000",
  "99268327c373332e06c3f6164287d455b9d5fa4b": "2000000000000000000000",
  "4367ae4b0ce964f4a54afd4b5c368496db169e9a": "2000000000000000000000",
  "2cd79eb52027b12c18828e3eaab2969bfcd287e9": "20000000000000000000",
  "b96841cabbc7dbd69ef0cf8f81dff3c8a5e21570": "12000000000000000000000",
  "d7ebddb9f93987779b680155375438db65afcb6a": "100600000000000000000",
  "0631d18bbbbd30d9e1732bf36edae2ce8901ab80": "3024800000000000000000",
  "5fad960f6b2c84569c9f4d47bf1985fcb2c65da6": "999972000000000000000",
  "01d599ee0d5f8c38ab2d392e2c65b74c3ce31820": "510000000000000000000",
  "ff0cc8dac824fa24fc3caa2169e6e057cf638ad6": "4000000000000000000000",
  "c25266c7676632f13ef29be455ed948add567792": "1337000000000000000000",
  "9c344098ba615a398f11d009905b177c44a7b602": "1000000000000000000000",
  "3b0accaf4b607cfe61d17334c214b75cdefdbd89": "2000000000000000000000",
  "6d6634b5b8a40195d949027af4828802092ceeb6": "3000000000000000000000",
  "208c45732c0a378f17ac8324926d459ba8b658b4": "2955000000000000000000",
  "c24399b4bf86f7338fbf645e3b22b0e0b7973912": "2000000000000000000000",
  "29763dd6da9a7c161173888321eba6b63c8fb845": "328000000000000000000",
  "9c2fd54089af665df5971d73b804616039647375": "1000000000000000000000",
  "0e09646c99af438e99fa274cb2f9c856cb65f736": "1910000000000000000000",
  "be73274d8c5aa44a3cbefc8263c37ba121b20ad3": "500000000000000000000",
  "ecfd004d02f36cd4d8b4a8c1a9533b6af85cd716": "5003800000000000000000",
  "f978b025b64233555cc3c19ada7f4199c9348bf7": "400000000000000000000000",
  "705ddd38355482b8c7d3b515bda1500dd7d7a817": "400000000000000000000",
  "2b8a0dee5cb0e1e97e15cfca6e19ad21f995efad": "504206000000000000000",
  "1098cc20ef84bad5146639c4cd1ca6c3996cb99b": "18200000000000000000",
  "afdac5c1cb56e245bf70330066a817eaafac4cd1": "20000000000000000000",
  "910e996543344c6815fb97cda7af4b8698765a5b": "103400000000000000000",
  "94612781033b57b146ee74e753c672017f5385e4": "3600000000000000000000",
  "d03fc165576aaed525e5502c8e140f8b2e869639": "6850000000000000000000",
  "293384c42b6f8f2905ce52b7205c2274376c612b": "1400000000000000000000",
  "09ee12b1b42b05af9cf207d5fcac255b2ec411f2": "58929000000000000000",
  "dbd71efa4b93c889e76593de609c3b04cbafbe08": "20000000000000000000",
  "fa86ca27bf2854d98870837fb6f6dfe4bf6453fc": "322061000000000000000",
  "61ff8e67b34d9ee6f78eb36ffea1b9f7c15787af": "1640000000000000000000",
  "6d4cbf3d8284833ae99344303e08b4d614bfda3b": "12000000000000000000000",
  "2ff160c44f72a299b5ec2d71e28ce5446d2fcbaf": "360000000000000000000",
  "94a7cda8f481f9d89d42c303ae1632b3b709db1d": "300000000000000000000",
  "7566496162ba584377be040a4f87777a707acaeb": "4000000000000000000000",
  "bdc461462b6322b462bdb33f22799e8108e2417d": "668500000000000000000",
  "7e47637e97c14622882be057bea229386f4052e5": "440000000000000000000",
  "3b5c251d7fd7893ba209fe541cecd0ce253a990d": "30000000000000000000000",
  "0e498800447177b8c8afc3fdfa7f69f4051bb629": "2140234000000000000000",
  "b71623f35107cf7431a83fb3d204b29ee0b1a7f4": "19700000000000000000",
  "1d395b30adda1cf21f091a4f4a7b753371189441": "100000000000000000000000",
  "2c2428e4a66974edc822d5dbfb241b2728075158": "2000000000000000000000",
  "a575f2891dcfcda83c5cf01474af11ee01b72dc2": "100076000000000000000",
  "ad728121873f0456d0518b80ab6580a203706595": "500000000000000000000",
  "48669eb5a801d8b75fb6aa58c3451b7058c243bf": "30940000000000000000000",
  "b3ae54fba09d3ee1d6bdd1e957923919024c35fa": "65513000000000000000",
  "0d35408f226566116fb8acdaa9e2c9d59b76683f": "940000000000000000000",
  "df211cd21288d6c56fae66c3ff54625dd4b15427": "2500024000000000000000",
  "8a746c5d67064711bfca685b95a4fe291a27028e": "40000000000000000000",
  "1cf105ab23023b554c583e86d7921179ee83169f": "1970000000000000000000",
  "8cfedef198db0a9143f09129b3fd64dcbb9b4956": "2000000000000000000000",
  "1e381adcf801a3bf9fd7bfac9ccc2b8482ad5e66": "600200000000000000000",
  "e74608f506866ada6bfbfdf20fea440be76989ef": "1999944000000000000000",
  "27e63989ca1e903bc620cf1b9c3f67b9e2ae6581": "1337000000000000000000",
  "bb0857f1c911b24b86c8a70681473fe6aaa1cce2": "100000000000000000000",
  "4f8e8d274fb22a3fd36a47fe72980471544b3434": "200000000000000000000",
  "127d3fc5003bf63c0d83e93957836515fd279045": "111890000000000000000",
  "95809e8da3fbe4b7f281f0b8b1715f420f7d7d63": "2000000000000000000000",
  "28904bb7c4302943b709b14d7970e42b8324e1a1": "10027500000000000000000",
  "c07e3867ada096807a051a6c9c34cc3b3f4ad34a": "1788210000000000000000",
  "f0b469eae89d400ce7d5d66a9695037036b88903": "20000000000000000000000",
  "7445202f0c74297a004eb3726aa6a82dd7c02fa1": "2000000000000000000000",
  "c58f62fee9711e6a05dc0910b618420aa127f288": "3980000000000000000000",
  "801d65c518b11d0e3f4f470221417013c8e53ec5": "4000000000000000000000",
  "41010fc8baf8437d17a04369809a168a17ca56fb": "100000000000000000000",
  "a1998144968a5c70a6415554cefec2824690c4a5": "20000000000000000000",
  "e9559185f166fc9513cc71116144ce2deb0f1d4b": "20000000000000000000000",
  "ed5b4c41e762d942404373caf21ed4615d25e6c1": "2013960000000000000000",
  "665b000f0b772750cc3c217a5ef429a92bf1ccbb": "4000000000000000000000",
  "febd9f81cf78bd5fb6c4b9a24bd414bb9bfa4c4e": "1990019000000000000000",
  "a072691c8dd7cd4237ff72a75c1a9506d0ce5b9e": "370000000000000000000",
  "6765df25280e8e4f38d4b1cf446fc5d7eb659e34": "100000000000000000000",
  "524fb210522c5e23bb67dfbf8c26aa616da49955": "999971000000000000000",
  "e987e6139e6146a717fef96bc24934a5447fe05d": "2000000000000000000000",
  "d6110276cfe31e42825a577f6b435dbcc10cf764": "1000000000000000000000",
  "5e51b8a3bb09d303ea7c86051582fd600fb3dc1a": "20000000000000000000",
  "5c4f24e994ed8f850ea7818f471c8fac3bcf0452": "1724800000000000000000",
  "85b2998d0c73302cb2ba13f489313301e053be15": "10000000000000000000000",
  "0af6c8d539c96d50259e1ba6719e9c8060f388c2": "1000000000000000000000",
  "7d901b28bf7f88ef73d8f73cca97564913ea8a24": "955000000000000000000",
  "e01859f242f1a0ec602fa8a3b0b57640ec89075e": "555000000000000000000",
  "c66ae4cee87fb3353219f77f1d6486c580280332": "29550000000000000000",
  "2d40558b06f90a3923145592123b6774e46e31f4": "1000000000000000000000",
  "ccf43975b76bfe735fec3cb7d4dd24f805ba0962": "60000000000000000000",
  "1703b4b292b8a9deddede81bb25d89179f6446b6": "19690000000000000000000",
  "0e9096d343c060db581a120112b278607ec6e52b": "20000000000000000000",
  "f65819ac4cc14c137f05dd7977c7dae08d1a4ab5": "102000000000000000000",
  "ca373fe3c906b8c6559ee49ccd07f37cd4fb5266": "1790000000000000000000",
  "d28298524df5ec4b24b0ffb9df85170a145a9eb5": "287700000000000000000",
  "5fcda847aaf8d7fa8bca08029ca2849166aa15a3": "623350000000000000000",
  "bdc739a699700b2e8e2c4a4c7b058a0e513ddebe": "2000000000000000000000",
  "0bb05f7224bb5804856556c07eeadbed87ba8f7c": "401100000000000000000",
  "ab416fe30d58afe5d9454c7fce7f830bcc750356": "114515000000000000000",
  "3eee6f1e96360b7689b3069adaf9af8eb60ce481": "1000000000000000000000",
  "9a0d3cee3d9892ea3b3700a27ff84140d9025493": "60000000000000000000",
  "5dc36de5359450a1ec09cb0c44cf2bb42b3ae435": "1117500000000000000000",
  "35c8adc11125432b3b77acd64625fe58ebee9d66": "2000000000000000000000",
  "a5e9cd4b74255d22b7d9b27ae8dd43ed6ed0252b": "766527000000000000000",
  "31ea12d49a35a740780ddeeaece84c0835b26270": "200000000000000000000",
  "7aef7b551f0b9c46e755c0f38e5b3a73fe1199f5": "1490000000000000000000",
  "cc6d7b12061bc96d104d606d65ffa32b0036eb07": "10000000000000000000000",
  "322021022678a0166d204b3aaa7ad4ec4b88b7d0": "400000000000000000000",
  "b31196714a48dff726ea9433cd2912f1a414b3b3": "2680000000000000000000",
  "0f2fb884c8aaff6f543ac6228bd08e4f60b0a5fd": "3145000000000000000000",
  "7d9d221a3df89ddd7b5f61c1468c6787d6b333e6": "138000000000000000000",
  "367f59cc82795329384e41e1283115e791f26a01": "2000000000000000000000",
  "fd9579f119bbc819a02b61e38d8803c942f24d32": "105600000000000000000",
  "3e2f26235e137a7324e4dc154b5df5af46ea1a49": "22458000000000000000",
  "4c1579af3312e4f88ae93c68e9449c2e9a68d9c4": "2000000000000000000000",
  "ffb04726dfa41afdc819168418610472970d7bfc": "4000000000000000000000",
  "403c64896a75cad816a9105e18d8aa5bf80f238e": "985000000000000000000",
  "5cd588a14ec648ccf64729f9167aa7bf8be6eb3d": "1000000000000000000000",
  "24b2be118b16d8b2174769d17b4cf84f07ca946d": "2000000000000000000000",
  "d3bb59fa31258be62f8ed232f1a7d47b4a0b41ee": "100000000000000000000",
  "cc9ac715cd6f2610c52b58676456884297018b29": "13370000000000000000",
  "6f2a31900e240395b19f159c1d00dfe4d898ebdf": "1999600000000000000000",
  "d60b247321a32a5affb96b1e279927cc584de943": "2265500000000000000000",
  "f7a1ade2d0f529123d1055f19b17919f56214e67": "500000000000000000000",
  "bea00df17067a43a82bc1daecafb6c14300e89e6": "1820000000000000000000",
  "a2968fc1c64bac0b7ae0d68ba949874d6db253f4": "20000000000000000000000",
  "92d8ad9a4d61683b80d4a6672e84c20d62421e80": "20000000000000000000",
  "6ed2a12b02f8c688c7b5d3a6ea14d63687dab3b6": "2000000000000000000000",
  "7a63869fc767a4c6b1cd0e0649f3634cb121d24b": "77500000000000000000",
  "84f522f0520eba52dd18ad21fa4b829f2b89cb97": "4949566000000000000000",
  "d6234aaf45c6f22e66a225ffb93add629b4ef80f": "1000000000000000000000",
  "e3d8bf4efe84b1616d1b89e427ddc6c8830685ae": "2000000000000000000000",
  "a3db364a332d884ba93b2617ae4d85a1489bea47": "1700000000000000000000",
  "9f7986924aeb02687cd64189189fb167ded2dd5c": "985000000000000000000",
  "2eaf4e2a46b789ccc288c8d1d9294e3fb0853896": "2000000000000000000000",
  "a02dc6aa328b880de99eac546823fccf774047fb": "1970000000000000000000",
  "873b7f786d3c99ff012c4a7cae2677270240b9c5": "1730000000000000000000",
  "1d69c83d28ff0474ceebeacb3ad227a144ece7a3": "5474937000000000000000",
  "7b827cae7ff4740918f2e030ab26cb98c4f46cf5": "7460000000000000000000",
  "3083ef0ed4c4401196774a95cf4edc83edc1484f": "170000000000000000000000",
  "40ad74bc0bce2a45e52f36c3debb1b3ada1b7619": "6790000000000000000000",
  "05423a54c8d0f9707e704173d923b946edc8e700": "127543000000000000000",
  "22eb7db0ba56b0f8b816ccb206e615d929185b0d": "80500000000000000000",
  "66082c75a8de31a53913bbd44de3a0374f7faa41": "1460000000000000000000",
  "e3d3eaa299887865569e88be219be507189be1c9": "456156000000000000000",
  "ae57cc129a96a89981dac60d2ffb877d5dc5e432": "1110994000000000000000",
  "1a2434cc774422d48d53d59c5d562cce8407c94b": "30000000000000000000",
  "21546914dfd3af2add41b0ff3e83ffda7414e1e0": "5969100000000000000000",
  "4dcf62a3de3f061db91498fd61060f1f6398ff73": "1999944000000000000000",
  "6fd98e563d12ce0fd60f4f1f850ae396a9823c02": "1261000000000000000000",
  "edf8a3e1d40f13b79ec8e3e1ecf262fd92116263": "158000000000000000000",
  "c09e3cfc19f605ff3ec9c9c70e2540d7ee974366": "500000000000000000000",
  "953572f0ea6df9b197cae40e4b8ecc056c4371c5": "1000000000000000000000",
  "163cc8be227646cb09719159f28ed09c5dc0dce0": "1337000000000000000000",
  "a3932a31d6ff75fb3b1271ace7caa7d5e1ff1051": "20000000000000000000000",
  "f9a94bd56198da245ed01d1e6430b24b2708dcc0": "749938000000000000000",
  "3eb8b33b21d23cda86d8288884ab470e164691b5": "500000000000000000000",
  "84bcbf22c09607ac84341d2edbc03bfb1739d744": "500000000000000000000",
  "961c59adc74505d1864d1ecfcb8afa0412593c93": "40000000000000000000000",
  "f068dfe95d15cd3a7f98ffa688b4346842be2690": "1255160000000000000000",
  "291efe0081dce8c14799f7b2a43619c0c3b3fc1f": "1200000000000000000000",
  "be4fd073617022b67f5c13499b827f763639e4e3": "2000000000000000000000",
  "e40a7c82e157540a0b00901dbb86c716e1a062da": "49800000000000000000",
  "6635b46f711d2da6f0e16370cd8ee43efb2c2d52": "2000000000000000000000",
  "43748928e8c3ec4436a1d092fbe43ac749be1251": "400000000000000000000",
  "b557ab9439ef50d237b553f02508364a466a5c03": "200000000000000000000",
  "11928378d27d55c520ceedf24ceb1e822d890df0": "8000000000000000000000",
  "61518464fdd8b73c1bb6ac6db600654938dbf17a": "200000000000000000000",
  "004bfbe1546bc6c65b5c7eaa55304b38bbfec6d3": "2000000000000000000000",
  "a5e0fc3c3affed3db6710947d1d6fb017f3e276d": "2000000000000000000000",
  "8ecbcfacbfafe9f00c3922a24e2cf0026756ca20": "5640000000000000000000",
  "fb5ffaa0f7615726357891475818939d2037cf96": "20000000000000000000",
  "ae222865799079aaf4f0674a0cdaab02a6d570ff": "2000000000000000000000",
  "9edc90f4be210865214ab5b35e5a8dd77415279d": "4000000000000000000000",
  "9d7831e834c20b1baa697af1d8e0c621c5afff9a": "86500000000000000000",
  "046d274b1af615fb505a764ad8dda770b1db2f3d": "2000000000000000000000",
  "eaea23aa057200e7c9c15e8ff190d0e66c0c0e83": "2000000000000000000000",
  "417a3cd19496530a6d4204c3b5a17ce0f207b1a5": "8000000000000000000000",
  "a035a3652478f82dbd6d115faa8ca946ec9e681d": "109880000000000000000",
  "4f5801b1eb30b712d8a0575a9a71ff965d4f34eb": "300000000000000000000",
  "91dbb6aaad149585be47375c5d6de5ff09191518": "20000000000000000000000",
  "d043a011ec4270ee7ec8b968737515e503f83028": "500000000000000000000",
  "bb371c72c9f0316cea2bd9c6fbb4079e775429ef": "1760000000000000000000",
  "aa1df92e51dff70b1973e0e924c66287b494a178": "534400000000000000000",
  "bd5f46caab2c3d4b289396bbb07f203c4da82530": "80000000000000000000",
  "4d29fc523a2c1629532121da9998e9b5ab9d1b45": "15800000000000000000",
  "addb26317227f45c87a2cb90dc4cfd02fb23caf8": "1000000000000000000000",
  "52e46783329a769301b175009d346768f4c87ee4": "2000000000000000000000",
  "caad9dc20d589ce428d8fda3a9d53a607b7988b5": "4000000000000000000000",
  "95034e1621865137cd4739b346dc17da3a27c34e": "1580000000000000000000",
  "0c3239e2e841242db989a61518c22247e8c55208": "263656000000000000000",
  "5a0d609aae2332b137ab3b2f26615a808f37e433": "160000000000000000000000",
  "2334c590c7a48769103045c5b6534c8a3469f44a": "17443200000000000000000",
  "ddfcca13f934f0cfbe231da13039d70475e6a1d0": "1000169000000000000000",
  "ee7288d91086d9e2eb910014d9ab90a02d78c2a0": "2000000000000000000000",
  "fb91fb1a695553f0c68e21276decf0b83909b86d": "100016000000000000000",
  "38695fc7e1367ceb163ebb053751f9f68ddb07a0": "2000000000000000000000",
  "65093b239bbfba23c7775ca7da5a8648a9f54cf7": "400000000000000000000",
  "73d8fee3cb864dce22bb26ca9c2f086d5e95e63b": "1000000000000000000000",
  "f7155213449892744bc60f2e04400788bd041fdd": "66850000000000000000",
  "d1a71b2d0858e83270085d95a3b1549650035e23": "14900000000000000000000",
  "eac17b81ed5191fb0802aa54337313834107aaa4": "8000000000000000000000",
  "bb076aac92208069ea318a31ff8eeb14b7e996e3": "149000000000000000000",
  "9f46e7c1e9078cae86305ac7060b01467d6685ee": "668500000000000000000",
  "1598127982f2f8ad3b6b8fc3cf27bf617801ba2b": "173000000000000000000",
  "e91dac0195b19e37b59b53f7c017c0b2395ba44c": "1880000000000000000000",
  "a436c75453ccca4a1f1b62e5c4a30d86dde4be68": "2000000000000000000000",
  "11001b89ed873e3aaec1155634b4681643986323": "1000000000000000000000",
  "ab93b26ece0a0aa21365afed1fa9aea31cd54468": "1608000000000000000000",
  "e77febabdf080f0f5dca1d3f5766f2a79c0ffa7c": "1386000000000000000000",
  "1c4af0e863d2656c8635bc6ffec8dd9928908cb5": "2000000000000000000000",
  "0c48ae62d1539788eba013d75ea60b64eeba4e80": "2213311000000000000000",
  "423cc4594cf4abb6368de59fd2b1230734612143": "2000000000000000000000",
  "7f6b28c88421e4857e459281d78461692489d3fb": "2000000000000000000000",
  "806854588ecce541495f81c28a290373df0274b2": "582000000000000000000",
  "dc76e85ba50b9b31ec1e2620bce6e7c8058c0eaf": "20000000000000000000",
  "b00996b0566ecb3e7243b8227988dcb352c21899": "12000000000000000000000",
  "f5d14552b1dce0d6dc1f320da6ffc8a331cd6f0c": "1337000000000000000000",
  "55a61b109480b5b2c4fcfdef92d90584160c0d35": "44700000000000000000",
  "b8947822d5ace7a6ad8326e95496221e0be6b73d": "20000000000000000000",
  "492de46aaf8f1d708d59d79af1d03ad2cb60902f": "2000000000000000000000",
  "0e0d6633db1e0c7f234a6df163a10e0ab39c200f": "200000000000000000000",
  "f8bf9c04874e5a77f38f4c38527e80c676f7b887": "2000000000000000000000",
  "15528350e0d9670a2ea27f7b4a33b9c0f9621d21": "4000086000000000000000",
  "eccf7a0457b566b346ca673a180f444130216ac3": "100000000000000000000",
  "10cf560964ff83c1c9674c783c0f73fcd89943fc": "40000000000000000000000",
  "e7f06f699be31c440b43b4db0501ec0e25261644": "500000000000000000000",
  "b6ce4dc560fc73dc69fb7a62e388db7e72ea764f": "966000000000000000000",
  "f456055a11ab91ff668e2ec922961f2a23e3db25": "18200000000000000000",
  "8dfbafbc0e5b5c86cd1ad697feea04f43188de96": "390060000000000000000",
  "085b4ab75d8362d914435cedee1daa2b1ee1a23b": "3880000000000000000000",
  "e400d651bb3f2d23d5f849e6f92d9c5795c43a8a": "2674000000000000000000",
  "851aa91c82f42fad5dd8e8bb5ea69c8f3a5977d1": "148607000000000000000",
  "4c935bb250778b3c4c7f7e07fc251fa630314aab": "1500000000000000000000",
  "ebd356156a383123343d48843bffed6103e866b3": "1970000000000000000000",
  "da0b48e489d302b4b7bf204f957c1c9be383b0df": "2000000000000000000000",
  "7085ae7e7e4d932197b5c7858c00a3674626b7a5": "6000000000000000000000",
  "5b06d1e6930c1054692b79e3dbe6ecce53966420": "205400000000000000000",
  "8df53d96191471e059de51c718b983e4a51d2afd": "32000000000000000000000",
  "0678654ac6761db904a2f7e8595ec1eaac734308": "878000000000000000000",
  "89fee30d1728d96cecc1dab3da2e771afbcfaa41": "1999944000000000000000",
  "59c5d06b170ee4d26eb0a0eb46cb7d90c1c91019": "10000000000000000000000",
  "2b129c26b75dde127f8320bd0f63410c92a9f876": "2200000000000000000000",
  "3d6ae053fcbc318d6fd0fbc353b8bf542e680d27": "14300000000000000000",
  "755a60bf522fbd8fff9723446b7e343a7068567e": "20000000000000000000000",
  "947e11e5ea290d6fc3b38048979e0cd44ec7c17f": "2000000000000000000000",
  "711ecf77d71b3d0ea95ce4758afecdb9c131079d": "760000000000000000000",
  "de9eff4c798811d968dccb460d9b069cf30278e0": "400000000000000000000",
  "4e892e8081bf36e488fddb3b2630f3f1e8da30d2": "12003800000000000000000",
  "8ede7e3dc50749c6c50e2e28168478c34db81946": "19999800000000000000000",
  "0c30cacc3f72269f8b4f04cf073d2b05a83d9ad1": "2001000000000000000000",
  "e51eb87e7fb7311f5228c479b48ec9878831ac4c": "2000000000000000000000",
  "8b01da34d470c1d115acf4d8113c4dd8a8c338e4": "25220000000000000000000",
  "4329fc0931cbeb033880fe4c9398ca45b0e2d11a": "2000400000000000000000",
  "540c072802014ef0d561345aec481e8e11cb3570": "8000000000000000000000",
  "21e5d2bae995ccfd08a5c16bb524e1f630448f82": "2800000000000000000000",
  "5cf8c03eb3e872e50f7cfd0c2f8d3b3f2cb5183a": "200000000000000000000",
  "5c0f2e51378f6b0d7bab617331580b6e39ad3ca5": "9600000000000000000000",
  "d2f241255dd7c3f73c07043071ec08ddd9c5cde5": "500000000000000000000",
  "cbe1b948864d8474e765145858fca4550f784b92": "10000000000000000000000",
  "30742ccdf4abbcd005681f8159345c9e79054b1a": "668500000000000000000",
  "6aeb9f74742ea491813dbbf0d6fcde1a131d4db3": "440800000000000000000",
  "821eb90994a2fbf94bdc3233910296f76f9bf6e7": "10000000000000000000000",
  "25c1a37ee5f08265a1e10d3d90d5472955f97806": "1820000000000000000000",
  "7ef98b52bee953bef992f305fda027f8911c5851": "514717000000000000000",
  "8adc53ef8c18ed3051785d88e996f3e4b20ecd51": "42000000000000000000000",
  "007f4a23ca00cd043d25c2888c1aa5688f81a344": "773658000000000000000",
  "4a735d224792376d331367c093d31c8794341582": "1900000000000000000000",
  "05440c5b073b529b4829209dff88090e07c4f6f5": "1288000000000000000000",
  "5e772e27f28800c50dda973bb33e10762e6eea20": "1790000000000000000000",
  "a429fa88731fdd350e8ecd6ea54296b6484fe695": "1969606000000000000000",
  "e0d76b7166b1f3a12b4091ee2b29de8caa7d07db": "2000000000000000000000",
  "7ebd95e9c470f7283583dc6e9d2c4dce0bea8f84": "14000000000000000000000",
  "883a78aeabaa50d8ddd8570bcd34265f14b19363": "3879951000000000000000",
  "51f9c432a4e59ac86282d6adab4c2eb8919160eb": "530000000000000000000000",
  "b86607021b62d340cf2652f3f95fd2dc67698bdf": "5000000000000000000000",
  "acc0909fda2ea6b7b7a88db7a0aac868091ddbf6": "22155000000000000000",
  "69b80ed90f84834afa3ff82eb964703b560977d6": "26740000000000000000",
  "ca4ca9e4779d530ecbacd47e6a8058cfde65d98f": "800000000000000000000",
  "5d6c5c720d66a6abca8397142e63d26818eaab54": "40000000000000000000",
  "c2c13e72d268e7150dc799e7c6cf03c88954ced7": "700000000000000000000",
  "6bbd1e719390e6b91043f8b6b9df898ea8001b34": "2000053000000000000000",
  "a9ba6f413b82fcddf3affbbdd09287dcf50415ca": "4000000000000000000000",
  "ced3c7be8de7585140952aeb501dc1f876ecafb0": "4000000000000000000000",
  "1c63fa9e2cbbf23c49fcdef1cbabfe6e0d1e14c1": "1000000000000000000000",
  "7d6e990daa7105de2526339833f77b5c0b85d84f": "20000000000000000000000",
  "68addf019d6b9cab70acb13f0b3117999f062e12": "49941000000000000000",
  "a77428bcb2a0db76fc8ef1e20e461a0a32c5ac15": "401100000000000000000",
  "26048fe84d9b010a62e731627e49bc2eb73f408f": "4000000000000000000000",
  "ff26138330274df4e0a3081e6df7dd983ec6e78f": "2000000000000000000000",
  "b7382d37db0398ac72410cf9813de9f8e1ec8dad": "1000070000000000000000",
  "44f62f2aaabc29ad3a6b04e1ff6f9ce452d1c140": "17000000000000000000000",
  "47fef58584465248a0810d60463ee93e5a6ee8d3": "283100000000000000000",
  "bd2b70fecc37640f69514fc7f3404946aad86b11": "1200000000000000000000",
  "649a85b93653075fa6562c409a565d087ba3e1ba": "2000000000000000000000",
  "55866486ec168f79dbe0e1abb18864d98991ae2c": "16100000000000000000",
  "d7e74afdbad55e96cebc5a374f2c8b768680f2b0": "99000000000000000000",
  "a8c1d6aa41fe3d65f67bd01de2a866ed1ed9ae52": "30000000000000000000",
  "744c0c77ba7f236920d1e434de5da33e48ebf02c": "1970000000000000000000",
  "9445ba5c30e98961b8602461d0385d40fbd80311": "10000000000000000000000",
  "eb835c1a911817878a33d167569ea3cdd387f328": "1000000000000000000000",
  "761a6e362c97fbbd7c5977acba2da74687365f49": "183840000000000000000",
  "38202c5cd7078d4f887673ab07109ad8ada89720": "1000000000000000000000",
  "5abfec25f74cd88437631a7731906932776356f9": "11901484239480000000000000",
  "28e4af30cd93f686a122ad7bb19f8a8785eee342": "2101000000000000000000",
  "3a9b111029ce1f20c9109c7a74eeeef34f4f2eb2": "4000000000000000000000",
  "7bb9571f394b0b1a8eba5664e9d8b5e840677bea": "19700000000000000000",
  "50fb36c27107ee2ca9a3236e2746cca19ace6b49": "2000000000000000000000",
  "a3bc979b7080092fa1f92f6e0fb347e28d995045": "2800000000000000000000",
  "d04b861b3d9acc563a901689941ab1e1861161a2": "20000000000000000000",
  "58c555bc293cdb16c6362ed97ae9550b92ea180e": "20000000000000000000",
  "8bf02bd748690e1fd1c76d270833048b66b25fd3": "11800000000000000000000",
  "fbc01db54e47cdc3c438694ab717a856c23fe6e9": "8456774000000000000000",
  "9c9a07a8e57c3172a919ef64789474490f0d9f51": "10000000000000000000000",
  "fc7e22a503ec5abe9b08c50bd14999f520fa4884": "6387725000000000000000",
  "9b773669e87d76018c090f8255e54409b9dca8b2": "20000000000000000000",
  "ffe8cbc1681e5e9db74a0f93f8ed25897519120f": "1507000000000000000000",
  "4d4cf5807429615e30cdface1e5aae4dad3055e6": "600000000000000000000",
  "cfde0fc75d6f16c443c3038217372d99f5d907f7": "2419000000000000000000",
  "818ffe271fc3973565c303f213f6d2da89897ebd": "5734655000000000000000",
  "ba1fcaf223937ef89e85675503bdb7ca6a928b78": "640000000000000000000",
  "a30a45520e5206d9004070e6af3e7bb2e8dd5313": "400000000000000000000",
  "a747439ad0d393b5a03861d77296326de8bb9db9": "1000000000000000000000",
  "14d00aad39a0a7d19ca05350f7b03727f08dd82e": "500000000000000000000",
  "551999ddd205563327b9b530785acff9bc73a4ba": "6000000000000000000000",
  "a4670731175893bbcff4fa85ce97d94fc51c4ba8": "8000000000000000000000",
  "f858171a04d357a13b4941c16e7e55ddd4941329": "41984000000000000000",
  "a6484cc684c4c91db53eb68a4da45a6a6bda3067": "6000000000000000000000",
  "00d75ed60c774f8b3a5a5173fb1833ad7105a2d9": "2005500000000000000000",
  "bf92418a0c6c31244d220260cb3e867dd7b4ef49": "99800000000000000000",
  "716d50cca01e938500e6421cc070c3507c67d387": "2000000000000000000000",
  "82a8b96b6c9e13ebec1e9f18ac02a60ea88a48ff": "1999998000000000000000",
  "5a565285374a49eedd504c957d510874d00455bc": "100000000000000000000",
  "778c79f4de1953ebce98fe8006d53a81fb514012": "999800000000000000000",
  "41b2d34fde0b1029262b4172c81c1590405b03ae": "1000000000000000000000",
  "4039bd50a2bde15ffe37191f410390962a2b8886": "200000000000000000000",
  "c033be10cb48613bd5ebcb33ed4902f38b583003": "3000000000000000000000",
  "5d5751819b4f3d26ed0c1ac571552735271dbefa": "1000000000000000000000",
  "b600429752f399c80d0734744bae0a022eca67c6": "20000000000000000000",
  "f875619d8a23e45d8998d184d480c0748970822a": "4000000000000000000000",
  "71c7230a1d35bdd6819ed4b9a88e94a0eb0786dd": "4365000000000000000000",
  "b2f9c972c1e9737755b3ff1b3088738396395b26": "20000000000000000000000",
  "a66a4963b27f1ee1932b172be5964e0d3ae54b51": "173000000000000000000",
  "53ce88e66c5af2f29bbd8f592a56a3d15f206c32": "140840000000000000000",
  "433e3ba1c51b810fc467d5ba4dea42f7a9885e69": "40000000000000000000000",
  "c7837ad0a0bf14186937ace06c5546a36aa54f46": "4000000000000000000000",
  "c3f8f67295a5cd049364d05d23502623a3e52e84": "6000000000000000000000",
  "3fd0bb47798cf44cdfbe4d333de637df4a00e45c": "100040000000000000000",
  "a1ae8d4540d4db6fdde7146f415b431eb55c7983": "197000000000000000000",
  "5cccf1508bfd35c20530aa642500c10dee65eaed": "850000000000000000000",
  "a53ead54f7850af21438cbe07af686279a315b86": "10000000000000000000000",
  "8cf6da0204dbc4860b46ad973fc111008d9e0c46": "200000000000000000000",
  "8e7936d592008fdc7aa04edeeb755ab513dbb89d": "20000000000000000000",
  "4a53dcdb56ce4cdce9f82ec0eb13d67352e7c88b": "4200000000000000000000",
  "2b4f4507bb6b9817942ce433781b708fbcd166fd": "18200000000000000000",
  "026432af37dc5113f1f46d480a4de0b28052237e": "355800000000000000000",
  "e780a56306ba1e6bb331952c22539b858af9f77d": "50000000000000000000000",
  "d1f1694d22671b5aad6a94995c369fbe6133676f": "1000000000000000000000",
  "7c45f0f8442a56dbd39dbf159995415c52ed479b": "2000000000000000000000",
  "b65941d44c50d24666670d364766e991c02e11c2": "600000000000000000000",
  "45e68db8dbbaba5fc2cb337c62bcd0d61b059189": "2000000000000000000000",
  "05f3631f5664bdad5d0132c8388d36d7d8920918": "20000000000000000000",
  "5475d7f174bdb1f789017c7c1705989646079d49": "9400000000000000000000",
  "c7bf2ed1ed312940ee6aded1516e268e4a604856": "6000000000000000000000",
  "39aaf0854db6eb39bc7b2e43846a76171c0445de": "1850000000000000000000",
  "c817df1b91faf30fe3251571727c9711b45d8f06": "1999944000000000000000",
  "7d13d6705884ab2157dd8dcc7046caf58ee94be4": "137200000000000000000000",
  "478dc09a1311377c093f9cc8ae74111f65f82f39": "4000000000000000000000",
  "8043ed22f997e5a2a4c16e364486ae64975692c4": "1130513000000000000000",
  "b9a985501ee950829b17fae1c9cf348c3156542c": "294100000000000000000",
  "d5cba5b26bea5d73fabb1abafacdef85def368cc": "200000000000000000000",
  "6776e133d9dc354c12a951087b639650f539a433": "120000000000000000000",
  "804ca94972634f633a51f3560b1d06c0b293b3b1": "200000000000000000000",
  "0be1fdf626ee6189102d70d13b31012c95cd1cd6": "2000000000000000000000",
  "f848fce9ab611c7d99206e23fac69ad488b94fe1": "48500000000000000000",
  "f01195d657ef3c942e6cb83949e5a20b5cfa8b1e": "25760000000000000000000",
  "78a5e89900bd3f81dd71ba869d25fec65261df15": "51900000000000000000000",
  "d6f1e55b1694089ebcb4fe7d7882aa66c8976176": "19998846000000000000000",
  "d5294b666242303b6df0b1c88d37429bc8c965aa": "300700000000000000000",
  "3171877e9d820cc618fc0919b29efd333fda4934": "1000000000000000000000",
  "2901f8077f34190bb47a8e227fa29b30ce113b31": "100000000000000000000",
  "6b2284440221ce16a8382de5ff0229472269deec": "1000000000000000000000",
  "1bba03ff6b4ad5bf18184acb21b188a399e9eb4a": "1790000000000000000000",
  "80744618de396a543197ee4894abd06398dd7c27": "2000000000000000000000",
  "1b799033ef6dc7127822f74542bb22dbfc09a308": "100000000000000000000",
  "d513a45080ff2febe62cd5854abe29ee4467f996": "153200000000000000000",
  "e761d27fa3502cc76bb1a608740e1403cf9dfc69": "280000000000000000000",
  "53989ed330563fd57dfec9bd343c3760b0799390": "6208000000000000000000",
  "ccf7110d1bd9a74bfd1d7d7d2d9d55607e7b837d": "900000000000000000000",
  "f373e9daac0c8675f53b797a160f6fc034ae6b23": "100000000000000000000",
  "abc9a99e8a2148a55a6d82bd51b98eb5391fdbaf": "6000000000000000000000",
  "ffec0913c635baca2f5e57a37aa9fb7b6c9b6e26": "805000000000000000000",
  "581a3af297efa4436a29af0072929abf9826f58b": "2000000000000000000000",
  "924efa6db595b79313277e88319625076b580a10": "2000000000000000000000",
  "65d8dd4e251cbc021f05b010f2d5dc520c3872e0": "834956000000000000000",
  "6c67d6db1d03516c128b8ff234bf3d49b26d2941": "100000000000000000000000",
  "496d365534530a5fc1577c0a5241cb88c4da7072": "1790000000000000000000",
  "b85ff03e7b5fc422981fae5e9941dacbdaba7584": "1337000000000000000000",
  "e13540ecee11b212e8b775dc8e71f374aae9b3f8": "2000000000000000000000",
  "a02e3f8f5959a7aab7418612129b701ca1b80010": "20000000000000000000",
  "a7a3f153cdc38821c20c5d8c8241b294a3f82b24": "500000000000000000000",
  "366175403481e0ab15bb514615cbb989ebc68f82": "2000000000000000000000",
  "5104ecc0e330dd1f81b58ac9dbb1a9fbf88a3c85": "100000000000000000000000",
  "a466d770d898d8c9d405e4a0e551efafcde53cf9": "492500000000000000000",
  "5fa8a54e68176c4fe2c01cf671c515bfbdd528a8": "330000000000000000000000",
  "e2e15c60dd381e3a4be25071ab249a4c5c5264da": "2350502000000000000000",
  "0628bfbe5535782fb588406bc96660a49b011af5": "1520000000000000000000",
  "04d6b8d4da867407bb997749debbcdc0b358538a": "1000000000000000000000",
  "0e6ec313376271dff55423ab5422cc3a8b06b22b": "4000000000000000000000",
  "8787d12677a5ec291e57e31ffbfad105c3324b87": "12438777000000000000000",
  "58e2f11223fc8237f69d99c6289c148c0604f742": "24000000000000000000000",
  "5600730a55f6b20ebd24811faa3de96d1662abab": "1880000000000000000000",
  "fce089635ce97abac06b44819be5bb0a3e2e0b37": "92491000000000000000",
  "fa0c1a988c8a17ad3528eb28b3409daa58225f26": "200000000000000000000",
  "7ae1c19e53c71cee4c73fae2d7fc73bf9ab5e392": "1000000000000000000000",
  "bd17eed82b9a2592019a1b1b3c0fbad45c408d22": "250000000000000000000",
  "884a7a39d0916e05f1c242df55607f37df8c5fda": "23400000000000000000000",
  "ca70f4ddbf069d2143bd6bbc7f696b52789b32e7": "3000000000000000000000",
  "7b25bb9ca8e702217e9333225250e53c36804d48": "1880000000000000000000",
  "ea8317197959424041d9d7c67a3ece1dbb78bb55": "394000000000000000000",
  "5cb953a0e42f5030812226217fffc3ce230457e4": "100000000000000000000",
  "d1f4dc1ddb8abb8848a8b14e25f3b55a8591c266": "250000000000000000000",
  "6a42ca971c6578d5ade295c3e7f4ad331dd3424e": "6000000000000000000000",
  "07e1162ceae3cf21a3f62d105990302e307f4e3b": "1530000000000000000000",
  "5d1dc3387b47b8451e55106c0cc67d6dc72b7f0b": "2000000000000000000000",
  "5d2819e8d57821922ee445650ccaec7d40544a8d": "200000000000000000000",
  "4c24b78baf2bafc7fcc69016426be973e20a50b2": "3000000000000000000000",
  "630c5273126d517ce67101811cab16b8534cf9a8": "9422595000000000000000",
  "291f929ca59b54f8443e3d4d75d95dee243cef78": "499938000000000000000",
  "2dd325fdffb97b19995284afa5abdb574a1df16a": "500000000000000000000",
  "4fce8429ba49caa0369d1e494db57e89eab2ad39": "200000000000000000000000",
  "712b76510214dc620f6c3a1dd29aa22bf6d214fb": "6000000000000000000000",
  "266f2da7f0085ef3f3fa09baee232b93c744db2e": "60000000000000000000000",
  "0770c61be78772230cb5a3bb2429a72614a0b336": "6767695000000000000000",
  "02dfcb17a1b87441036374b762a5d3418b1cb4d4": "1340860000000000000000",
  "5e67df8969101adabd91accd6bb1991274af8df2": "500000000000000000000",
  "7d9c59631e2ba2e8e82891f3979922aaa3b567a1": "8000000000000000000000",
  "949f8c107bc7f0aceaa0f17052aadbd2f9732b2e": "2000000000000000000000",
  "ea4e809e266ae5f13cdbe38f9d0456e6386d1274": "4500000000000000000000",
  "cd5510a242dfb0183de925fba866e312fabc1657": "2400000000000000000000",
  "a36e0d94b95364a82671b608cb2d373245612909": "150011000000000000000",
  "0ec46696ffac1f58005fa8439824f08eed1df89b": "10000000000000000000000",
  "c6fb1ee37417d080a0d048923bdabab095d077c6": "200000000000000000000",
  "53c9eca40973f63bb5927be0bc6a8a8be1951f74": "2000000000000000000000",
  "ea14bfda0a6e76668f8788321f07df37824ec5df": "200000000000000000000000",
  "dfb4d4ade52fcc818acc7a2c6bb2b00224658f78": "7750000000000000000000",
  "5997ffefb3c1d9d10f1ae2ac8ac3c8e2d2292783": "1000000000000000000000",
  "8eceb2e124536c5b5ffc640ed14ff15ed9a8cb71": "2000000000000000000000",
  "8f02bda6c36922a6be6a509be51906d393f7b99b": "1019835000000000000000",
  "530077c9f7b907ff9cec0c77a41a70e9029add4a": "2000000000000000000000",
  "08936a37df85b3a158cafd9de021f58137681347": "18200000000000000000",
  "8e9c429266df057efa78dd1d5f77fc40742ad466": "300061000000000000000",
  "acc59f3b30ceffc56461cc5b8df48902240e0e7b": "2000000000000000000000",
  "f5534815dc635efa5cc84b2ac734723e21b29372": "1580000000000000000000",
  "f873e57a65c93b6e18cb75f0dc077d5b8933dc5c": "197000000000000000000",
  "25b78c9fad85b43343f0bfcd0fac11c9949ca5eb": "2000000000000000000000",
  "aad2b7f8106695078e6c138ec81a7486aaca1eb2": "200000000000000000000",
  "509c8668036d143fb8ae70b11995631f3dfcad87": "1000000000000000000000",
  "3602458da86f6d6a9d9eb03daf97fe5619d442fa": "2000000000000000000000",
  "9f607b3f12469f446121cebf3475356b71b4328c": "4000000000000000000000",
  "fe3827d57630cf8761d512797b0b858e478bbd12": "20000000000000000000",
  "9d9c4efe9f433989e23be94049215329fa55b4cb": "256215000000000000000",
  "9bd905f1719fc7acd0159d4dc1f8db2f21472338": "1000000000000000000000",
  "7d82e523cc2dc591da3954e8b6bb2caf6461e69c": "2316058000000000000000",
  "74afe54902d615782576f8baac13ac970c050f6e": "177670000000000000000",
  "aff11ccf699304d5f5862af86083451c26e79ae5": "1999000000000000000000",
  "3885fee67107dc3a3c741ee290c98918c9b99397": "20000000000000000000",
  "36343aeca07b6ed58a0e62fa4ecb498a124fc971": "300000000000000000000",
  "c94a28fb3230a9ddfa964e770f2ce3c253a7be4f": "200000000000000000000",
  "9882967cee68d2a839fad8ab4a7c3dddf6c0adc8": "1336866000000000000000",
  "95df4e3445d7662624c48eba74cf9e0a53e9f732": "56000000000000000000000",
  "ca9faa17542fafbb388eab21bc4c94e8a7b34788": "1999999000000000000000",
  "c8b1850525d946f2ae84f317b15188c536a5dc86": "2685000000000000000000",
  "39bac68d947859f59e9226089c96d62e9fbe3cde": "40000000000000000000",
  "a9bfc410dddb20711e45c07387eab30a054e19ac": "1154750000000000000000",
  "540a1819bd7c35861e791804e5fbb3bc97c9abb1": "1454400000000000000000",
  "667b61c03bb937a9f5d0fc5a09f1ea3363c77035": "4250000000000000000000",
  "010df1df4bed23760d2d1c03781586ddf7918e54": "60000000000000000000",
  "bd51ee2ea143d7b1d6b77e7e44bdd7da12f485ac": "1318800000000000000000",
  "fb5125bf0f5eb0b6f020e56bfc2fdf3d402c097e": "5910000000000000000000",
  "3f0c83aac5717962734e5ceaeaecd39b28ad06be": "2000000000000000000000",
  "f10661ff94140f203e7a482572437938bec9c3f7": "20000000000000000000000",
  "bd3097a79b3c0d2ebff0e6e86ab0edadbed47096": "1670000000000000000000",
  "edeb4894aadd0081bbddd3e8846804b583d19f27": "2000000000000000000000",
  "49c9771fca19d5b9d245c891f8158fe49f47a062": "10000000000000000000000",
  "6405dd13e93abcff377e700e3c1a0086eca27d29": "18200000000000000000",
  "ce5e04f0184369bcfa06aca66ffa91bf59fa0fb9": "40000000000000000000",
  "4364309a9fa07095600f79edc65120cdcd23dc64": "10000000000000000000000",
  "b749b54e04d5b19bdcedfb84da7701ab478c27ae": "2680000000000000000000",
  "f593c65285ee6bbd6637f3be8f89ad40d489f655": "3000000000000000000000",
  "d224f880f9479a89d32f09e52be990b288135cef": "17300000000000000000000",
  "85bb51bc3bfe9a1b2a2f6b1cda95bca8b38c8d5e": "321750000000000000000",
  "caf4481d9db78dc4f25f7b4ac8bd3b1ca0106b31": "5000000000000000000000",
  "51ca8bd4dc644fac47af675563d5804a0da21eeb": "788000000000000000000",
  "19f643e1a8fa04ae16006028138333a59a96de87": "20000000000000000000",
  "58b808a65b51e6338969afb95ec70735e451d526": "39998000000000000000000",
  "574921838cc77d6c98b17d903a3ae0ee0da95bd0": "53480000000000000000000",
  "7c6924d07c3ef5891966fe0a7856c87bef9d2034": "2000000000000000000000",
  "f9767e4ecb4a5980527508d7bec3d45e4c649c13": "1910000000000000000000",
  "f3be99b9103ce7550aa74ff1db18e09dfe32e005": "2000000000000000000000",
  "625644c95a873ef8c06cdb9e9f6d8d7680043d62": "1800000000000000000000",
  "6a44af96b3f032ae641beb67f4b6c83342d37c5d": "29000000000000000000",
  "d3a10ec7a5c9324999dd9e9b6bde7c911e584bda": "600000000000000000000",
  "e8ddbed732ebfe754096fde9086b8ea4a4cdc616": "2000000000000000000000",
  "235fa66c025ef5540070ebcf0d372d8177c467ab": "33400000000000000000000",
  "4d08471d68007aff2ae279bc5e3fe4156fbbe3de": "40000000000000000000000",
  "dadc00ab7927603c2fcf31cee352f80e6c4d6351": "1999664000000000000000",
  "7393cbe7f9ba2165e5a7553500b6e75da3c33abf": "100000000000000000000",
  "77617ebc4bebc5f5ddeb1b7a70cdeb6ae2ffa024": "1970000000000000000000",
  "7fea1962e35d62059768c749bedd96cab930d378": "2000000000000000000000",
  "243b3bca6a299359e886ce33a30341fafe4d573d": "20000000000000000000000",
  "b94d47b3c052a5e50e4261ae06a20f45d8eee297": "2000000000000000000000",
  "e727e67ef911b81f6cf9c73fcbfebc2b02b5bfc6": "2000000000000000000000",
  "e510d6797fba3d6693835a844ea2ad540691971b": "17381000000000000000000",
  "0cdc960b998c141998160dc179b36c15d28470ed": "500038000000000000000",
  "3e76a62db187aa74f63817533b306cead0e8cebe": "31200000000000000000000",
  "495b641b1cdea362c3b4cbbd0f5cc50b1e176b9c": "1000000000000000000000",
  "5126460d692c71c9af6f05574d93998368a23799": "52000000000000000000",
  "a008019863c1a77c1499eb39bbd7bf2dd7a31cb9": "137000000000000000000",
  "65ee20b06d9ad589a7e7ce04b9f5f795f402aece": "2000000000000000000000",
  "f432b9dbaf11bdbd73b6519fc0a904198771aac6": "152000000000000000000",
  "85946d56a4d371a93368539690b60ec825107454": "1730000000000000000000",
  "26f9f7cefd7e394b9d3924412bf2c2831faf1f85": "4000000000000000000000",
  "d4ebb1929a23871cf77fe049ab9602be08be0a73": "1910000000000000000000",
  "4fdac1aa517007e0089430b3316a1badd12c01c7": "500000000000000000000",
  "05e671de55afec964b074de574d5158d5d21b0a3": "3940000000000000000000",
  "20181c4b41f6f972b66958215f19f570c15ddff1": "1600000000000000000000",
  "cc9519d1f3985f6b255eaded12d5624a972721e1": "1000000000000000000000",
  "169bbefc41cfd7d7cbb8dfc63020e9fb06d49546": "2000000000000000000000",
  "175a183a3a235ffbb03ba835675267229417a091": "16000000000000000000000",
  "8dde3cb8118568ef4503fe998ccdf536bf19a098": "4000000000000000000000",
  "6a05b21c4f17f9d73f5fb2b0cb89ff5356a6cc7e": "1500000000000000000000",
  "5cc4cba621f220637742057f6055b80dffd77e13": "39997692000000000000000",
  "ecb94c568bfe59ade650645f4f26306c736cace4": "267400000000000000000",
  "dfa6b8b8ad3184e357da282951d79161cfb089bc": "400000000000000000000",
  "a3058c51737a4e96c55f2ef6bd7bb358167ec2a7": "606093000000000000000",
  "051d424276b21239665186133d653bb8b1862f89": "1000000000000000000000",
  "d05ffb2b74f867204fe531653b0248e21c13544e": "1000000000000000000000",
  "e1f63ebbc62c7b7444040eb99623964f7667b376": "20000000000000000000",
  "e5a3d7eb13b15c100177236d1beb30d17ee15420": "2000000000000000000000",
  "18fa8625c9dc843c78c7ab259ff87c9599e07f10": "1000000000000000000000",
  "64264aedd52dcae918a012fbcd0c030ee6f71821": "1000000000000000000000",
  "6f1f4907b8f61f0c51568d692806b382f50324f5": "2000000000000000000000",
  "becef61c1c442bef7ce04b73adb249a8ba047e00": "1000400000000000000000",
  "7b893286427e72db219a21fc4dcd5fbf59283c31": "10000000000000000000000",
  "ce5eb63a7bf4fbc2f6e4baa0c68ab1cb4cf98fb4": "2000000000000000000000",
  "66ec16ee9caab411c55a6629e318de6ee216491d": "865000000000000000000",
  "30b66150f1a63457023fdd45d0cc6cb54e0c0f06": "1000000000000000000000",
  "87183160d172d2e084d327b86bcb7c1d8e6784ef": "4000086000000000000000",
  "c420388fbee84ad656dd68cdc1fbaa9392780b34": "187767000000000000000",
  "90f774c9147dde90853ddc43f08f16d455178b8c": "4000000000000000000000",
  "1e1d7a5f2468b94ea826982dbf2125793c6e4a5a": "999940000000000000000",
  "8043fdd0bc4c973d1663d55fc135508ec5d4f4fa": "20000000000000000000",
  "7bca1da6c80a66baa5db5ac98541c4be276b447d": "679000000000000000000",
  "73550beb732ba9ddafda7ae406e18f7feb0f8bb2": "2800000000000000000000",
  "adc19ec835afe3e58d87dc93a8a9213c90451326": "1971200000000000000000",
  "821d798af19989c3ae5b84a7a7283cd7fda1fabe": "20000000000000000000000",
  "4c4e6f13fb5e3f70c3760262a03e317982691d10": "100000000000000000000",
  "664e43119870af107a448db1278b044838ffcdaf": "400000000000000000000",
  "8da1178f55d97772bb1d24111a404a4f8715b95d": "878149000000000000000",
  "5e6e9747e162f8b45c656e0f6cae7a84bac80e4e": "2000000000000000000000",
  "c7eac31abce6d5f1dea42202b6a674153db47a29": "591000000000000000000",
  "d96711540e2e998343d4f590b6fc8fac3bb8b31d": "1758944000000000000000",
  "9da4ec407077f4b9707b2d9d2ede5ea5282bf1df": "4000000000000000000000",
  "f60c1b45f164b9580e20275a5c39e1d71e35f891": "2000000000000000000000",
  "eb6394a7bfa4d28911d5a5b23e93f35e340c2294": "78000000000000000000",
  "a89ac93b23370472daac337e9afdf642543f3e57": "10000000000000000000000",
  "bb618e25221ad9a740b299ed1406bc3934b0b16d": "1000000000000000000000",
  "817ac33bd8f847567372951f4a10d7a91ce3f430": "200015000000000000000",
  "fe6a895b795cb4bf85903d3ce09c5aa43953d3bf": "3400000000000000000000",
  "3673954399f6dfbe671818259bb278e2e92ee315": "200000000000000000000000",
  "df0ff1f3d27a8ec9fb8f6b0cb254a63bba8224a5": "4367636000000000000000",
  "ff12e49d8e06aa20f886293c0b98ed7eff788805": "4000000000000000000000",
  "5aef16a226dd68071f2483e1da42598319f69b2c": "2000000000000000000000",
  "0266ab1c6b0216230b9395443d5fa75e684568c6": "1000000000000000000000",
  "14a7352066364404db50f0d0d78d754a22198ef4": "1880000000000000000000",
  "444caf79b71338ee9aa7c733b02acaa7dc025948": "40000000000000000000",
  "64e2de21200b1899c3a0c0653b5040136d0dc842": "20000000000000000000000",
  "36e156610cd8ff64e780d89d0054385ca76755aa": "14000000000000000000000",
  "0a6ebe723b6ed1f9a86a69ddda68dc47465c2b1b": "1185000000000000000000",
  "38bf2a1f7a69de0e2546adb808b36335645da9ff": "2000320000000000000000",
  "39f44663d92561091b82a70dcf593d754005973a": "199999000000000000000",
  "24b9e6644f6ba4cde126270d81f6ab60f286dff4": "133700000000000000000",
  "9b59eb213b1e7565e45047e04ea0374f10762d16": "2000000000000000000000",
  "309544b6232c3dd737f945a03193d19b5f3f65b9": "1087440000000000000000",
  "b28bb39f3466517cd46f979cf59653ee7d8f152e": "450000000000000000000",
  "9da8e22ca10e67fea44e525e4751eeac36a31194": "260000000000000000000",
  "4f8ae80238e60008557075ab6afe0a7f2e74d729": "100000000000000000000",
  "74ed33acf43f35b98c9230b9e6642ecb5330839e": "681872000000000000000",
  "22842ab830da509913f81dd1f04f10af9edd1c55": "2000000000000000000000",
  "a8f37f0ab3a1d448a9e3ce40965f97a646083a34": "329800000000000000000",
  "582b70669c97aab7d68148d8d4e90411e2810d56": "999972000000000000000",
  "d5e55100fbd1956bbed2ca518d4b1fa376032b0b": "100000000000000000000",
  "b7cc6b1acc32d8b295df68ed9d5e60b8f64cb67b": "300000000000000000000",
  "e081ca1f4882db6043d5a9190703fde0ab3bf56d": "400000000000000000000",
  "c02077449a134a7ad1ef7e4d927affeceeadb5ae": "18200000000000000000",
  "e09fea755aee1a44c0a89f03b5deb762ba33006f": "1100070000000000000000",
  "b3717731dad65132da792d876030e46ac227bb8a": "1000000000000000000000",
  "157eb3d3113bd3b597714d3a954edd018982a5cb": "2000000000000000000000",
  "dc57345b38e0f067c9a31d9deac5275a10949321": "200000000000000000000",
  "40ea5044b204b23076b1a5803bf1d30c0f88871a": "14000000000000000000000",
  "2bab0fbe28d58420b52036770a12f9952aea6911": "3820000000000000000000",
  "adaa0e548c035affed64ca678a963fabe9a26bfd": "70000000000000000000",
  "bb48eaf516ce2dec3e41feb4c679e4957641164f": "3820000000000000000000",
  "7693bdeb6fc82b5bca721355223175d47a084b4d": "22000000000000000000000",
  "03cb98d7acd817de9d886d22fab3f1b57d92a608": "1600000000000000000000",
  "f88900db737955b1519b1a7d170a18864ce590eb": "18200000000000000000",
  "757fa55446c460968bb74b5ebca96c4ef2c709c5": "1015200000000000000000",
  "da855d53477f505ec4c8d5e8bb9180d38681119c": "5600000000000000000000",
  "e41aea250b877d423a63ba2bce2f3a61c0248d56": "260000000000000000000",
  "8262169b615870134eb4ac6c5f471c6bf2f789fc": "462500000000000000000",
  "66b0c100c49149935d14c0dc202cce907cea1a3d": "1970000000000000000000",
  "854c0c469c246b83b5d1b3eca443b39af5ee128a": "1600000000000000000000",
  "eb6810691d1ae0d19e47bd22cebee0b3ba27f88a": "2499922000000000000000",
  "24dcc24bd9c7210ceacfb30da98ae04a4d7b8ab9": "1000000000000000000000",
  "e31b4eef184c24ab098e36c802714bd4743dd0d4": "200000000000000000000",
  "99b8c824869de9ed24f3bff6854cb6dd45cc3f9f": "1880000000000000000000",
  "2ae73a79aea0278533accf21070922b1613f8f32": "3097417000000000000000",
  "ddbd2b932c763ba5b1b7ae3b362eac3e8d40121a": "10000000000000000000000",
  "1b4bbcb18165211b265b280716cb3f1f212176e8": "472325000000000000000",
  "e177e0c201d335ba3956929c571588b51c5223ae": "2000000000000000000000",
  "1945fe377fe6d4b71e3e791f6f17db243c9b8b0f": "2185500000000000000000",
  "3e9b34a57f3375ae59c0a75e19c4b641228d9700": "17900000000000000000",
  "a4d6c82eddae5947fbe9cdfbd548ae33d91a7191": "8000000000000000000000",
  "bad4425e171c3e72975eb46ac0a015db315a5d8f": "2000000000000000000000",
  "a2d2aa626b09d6d4e4b13f7ffc5a88bd7ad36742": "4639390000000000000000",
  "b61c34fcacda701a5aa8702459deb0e4ae838df8": "35000000000000000000000",
  "145e0600e2a927b2dd8d379356b45a2e7d51d3ae": "2545843000000000000000",
  "8df339214b6ad1b24663ce716034749d6ef838d9": "11000000000000000000000",
  "8fd9a5c33a7d9edce0997bdf77ab306424a11ea9": "2000000000000000000000",
  "097da12cfc1f7c1a2464def08c29bed5e2f851e9": "20000000000000000000",
  "ddabf13c3c8ea4e3d73d78ec717afafa430e5479": "41600000000000000000000",
  "9eeb07bd2b7890195e7d46bdf2071b6617514ddb": "2000000000000000000000",
  "819af9a1c27332b1c369bbda1b3de1c6e933d640": "314308000000000000000",
  "d7d2c6fca8ad1f75395210b57de5dfd673933909": "340000000000000000000",
  "cdd5d881a7362c9070073bdfbc75e72453ac510e": "842000000000000000000",
  "e9ac36376efa06109d40726307dd1a57e213eaa9": "194000000000000000000",
  "1bea4df5122fafdeb3607eddda1ea4ffdb9abf2a": "346000000000000000000",
  "3e5e93fb4c9c9d1246f8f247358e22c3c5d17b6a": "150000000000000000000",
  "6c1ddd33c81966dc8621776071a4129482f2c65f": "40000000000000000000000",
  "2ccb66494d0af689abf9483d365d782444e7dead": "1000000000000000000000",
  "19571a2b8f81c6bcf66ab3a10083295617150003": "492500000000000000000",
  "38ac664ee8e0795e4275cb852bcba6a479ad9c8d": "20000000000000000000",
  "c4803bb407c762f90b7596e6fde194931e769590": "4000000000000000000000",
  "93507e9e8119cbceda8ab087e7ecb071383d6981": "14000000000000000000000",
  "b672734afcc224e2e609fc51d4f059732744c948": "295500000000000000000",
  "fbbbebcfbe235e57dd2306ad1a9ec581c7f9f48f": "40000000000000000000",
  "8c81410ea8354cc5c65c41be8bd5de733c0b111d": "9550000000000000000000",
  "942c6b8c955bc0d88812678a236725b32739d947": "1550000000000000000000",
  "d2e817738abf1fb486583f80c350318bed860c80": "240010000000000000000",
  "bff5df769934b8943ca9137d0efef2fe6ebbb34e": "100000000000000000000",
  "6c4e426e8dc005dfa3516cb8a680b02eea95ae8e": "1337000000000000000000",
  "f645dd7c890093e8e4c8aa92a6bb353522d3dc98": "134000000000000000000",
  "4bac846af4169f1d95431b341d8800b22180af1a": "20000000000000000000",
  "0514954c3c2fb657f9a06f510ea22748f027cdd3": "400000000000000000000",
  "163dca73d7d6ea3f3e6062322a8734180c0b78ef": "2941400000000000000000",
  "feaca2ac74624bf348dac9985143cfd652a4be55": "26148245000000000000000",
  "fe80e9232deaff19baf99869883a4bdf0004e53c": "855680000000000000000",
  "17108dab2c50f99de110e1b3b3b4cd82f5df28e7": "980000000000000000000",
  "837a645dc95c49549f899c4e8bcf875324b2f57c": "600400000000000000000",
  "762998e1d75227fced7a70be109a4c0b4ed86414": "20000000000000000000",
  "c0a7e8435dff14c25577739db55c24d5bf57a3d9": "49250000000000000000000",
  "aead88d689416b1c91f2364421375b7d3c70fb2e": "2000000000000000000000",
  "9279b2228cec8f7b4dda3f320e9a0466c2f585ca": "5000000000000000000000",
  "36726f3b885a24f92996da81625ec8ad16d8cbe6": "1543723000000000000000",
  "3951e48e3c869e6b72a143b6a45068cdb9d466d0": "20000000000000000000",
  "f5d61ac4ca95475e5b7bffd5f2f690b316759615": "31040000000000000000000",
  "158a0d619253bf4432b5cd02c7b862f7c2b75636": "135733000000000000000",
  "e56d431324c92911a1749df292709c14b77a65cd": "8200000000000000000000",
  "9976947eff5f6ae5da08dd541192f378b428ff94": "8000000000000000000000",
  "83210583c16a4e1e1dac84ebd37e3d0f7c57eba4": "2000000000000000000000",
  "dcb64df43758c7cf974fa660484fbb718f8c67c1": "20000000000000000000000",
  "d4205592844055b3c7a1f80cefe3b8eb509bcde7": "178973000000000000000",
  "d0648a581b3508e135a2935d12c9657045d871ca": "8022000000000000000000",
  "e7d17524d00bad82497c0f27156a647ff51d2792": "20000000000000000000",
  "21582e99e502cbf3d3c23bdffb76e901ac6d56b2": "100000000000000000000",
  "e61f280915c774a31d223cf80c069266e5adf19b": "880000000000000000000",
  "03c91d92943603e752203e05340e566013b90045": "802200000000000000000",
  "22561c5931143536309c17e832587b625c390b9a": "4000000000000000000000",
  "e399c81a1d701b44f0b66f3399e66b275aaaf8c1": "1000000000000000000000",
  "7f8dbce180ed9c563635aad2d97b4cbc428906d9": "2674000000000000000000",
  "9f61beb46f5e853d0a8521c7446e68e34c7d0973": "560000000000000000000",
  "6d3f2ba856ccbb0237fa7661156b14b013f21240": "1000000000000000000000",
  "5f742e487e3ab81af2f94afdbe1b9b8f5ccc81bc": "2172412000000000000000",
  "b600feab4aa96c537504d96057223141692c193a": "400000000000000000000",
  "fab487500df20fb83ebed916791d561772adbebf": "1999980000000000000000",
  "f8704c16d2fd5ba3a2c01d0eb20484e6ecfa3109": "200000000000000000000",
  "3f1bc420c53c002c9e90037c44fe6a8ef4ddc962": "173000000000000000000",
  "82e577b515cb2b0860aafe1ce09a59e09fe7d040": "600000000000000000000",
  "bc999e385c5aebcac8d6f3f0d60d5aa725336d0d": "2000000000000000000000",
  "e16ce35961cd74bd590d04c4ad4a1989e05691c6": "146000000000000000000",
  "eb76424c0fd597d3e341a9642ad1ee118b2b579d": "4000000000000000000000",
  "c440c7ca2f964b6972ef664a2261dde892619d9c": "20000000000000000000000",
  "460d5355b2ceeb6e62107d81e51270b26bf45620": "2005500000000000000000",
  "fcada300283f6bcc134a91456760b0d77de410e0": "2000000000000000000000",
  "be8d7f18adfe5d6cc775394989e1930c979d007d": "1000000000000000000000",
  "a7f9220c8047826bd5d5183f4e676a6d77bfed36": "153368000000000000000",
  "98d204f9085f8c8e7de23e589b64c6eff692cc63": "2000000000000000000000",
  "5a2916b8d2e8cc12e207ab464d433e2370d823d9": "2000000000000000000000",
  "c42d6aeb710e3a50bfb44d6c31092969a11aa7f3": "150052000000000000000",
  "04ce45f600db18a9d0851b29d9393ebdaafe3dc5": "20000000000000000000",
  "7a1370a742ec2687e761a19ac5a794329ee67404": "2999988000000000000000",
  "da2ad58e77deddede2187646c465945a8dc3f641": "660000000000000000000",
  "ec58bc0d0c20d8f49465664153c5c196fe59e6be": "400000000000000000000",
  "f8063af4cc1dd9619ab5d8bff3fcd1faa8488221": "2000000000000000000000",
  "b9231eb26e5f9e4b4d288f03906704fab96c87d6": "19700000000000000000000",
  "6e5c2d9b1c546a86eefd5d0a5120c9e4e730190e": "199600000000000000000",
  "e49936a92a8ccf710eaac342bc454b9b14ebecb1": "2000000000000000000000",
  "21dbdb817a0d8404c6bdd61504374e9c43c9210e": "9999917000000000000000",
  "5cebe30b2a95f4aefda665651dc0cf7ef5758199": "18200000000000000000",
  "597038ff91a0900cbbab488af483c790e6ec00a0": "10000000000000000000000",
  "0fa5d8c5b3f294efd495ab69d768f81872508548": "2000000000000000000000",
  "feef3b6eabc94affd3310c1c4d0e65375e131119": "20000000000000000000",
  "1ce81d31a7923022e125bf48a3e03693b98dc9dd": "2000000000000000000000",
  "5887dc6a33dfed5ac1edefe35ef91a216231ac96": "250000000000000000000",
  "4e8e47ae3b1ef50c9d54a38e14208c1abd3603c2": "2235000000000000000000",
  "e845e387c4cbdf982280f6aa01c40e4be958ddb2": "25000000000000000000000",
  "71d9494e50c5dd59c599dba3810ba1755e6537f0": "4000000000000000000000",
  "6eb5578a6bb7c32153195b0d8020a6914852c059": "660000000000000000000000",
  "543f8c674e2462d8d5daa0e80195a8708e11a29e": "63940000000000000000",
  "a0459ef3693aacd1647cd5d8929839204cef53be": "1000000000000000000000",
  "dda371e600d30688d4710e088e02fdf2b9524d5f": "6920000000000000000000",
  "dd4dd6d36033b0636fcc8d0938609f4dd64f4a86": "60000000000000000000",
  "3bd624b548cb659736907ed8aa3c0c705e24b575": "2000000000000000000000",
  "414599092e879ae25372a84d735af5c4e510cd6d": "400000000000000000000",
  "3d66cd4bd64d5c8c1b5eea281e106d1c5aad2373": "1951100000000000000000",
  "5948bc3650ed519bf891a572679fd992f8780c57": "197000000000000000000",
  "8b74a7cb1bb8c58fce267466a30358adaf527f61": "13620000000000000000000",
  "3f10800282d1b7ddc78fa92d8230074e1bf6aeae": "4925000000000000000000",
  "32dbb6716c54e83165829a4abb36757849b6e47d": "1000000000000000000000",
  "e6b3ac3f5d4da5a8857d0b3f30fc4b2b692b77d7": "1460000000000000000000",
  "052a58e035f1fe9cdd169bcf20970345d12b9c51": "1490000000000000000000",
  "581bdf1bb276dbdd86aedcdb397a01efc0e00c5b": "1000000000000000000000",
  "604e9477ebf4727c745bcabbedcb6ccf29994022": "1000060000000000000000",
  "59b96deb8784885d8d3b4a166143cc435d2555a1": "1337000000000000000000",
  "37d980a12ee3bf23cc5cdb63b4ae45691f74c837": "2000000000000000000000",
  "3bfbd3847c17a61cf3f17b52f8eba1b960b3f39f": "3000000000000000000000",
  "49c941e0e5018726b7290fc473b471d41dae80d1": "500000000000000000000",
  "f26bcedce3feadcea3bc3e96eb1040dfd8ffe1a0": "775000000000000000000",
  "d0944aa185a1337061ae20dc9dd96c83b2ba4602": "200000000000000000000",
  "904caa429c619d940f8e6741826a0db692b19728": "1000000000000000000000",
  "b95c9b10aa981cf4a67a71cc52c504dee8cf58bd": "4000000000000000000000",
  "15874686b6733d10d703c9f9bec6c52eb8628d67": "2000000000000000000000",
  "1374facd7b3f8d68649d60d4550ee69ff0484133": "269700000000000000000",
  "b0e469c886593815b3495638595daef0665fae62": "1940000000000000000000",
  "47ff6feb43212060bb1503d7a397fc08f4e70352": "2000000000000000000000",
  "c60b04654e003b4683041f1cbd6bc38fda7cdbd6": "2000000000000000000000",
  "3ecdb532e397579662b2a46141e78f8235936a5f": "66850000000000000000",
  "b3a8c2cb7d358e5739941d945ba9045a023a8bbb": "1000000000000000000000",
  "32ef5cdc671df5562a901aee5db716b9be76dcf6": "2000000000000000000000",
  "c94110e71afe578aa218e4fc286403b0330ace8d": "2000000000000000000000",
  "9b43dcb95fde318075a567f1e6b57617055ef9e8": "3940000000000000000000",
  "efeea010756f81da4ba25b721787f058170befbd": "32470000000000000000",
  "c88255eddcf521c6f81d97f5a42181c9073d4ef1": "290793000000000000000",
  "dd47189a3e64397167f0620e484565b762bfbbf4": "1850000000000000000000",
  "82f39b2758ae42277b86d69f75e628d958ebcab0": "40000000000000000000000",
  "e37f5fdc6ec97d2f866a1cfd0d3a4da4387b22b5": "10000000000000000000000",
  "62331df2a3cbee3520e911dea9f73e905f892505": "2000000000000000000000",
  "8c5d16ed65e3ed7e8b96ca972bc86173e3500b03": "2000000000000000000000",
  "8b9841862e77fbbe919470935583a93cf027e450": "2000054000000000000000",
  "c8dd27f16bf22450f5771b9fe4ed4ffcb30936f4": "197000000000000000000",
  "dec8a1a898f1b895d8301fe64ab3ad5de941f689": "787803000000000000000",
  "61c4ee7c864c4d6b5e37ea1331c203739e826b2f": "30063000000000000000",
  "3250e3e858c26adeccadf36a5663c22aa84c4170": "5000000000000000000000",
  "299e0bca55e069de8504e89aca6eca21d38a9a5d": "55500000000000000000",
  "d50f7fa03e389876d3908b60a537a6706304fb56": "100000000000000000000",
  "69073269729e6414b26ec8dc0fd935c73b579f1e": "30000000000000000000000",
  "14fcd1391e7d732f41766cdacd84fa1deb9ffdd2": "2000000000000000000000",
  "823768746737ce6da312d53e54534e106f967cf3": "20000000000000000000",
  "882f75708386653c80171d0663bfe30b017ed0ad": "2000000000000000000000",
  "a25b086437fd2192d0a0f64f6ed044f38ef3da32": "335000000000000000000",
  "5a9c8b69fc614d69564999b00dcb42db67f97e90": "3429227000000000000000",
  "a2b701f9f5cdd09e4ba62baebae3a88257105885": "1000000000000000000000",
  "5e7b8c54dc57b0402062719dee7ef5e37ea35d62": "2877224000000000000000",
  "7ffabfbc390cbe43ce89188f0868b27dcb0f0cad": "6370000000000000000000",
  "b5cdbc4115406f52e5aa85d0fea170d2979cc7ba": "1337000000000000000000",
  "263814309de4e635cf585e0d365477fc40e66cf7": "146000000000000000000",
  "24cff0e9336a9f80f9b1cb968caf6b1d1c4932a4": "200200000000000000000",
  "d3a941c961e8ca8b1070f23c6d6d0d2a758a4444": "200000000000000000000",
  "a97beb3a48c45f1528284cb6a95f7de453358ec6": "31000000000000000000000",
  "4dd131c74a068a37c90aded4f309c2409f6478d3": "400008000000000000000",
  "653675b842d7d8b461f722b4117cb81dac8e639d": "31000000000000000000",
  "561be9299b3e6b3e63b79b09169d1a948ae6db01": "500000000000000000000",
  "dc067ed3e12d711ed475f5156ef7e71a80d934b9": "9550000000000000000000",
  "08d97eadfcb7b064e1ccd9c8979fbee5e77a9719": "266063000000000000000",
  "6e4c2ab7db026939dbd3bc68384af660a61816b2": "167000000000000000000",
  "bf4c73a7ede7b164fe072114843654e4d8781dde": "2000000000000000000000",
  "f504943aaf16796e0b341bbcdf21d11cc586cdd1": "9000000000000000000000",
  "ea81ca8638540cd9d4d73d060f2cebf2241ffc3e": "1970000000000000000000",
  "9944fee9d34a4a880023c78932c00b59d5c82a82": "750022000000000000000",
  "12f460ae646cd2780fd35c50a6af4b9accfa85c6": "1000000000000000000000",
  "4e232d53b3e6be8f895361d31c34d4762b12c82e": "1760000000000000000000",
  "6bb2aca23fa1626d18efd6777fb97db02d8e0ae4": "40000000000000000000000",
  "bc4e471560c99c8a2a4b1b1ad0c36aa6502b7c4b": "12000000000000000000000",
  "2e2cbd7ad82547b4f5ff8b3ab56f942a6445a3b0": "200000000000000000000",
  "21ecb2dfa65779c7592d041cd2105a81f4fd4e46": "1000000000000000000000",
  "34318625818ec13f11835ae97353ce377d6f590a": "1520000000000000000000",
  "a7ef35ce87eda6c28df248785815053ec97a5045": "4999998000000000000000",
  "6a514e6242f6b68c137e97fea1e78eb555a7e5f7": "20000000000000000000",
  "9340b5f678e45ee05eb708bb7abb6ec8f08f1b6b": "6000000000000000000000",
  "43cc08d0732aa58adef7619bed46558ad7774173": "4443926000000000000000",
  "12e9a4ad2ad57484dd700565bddb46423bd9bd31": "19999800000000000000000",
  "ebbeeb259184a6e01cccfc2207bbd883785ac90a": "619966000000000000000",
  "704ab1150d5e10f5e3499508f0bf70650f028d4b": "4000000000000000000000",
  "fc361105dd90f9ede566499d69e9130395f12ac8": "395000000000000000000000",
  "c1b9a5704d351cfe983f79abeec3dbbbae3bb629": "20000000000000000000",
  "66f50406eb1b11a946cab45927cca37470e5a208": "2000000000000000000000",
  "53942e7949d6788bb780a7e8a0792781b1614b84": "15899600000000000000000",
  "32ba9a7d0423e03a525fe2ebeb661d2085778bd8": "20000000000000000000000",
  "11c0358aa6479de21866fe21071924b65e70f8b9": "36400000000000000000000",
  "76cb9c8b69f4387675c48253e234cb7e0d74a426": "7396300000000000000000",
  "9f5f44026b576a4adb41e95961561d41039ca391": "250000000000000000000",
  "533a73a4a2228eee05c4ffd718bbf3f9c1b129a7": "6000000000000000000000",
  "dcc52d8f8d9fc742a8b82767f0555387c563efff": "500000000000000000000",
  "f456a75bb99655a7412ce97da081816dfdb2b1f2": "200000000000000000000",
  "d0c101fd1f01c63f6b1d19bc920d9f932314b136": "20000000000000000000000",
  "dabc225042a6592cfa13ebe54efa41040878a5a2": "259550000000000000000",
  "38eec6e217f4d41aa920e424b9525197041cd4c6": "4428166000000000000000",
  "8a247d186510809f71cffc4559471c3910858121": "1790000000000000000000",
  "4f152b2fb8659d43776ebb1e81673aa84169be96": "2000000000000000000000",
  "b4496ddb27799a222457d73979116728e8a1845b": "2610331000000000000000",
  "4a4053b31d0ee5dbafb1d06bd7ac7ff3222c47d6": "1400000000000000000000",
  "0f7bea4ef3f73ae0233df1e100718cbe29310bb0": "2000000000000000000000",
  "c836e24a6fcf29943b3608e662290a215f6529ea": "292000000000000000000",
  "1765361c2ec2f83616ce8363aae21025f2566f40": "5000000000000000000000",
  "b6e6c3222b6b6f9be2875d2a89f127fb64100fe2": "8008000000000000000000",
  "01bbc14f67af0639aab1441e6a08d4ce7162090f": "1309500000000000000000",
  "af2058c7282cf67c8c3cf930133c89617ce75d29": "6920000000000000000000",
  "464d9c89cce484df000277198ed8075fa63572d1": "20000000000000000000",
  "50cd97e9378b5cf18f173963236c9951ef7438a5": "1400000000000000000000",
  "cb47bd30cfa8ec5468aaa6a94642ced9c819c8d4": "4000000000000000000000",
  "6b10f8f8b3e3b60de90aa12d155f9ff5ffb22c50": "2000000000000000000000",
  "09b7a988d13ff89186736f03fdf46175b53d16e0": "6000000000000000000000",
  "5bfafe97b1dd1d712be86d41df79895345875a87": "500000000000000000000",
  "a06cd1f396396c0a64464651d7c205efaf387ca3": "1999944000000000000000",
  "fc0096b21e95acb8d619d176a4a1d8d529badbef": "384601000000000000000",
  "a74444f90fbb54e56f3ac9b6cfccaa4819e4614a": "20000000000000000000",
  "3c15b3511df6f0342e7348cc89af39a168b7730f": "1000000000000000000000",
  "3d6ff82c9377059fb30d9215723f60c775c891fe": "250066000000000000000",
  "a524a8cccc49518d170a328270a2f88133fbaf5d": "294500000000000000000",
  "8a7a06be199a3a58019d846ac9cbd4d95dd757de": "3000200000000000000000",
  "d744ac7e5310be696a63b003c40bd039370561c6": "1670000000000000000000",
  "fe362688845fa244cc807e4b1130eb3741a8051e": "1000000000000000000000",
  "b2d0360515f17daba90fcbac8205d569b915d6ac": "6000000000000000000000",
  "c53594c7cfb2a08f284cc9d7a63bbdfc0b319732": "49200000000000000000000",
  "b3c228731d186d2ded5b5fbe004c666c8e469b86": "29000000000000000000",
  "63e414603e80d4e5a0f5c18774204642258208e4": "5000000000000000000000",
  "826ce5790532e0548c6102a30d3eac836bd6388f": "18000000000000000000000",
  "c5e812f76f15f2e1f2f9bc4823483c8804636f67": "73000000000000000000",
  "116fef5e601642c918cb89160fc2293ba71da936": "802200000000000000000",
  "08b84536b74c8c01543da88b84d78bb95747d822": "200000000000000000000",
  "04a80afad53ef1f84165cfd852b0fdf1b1c24ba8": "58000000000000000000",
  "2b0362633614bfcb583569438ecc4ea57b1d337e": "20000000000000000000000",
  "e95179527deca5916ca9a38f215c1e9ce737b4c9": "10000000000000000000000",
  "2c5df866666a194b26cebb407e4a1fd73e208d5e": "1000000000000000000000",
  "529e824fa072582b4032683ac7eecc1c04b4cac1": "2000000000000000000000",
  "78634371e17304cbf339b1452a4ce438dc764cce": "10000000000000000000000",
  "e172dfc8f80cd1f8cd8539dc26082014f5a8e3e8": "3000000000000000000000",
  "b07618328a901307a1b7a0d058fcd5786e9e72fe": "30239500000000000000000",
  "b0571153db1c4ed7acaefe13ecdfdb72e7e4f06a": "80520000000000000000000",
  "ad910a23d6850613654af786337ad2a70868ac6d": "1999800000000000000000",
  "4da5edc688b0cb62e1403d1700d9dcb99ffe3fd3": "2000000000000000000000",
  "be2471a67f6047918772d0e36839255ed9d691ae": "4000000000000000000000",
  "28868324337e11ba106cb481da962f3a8453808d": "2000000000000000000000",
  "d8f94579496725b5cb53d7985c989749aff849c0": "17000000000000000000000",
  "4981c5ff66cc4e9680251fc4cd2ff907cb327865": "750000000000000000000",
  "fd2872d19e57853cfa16effe93d0b1d47b4f93fb": "4000000000000000000000",
  "63c8dfde0b8e01dadc2e748c824cc0369df090b3": "3880000000000000000000",
  "c4dd048bfb840e2bc85cb53fcb75abc443c7e90f": "3716000000000000000000",
  "f579714a45eb8f52c3d57bbdefd2c15b2e2f11df": "1560000000000000000000",
  "cc7b0481cc32e6faef2386a07022bcb6d2c3b4fc": "3160000000000000000000",
  "a0aa5f0201f04d3bbeb898132f7c11679466d901": "36600000000000000000",
  "f3df63a97199933330383b3ed7570b96c4812334": "2000000000000000000000",
  "42732d8ef49ffda04b19780fd3c18469fb374106": "425068000000000000000",
  "6f92d6e4548c78996509ee684b2ee29ba3c532b4": "1000000000000000000000",
  "fff4bad596633479a2a29f9a8b3f78eefd07e6ee": "100000000000000000000",
  "ac4460a76e6db2b9fcd152d9c7718d9ac6ed8c6f": "200000000000000000000",
  "553b6b1c57050e88cf0c31067b8d4cd1ff80cb09": "400000000000000000000",
  "84b6b6adbe2f5b3e2d682c66af1bc4905340c3ed": "619333000000000000000",
  "9f4a7195ac7c151ca258cafda0cab083e049c602": "1537100000000000000000",
  "2955c357fd8f75d5159a3dfa69c5b87a359dea8c": "2000000000000000000000",
  "11d7844a471ef89a8d877555583ceebd1439ea26": "10098000000000000000000",
  "34b454416e9fb4274e6addf853428a0198d62ee1": "407000000000000000000",
  "308dd21cebe755126704b48c0f0dc234c60ba9b1": "200000000000000000000",
  "381db4c8465df446a4ce15bf81d47e2f17c980bf": "32000000000000000000000",
  "1abc4e253b080aeb437984ab05bca0979aa43e1c": "1000000000000000000000",
  "53e35b12231f19c3fd774c88fec8cbeedf1408b2": "512000000000000000000",
  "69e2e2e704307ccc5b5ca3f164fece2ea7b2e512": "7000000000000000000000",
  "1914f1eb95d1277e93b6e61b668b7d77f13a11a1": "970000000000000000000",
  "50e13023bd9ca96ad4c53fdfd410cb6b1f420bdf": "200000000000000000000",
  "46224f32f4ece5c8867090d4409d55e50b18432d": "6000000000000000000000",
  "ff83855051ee8ffb70b4817dba3211ed2355869d": "400000000000000000000",
  "fb39189af876e762c71d6c3e741893df226cedd6": "4000000000000000000000",
  "9875623495a46cdbf259530ff838a1799ec38991": "2000000000000000000000",
  "e1b39b88d9900dbc4a6cdc481e1060080a8aec3c": "2000000000000000000000",
  "5baf6d749620803e8348af3710e5c4fbf20fc894": "5003680000000000000000",
  "9c54e4ed479a856829c6bb42da9f0b692a75f728": "7520000000000000000000",
  "486a6c8583a84484e3df43a123837f8c7e2317d0": "323378000000000000000",
  "d235d15cb5eceebb61299e0e827fa82748911d89": "4000000000000000000000",
  "47d792a756779aedf1343e8883a6619c6c281184": "2000000000000000000000",
  "70c213488a020c3cfb39014ef5ba6404724bcaa3": "1940000000000000000000",
  "133c490fa5bf7f372888e607d958fab7f955bae1": "1580000000000000000000",
  "a9e194661aac704ee9dea043974e9692ded84a5d": "482400000000000000000",
  "bc6b58364bf7f1951c309e0cba0595201cd73f9a": "1812400000000000000000",
  "2309d34091445b3232590bd70f4f10025b2c9509": "10000000000000000000000",
  "d89bc271b27ba3ab6962c94a559006ae38d5f56a": "2000000000000000000000",
  "ff0e2fec304207467e1e3307f64cbf30af8fd9cd": "2000000000000000000000",
  "c0b0b7a8a6e1acdd05e47f94c09688aa16c7ad8d": "64234000000000000000",
  "b66f92124b5e63035859e390628869dbdea9485e": "9850000000000000000000",
  "a9e6e25e656b762558619f147a21985b8874edfe": "2000000000000000000000",
  "a43e1947a9242b355561c30a829dfeeca2815af8": "3878255000000000000000",
  "8b20ad3b94656dbdc0dd21a393d8a7d9e02138cb": "3000000000000000000000",
  "aca2a838330b17302da731d30db48a04f0f207c1": "1337000000000000000000",
  "fa60868aafd4ff4c5c57914b8ed58b425773dfa9": "8557400000000000000000",
  "1848003c25bfd4aa90e7fcb5d7b16bcd0cffc0d8": "1000000000000000000000",
  "b4b185d943ee2b58631e33dff5af6854c17993ac": "1000000000000000000000",
  "7719888795ad745924c75760ddb1827dffd8cda8": "1999980000000000000000",
  "ccd521132d986cb96869842622a7dda26c3ed057": "2000000000000000000000",
  "253e32b74ea4490ab92606fda0aa257bf23dcb8b": "10000000000000000000000",
  "3712367e5e55a96d5a19168f6eb2bc7e9971f869": "1000000000000000000000",
  "8f29a14a845ad458f2d108b568d813166bcdf477": "10000000000000000000000",
  "51a8c2163602a32ee24cf4aa97fd9ea414516941": "62904000000000000000",
  "61cea71fa464d62a07063f920b0cc917539733d8": "1670000000000000000000",
  "6f81f3abb1f933b1df396b8e9cc723a89b7c9806": "280000000000000000000",
  "61b1b8c012cd4c78f698e470f90256e6a30f48dd": "200000000000000000000",
  "4f3f2c673069ac97c2023607152981f5cd6063a0": "600000000000000000000",
  "e2efa5fca79538ce6068bf31d2c516d4d53c08e5": "131200000000000000000",
  "2383c222e67e969190d3219ef14da37850e26c55": "2000000000000000000000",
  "eac3af5784927fe9a598fc4eec38b8102f37bc58": "1000000000000000000000",
  "4fe56ab3bae1b0a44433458333c4b05a248f8241": "2180000000000000000000",
  "fe9cfc3bb293ddb285e625f3582f74a6b0a5a6cd": "1970000000000000000000",
  "f48e1f13f6af4d84b371d7de4b273d03a263278e": "600000000000000000000",
  "1ba9228d388727f389150ea03b73c82de8eb2e09": "7258000000000000000000",
  "37a7a6ff4ea3d60ec307ca516a48d3053bb79cbb": "2000000000000000000000",
  "e33840d8bca7da98a6f3d096d83de78b70b71ef8": "2000000000000000000000",
  "8e7fd23848f4db07906a7d10c04b21803bb08227": "1000000000000000000000",
  "07d4334ec385e8aa54eedaeadb30022f0cdfa4ab": "2629946000000000000000",
  "d4b085fb086f3d0d68bf12926b1cc3142cae8770": "3700000000000000000000",
  "5a87f034e6f68f4e74ffe60c64819436036cf7d7": "20000000000000000000",
  "c00ab080b643e1c2bae363e0d195de2efffc1c44": "500000000000000000000",
  "22f3c779dd79023ea92a78b65c1a1780f62d5c4a": "1970000000000000000000",
  "c7d5c7054081e918ec687b5ab36e973d18132935": "182000000000000000000",
  "9662ee021926682b31c5f200ce457abea76c6ce9": "670500000000000000000",
  "116a09df66cb150e97578e297fb06e13040c893c": "2000000000000000000000",
  "b7240af2af90b33c08ae9764103e35dce3638428": "8464547000000000000000",
  "e8b28acda971725769db8f563d28666d41ddab6c": "10000000000000000000000",
  "17d4918dfac15d77c47f9ed400a850190d64f151": "2000000000000000000000",
  "c42250b0fe42e6b7dcd5c890a6f0c88f5f5fb574": "149800000000000000000",
  "5da2a9a4c2c0a4a924cbe0a53ab9d0c627a1cfa0": "733202000000000000000",
  "5869fb867d71f1387f863b698d09fdfb87c49b5c": "3666000000000000000000",
  "d49a75bb933fca1fca9aa1303a64b6cb44ea30e1": "10000000000000000000000",
  "76331e30796ce664b2700e0d4153700edc869777": "2000000000000000000000",
  "8a5fb75793d043f1bcd43885e037bd30a528c927": "356500000000000000000",
  "fc0ee6f7c2b3714ae9916c45566605b656f32441": "1760000000000000000000",
  "bf50ce2e264b9fe2b06830617aedf502b2351b45": "1000000000000000000000",
  "0f6000de1578619320aba5e392706b131fb1de6f": "499986000000000000000",
  "c953f934c0eb2d0f144bdab00483fd8194865ce7": "2000000000000000000000",
  "24fd9a6c874c2fab3ff36e9afbf8ce0d32c7de92": "1337000000000000000000",
  "c6cd68ec35362c5ad84c82ad4edc232125912d99": "27750000000000000000000",
  "2a67660a1368efcd626ef36b2b1b601980941c05": "133700000000000000000",
  "9deb39027af877992b89f2ec4a1f822ecdf12693": "2000000000000000000000",
  "c12f881fa112b8199ecbc73ec4185790e614a20f": "2000000000000000000000",
  "d58a52e078a805596b0d56ea4ae1335af01c66eb": "267400000000000000000",
  "4d7cfaa84cb33106800a8c802fb8aa463896c599": "1790000000000000000000",
  "0ee391f03c765b11d69026fd1ab35395dc3802a0": "200000000000000000000",
  "a192f06ab052d5fd7f94eea8318e827815fe677a": "131400000000000000000",
  "8f0ab894bd3f4e697dbcfb859d497a9ba195994a": "39501652000000000000000",
  "387eeafd6b4009deaf8bd5b85a72983a8dcc3487": "4000000000000000000000",
  "03b0f17cd4469ddccfb7da697e82a91a5f9e7774": "20000000000000000000",
  "11172b278ddd44eea2fdf4cb1d16962391c453d9": "935900000000000000000000",
  "33d172ab075c51db1cd40a8ca8dbff0d93b843bb": "5727139000000000000000",
  "909b5e763a39dcc795223d73a1dbb7d94ca75ac8": "2000000000000000000000",
  "0ca12ab0b9666cf0cec6671a15292f2653476ab2": "210000600000000000000000",
  "6b5ae7bf78ec75e90cb503c778ccd3b24b4f1aaf": "800000000000000000000",
  "d9e3857efd1e202a441770a777a49dcc45e2e0d3": "223500000000000000000",
  "d703c6a4f11d60194579d58c2766a7ef16c30a29": "2000000000000000000000",
  "838bd565f99fde48053f7917fe333cf84ad548ab": "200000000000000000000",
  "8168edce7f2961cf295b9fcd5a45c06cdeda6ef5": "200000000000000000000",
  "de50868eb7e3c71937ec73fa89dd8b9ee10d45aa": "1000000000000000000000",
  "087498c0464668f31150f4d3c4bcdda5221ba102": "20000000000000000000",
  "613fab44b16bbe554d44afd178ab1d02f37aeaa5": "2000000000000000000000",
  "e2ee691f237ee6529b6557f2fcdd3dcf0c59ec63": "5450048000000000000000",
  "a9ed377b7d6ec25971c1a597a3b0f3bead57c98f": "400000000000000000000",
  "175feeea2aa4e0efda12e1588d2f483290ede81a": "200000000000000000000",
  "b51ddcb4dd4e8ae6be336dd9654971d9fec86b41": "421133000000000000000",
  "92c0f573eccf62c54810ee6ba8d1f113542b301b": "3384000000000000000000",
  "a109e18bb0a39c9ef82fa19597fc5ed8e9eb6d58": "1640000000000000000000",
  "f74e6e145382b4db821fe0f2d98388f45609c69f": "100000000000000000000",
  "378f37243f3ff0bef5e1dc85eb4308d9340c29f9": "2000200000000000000000",
  "84e9949680bece6841b9a7e5250d08acd87d16cd": "200000000000000000000",
  "882bd3a2e9d74110b24961c53777f22f1f46dc5d": "13370000000000000000000",
  "acce01e0a70610dc70bb91e9926fa9957f372fba": "537000000000000000000",
  "c5f687717246da8a200d20e5e9bcac60b67f3861": "28650000000000000000",
  "e14617f6022501e97e7b3e2d8836aa61f0ff2dba": "200000000000000000000",
  "076ee99d3548623a03b5f99859d2d785a1778d48": "200000000000000000000",
  "2c424ee47f583cdce07ae318b6fad462381d4d2b": "4000000000000000000000",
  "f98250730c4c61c57f129835f2680894794542f3": "4000000000000000000000",
  "ed1b24b6912d51b334ac0de6e771c7c0454695ea": "40000000000000000000",
  "ffd5170fd1a8118d558e7511e364b24906c4f6b3": "60085000000000000000",
  "bf49c14898316567d8b709c2e50594b366c6d38c": "733202000000000000000",
  "65ea26eabbe2f64ccccfe06829c25d4637520225": "700000000000000000000",
  "5c5419565c3aad4e714e0739328e3521c98f05cc": "528000000000000000000",
  "c53b50fd3b2b72bc6c430baf194a515585d3986d": "20000000000000000000",
  "2b74c373d04bfb0fd60a18a01a88fbe84770e58c": "40000000000000000000",
  "d97f4526dea9b163f8e8e33a6bcf92fb907de6ec": "284000000000000000000",
  "a4a49f0bc8688cc9e6dc04e1e08d521026e65574": "200000000000000000000",
  "575c00c2818210c28555a0ff29010289d3f82309": "10000000000000000000000",
  "3f1233714f204de9de4ee96d073b368d8197989f": "38606000000000000000",
  "f964d98d281730ba35b2e3a314796e7b42fedf67": "1543800000000000000000",
  "1deec01abe5c0d952de9106c3dc30639d85005d6": "2000000000000000000000",
  "12d60d65b7d9fc48840be5f891c745ce76ee501e": "21359400000000000000000",
  "5c6136e218de0a61a137b2b3962d2a6112b809d7": "294273000000000000000",
  "cd43258b7392a930839a51b2ef8ad23412f75a9f": "2000000000000000000000",
  "db3f258ab2a3c2cf339c4499f75a4bd1d3472e9e": "1500000000000000000000",
  "0edd4b580ff10fe06c4a03116239ef96622bae35": "197000000000000000000",
  "1d157c5876c5cad553c912caf6ce2d5277e05c73": "2000000000000000000000",
  "cda1b886e3a795c9ba77914e0a2fe5676f0f5ccf": "106024000000000000000",
  "f50cbafd397edd556c0678988cb2af5c2617e0a2": "716000000000000000000",
  "327bb49e754f6fb4f733c6e06f3989b4f65d4bee": "20000000000000000000",
  "c44bdec8c36c5c68baa2ddf1d431693229726c43": "100000000000000000000000",
  "34e2849bea583ab0cc37975190f322b395055582": "7780340000000000000000",
  "9221c9ce01232665741096ac07235903ad1fe2fc": "126489000000000000000",
  "ff3ded7a40d3aff0d7a8c45fa6136aa0433db457": "1999800000000000000000",
  "10b5b34d1248fcf017f8c8ffc408ce899ceef92f": "267400000000000000000",
  "f1a1f320407964fd3c8f2e2cc8a4580da94f01ea": "2000040000000000000000",
  "6c800d4b49ba07250460f993b8cbe00b266a2553": "492500000000000000000",
  "f827d56ed2d32720d4abf103d6d0ef4d3bcd559b": "26265000000000000000",
  "ffb9c7217e66743031eb377af65c77db7359dcda": "40000000000000000000",
  "530319db0a8f93e5bb7d4dbf4816314fbed8361b": "2000000000000000000000",
  "9c28a2c4086091cb5da226a657ce3248e8ea7b6f": "280000000000000000000",
  "db23a6fef1af7b581e772cf91882deb2516fc0a7": "200000000000000000000",
  "6636d7ac637a48f61d38b14cfd4865d36d142805": "500000000000000000000",
  "b3c260609b9df4095e6c5dff398eeb5e2df49985": "254030000000000000000",
  "58e5c9e344c806650dacfc904d33edba5107b0de": "19100000000000000000",
  "4f67396d2553f998785f704e07a639197dd1948d": "300080000000000000000",
  "510d8159cc945768c7450790ba073ec0d9f89e30": "2560000000000000000000",
  "593c48935beaff0fde19b04d309cd530a28e52ce": "4000000000000000000000",
  "c27f4e08099d8cf39ee11601838ef9fc06d7fc41": "1790000000000000000000",
  "07723e3c30e8b731ee456a291ee0e798b0204a77": "2000000000000000000000",
  "0a652e2a8b77bd97a790d0e91361c98890dbb04e": "1000000000000000000000",
  "671015b97670b10d5e583f3d62a61c1c79c5143f": "400000000000000000000",
  "7cc24a6a958c20c7d1249660f7586226950b0d9a": "1970000000000000000000",
  "6ef9e8c9b6217d56769af97dbb1c8e1b8be799d2": "182000000000000000000",
  "5c4368918ace6409c79eca80cdaae4391d2b624e": "4000000000000000000000",
  "043707071e2ae21eed977891dc79cd5d8ee1c2da": "2000000000000000000000",
  "39bfd978689bec048fc776aa15247f5e1d7c39a2": "20000000000000000000000",
  "05915d4e225a668162aee7d6c25fcfc6ed18db03": "66348000000000000000",
  "3f551ba93cd54693c183fb9ad60d65e1609673c9": "2000000000000000000000",
  "a8c0b02faf02cb5519dda884de7bbc8c88a2da81": "16700000000000000000",
  "bd0c5cd799ebc48642ef97d74e8e429064fee492": "326000000000000000000",
  "0a931b449ea8f12cdbd5e2c8cc76bad2c27c0639": "23031000000000000000",
  "2ea5fee63f337a376e4b918ea82148f94d48a626": "1864242000000000000000",
  "cc6c2df00e86eca40f21ffda1a67a1690f477c65": "3160000000000000000000",
  "e5e37e19408f2cfbec83349dd48153a4a795a08f": "4200000000000000000000",
  "f555a27bb1e2fd4e2cc784caee92939fc06e2fc9": "2000000000000000000000",
  "dcf9719be87c6f46756db4891db9b611d2469c50": "1000000000000000000000",
  "8e2f9034c9254719c38e50c9aa64305ed696df1e": "4728000000000000000000",
  "a01f12d70f44aa7b113b285c22dcdb45873454a7": "18200000000000000000",
  "bce40475d345b0712dee703d87cd7657fc7f3b62": "7750000000000000000000",
  "bb19bf91cbad74cceb5f811db27e411bc2ea0656": "17600000000000000000",
  "acc062702c59615d3444ef6214b8862b009a02ed": "1499936000000000000000",
  "449ac4fbe383e36738855e364a57f471b2bfa131": "197000000000000000000000",
  "ad59a78eb9a74a7fbdaefafa82eada8475f07f95": "500000000000000000000",
  "6b6577f3909a4d6de0f411522d4570386400345c": "1880000000000000000000",
  "79bf2f7b6e328aaf26e0bb093fa22da29ef2f471": "1790000000000000000000",
  "940f715140509ffabf974546fab39022a41952d2": "1400000000000000000000",
  "1d572edd2d87ca271a6714c15a3b37761dcca005": "127674000000000000000",
  "d78ecd25adc86bc2051d96f65364866b42a426b7": "3877300000000000000000",
  "f9729d48282c9e87166d5eef2d01eda9dbf78821": "99981000000000000000",
  "17762560e82a93b3f522e0e524adb8612c3a7470": "1000000000000000000000",
  "d500e4d1c9824ba9f5b635cfa3a8c2c38bbd4ced": "400000000000000000000",
  "a11effab6cf0f5972cffe4d56596e98968144a8f": "1670000000000000000000",
  "f64ecf2117931c6d535a311e4ffeaef9d49405b8": "2674000000000000000000",
  "229cc4711b62755ea296445ac3b77fc633821cf2": "39481000000000000000",
  "fc989cb487bf1a7d17e4c1b7c4b7aafdda6b0a8d": "20000000000000000000",
  "ea8527febfa1ade29e26419329d393b940bbb7dc": "1999944000000000000000",
  "bce13e22322acfb355cd21fd0df60cf93add26c6": "200000000000000000000",
  "19ff244fcfe3d4fa2f4fd99f87e55bb315b81eb6": "200000000000000000000",
  "d2581a55ce23ab10d8ad8c44378f59079bd6f658": "8800000000000000000000",
  "4073fa49b87117cb908cf1ab512da754a932d477": "1970000000000000000000",
  "b6a82933c9eadabd981e5d6d60a6818ff806e36b": "400000000000000000000",
  "c79806032bc7d828f19ac6a640c68e3d820fa442": "20000000000000000000",
  "577b2d073c590c50306f5b1195a4b2ba9ecda625": "373600000000000000000",
  "7f13d760498d7193ca6859bc95c901386423d76c": "5000000000000000000000",
  "416784af609630b070d49a8bcd12235c6428a408": "20000000000000000000000",
  "fbe71622bcbd31c1a36976e7e5f670c07ffe16de": "400000000000000000000",
  "a5698035391e67a49013c0002079593114feb353": "240000000000000000000",
  "ab2871e507c7be3965498e8fb462025a1a1c4264": "775000000000000000000",
  "9c78fbb4df769ce2c156920cfedfda033a0e254a": "1970000000000000000000",
  "95e6f93dac228bc7585a25735ac2d076cc3a4017": "6000000000000000000000",
  "3c1f91f301f4b565bca24751aa1f761322709ddd": "1790000000000000000000",
  "f77f9587ff7a2d7295f1f571c886bd33926a527c": "1999800000000000000000",
  "755f587e5efff773a220726a13d0f2130d9f896b": "1000000000000000000000",
  "8c6aa882ee322ca848578c06cb0fa911d3608305": "600000000000000000000",
  "492cb5f861b187f9df21cd4485bed90b50ffe22d": "499928000000000000000",
  "95a577dc2eb3ae6cb9dfc77af697d7efdfe89a01": "136000000000000000000",
  "4173419d5c9f6329551dc4d3d0ceac1b701b869e": "88000000000000000000",
  "456ae0aca48ebcfae166060250525f63965e760f": "300000000000000000000",
  "81f8de2c283d5fd4afbda85dedf9760eabbbb572": "3000000000000000000000",
  "cd0af3474e22f069ec3407870dd770443d5b12b0": "2626262000000000000000",
  "283c2314283c92d4b064f0aef9bb5246a7007f39": "200000000000000000000",
  "29b3f561ee7a6e25941e98a5325b78adc79785f3": "100000000000000000000",
  "cd4306d7f6947ac1744d4e13b8ef32cb657e1c00": "499986000000000000000",
  "d9ec2efe99ff5cf00d03a8317b92a24aef441f7e": "2000000000000000000000",
  "83dbf8a12853b40ac61996f8bf1dc8fdbaddd329": "970000000000000000000",
  "9d93fab6e22845f8f45a07496f11de71530debc7": "1998000000000000000000",
  "fd204f4f4aba2525ba728afdf78792cbdeb735ae": "2000000000000000000000",
  "99fad50038d0d9d4c3fbb4bce05606ecadcd5121": "2000000000000000000000",
  "d206aaddb336d45e7972e93cb075471d15897b5d": "600000000000000000000",
  "428a1ee0ed331d7952ccbe1c7974b2852bd1938a": "2208370000000000000000",
  "690228e4bb12a8d4b5e0a797b0c5cf2a7509131e": "1880000000000000000000",
  "fa3a1aa4488b351aa7560cf5ee630a2fd45c3222": "878850000000000000000",
  "0372e852582e0934344a0fed2178304df25d4628": "20000000000000000000000",
  "35ea2163a38cdf9a123f82a5ec00258dae0bc767": "4000000000000000000000",
  "d1fed0aee6f5dfd7e25769254c3cfad15adeccaa": "730000000000000000000",
  "c05b740620f173f16e52471dc38b9c514a0b1526": "140000000000000000000",
  "87e3062b2321e9dfb0875ce3849c9b2e3522d50a": "10000000000000000000000",
  "303fbaebbe46b35b6e5b74946a5f99bc1585cae7": "878148000000000000000",
  "e7a8e471eafb798f4554cc6e526730fd56e62c7d": "1000000000000000000000",
  "ad7dd053859edff1cb6f9d2acbed6dd5e332426f": "1970000000000000000000",
  "dc4345d6812e870ae90c568c67d2c567cfb4f03c": "6700000000000000000000",
  "a6a08252c8595177cc2e60fc27593e2379c81fb1": "20055000000000000000",
  "a9af21acbe482f8131896a228036ba51b19453c3": "49999000000000000000",
  "86e3fe86e93da486b14266eadf056cbfa4d91443": "2000000000000000000000",
  "744b03bba8582ae5498e2dc22d19949467ab53fc": "500000000000000000000",
  "d3118ea3c83505a9d893bb67e2de142d537a3ee7": "20000000000000000000",
  "b32f1c2689a5ce79f1bc970b31584f1bcf2283e7": "20000000000000000000",
  "4828e4cbe34e1510afb72c2beeac8a4513eaebd9": "3940000000000000000000",
  "b07bcc085ab3f729f24400416837b69936ba8873": "2000140000000000000000",
  "bdc74873af922b9df474853b0fa7ff0bf8c82695": "3999000000000000000000",
  "15ebd1c7cad2aff19275c657c4d808d010efa0f5": "200550000000000000000",
  "cbc04b4d8b82caf670996f160c362940d66fcf1a": "6000000000000000000000",
  "8197948121732e63d9c148194ecad46e30b749c8": "4000000000000000000000",
  "69797bfb12c9bed682b91fbc593591d5e4023728": "10000000000000000000000",
  "be9b8c34b78ee947ff81472eda7af9d204bc8466": "150000000000000000000",
  "df3f57b8ee6434d047223def74b20f63f9e4f955": "250500000000000000000",
  "a3ae1879007d801cb5f352716a4dd8ba2721de3d": "200000000000000000000000",
  "cb4bb1c623ba28dc42bdaaa6e74e1d2aa1256c2a": "1999944000000000000000",
  "e03c00d00388ecbf4f263d0ac778bb41a57a40d9": "1000072000000000000000",
  "fc2c1f88961d019c3e9ea33009152e0693fbf88a": "8000000000000000000000",
  "8599cbd5a6a9dcd4b966be387d69775da5e33c6f": "58180000000000000000000",
  "b7a31a7c38f3db09322eae11d2272141ea229902": "2000000000000000000000",
  "231a15acc199c89fa9cb22441cc70330bdcce617": "500000000000000000000",
  "3fbed6e7e0ca9c84fbe9ebcf9d4ef9bb49428165": "2000000000000000000000",
  "92cfd60188efdfb2f8c2e7b1698abb9526c1511f": "2000000000000000000000",
  "5c936f3b9d22c403db5e730ff177d74eef42dbbf": "75000000000000000000",
  "931fe712f64207a2fd5022728843548bfb8cbb05": "2000000000000000000000",
  "08d54e83ad486a934cfaeae283a33efd227c0e99": "1039000000000000000000",
  "a339a3d8ca280e27d2415b26d1fc793228b66043": "1013600000000000000000",
  "581f34b523e5b41c09c87c298e299cbc0e29d066": "1131607000000000000000",
  "caaa68ee6cdf0d34454a769b0da148a1faaa1865": "7216000000000000000000",
  "0838a7768d9c2aca8ba279adfee4b1f491e326f1": "200000000000000000000",
  "dde77a4740ba08e7f73fbe3a1674912931742eeb": "19867021000000000000000",
  "cbe810fe0fecc964474a1db97728bc87e973fcbd": "10000000000000000000000",
  "86c28b5678af37d727ec05e4447790f15f71f2ea": "200000000000000000000",
  "dd6c062193eac23d2fdbf997d5063a346bb3b470": "20000000000000000000",
  "5975b9528f23af1f0e2ec08ac8ebaa786a2cb8e0": "345827000000000000000",
  "e29d8ae452dcf3b6ac645e630409385551faae0a": "80276000000000000000",
  "2fbc85798a583598b522166d6e9dda121d627dbc": "200000000000000000000",
  "7a36aba5c31ea0ca7e277baa32ec46ce93cf7506": "20000000000000000000000",
  "dbcbcd7a57ea9db2349b878af34b1ad642a7f1d1": "200000000000000000000",
  "92aae59768eddff83cfe60bb512e730a05a161d7": "1708015000000000000000",
  "a5e93b49ea7c509de7c44d6cfeddef5910deaaf2": "2000000000000000000000",
  "e33d980220fab259af6a1f4b38cf0ef3c6e2ea1a": "2000000000000000000000",
  "8ed0af11ff2870da0681004afe18b013f7bd3882": "4000000000000000000000",
  "f23e5c633221a8f7363e65870c9f287424d2a960": "1380000000000000000000",
  "96334bfe04fffa590213eab36514f338b864b736": "400000000000000000000",
  "fa1f1971a775c3504fef5079f640c2c4bce7ac05": "2000000000000000000000",
  "df44c47fc303ac76e74f97194cca67b5bb3c023f": "591000000000000000000",
  "4b74f5e58e2edf76daf70151964a0b8f1de0663c": "324020000000000000000",
  "e38b91b35190b6d9deed021c30af094b953fdcaa": "33340000000000000000",
  "6b38de841fad7f53fe02da115bd86aaf662466bd": "1730000000000000000000",
  "11675a25554607a3b6c92a9ee8f36f75edd3e336": "159800000000000000000",
  "0ba8705bf55cf219c0956b5e3fc01c4474a6cdc1": "94963000000000000000",
  "0f05f120c89e9fbc93d4ab0c5e2b4a0df092b424": "30000000000000000000000",
  "fdd1195f797d4f35717d15e6f9810a9a3ff55460": "18200000000000000000",
  "63a61dc30a8e3b30a763c4213c801cbf98738178": "1000000000000000000000",
  "e5bdf34f4ccc483e4ca530cc7cf2bb18febe92b3": "126260000000000000000",
  "d6e09e98fe1300332104c1ca34fbfac554364ed9": "2000000000000000000000",
  "5bd6862d517d4de4559d4eec0a06cad05e2f946e": "200000000000000000000",
  "7294ec9da310bc6b4bbdf543b0ef45abfc3e1b4d": "22000000000000000000000",
  "ae34861d342253194ffc6652dfde51ab44cad3fe": "466215000000000000000",
  "f50ae7fab4cfb5a646ee04ceadf9bf9dd5a8e540": "3999952000000000000000",
  "dd2bdfa917c1f310e6fa35aa8af16939c233cd7d": "400000000000000000000",
  "e0060462c47ff9679baef07159cae08c29f274a9": "2000000000000000000000",
  "b7d12e84a2e4c4a6345af1dd1da9f2504a2a996e": "200000000000000000000",
  "f5500178cb998f126417831a08c2d7abfff6ab5f": "1308923000000000000000",
  "fd377a385272900cb436a3bb7962cdffe93f5dad": "2000000000000000000000",
  "a4a83a0738799b971bf2de708c2ebf911ca79eb2": "600000000000000000000",
  "52a5e4de4393eeccf0581ac11b52c683c76ea15d": "19999800000000000000000",
  "b07fdeaff91d4460fe6cd0e8a1b0bd8d22a62e87": "5260000000000000000000",
  "35f5860149e4bbc04b8ac5b272be55ad1aca58e0": "200000000000000000000",
  "fb135eb15a8bac72b69915342a60bbc06b7e077c": "20000000000000000000000",
  "02d4a30968a39e2b3498c3a6a4ed45c1c6646822": "2000000000000000000000",
  "e44b7264dd836bee8e87970340ed2b9aed8ed0a5": "5772100000000000000000",
  "e90a354cec04d69e5d96ddc0c5138d3d33150aa0": "499971000000000000000",
  "693d83be09459ef8390b2e30d7f7c28de4b4284e": "2000000000000000000000",
  "87bf7cd5d8a929e1c785f9e5449106ac232463c9": "77800000000000000000",
  "e5f8ef6d970636b0dcaa4f200ffdc9e75af1741c": "2000000000000000000000",
  "fef09d70243f39ed8cd800bf9651479e8f4aca3c": "200000000000000000000",
  "e98c91cadd924c92579e11b41217b282956cdaa1": "135800000000000000000",
  "c2836188d9a29253e0cbda6571b058c289a0bb32": "2000000000000000000000",
  "afa6946effd5ff53154f82010253df47ae280ccc": "1970000000000000000000",
  "43c7ebc5b3e7af16f47dc5617ab10e0f39b4afbb": "1910000000000000000000",
  "097ecda22567c2d91cb03f8c5215c22e9dcda949": "20055000000000000000",
  "3e66b84769566ab67945d5fa81373556bcc3a1fa": "152000000000000000000",
  "56373daab46316fd7e1576c61e6affcb6559ddd7": "215340000000000000000",
  "faaeba8fc0bbda553ca72e30ef3d732e26e82041": "1338337000000000000000",
  "f54c19d9ef3873bfd1f7a622d02d86249a328f06": "44284729000000000000000",
  "825309a7d45d1812f51e6e8df5a7b96f6c908887": "2365000000000000000000",
  "89009e3c6488bd5e570d1da34eabe28ed024de1b": "20000000000000000000000",
  "63977cad7d0dcdc52b9ac9f2ffa136e8642882b8": "75000000000000000000",
  "c239abdfae3e9af5457f52ed2b91fd0ab4d9c700": "2000000000000000000000",
  "1a4ec6a0ae7f5a9427d23db9724c0d0cffb2ab2f": "179000000000000000000",
  "a12a6c2d985daf0e4f5f207ae851aaf729b332cd": "100000000000000000000000",
  "cbe52fc533d7dd608c92a260b37c3f45deb4eb33": "1000000000000000000000",
  "abb2e6a72a40ba6ed908cdbcec3c5612583132fe": "1460000000000000000000",
  "6503860b191008c15583bfc88158099301762828": "1000000000000000000000",
  "a0228240f99e1de9cb32d82c0f2fa9a3d44b0bf3": "1600000000000000000000",
  "e154daeadb545838cbc6aa0c55751902f528682a": "4925000000000000000000",
  "8e92aba38e72a098170b92959246537a2e5556c0": "267400000000000000000",
  "d23d7affacdc3e9f3dae7afcb4006f58f8a44600": "3600000000000000000000",
  "00d78d89b35f472716eceafebf600527d3a1f969": "27750000000000000000000",
  "120f9de6e0af7ec02a07c609ca8447f157e6344c": "267400000000000000000",
  "e0352fdf819ba265f14c06a6315c4ac1fe131b2e": "1000000000000000000000",
  "8f47328ee03201c9d35ed2b5412b25decc859362": "2000000000000000000000",
  "453e359a3397944c5a275ab1a2f70a5e5a3f6989": "240000000000000000000",
  "9bf58efbea0784eb068adecfa0bb215084c73a35": "5800000000000000000000",
  "21bfe1b45cacde6274fd8608d9a178bf3eeb6edc": "2009400000000000000000",
  "d1d5b17ffe2d7bbb79cc7d7930bcb2e518fb1bbf": "3000000000000000000000",
  "20a29c5079e26b3f18318bb2e50e8e8b346e5be8": "499986000000000000000",
  "7d392852f3abd92ff4bb5bb26cb60874f2be6795": "1000070000000000000000",
  "55852943492970f8d629a15366cdda06a94f4513": "2000000000000000000000",
  "ab5dfc1ea21adc42cf8c3f6e361e243fd0da61e5": "300000000000000000000",
  "9d2bfc36106f038250c01801685785b16c86c60d": "380000000000000000000000",
  "6e60aee1a78f8eda8b424c73e353354ae67c3042": "3490300000000000000000",
  "7e29290038493559194e946d4e460b96fc38a156": "309072000000000000000",
  "6006e36d929bf45d8f16231b126a011ae283d925": "176000000000000000000",
  "d6d03572a45245dbd4368c4f82c95714bd2167e2": "1162200000000000000000",
  "d1432538e35b7664956ae495a32abdf041a7a21c": "19700000000000000000000",
  "2276264bec8526c0c0f270677abaf4f0e441e167": "1000000000000000000000",
  "c8814e34523e38e1f927a7dce8466a447a093603": "10000000000000000000000",
  "688a569e965524eb1d0ac3d3733eab909fb3d61e": "1320000000000000000000",
  "90dc09f717fc2a5b69fd60ba08ebf40bf4e8246c": "4000086000000000000000",
  "239a733e6b855ac592d663156186a8a174d2449e": "1637020000000000000000",
  "bcdfacb9d9023c3417182e9100e8ea1d373393a3": "59100000000000000000",
  "ba6440aeb3737b8ef0f1af9b0c15f4c214ffc7cf": "1000000000000000000000",
  "322e5c43b0f524389655a9b3ff24f2d4db3da10f": "4650000000000000000000",
  "be5a60689998639ad75bc105a371743eef0f7940": "501700000000000000000",
  "b727a9fc82e1cffc5c175fa1485a9befa2cdbdd1": "999000000000000000000",
  "a3883a24f7f166205f1a6a9949076c26a76e7178": "1820000000000000000000",
  "5e95fe5ffcf998f9f9ac0e9a81dab83ead77003d": "539766000000000000000",
  "e60955dc0bc156f6c41849f6bd776ba44b0ef0a1": "299982000000000000000",
  "af203e229d7e6d419df4378ea98715515f631485": "1970000000000000000000",
  "86499a1228ff2d7ee307759364506f8e8c8307a5": "1970000000000000000000",
  "1a04cec420ad432215246d77fe178d339ed0b595": "316000000000000000000",
  "cc2b5f448f3528d3fe41cc7d1fa9c0dc76f1b776": "60000000000000000000",
  "cb50587412822304ebcba07dab3a0f09fffee486": "1370000000000000000000",
  "4ae2a04d3909ef454e544ccfd614bfefa71089ae": "442800000000000000000",
  "c8a2c4e59e1c7fc54805580438aed3e44afdf00e": "44000000000000000000",
  "5792814f59a33a1843faa01baa089eb02ffb5cf1": "499986000000000000000",
  "a1f2854050f872658ed82e52b0ad7bbc1cb921f6": "2010918000000000000000",
  "92dca5e102b3b81b60f1a504634947c374a88ccb": "2000000000000000000000",
  "732fead60f7bfdd6a9dec48125e3735db1b6654f": "20000000000000000000",
  "6bf7b3c065f2c1e7c6eb092ba0d15066f393d1b8": "400000000000000000000",
  "cde36d81d128c59da145652193eec2bfd96586ef": "4000000000000000000000",
  "40eddb448d690ed72e05c225d34fc8350fa1e4c5": "7000000000000000000000",
  "454b61b344c0ef965179238155f277c3829d0b38": "2000000000000000000000",
  "ac3da526cfce88297302f34c49ca520dc271f9b2": "800000000000000000000",
  "c989eec307e8839b9d7237cfda08822962abe487": "400000000000000000000",
  "e99de258a4173ce9ac38ede26c0b3bea3c0973d5": "1656800000000000000000",
  "ff0cb06c42e3d88948e45bd7b0d4e291aefeea51": "1910000000000000000000",
  "0990e81cd785599ea236bd1966cf526302c35b9c": "1000000000000000000000",
  "6da0ed8f1d69339f059f2a0e02471cb44fb8c3bb": "935900000000000000000",
  "5d958a9bd189c2985f86c58a8c69a7a78806e8da": "10200000000000000000000",
  "98be696d51e390ff1c501b8a0f6331b628ddc5ad": "2000000000000000000000",
  "09d0b8cd077c69d9f32d9cca43b3c208a21ed48b": "150011000000000000000",
  "96e7c0c9d5bf10821bf140c558a145b7cac21397": "1056000000000000000000",
  "5b736eb18353629bde9676dadd165034ce5ecc68": "1970000000000000000000",
  "e5a365343cc4eb1e770368e1f1144a77b832d7e0": "20000000000000000000",
  "4cf5537b85842f89cfee359eae500fc449d2118f": "1000000000000000000000",
  "c71f1d75873f33dcb2dd4b3987a12d0791a5ce27": "1015200000000000000000",
  "9bf703b41c3624e15f4054962390bcba3052f0fd": "6055000000000000000000",
  "145e1de0147911ccd880875fbbea61f6a142d11d": "4000000000000000000000",
  "68419c6dd2d3ce6fcbb3c73e2fa079f06051bde6": "1970000000000000000000",
  "d8eb78503ec31a54a90136781ae109004c743257": "1000000000000000000000",
  "f25e4c70bc465632c89e5625a832a7722f6bffab": "4488000000000000000000",
  "7b4d2a38269069c18557770d591d24c5121f5e83": "700000000000000000000",
  "27d158ac3d3e1109ab6e570e90e85d3892cd7680": "100000000000000000000",
  "d3679a47df2d99a49b01c98d1c3e0c987ce1e158": "280000000000000000000",
  "095b949de3333a377d5019d893754a5e4656ff97": "340000000000000000000",
  "6b17598a8ef54f797ae515ccb6517d1859bf8011": "100000000000000000000",
  "3eaf0879b5b6db159b589f84578b6a74f6c10357": "7253657000000000000000",
  "40d45d9d7625d15156c932b771ca7b0527130958": "100000000000000000000000",
  "0392549a727f81655429cb928b529f25df4d1385": "26248000000000000000",
  "c5b009baeaf788a276bd35813ad65b400b849f3b": "1000000000000000000000",
  "6ed884459f809dfa1016e770edaf3e9fef46fa30": "3400170000000000000000",
  "439d2f2f5110a4d58b1757935015408740fec7f8": "3830421000000000000000",
  "dc46c13325cd8edf0230d068896486f007bf4ef1": "1337000000000000000000",
  "8c54c7f8b9896e75d7d5f5c760258699957142ad": "40000000000000000000",
  "61c8f1fa43bf846999ecf47b2b324dfb6b63fe3a": "800000000000000000000",
  "935069444a6a984de2084e46692ab99f671fc727": "9000000000000000000000",
  "fc49c1439a41d6b3cf26bb67e0365224e5e38f5f": "1000076000000000000000",
  "e1dfb5cc890ee8b2877e885d267c256187d019e6": "100000000000000000000",
  "ee7c3ded7c28f459c92fe13b4d95bafbab02367d": "700000000000000000000",
  "a5874d754635a762b381a5c4c792483af8f23d1d": "50000000000000000000",
  "cfbb32b7d024350e3321fa20c9a914035372ffc6": "401100000000000000000",
  "2bc429d618a66a4cf82dbb2d824e9356effa126a": "1999944000000000000000",
  "db244f97d9c44b158a40ed9606d9f7bd38913331": "102000000000000000000",
  "55e220876262c218af4f56784798c7e55da09e91": "133566000000000000000",
  "ca41ccac30172052d522cd2f2f957d248153409f": "1970000000000000000000",
  "b11fa7fb270abcdf5a2eab95aa30c4b53636efbf": "800000000000000000000",
  "0ffea06d7113fb6aec2869f4a9dfb09007facef4": "225416000000000000000",
  "646628a53c2c4193da88359ce718dadd92b7a48d": "200032000000000000000",
  "ca8409083e01b397cf12928a05b68455ce6201df": "1600000000000000000000",
  "dbbcbb79bf479a42ad71dbcab77b5adfaa872c58": "1730000000000000000000",
  "db7d4037081f6c65f9476b0687d97f1e044d0a1d": "660000000000000000000",
  "4be90d412129d5a4d0424361d6649d4e47a62316": "1015200000000000000000",
  "e3ab3ca9b870e3f548517306bba4de2591afafc2": "1200062000000000000000",
  "5c61ab79b408dd3229f662593705d72f1e147bb8": "22729000000000000000000",
  "4f177f9d56953ded71a5611f393322c30279895c": "246000000000000000000",
  "e6cb260b716d4c0ab726eeeb07c8707204e276ae": "1000000000000000000000",
  "44355253b27748e3f34fe9cae1fb718c8f249529": "200000000000000000000",
  "a309df54cabce70c95ec3033149cd6678a6fd4cf": "223600000000000000000",
  "ec4867d2175ab5b9469361595546554684cda460": "3000000000000000000000",
  "8d06e464245cad614939e0af0845e6d730e20374": "200359000000000000000",
  "9810e34a94db6ed156d0389a0e2b80f4fd6b0a8a": "2000000000000000000000",
  "dcfff3e8d23c2a34b56bd1b3bd45c79374432239": "5000000000000000000000",
  "7d7dd5ee614dbb6fbfbcd26305247a058c41faa1": "2000000000000000000000",
  "8a9eca9c5aba8e139f8003edf1163afb70aa3aa9": "660000000000000000000",
  "d942de4784f7a48716c0fd4b9d54a6e54c5f2f3e": "20000000000000000000000",
  "07dae622630d1136381933d2ad6b22b839d82102": "200000000000000000000",
  "abf12fa19e82f76c718f01bdca0003674523ef30": "2000000000000000000000",
  "411c831cc6f44f1965ec5757ab4e5b3ca4cffd1f": "425000000000000000000",
  "99129d5b3c0cde47ea0def4dfc070d1f4a599527": "2000000000000000000000",
  "c5cdcee0e85d117dabbf536a3f4069bf443f54e7": "1969606000000000000000",
  "f218bd848ee7f9d38bfdd1c4eb2ed2496ae4305f": "500000000000000000000",
  "fe549bbfe64740189892932538daaf46d2b61d4f": "40000000000000000000",
  "dc3f0e7672f71fe7525ba30b9755183a20b9166a": "9603617000000000000000",
  "0e83b850481ab44d49e0a229a2e464902c69539b": "100000000000000000000",
  "07ddd0422c86ef65bf0c7fc3452862b1228b08b8": "2065302000000000000000",
  "a68c313445c22d919ee46cc2d0cdff043a755825": "75189000000000000000",
  "a9e9dbce7a2cb03694799897bed7c54d155fdaa8": "197559000000000000000",
  "18fccf62d2c3395453b7587b9e26f5cff9eb7482": "1000000000000000000000",
  "ff41d9e1b4effe18d8b0d1f63fc4255fb4e06c3d": "1337000000000000000000",
  "8f69eafd0233cadb4059ab779c46edf2a0506e48": "1788210000000000000000",
  "9aa48c66e4fb4ad099934e32022e827427f277ba": "10000000000000000000000",
  "f46980e3a4a9d29a6a6e90604537a3114bcb2897": "500000000000000000000",
  "801732a481c380e57ed62d6c29de998af3fa3b13": "100000000000000000000",
  "0cd6a141918d126b106d9f2ebf69e102de4d3277": "20000000000000000000",
  "17589a6c006a54cad70103123aae0a82135fdeb4": "4000000000000000000000",
  "8725e8c753b3acbfdca55f3c62dfe1a59454968a": "1000090000000000000000",
  "d20dcb0b78682b94bc3000281448d557a20bfc83": "895000000000000000000",
  "e84f8076a0f2969ecd333eef8de41042986291f2": "432000000000000000000",
  "b3145b74506d1a8d047cdcdc55392a7b5350799a": "129314663000000000000000",
  "0d9a825ff2bcd397cbad5b711d9dcc95f1cc112d": "12800000000000000000000",
  "0ca670eb2c8b96cba379217f5929c2b892f39ef6": "2000000000000000000000",
  "25cfc4e25c35c13b69f7e77dbfb08baf58756b8d": "40000000000000000000000",
  "182db85293f606e88988c3704cb3f0c0bbbfca5a": "133700000000000000000",
  "bd73c3cbc26a175062ea0320dd84b253bce64358": "394000000000000000000",
  "2680713d40808e2a50ed013150a2a694b96a7f1d": "1790000000000000000000",
  "51e32f14f4ca5e287cdac057a7795ea9e0439953": "500000000000000000000",
  "b1e9c5f1d21e61757a6b2ee75913fc5a1a4101c3": "2000000000000000000000",
  "d4c4d1a7c3c74984f6857b2f5f07e8face68056d": "2000000000000000000000",
  "4651dc420e08c3293b27d2497890eb50223ae2f4": "20000000000000000000000",
  "c74a3995f807de1db01a2eb9c62e97d0548f696f": "1000000000000000000000",
  "0505a08e22a109015a22f685305354662a5531d5": "2600000000000000000000",
  "39c773367c8825d3596c686f42bf0d14319e3f84": "133700000000000000000",
  "0f929cf895db017af79f3ead2216b1bd69c37dc7": "2000000000000000000000",
  "bdd3254e1b3a6dc6cc2c697d45711aca21d516b2": "2000000000000000000000",
  "ae5d221afcd3d29355f508eadfca408ce33ca903": "100000000000000000000000",
  "916cf17d71412805f4afc3444a0b8dd1d9339d16": "14300000000000000000",
  "4319263f75402c0b5325f263be4a5080651087f0": "983086000000000000000",
  "0f1c249cd962b00fd114a9349f6a6cc778d76c4d": "2000000000000000000000",
  "54febcce20fe7a9098a755bd90988602a48c089e": "640000000000000000000",
  "2c1800f35fa02d3eb6ff5b25285f5e4add13b38d": "906400000000000000000",
  "72b904440e90e720d6ac1c2ad79c321dcc1c1a86": "1550000000000000000000",
  "b0aa00950c0e81fa3210173e729aaf163a27cd71": "40000000000000000000000",
  "663604b0503046e624cd26a8b6fb4742dce02a6f": "65400000000000000000",
  "3c98594bf68b57351e8814ae9e6dfd2d254aa06f": "300000000000000000000",
  "9c45202a25f6ad0011f115a5a72204f2f2198866": "5014000000000000000000",
  "b02d062873334545cea29218e4057760590f7423": "3186000000000000000000",
  "7bddb2ee98de19ee4c91f661ee8e67a91d054b97": "1000000000000000000000",
  "9cf2928beef09a40f9bfc953be06a251116182fb": "6000000000000000000000",
  "51b4758e9e1450e7af4268c3c7b1e7bd6f5c7550": "1000000000000000000000",
  "eb570dba975227b1c42d6e8dea2c56c9ad960670": "2000000000000000000000",
  "970d8b8a0016d143054f149fb3b8e550dc0797c7": "1000000000000000000000",
  "c7b39b060451000ca1049ba154bcfa00ff8af262": "100000000000000000000000",
  "945e18769d7ee727c7013f92de24d117967ff317": "2000000000000000000000",
  "d18eb9e1d285dabe93e5d4bae76beefe43b521e8": "668500000000000000000",
  "c618521321abaf5b26513a4a9528086f220adc6f": "27000000000000000000",
  "dd65f6e17163b5d203641f51cc7b24b00f02c8fb": "200000000000000000000",
  "131faed12561bb7aee04e5185af802b1c3438d9b": "219000000000000000000",
  "1ced6715f862b1ff86058201fcce5082b36e62b2": "6684522000000000000000",
  "a0ff5b4cf016027e8323497d4428d3e5a83b8795": "6596500000000000000000",
  "02e816afc1b5c0f39852131959d946eb3b07b5ad": "1000000000000000000000",
  "153cf2842cb9de876c276fa64767d1a8ecf573bb": "2000000000000000000000",
  "3bc6e3ee7a56ce8f14a37532590f63716b9966e8": "2000000000000000000000",
  "f6d25d3f3d846d239f525fa8cac97bc43578dbac": "896000000000000000000",
  "2066774d822793ff25f1760909479cf62491bf88": "55160000000000000000000",
  "46779a5656ff00d73eac3ad0c38b6c853094fb40": "230752000000000000000",
  "22eed327f8eb1d1338a3cb7b0f8a4baa5907cd95": "23445000000000000000",
  "ff88ebacc41b3687f39e4b59e159599b80cba33f": "400000000000000000000",
  "2874f3e2985d5f7b406627e17baa772b01abcc9e": "6014000000000000000000",
  "eb10458daca79e4a6b24b29a8a8ada711b7f2eb6": "3998000000000000000000",
  "541060fc58c750c40512f83369c0a63340c122b6": "1970000000000000000000",
  "fd2757cc3551a095878d97875615fe0c6a32aa8a": "598200000000000000000",
  "be659d85e7c34f8833ea7f488de1fbb5d4149bef": "9072500000000000000000",
  "e149b5726caf6d5eb5bf2acc41d4e2dc328de182": "1940000000000000000000",
  "2fe0cc424b53a31f0916be08ec81c50bf8eab0c1": "600000000000000000000",
  "e3712701619ca7623c55db3a0ad30e867db0168b": "20000000000000000000",
  "f8ca336c8e91bd20e314c20b2dd4608b9c8b9459": "846000000000000000000",
  "68acdaa9fb17d3c309911a77b05f5391fa034ee9": "8950000000000000000000",
  "e77d7deab296c8b4fa07ca3be184163d5a6d606c": "92538000000000000000",
  "e6b9545f7ed086e552924639f9a9edbbd5540b3e": "3760000000000000000000",
  "2866b81decb02ee70ae250cee5cdc77b59d7b679": "2000000000000000000000",
  "60e3cc43bcdb026aad759c7066f555bbf2ac66f5": "2000000000000000000000",
  "fcbd85feea6a754fcf3449449e37ff9784f7773c": "3086000000000000000000",
  "38a744efa6d5c2137defef8ef9187b649eee1c78": "4000000000000000000000",
  "9d7655e9f3e5ba5d6e87e412aebe9ee0d49247ee": "2620100000000000000000",
  "2020b81ae53926ace9f7d7415a050c031d585f20": "341200000000000000000",
  "4244f1331158b9ce26bbe0b9236b9203ca351434": "10000000000000000000000",
  "99c236141daec837ece04fdaee1d90cf8bbdc104": "2184000000000000000000",
  "943d37864a4a537d35c8d99723cd6406ce2562e6": "2000000000000000000000",
  "d79483f6a8444f2549d611afe02c432d15e11051": "20000000000000000000",
  "9fd64373f2fbcd9c0faca60547cad62e26d9851f": "1000000000000000000000",
  "b89c036ed7c492879921be41e10ca1698198a74c": "1820000000000000000000",
  "7462c89caa9d8d7891b2545def216f7464d5bb21": "109162000000000000000",
  "bb0366a7cfbd3445a70db7fe5ae34885754fd468": "6160000000000000000000",
  "6c52cf0895bb35e656161e4dc46ae0e96dd3e62c": "4000086000000000000000",
  "b9cf71b226583e3a921103a5316f855a65779d1b": "24000000000000000000000",
  "016b60bb6d67928c29fd0313c666da8f1698d9c5": "2000000000000000000000",
  "9454b3a8bff9709fd0e190877e6cb6c89974dbd6": "2674000000000000000000",
  "84aac7fa197ff85c30e03b7a5382b957f41f3afb": "157600000000000000000",
  "db6e560c9bc620d4bea3a94d47f7880bf47f2d5f": "89500000000000000000",
  "eefd05b0e3c417d55b3343060486cdd5e92aa7a6": "1430000000000000000000",
  "3a59a08246a8206f8d58f70bb1f0d35c5bcc71bd": "185000000000000000000",
  "9bfff50db36a785555f07652a153b0c42b1b8b76": "2000000000000000000000",
  "d44f5edf2bcf2433f211dadd0cc450db1b008e14": "267400000000000000000",
  "2378fd4382511e968ed192106737d324f454b535": "1000000000000000000000",
  "c94089553ae4c22ca09fbc98f57075cf2ec59504": "4000000000000000000000",
  "08ef3fa4c43ccdc57b22a4b9b2331a82e53818f2": "4000000000000000000000",
  "e48e65125421880d42bdf1018ab9778d96928f3f": "4200000000000000000000",
  "67518e5d02b205180f0463a32004471f753c523e": "1984289000000000000000",
  "0da7401262384e2e8b4b26dd154799b55145efa0": "300000000000000000000",
  "0b6920a64b363b8d5d90802494cf564b547c430d": "1200000000000000000000",
  "a5ab4bd3588f46cb272e56e93deed386ba8b753d": "1332989000000000000000",
  "1788da9b57fd05edc4ff99e7fef301519c8a0a1e": "2000000000000000000000",
  "17b2d6cf65c6f4a347ddc6572655354d8a412b29": "2000000000000000000000",
  "d0319139fbab2e8e2accc1d924d4b11df6696c5a": "200000000000000000000",
  "4c377bb03ab52c4cb79befa1dd114982924c4ae9": "1827814000000000000000",
  "fb949c647fdcfd2514c7d58e31f28a532d8c5833": "20000000000000000000000",
  "70e5e9da735ff077249dcb9aaf3db2a48d9498c0": "1000000000000000000000",
  "fe6f5f42b6193b1ad16206e4afb5239d4d7db45e": "1730000000000000000000",
  "bda4be317e7e4bed84c0495eee32d607ec38ca52": "2309457000000000000000",
  "5910106debd291a1cd80b0fbbb8d8d9e93a7cc1e": "2000000000000000000000",
  "ba42f9aace4c184504abf5425762aca26f71fbdc": "37400000000000000000",
  "beb4fd315559436045dcb99d49dcec03f40c42dc": "2000000000000000000000",
  "452b64db8ef7d6df87c788639c2290be8482d575": "8000000000000000000000",
  "66e09427c1e63deed7e12b8c55a6a19320ef4b6a": "170000000000000000000",
  "faad905d847c7b23418aeecbe3addb8dd3f8924a": "1970000000000000000000",
  "a29319e81069e5d60df00f3de5adee3505ecd5fb": "2000000000000000000000",
  "cf348f2fe47b7e413c077a7baf3a75fbf8428692": "2000000000000000000000",
  "e1e8c50b80a352b240ce7342bbfdf5690cc8cb14": "394000000000000000000",
  "131c792c197d18bd045d7024937c1f84b60f4438": "4000000000000000000000",
  "e49af4f34adaa2330b0e49dc74ec18ab2f92f827": "2000000000000000000000",
  "f2e99f5cbb836b7ad36247571a302cbe4b481c69": "1970000000000000000000",
  "c93fbde8d46d2bcc0fa9b33bd8ba7f8042125565": "1400000000000000000000",
  "038779ca2dbe663e63db3fe75683ea0ec62e2383": "1670000000000000000000",
  "a33cb450f95bb46e25afb50fe05feee6fb8cc8ea": "776000000000000000000",
  "40ab66fe213ea56c3afb12c75be33f8e32fd085d": "4000000000000000000000",
  "6403d062549690c8e8b63eae41d6c109476e2588": "2000000000000000000000",
  "bfb0ea02feb61dec9e22a5070959330299c43072": "20000000000000000000000",
  "99c475bf02e8b9214ada5fad02fdfd15ba365c0c": "591000000000000000000",
  "904966cc2213b5b8cb5bd6089ef9cddbef7edfcc": "2000000000000000000000",
  "767a03655af360841e810d83f5e61fb40f4cd113": "985000000000000000000",
  "ab209fdca979d0a647010af9a8b52fc7d20d8cd1": "9129000000000000000000",
  "6294eae6e420a3d5600a39c4141f838ff8e7cc48": "2955000000000000000000",
  "9777cc61cf756be3b3c20cd4491c69d275e7a120": "10000000000000000000000",
  "bcbf6ba166e2340db052ea23d28029b0de6aa380": "3880000000000000000000",
  "9f10f2a0463b65ae30b070b3df18cf46f51e89bd": "1910000000000000000000",
  "8d9952d0bb4ebfa0efd01a3aa9e8e87f0525742e": "3460000000000000000000",
  "4f23b6b817ffa5c664acdad79bb7b726d30af0f9": "1760000000000000000000",
  "b4c20040ccd9a1a3283da4d4a2f365820843d7e2": "1000000000000000000000",
  "7f49e7a4269882bd8722d4a6f566347629624079": "2000000000000000000000",
  "33629bd52f0e107bc071176c64df108f64777d49": "33425000000000000000",
  "6a7b2e0d88867ff15d207c222bebf94fa6ce8397": "60000000000000000000000",
  "b7ce684b09abda53389a875369f71958aeac3bdd": "2000000000000000000000",
  "ffbc3da0381ec339c1c049eb1ed9ee34fdcea6ca": "4000000000000000000000",
  "849ab80790b28ff1ffd6ba394efc7463105c36f7": "34600000000000000000",
  "b0b36af9aeeedf97b6b02280f114f13984ea3260": "985000000000000000000",
  "4d57e716876c0c95ef5eaebd35c8f41b069b6bfe": "2000000000000000000000",
  "2d2b032359b363964fc11a518263bfd05431e867": "149600000000000000000",
  "2ccc1f1cb5f4a8002e186b20885d9dbc030c0894": "2000000000000000000000",
  "016c85e1613b900fa357b8283b120e65aefcdd08": "799954000000000000000",
  "710b0274d712c77e08a5707d6f3e70c0ce3d92cf": "6400000000000000000000",
  "3cd3a6e93579c56d494171fc533e7a90e6f59464": "2000000000000000000000",
  "fe0e30e214290d743dd30eb082f1f0a5225ade61": "200000000000000000000",
  "d0718520eae0a4d62d70de1be0ca431c5eea2482": "2000000000000000000000",
  "af7f79cb415a1fb8dbbd094607ee8d41fb7c5a3b": "10000000000000000000000",
  "b7d252ee9402b0eef144295f0e69f0db586c0871": "660000000000000000000",
  "c3b928a76fad6578f04f0555e63952cd21d1520a": "2000000000000000000000",
  "a7a517d7ad35820b09d497fa7e5540cde9495853": "2000000000000000000000",
  "e6e886317b6a66a5b4f81bf164c538c264351765": "2000000000000000000000",
  "0770b43dbae4b1f35a927b4fa8124d3866caf97b": "1016390000000000000000",
  "52b4257cf41b6e28878d50d57b99914ffa89873a": "3930150000000000000000",
  "e08bc29c2b48b169ff2bdc16714c586e6cb85ccf": "20000000000000000000",
  "2372c4c1c9939f7aaf6cfac04090f00474840a09": "10000000000000000000000",
  "ab6b65eab8dfc917ec0251b9db0ecfa0fa032849": "500000000000000000000",
  "582e7cc46f1d7b4e6e9d95868bfd370573178f4c": "2000000000000000000000",
  "f167f5868dcf4233a7830609682caf2df4b1b807": "2396150000000000000000",
  "ec82f50d06475f684df1b392e00da341aa145444": "2000000000000000000000",
  "0968ee5a378f8cadb3bafdbed1d19aaacf936711": "1000000000000000000000",
  "a86613e6c4a4c9c55f5c10bcda32175dcbb4af60": "10696140000000000000000",
  "a5cd123992194b34c4781314303b03c54948f4b9": "2010462000000000000000",
  "52f058d46147e9006d29bf2c09304ad1cddd6e15": "1500000000000000000000",
  "160226efe7b53a8af462d117a0108089bdecc2d1": "200550000000000000000",
  "256292a191bdda34c4da6b6bd69147bf75e2a9ab": "14051000000000000000",
  "1b8aa0160cd79f005f88510a714913d70ad3be33": "201760000000000000000",
  "d4b2ff3bae1993ffea4d3b180231da439f7502a2": "2000000000000000000000",
  "e408aa99835307eea4a6c5eb801fe694117f707d": "500000000000000000000",
  "e60a55f2df996dc3aedb696c08dde039b2641de8": "2000000000000000000000",
  "73df3c3e7955f4f2d859831be38000b1076b3884": "1970000000000000000000",
  "6228ade95e8bb17d1ae23bfb0518414d497e0eb8": "400000000000000000000",
  "0f46c81db780c1674ac73d314f06539ee56ebc83": "9850000000000000000000",
  "762d6f30dab99135e4eca51d5243d6c8621102d5": "282000000000000000000",
  "4ba0d9e89601772b496847a2bb4340186787d265": "1000000000000000000000",
  "ca747576446a4c8f30b08340fee198de63ec92cf": "7020000000000000000000",
  "99c31fe748583787cdd3e525b281b218961739e3": "1015200000000000000000",
  "1210f80bdb826c175462ab0716e69e46c24ad076": "100000000000000000000",
  "3f75ae61cc1d8042653b5baec4443e051c5e7abd": "95500000000000000000",
  "5c4892907a0720df6fd3413e63ff767d6b398023": "13189467000000000000000",
  "17f14632a7e2820be6e8f6df823558283dadab2d": "2000000000000000000000",
  "1dc7f7dad85df53f1271152403f4e1e4fdb3afa0": "200000000000000000000",
  "5a30feac37ac9f72d7b4af0f2bc73952c74fd5c3": "2000000000000000000000",
  "136d4b662bbd1080cfe4445b0fa213864435b7f1": "4000000000000000000000",
  "c1ec81dd123d4b7c2dd9b4d438a7072c11dc874c": "2000000000000000000000",
  "09f9575be57d004793c7a4eb84b71587f97cbb6a": "200000000000000000000",
  "2c4b470307a059854055d91ec3794d80b53d0f4a": "20000000000000000000000",
  "6af6c7ee99df271ba15bf384c0b764adcb4da182": "999972000000000000000",
  "0dae3ee5b915b36487f9161f19846d101433318a": "1910000000000000000000",
  "0dcf9d8c9804459f647c14138ed50fad563b4154": "173000000000000000000",
  "bfa8c858df102cb12421008b0a31c4c7190ad560": "200000000000000000000",
  "c2fd0bf7c725ef3e047e5ae1c29fe18f12a7299c": "1337000000000000000000",
  "d70a612bd6dda9eab0dddcff4aaf4122d38feae4": "540000000000000000000",
  "e07137ae0d116d033533c4eab496f8a9fb09569c": "1400000000000000000000",
  "7f49f20726471ac1c7a83ef106e9775ceb662566": "5910000000000000000000",
  "1e706655e284dcf0bb37fe075d613a18dc12ff4a": "4376760000000000000000",
  "03af7ad9d5223cf7c8c13f20df67ebe5ffc5bb41": "200000000000000000000",
  "228242f8336eecd8242e1f000f41937e71dffbbf": "5000000000000000000000",
  "e8ed51bbb3ace69e06024b33f86844c47348db9e": "165170600000000000000000",
  "3b566a8afad19682dc2ce8679a3ce444a5b0fd4f": "2000000000000000000000",
  "dc738fb217cead2f69594c08170de1af10c419e3": "100000000000000000000000",
  "13032446e7d610aa00ec8c56c9b574d36ca1c016": "2000000000000000000000",
  "6ca6a132ce1cd288bee30ec7cfeffb85c1f50a54": "2000000000000000000000",
  "b85f26dd0e72d9c29ebaf697a8af77472c2b58b5": "11900000000000000000000",
  "055bd02caf19d6202bbcdc836d187bd1c01cf261": "100000000000000000000",
  "3c322e611fdb820d47c6f8fc64b6fad74ca95f5e": "242514000000000000000",
  "8daddf52efbd74da95b969a5476f4fbbb563bfd2": "835000000000000000000",
  "c63ac417992e9f9b60386ed953e6d7dff2b090e8": "4000086000000000000000",
  "27f03cf1abc5e1b51dbc444b289e542c9ddfb0e6": "5000000000000000000000",
  "d8f4bae6f84d910d6d7d5ac914b1e68372f94135": "100000000000000000000",
  "9f83a293c324d4106c18faa8888f64d299054ca0": "200000000000000000000",
  "39ee4fe00fbced647068d4f57c01cb22a80bccd1": "6000000000000000000000",
  "404100db4c5d0eec557823b58343758bcc2c8083": "20000000000000000000",
  "02751dc68cb5bd737027abf7ddb77390cd77c16b": "20000000000000000000",
  "d10302faa1929a326904d376bf0b8dc93ad04c4c": "1790000000000000000000",
  "cc419fd9912b85135659e77a93bc3df182d45115": "10000000000000000000000",
  "10097198b4e7ee91ff82cc2f3bd95fed73c540c0": "2000000000000000000000",
  "7e24d9e22ce1da3ce19f219ccee523376873f367": "5900150000000000000000",
  "2e4ee1ae996aa0a1d92428d06652a6bea6d2d15d": "2000000000000000000000",
  "91a4149a2c7b1b3a67ea28aff34725e0bf8d7524": "1940000000000000000000",
  "ead65262ed5d122df2b2751410f98c32d1238f51": "101680000000000000000",
  "e20954d0f4108c82d4dcb2148d26bbd924f6dd24": "10000000000000000000000",
  "ebb7d2e11bc6b58f0a8d45c2f6de3010570ac891": "26740000000000000000",
  "ef115252b1b845cd857f002d630f1b6fa37a4e50": "1970000000000000000000",
  "01a818135a414210c37c62b625aca1a54611ac36": "260000000000000000000",
  "ea1ea0c599afb9cd36caacbbb52b5bbb97597377": "1069600000000000000000",
  "7a7a4f807357a4bbe68e1aa806393210c411ccb3": "30000000000000000000000",
  "6d40ca27826d97731b3e86effcd7b92a4161fe89": "2000000000000000000000",
  "8431277d7bdd10457dc017408c8dbbbd414a8df3": "39400000000000000000",
  "69b81d5981141ec7a7141060dfcf8f3599ffc63e": "5000000000000000000000",
  "47688410ff25d654d72eb2bc06e4ad24f833b094": "160440000000000000000",
  "6c101205b323d77544d6dc52af37aca3cec6f7f1": "10000000000000000000000",
  "fb685c15e439965ef626bf0d834cd1a89f2b5695": "3940000000000000000000",
  "673706b1b0e4dc7a949a7a796258a5b83bb5aa83": "16100000000000000000000",
  "ecdaf93229b45ee672f65db506fb5eca00f7fce6": "1605009000000000000000",
  "ec6904bae1f69790591709b0609783733f2573e3": "500000000000000000000",
  "812ea7a3b2c86eed32ff4f2c73514cc63bacfbce": "1000000000000000000000",
  "196c02210a450ab0b36370655f717aa87bd1c004": "259456000000000000000",
  "d96ac2507409c7a383ab2eee1822a5d738b36b56": "200000000000000000000",
  "ae2f9c19ac76136594432393b0471d08902164d3": "698600000000000000000",
  "9d32962ea99700d93228e9dbdad2cc37bb99f07e": "3327560000000000000000",
  "17e584e810e567702c61d55d434b34cdb5ee30f6": "5000000000000000000000",
  "a3a93ef9dbea2636263d06d8492f6a41de907c22": "60000000000000000000",
  "2b5016e2457387956562587115aa8759d8695fdf": "200000000000000000000000",
  "140129eaa766b5a29f5b3af2574e4409f8f6d3f1": "6400000000000000000000",
  "7025965d2b88da197d4459be3dc9386344cc1f31": "2005500000000000000000",
  "388bdcdae794fc44082e667501344118ea96cd96": "1670000000000000000000",
  "eee9d0526eda01e43116a395322dda8970578f39": "9999980000000000000000",
  "6ec89b39f9f5276a553e8da30e6ec17aa47eefc7": "447500000000000000000",
  "7e236666b2d06e63ea4e2ab84357e2dfc977e50e": "999972000000000000000",
  "68df947c495bebaeb8e889b3f953d533874bf106": "546000000000000000000",
  "d40ed66ab3ceff24ca05ecd471efb492c15f5ffa": "500000000000000000000",
  "f0c70d0d6dab7663aa9ed9ceea567ee2c6b02765": "2089349000000000000000",
  "b589676d15a04448344230d4ff27c95edf122c49": "1000000000000000000000",
  "a0347f0a98776390165c166d32963bf74dcd0a2f": "1000000000000000000000",
  "d47d8685faee147c520fd986709175bf2f886bef": "2000000000000000000000",
  "a1dcd0e5b05a977c9623e5ae2f59b9ada2f33e31": "100000000000000000000",
  "4979194ec9e97db9bee8343b7c77d9d7f3f1dc9f": "20000000000000000000",
  "7cd20eccb518b60cab095b720f571570caaa447e": "500000000000000000000",
  "2ff830cf55fb00d5a0e03514fecd44314bd6d9f1": "10000000000000000000000",
  "0bb25ca7d188e71e4d693d7b170717d6f8f0a70a": "336870000000000000000",
  "e9a2b4914e8553bf0d7c00ca532369b879f931bf": "2000000000000000000000",
  "720e6b22bf430966fa32b6acb9a506eebf662c61": "152000000000000000000",
  "7ade5d66b944bb860c0efdc86276d58f4653f711": "2000000000000000000000",
  "2eaff9f8f8113064d3957ac6d6e11eee42c8195d": "1970000000000000000000",
  "0c8fd7775e54a6d9c9a3bf890e761f6577693ff0": "9850000000000000000000",
  "290a56d41f6e9efbdcea0342e0b7929a8cdfcb05": "344000000000000000000",
  "d73ed2d985b5f21b55b274643bc6da031d8edd8d": "49250000000000000000000",
  "80156d10efa8b230c99410630d37e269d4093cea": "2000000000000000000000",
  "0989c200440b878991b69d6095dfe69e33a22e70": "1910000000000000000000",
  "ec8014efc7cbe5b0ce50f3562cf4e67f8593cd32": "17300000000000000000",
  "de612d0724e84ea4a7feaa3d2142bd5ee82d3201": "20000000000000000000",
  "0f832a93df9d7f74cd0fb8546b7198bf5377d925": "143000000000000000000",
  "aa2c670096d3f939305325427eb955a8a60db3c5": "2003010000000000000000",
  "25287b815f5c82380a73b0b13fbaf982be24c4d3": "40000000000000000000",
  "e75c3b38a58a3f33d55690a5a59766be185e0284": "500000000000000000000",
  "1940dc9364a852165f47414e27f5002445a4f143": "10850000000000000000000",
  "e5b826196c0e1bc1119b021cf6d259a610c99670": "200000000000000000000",
  "82a15cef1d6c8260eaf159ea3f0180d8677dce1c": "2000000000000000000000",
  "da06044e293c652c467fe74146bf185b21338a1c": "1000000000000000000000",
  "f815c10a032d13c34b8976fa6e3bd2c9131a8ba9": "1337000000000000000000",
  "cd95fa423d6fc120274aacde19f4eeb766f10420": "200000000000000000000",
  "e3a4f83c39f85af9c8b1b312bfe5fc3423afa634": "28650000000000000000",
  "768ce0daa029b7ded022e5fc574d11cde3ecb517": "322000000000000000000",
  "e3ec18a74ed43855409a26ade7830de8e42685ef": "19700000000000000000",
  "b2bdbedf95908476d7148a370cc693743628057f": "4000000000000000000000",
  "bbb8ffe43f98de8eae184623ae5264e424d0b8d7": "107600000000000000000",
  "090cebef292c3eb081a05fd8aaf7d39bf07b89d4": "4000000000000000000000",
  "dd2a233adede66fe1126d6c16823b62a021feddb": "2000000000000000000000",
  "d8cd64e0284eec53aa4639afc4750810b97fab56": "20000000000000000000",
  "e5953fea497104ef9ad2d4e5841c271f073519c2": "704000000000000000000",
  "967d4142af770515dd7062af93498dbfdff29f20": "20200000000000000000",
  "fd191a35157d781373fb411bf9f25290047c5eef": "1000000000000000000000",
  "8967d7b9bdb7b4aed22e65a15dc803cb7a213f10": "400000000000000000000",
  "51e43fe0d25c782860af81ea89dd793c13f0cbb1": "60000000000000000000",
  "a38476691d34942eea6b2f76889223047db4617a": "2000000000000000000000",
  "1321ccf29739b974e5a516f18f3a843671e39642": "4000000000000000000000",
  "4d71a6eb3d7f327e1834278e280b039eddd31c2f": "6000000000000000000000",
  "dc2d15a69f6bb33b246aef40450751c2f6756ad2": "1996000000000000000000",
  "ec89f2b678a1a15b9134ec5eb70c6a62071fbaf9": "200000000000000000000",
  "27bf943c1633fe32f8bcccdb6302b407a5724e44": "940229000000000000000",
  "d0a6c6f9e9c4b383d716b31de78d56414de8fa91": "300000000000000000000",
  "7b6175ec9befc738249535ddde34688cd36edf25": "10000000000000000000000",
  "41ce79950935cff55bf78e4ccec2fe631785db95": "2000000000000000000000",
  "5598b3a79a48f32b1f5fc915b87b645d805d1afe": "500000000000000000000",
  "5c4881165cb42bb82e97396c8ef44adbf173fb99": "110600000000000000000",
  "25b0533b81d02a617b9229c7ec5d6f2f672e5b5a": "1000000000000000000000",
  "015f097d9acddcddafaf2a107eb93a40fc94b04c": "20000000000000000000000",
  "b84b53d0bb125656cddc52eb852ab71d7259f3d5": "16000000000000000000000",
  "1a79c7f4039c67a39d7513884cdc0e2c34222490": "20000000000000000000",
  "926209b7fda54e8ddb9d9e4d3d19ebdc8e88c29f": "2000000000000000000000",
  "c2fe7d75731f636dcd09dbda0671393ba0c82a7d": "2200000000000000000000",
  "30248d58e414b20fed3a6c482b59d9d8f5a4b7e2": "60000000000000000000",
  "d0e194f34b1db609288509ccd2e73b6131a2538b": "999972000000000000000",
  "e8f29969e75c65e01ce3d86154207d0a9e7c76f2": "2991807000000000000000",
  "cb93199b9c90bc4915bd859e3d42866dc8c18749": "231800000000000000000",
  "e6fe0afb9dcedd37b2e22c451ba6feab67348033": "10000000000000000000000",
  "82f854c9c2f087dffa985ac8201e626ca5467686": "100000000000000000000000",
  "63bb664f9117037628594da7e3c5089fd618b5b5": "20000000000000000000",
  "f8d17424c767bea31205739a2b57a7277214eebe": "42000000000000000000",
  "4ca8db4a5efefc80f4cd9bbcccb03265931332b6": "200000000000000000000",
  "c56e6b62ba6e40e52aab167d21df025d0055754b": "2000000000000000000000",
  "0d8c40a79e18994ff99ec251ee10d088c3912e80": "114600000000000000000",
  "40a331195b977325c2aa28fa2f42cb25ec3c253c": "2000000000000000000000",
  "a2c5854ff1599f98892c5725d262be1da98aadac": "314315000000000000000",
  "23ab09e73f87aa0f3be0139df0c8eb6be5634f95": "8000000000000000000000",
  "b8040536958d5998ce4bec0cfc9c2204989848e9": "24472420000000000000000",
  "42d6b263d9e9f4116c411424fc9955783c763030": "2000000000000000000000",
  "c496cbb0459a6a01600fc589a55a32b454217f9d": "274000000000000000000",
  "48302c311ef8e5dc664158dd583c81194d6e0d58": "3364760000000000000000",
  "d5b284040130abf7c1d163712371cc7e28ad66da": "1970000000000000000000",
  "d22f0ca4cd479e661775053bcc49e390f670dd8a": "1000000000000000000000",
  "e597f083a469c4591c3d2b1d2c772787befe27b2": "280000000000000000000",
  "668b6ba8ab08eace39c502ef672bd5ccb6a67a20": "31135320000000000000000",
  "a3bff1dfa9971668360c0d82828432e27bf54e67": "200000000000000000000",
  "ee655bb4ee0e8d5478526fb9f15e4064e09ff3dd": "200000000000000000000",
  "121f855b70149ac83473b9706fb44d47828b983b": "1400000000000000000000",
  "20a15256d50ce058bf0eac43aa533aa16ec9b380": "20000000000000000000",
  "69bcfc1d43b4ba19de7b274bdffb35139412d3d7": "985000000000000000000",
  "db288f80ffe232c2ba47cc94c763cf6fc9b82b0d": "85000000000000000000",
  "e1cb83ec5eb6f1eeb85e99b2fc63812fde957184": "20000000000000000000000",
  "a419a984142363267575566089340eea0ea20819": "1999944000000000000000",
  "8489f6ad1d9a94a297789156899db64154f1dbb5": "358849000000000000000",
  "d609bf4f146eea6b0dc8e06ddcf4448a1fccc9fa": "2000000000000000000000",
  "df1fa2e20e31985ebe2c0f0c93b54c0fb67a264b": "200000000000000000000",
  "efe8ff87fc260e0767638dd5d02fc4672e0ec06d": "2000000000000000000000",
  "eef1bbb1e5a83fde8248f88ee3018afa2d1332eb": "200000000000000000000",
  "4b3aab335ebbfaa870cc4d605e7d2e74c668369f": "60000000000000000000000",
  "8f4fb1aea7cd0f570ea5e61b40a4f4510b6264e4": "4000000000000000000000",
  "0b0b3862112aeec3a03492b1b05f440eca54256e": "4000000000000000000000",
  "dff4007931786593b229efe5959f3a4e219e51af": "4925000000000000000000",
  "fec14e5485de2b3eef5e74c46146db8e454e0335": "179000000000000000000",
  "ac21c1e5a3d7e0b50681679dd6c792dbca87decb": "100000000000000000000000",
  "796ebbf49b3e36d67694ad79f8ff36767ac6fab0": "60800000000000000000",
  "ae7739124ed153052503fc101410d1ffd8cd13b7": "999942000000000000000",
  "86026cad3fe4ea1ce7fca260d3d45eb09ea6a364": "200000000000000000000",
  "b2fc84a3e50a50af02f94da0383ed59f71ff01d7": "30000000000000000000000",
  "bbab000b0408ed015a37c04747bc461ab14e151b": "6000000000000000000000",
  "c4ff6fbb1f09bd9e102ba033d636ac1c4c0f5304": "1000000000000000000000",
  "cc606f511397a38fc7872bd3b0bd03c71bbd768b": "1000000000000000000000",
  "f346d7de92741c08fc58a64db55b062dde012d14": "295106000000000000000",
  "33f15223310d44de8b6636685f3a4c3d9c5655a5": "250500000000000000000",
  "3c860e2e663f46db53427b29fe3ea5e5bf62bbcc": "98500000000000000000",
  "acb94338554bc488cc88ae2d9d94080d6bdf8410": "1000000000000000000000",
  "9c5cc111092c122116f1a85f4ee31408741a7d2f": "492500000000000000000",
  "5f76f0a306269c78306b3d650dc3e9c37084db61": "2400000000000000000000",
  "2c0cc3f951482cc8a2925815684eb9f94e060200": "6000000000000000000000",
  "b74372dbfa181dc9242f39bf1d3731dffe2bdacf": "2000000000000000000000",
  "3bab4b01a7c84ba13feea9b0bb191b77a3aadca3": "200000000000000000000",
  "39aa05e56d7d32385421cf9336e90d3d15a9f859": "26000000000000000000",
  "4a52bad20357228faa1e996bed790c93674ba7d0": "1337000000000000000000",
  "ff128f4b355be1dc4a6f94fa510d7f15d53c2aff": "2720000000000000000000",
  "92793ac5b37268774a7130de2bbd330405661773": "40110000000000000000",
  "db19a3982230368f0177219cb10cb259cdb2257c": "2000000000000000000000",
  "8d1794da509cb297053661a14aa892333231e3c1": "199600000000000000000",
  "9b7c8810cc7cc89e804e6d3e38121850472877fe": "2000000000000000000000",
  "ed3cbc3782cebd67989b305c4133b2cde32211eb": "400000000000000000000",
  "8532490897bbb4ce8b7f6b837e4cba848fbe9976": "100000000000000000000",
  "c384ac6ee27c39e2f278c220bdfa5baed626d9d3": "600000000000000000000",
  "b1459285863ea2db3759e546ceb3fb3761f5909c": "1122309000000000000000",
  "634efc24371107b4cbf03f79a93dfd93e431d5fd": "1221341000000000000000",
  "ef9f59aeda418c1494682d941aab4924b5f4929a": "100000000000000000000000",
  "e7311c9533f0092c7248c9739b5b2c864a34b1ce": "2803436000000000000000",
  "e6e621eaab01f20ef0836b7cad47464cb5fd3c96": "316014000000000000000",
  "cd102cd6db3df14ad6af0f87c72479861bfc3d24": "2000000000000000000000",
  "005a9c03f69d17d66cbb8ad721008a9ebbb836fb": "2000000000000000000000",
  "a072cebe62a9e9f61cc3fbf88a9efbfe3e9a8d70": "400000000000000000000",
  "f2ab1161750244d0ecd048ee0d3e51abb143a2fd": "1235800000000000000000",
  "f686785b89720b61145fea80978d6acc8e0bc196": "4000000000000000000000",
  "0a2b4fc5d81ace67dc4bba03f7b455413d46fe3d": "197000000000000000000",
  "c32ec7e42ad16ce3e2555ad4c54306eda0b26758": "2000000000000000000000",
  "f3fa723552a5d0512e2b62f48dca7b2b8105305b": "137000000000000000000",
  "6dc3f92baa1d21dab7382b893261a0356fa7c187": "1730000000000000000000",
  "4627c606842671abde8295ee5dd94c7f549534f4": "286600000000000000000",
  "e39e46e15d22ce56e0c32f1877b7d1a264cf94f3": "20000000000000000000000",
  "d7d157e4c0a96437a6d285741dd23ec4361fa36b": "2000000000000000000000",
  "68f8f45155e98c5029a4ebc5b527a92e9fa83120": "4436101000000000000000",
  "9aba2b5e27ff78baaab5cdc988b7be855cebbdce": "9999000000000000000000",
  "66b39837cb3cac8a802afe3f12a258bbca62dacd": "400000000000000000000",
  "d39b7cbc94003fc948f0cde27b100db8ccd6e063": "400000000000000000000",
  "3db9ed7f024c7e26372feacf2b050803445e3810": "1285600000000000000000",
  "3fbc1e4518d73400c6d046359439fb68ea1a49f4": "16400000000000000000000",
  "e3da4f3240844c9b6323b4996921207122454399": "11539639000000000000000",
  "09afa73bc047ef46b977fd9763f87286a6be68c6": "501500000000000000000",
  "1dbe8e1c2b8a009f85f1ad3ce80d2e05350ee39c": "135400000000000000000",
  "2c5a2d0abda03bbe215781b4ff296c8c61bdbaf6": "30617000000000000000",
  "9a9d1dc0baa77d6e20c3d849c78862dd1c054c87": "880000000000000000000",
  "3ccef88679573947e94997798a1e327e08603a65": "807700000000000000000",
  "850b9db18ff84bf0c7da49ea3781d92090ad7e64": "2600000000000000000000",
  "361c75931696bc3d427d93e76c77fd13b241f6f4": "549212000000000000000",
  "c8f2b320e6dfd70906c597bad2f9501312c78259": "1504800000000000000000",
  "8dc1d5111d09af25fdfcac455c7cec283e6d6775": "2000000000000000000000",
  "cd7ece086b4b619b3b369352ee38b71ddb06439a": "200000000000000000000",
  "f607c2150d3e1b99f24fa1c7d540add35c4ebe1e": "3098020000000000000000",
  "32485c818728c197fea487fbb6e829159eba8370": "1053893000000000000000",
  "8e670815fb67aeaea57b86534edc00cdf564fee5": "3300000000000000000000",
  "10df681506e34930ac7a5c67a54c3e89ce92b981": "2153800000000000000000",
  "1cf2eb7a8ccac2adeaef0ee87347d535d3b94058": "2000000000000000000000",
  "f0dc43f205619127507b2b1c1cfdf32d28310920": "301973000000000000000",
  "f2c2904e9fa664a11ee25656d8fd2cc0d9a522a0": "13370000000000000000",
  "70670fbb05d33014444b8d1e8e7700258b8caa6d": "2000000000000000000000",
  "5160ed612e1b48e73f3fc15bc4321b8f23b8a24b": "562800000000000000000",
  "54a62bf9233e146ffec3876e45f20ee8414adeba": "10000000000000000000000",
  "26d4ec17d5ceb2c894bdc59d0a6a695dad2b43cc": "2935300000000000000000",
  "205fc843e19a4913d1881eb69b69c0fa3be5c50b": "9700000000000000000000",
  "e001aba77c02e172086c1950fffbcaa30b83488f": "1970000000000000000000",
  "21efbca09b3580b98e73f5b2f7f4dc0bf02c529c": "2000000000000000000000",
  "c4d916574e68c49f7ef9d3d82d1638b2b7ee0985": "1580000000000000000000",
  "cab0d32cf3767fa6b3537c84328baa9f50458136": "8960000000000000000000",
  "7ce4686446f1949ebed67215eb0d5a1dd72c11b8": "2217776000000000000000",
  "7837fcb876da00d1eb3b88feb3df3fa4042fac82": "1760000000000000000000",
  "71e38ff545f30fe14ca863d4f5297fd48c73a5ce": "3580000000000000000000",
  "e528a0e5a267d667e9393a6584e19b34dc9be973": "5600000000000000000000",
  "c5374928cdf193705443b14cc20da423473cd9cf": "138139000000000000000",
  "e406f5dd72cab66d8a6ecbd6bfb494a7b6b09afe": "100000000000000000000",
  "d7ef340e66b0d7afcce20a19cb7bfc81da33d94e": "3000000000000000000000",
  "e012db453827a58e16c1365608d36ed658720507": "2000000000000000000000",
  "d59638d3c5faa7711bf085745f9d5bdc23d498d8": "2000000000000000000000",
  "008fc7cbadffbd0d7fe44f8dfd60a79d721a1c9c": "1000000000000000000000",
  "8a3470282d5e2a2aefd7a75094c822c4f5aeef8a": "242743000000000000000",
  "38b3965c21fa893931079beacfffaf153678b6eb": "170374000000000000000",
  "57dd9471cbfa262709f5f486bcb774c5f527b8f8": "197000000000000000000",
  "5a60c924162873fc7ea4da7f972e350167376031": "83583000000000000000",
  "b9013c51bd078a098fae05bf2ace0849c6be17a5": "80000000000000000000",
  "dc23b260fcc26e7d10f4bd044af794579460d9da": "500038000000000000000",
  "45db03bccfd6a5f4d0266b82a22a368792c77d83": "8000000000000000000000",
  "3e0cbe6a6dcb61f110c45ba2aa361d7fcad3da73": "8022000000000000000000",
  "42d3a5a901f2f6bd9356f112a70180e5a1550b60": "925000000000000000000",
  "47219229e8cd56659a65c2a943e2dd9a8f4bfd89": "1520000000000000000000",
  "a20d071b1b003063497d7990e1249dabf36c35f7": "1000000000000000000000",
  "6835c8e8b74a2ca2ae3f4a8d0f6b954a3e2a8392": "60140000000000000000",
  "0c2d5c920538e953caaf24f0737f554cc6927742": "1000000000000000000000",
  "eedf6c4280e6eb05b934ace428e11d4231b5905b": "200000000000000000000",
  "ffa696ecbd787e66abae4fe87b635f07ca57d848": "1337000000000000000000",
  "3e81772175237eb4cbe0fe2dcafdadffeb6a1999": "8800000000000000000000",
  "b44783c8e57b480793cbd69a45d90c7b4f0c48ac": "20000000000000000000",
  "f84f090adf3f8db7e194b350fbb77500699f66fd": "1970000000000000000000",
  "2e9824b5c132111bca24ddfba7e575a5cd7296c1": "17201900000000000000000",
  "5cce72d068c7c3f55b1d2819545e77317cae8240": "1940000000000000000000",
  "d815e1d9f4e2b5e57e34826b7cfd8881b8546890": "17300000000000000000",
  "f901c00fc1db88b69c4bc3252b5ca70ea6ee5cf6": "400000000000000000000",
  "a960b1cadd3b5c1a8e6cb3abcaf52ee7c3d9fa88": "1522704000000000000000",
  "f7e45a12aa711c709acefe95f33b78612d2ad22a": "66230000000000000000000",
  "c332df50b13c013490a5d7c75dbfa366da87b6d6": "4000000000000000000000",
  "d467cf064c0871989b90d8b2eb14ccc63b360823": "200000000000000000000",
  "b9144b677c2dc614ceefdf50985f1183208ea64c": "2000000000000000000000",
  "ea7c4d6dc729cd6b157c03ad237ca19a209346c3": "2000000000000000000000",
  "9c9de44724a4054da0eaa605abcc802668778bea": "200020000000000000000",
  "d7140c8e5a4307fab0cc27badd9295018bf87970": "109600000000000000000",
  "c33acdb3ba1aab27507b86b15d67faf91ecf6293": "2000000000000000000000",
  "db2a0c9ab64df58ddfb1dbacf8ba0d89c85b31b4": "4000000000000000000000",
  "bfcb9730246304700da90b4153e71141622e1c41": "1000000000000000000000",
  "07dc8c8b927adbedfa8f5d639b4352351f2f36d2": "314382000000000000000",
  "2d5391e938b34858cf965b840531d5efda410b09": "1400000000000000000000",
  "0b5e2011ebc25a007f21362960498afb8af280fb": "2000000000000000000000",
  "ed9fb1f5af2fbf7ffc5029cee42b70ff5c275bf5": "280000000000000000000",
  "a3232d068d50064903c9ebc563b515acc8b7b097": "2002000000000000000000",
  "66274fea82cd30b6c29b23350e4f4f3d310a5899": "2070000000000000000000",
  "dbfb1bb464b8a58e500d2ed8de972c45f5f1c0fb": "1600000000000000000000",
  "a1f8d8bcf90e777f19b3a649759ad95027abdfc3": "200000000000000000000",
  "5bd23547477f6d09d7b2a005c5ee650c510c56d7": "10000000000000000000000",
  "ec3b8b58a12703e581ce5ffd7e21c57d1e5c663f": "1700000000000000000000",
  "54310b3aa88703a725dfa57de6e646935164802c": "1910000000000000000000",
  "8f41b1fbf54298f5d0bc2d122f4eb95da4e5cd3d": "354200000000000000000",
  "c80b36d1beafba5fcc644d60ac6e46ed2927e7dc": "13370000000000000000",
  "1ea492bce1ad107e337f4bd4a7ac9a7babcccdab": "100000000000000000000",
  "aaf023fef290a49bb78bb7abc95d669c50d528b0": "200000000000000000000",
  "80b79f338390d1ba1b3737a29a0257e5d91e0731": "20000000000000000000",
  "f382e4c20410b951089e19ba96a2fee3d91cce7e": "5054000000000000000000",
  "0748713145ef83c3f0ef4d31d823786f7e9cc689": "4500000000000000000000",
  "21e219c89ca8ac14ae4cba6130eeb77d9e6d3962": "789580000000000000000",
  "ca9a042a6a806ffc92179500d24429e8ab528117": "1100000000000000000000",
  "bcc9593b2da6df6a34d71b1aa38dacf876f95b88": "20000000000000000000",
  "d1438267231704fc7280d563adf4763844a80722": "200000000000000000000",
  "4989e1ab5e7cd00746b3938ef0f0d064a2025ba5": "2000000000000000000000",
  "bd4b60faec740a21e3071391f96aa534f7c1f44e": "182000000000000000000",
  "8c7cb4e48b25031aa1c4f92925d631a8c3edc761": "1000000000000000000000",
  "322788b5e29bf4f5f55ae1ddb32085fda91b8ebe": "200000000000000000000",
  "f15e182c4fbbad79bd93342242d4dccf2be58925": "1940000000000000000000",
  "1548b770a5118ede87dba2f690337f616de683ab": "527558000000000000000",
  "69c2d835f13ee90580408e6a3283c8cca6a434a2": "656000000000000000000",
  "a1e4380a3b1f749673e270229993ee55f35663b4": "2000000000000000000000",
  "c7675e5647b9d8daf4d3dff1e552f6b07154ac38": "180000000000000000000",
  "a02c1e34064f0475f7fa831ccb25014c3aa31ca2": "60000000000000000000",
  "517c75430de401c341032686112790f46d4d369e": "388000000000000000000",
  "29681d9912ddd07eaabb88d05d90f766e862417d": "1000000000000000000000",
  "544dda421dc1eb73bb24e3e56a248013b87c0f44": "1970000000000000000000",
  "2ab97e8d59eee648ab6caf8696f89937143864d6": "3820000000000000000000",
  "79c130c762b8765b19d2abc9a083ab8f3aad7940": "3940000000000000000000",
  "f9650d6989f199ab1cc479636ded30f241021f65": "850000000000000000000",
  "d1c96e70f05ae0e6cd6021b2083750a7717cde56": "500000000000000000000",
  "88106c27d20b74b4b98ca62b232bd5c97411171f": "197000000000000000000",
  "37ab66083a4fa23848b886f9e66d79cdc150cc70": "88510000000000000000000",
  "8e6156336be2cdbe32140df08a2ba55fd0a58463": "74480000000000000000",
  "2982d76a15f847dd41f1922af368fe678d0e681e": "100000000000000000000",
  "209e8e29d33beae8fb6baa783d133e1d9ec1bc0b": "835000000000000000000",
  "b325674c01e3f7290d5226339fbeac67d221279f": "2800000000000000000000",
  "f20c9a99b74759d782f25c1ceca802a27e0b436c": "1670000000000000000000",
  "61bf84d5ab026f58c873f86ff0dfca82b55733ae": "2000000000000000000000",
  "0734a0a81c9562f4d9e9e10a8503da15db46d76e": "18200000000000000000",
  "0521bc3a9f8711fecb10f50797d71083e341eb9d": "20000000000000000000",
  "3301d9ca2f3bfe026279cd6819f79a293d98156e": "50000000000000000000000",
  "549d51af29f724c967f59423b85b2681e7b15136": "3760000000000000000000",
  "2053ac97548a0c4e8b80bc72590cd6a098fe7516": "187000000000000000000",
  "aa321fdbd449180db8ddd34f0fe906ec18ee0914": "685000000000000000000",
  "697f55536bf85ada51841f0287623a9f0ed09a17": "10000000000000000000000",
  "df57353aaff2aadb0a04f9014e8da7884e86589c": "152800000000000000000",
  "6807ddc88db489b033e6b2f9a81553571ab3c805": "29944000000000000000",
  "90057af9aa66307ec9f033b29724d3b2f41eb6f9": "121930000000000000000000",
  "3ff836b6f57b901b440c30e4dbd065cf37d3d48c": "200000000000000000000",
  "91051764af6b808e4212c77e30a5572eaa317070": "1000000000000000000000",
  "7faa30c31519b584e97250ed2a3cf3385ed5fd50": "2000000000000000000000",
  "fb842ca2c5ef133917a236a0d4ac40690110b038": "306000000000000000000",
  "aa167026d39ab7a85635944ed9edb2bfeba11850": "8298000000000000000000",
  "57beea716cbd81700a73d67f9ff039529c2d9025": "200000000000000000000",
  "654b7e808799a83d7287c67706f2abf49a496404": "1970000000000000000000",
  "dde8f0c31b7415511dced1cd7d46323e4bd12232": "1610000000000000000000",
  "8667fa1155fed732cfb8dca5a0d765ce0d0705ed": "81770000000000000000",
  "905526568ac123afc0e84aa715124febe83dc87c": "17900000000000000000",
  "8e98766524b0cf2747c50dd43b9567594d9731de": "1997200000000000000000",
  "c6df2075ebd240d44869c2be6bdf82e63d4ef1f5": "20000000000000000000",
  "2ff5cab12c0d957fd333f382eeb75107a64cb8e8": "10000000000000000000000",
  "3055efd26029e0d11b930df4f53b162c8c3fd2ce": "499938000000000000000",
  "b2c53efa33fe4a3a1a80205c73ec3b1dbcad0602": "1918595000000000000000",
  "766b3759e8794e926dac473d913a8fb61ad0c2c9": "86500000000000000000",
  "882aa798bf41df179f85520130f15ccdf59b5e58": "2000000000000000000000",
  "80b23d380b825c46e0393899a85556462da0e18c": "2000000000000000000000",
  "51f4663ab44ff79345f427a0f6f8a6c8a53ff234": "20000000000000000000000",
  "8d5ef172bf77315ea64e85d0061986c794c6f519": "3940000000000000000000",
  "75ac547017134c04ae1e11d60e63ec04d18db4ef": "6000000000000000000000",
  "ce1b0cb46aaecfd79b880cad0f2dda8a8dedd0b1": "20000000000000000000",
  "21408b4d7a2c0e6eca4143f2cacdbbccba121bd8": "20000000000000000000000",
  "9c526a140683edf1431cfaa128a935e2b614d88b": "111000000000000000000",
  "599728a78618d1a17b9e34e0fed8e857d5c40622": "14000000000000000000000",
  "6ac4d4be2db0d99da3faaaf7525af282051d6a90": "80185000000000000000",
  "785c8ea774d73044a734fa790a1b1e743e77ed7c": "238750000000000000000",
  "ff2726294148b86c78a9372497e459898ed3fee3": "1970000000000000000000",
  "68a86c402388fddc59028fec7021e98cbf830eac": "19100000000000000000",
  "6121af398a5b2da69f65c6381aec88ce9cc6441f": "640000000000000000000",
  "5a6686b0f17e07edfc59b759c77d5bef164d3879": "1490000000000000000000",
  "a2d38de1c73906f6a7ca6efeb97cf6f69cc421be": "1000000000000000000000",
  "ae3f98a443efe00f3e711d525d9894dc9a61157b": "295500000000000000000",
  "5f1c8a04c90d735b8a152909aeae636fb0ce1665": "6999974000000000000000",
  "d687cec0059087fdc713d4d2d65e77daefedc15f": "60000000000000000000",
  "845203750f7148a9aa262921e86d43bf641974fd": "100000000000000000000",
  "64464a6805b462412a901d2db8174b06c22deea6": "475600000000000000000",
  "053471cd9a41925b3904a5a8ffca3659e034be23": "199600000000000000000",
  "911ff233e1a211c0172c92b46cf997030582c83a": "1970000000000000000000",
  "d930b27a78876485d0f48b70dd5336549679ca8f": "40000000000000000000",
  "6ba9b21b35106be159d1c1c2657ac56cd29ffd44": "4480000000000000000000",
  "ebac2b4408ef5431a13b8508e86250982114e145": "4000000000000000000000",
  "931df34d1225bcd4224e63680d5c4c09bce735a6": "68000000000000000000",
  "23eb6fd85671a9063ab7678ebe265a20f61a02b3": "2000000000000000000000",
  "b32af3d3e8d075344926546f2e32887bf93b16bd": "200000000000000000000",
  "8261fa230c901d43ff579f4780d399f31e6076bc": "2000000000000000000000",
  "84a74ceecff65cb93b2f949d773ef1ad7fb4a245": "92998000000000000000",
  "da982e9643ffece723075a40fe776e5ace04b29b": "160884000000000000000",
  "ba70e8b4759c0c3c82cc00ac4e9a94dd5bafb2b8": "890342000000000000000",
  "82f2e991fd324c5f5d17768e9f61335db6319d6c": "500000000000000000000",
  "3e84b35c5b2265507061d30b6f12da033fe6f8b9": "1790000000000000000000",
  "2895e80999d406ad592e2b262737d35f7db4b699": "1940000000000000000000",
  "65f534346d2ffb787fa9cf185d745ba42986bd6e": "500000000000000000000",
  "c7368b9709a5c1b51c0adf187a65df14e12b7dba": "9489681000000000000000",
  "ba176dbe3249e345cd4fa967c0ed13b24c47e586": "399990000000000000000",
  "cff6a6fe3e9a922a12f21faa038156918c4fcb9c": "78800000000000000000",
  "bcbd31252ec288f91e298cd812c92160e738331a": "1975802000000000000000",
  "5543dd6d169eec8a213bbf7a8af9ffd15d4ff759": "18200000000000000000",
  "b65bd780c7434115162027565223f44e5498ff8c": "19999800000000000000000",
  "4cadf573ce4ceec78b8e1b21b0ed78eb113b2c0e": "2000000000000000000000",
  "04aafc8ae5ce6f4903c89d7fac9cb19512224777": "500000000000000000000",
  "fdc4d4765a942f5bf96931a9e8cc7ab8b757ff4c": "87000000000000000000000",
  "38c7851f5ffd4cee98df30f3b25597af8a6ca263": "2631920000000000000000",
  "0e320219838e859b2f9f18b72e3d4073ca50b37d": "2000000000000000000000",
  "bbbf39b1b67995a42241504f9703d2a14a515696": "1580000000000000000000",
  "5b800bfd1b3ed4a57d875aed26d42f1a7708d72a": "6392000000000000000000",
  "5b85e60e2af0544f2f01c64e2032900ebd38a3c7": "2000000000000000000000",
  "c9ac01c3fb0929033f0ccc7e1acfeaaba7945d47": "12459235000000000000000",
  "f355d3ec0cfb907d8dbb1bf3464e458128190bac": "4925600000000000000000",
  "69c08d744754de709ce96e15ae0d1d395b3a2263": "1000000000000000000000",
  "cef77451dfa2c643e00b156d6c6ff84e2373eb66": "188000000000000000000",
  "f3034367f87d24d3077fa9a2e38a8b0ccb1104ef": "1000000000000000000000",
  "73473e72115110d0c3f11708f86e77be2bb0983c": "20000000000000000000",
  "761e6caec189c230a162ec006530193e67cf9d19": "2000000000000000000000",
  "e9caf827be9d607915b365c83f0d3b7ea8c79b50": "3000000000000000000000",
  "eda4b2fa59d684b27a810df8978a73df308a63c2": "4000000000000000000000",
  "065ff575fd9c16d3cb6fd68ffc8f483fc32ec835": "200000000000000000000",
  "a72ee666c4b35e82a506808b443cebd5c632c7dd": "800000000000000000000",
  "5b30608c678e1ac464a8994c3b33e5cdf3497112": "400000000000000000000",
  "b0c7ce4c0dc3c2bbb99cc1857b8a455f611711ce": "4000000000000000000000",
  "d7274d50804d9c77da93fa480156efe57ba501de": "1940000000000000000000",
  "a609c26dd350c235e44b2b9c1dddccd0a9d9f837": "1000000000000000000000",
  "bddfa34d0ebf1b04af53b99b82494a9e3d8aa100": "12000000000000000000000",
  "fd40242bb34a70855ef0fd90f3802dec2136b327": "1930600000000000000000",
  "58aed6674affd9f64233272a578dd9386b99c263": "3400000000000000000000",
  "24434a3e32e54ecf272fe3470b5f6f512f675520": "5910000000000000000000",
  "a379a5070c503d2fac89b8b3afa080fd45ed4bec": "19700000000000000000000",
  "37e169a93808d8035698f815c7235613c1e659f2": "1000000000000000000000",
  "849b116f596301c5d8bb62e0e97a8248126e39f3": "300000000000000000000",
  "fe7011b698bf3371132d7445b19eb5b094356aee": "2000000000000000000000",
  "f16de1891d8196461395f9b136265b3b9546f6ef": "31313000000000000000",
  "6c6564e5c9c24eaaa744c9c7c968c9e2c9f1fbae": "1357800000000000000000",
  "8bb0212f3295e029cab1d961b04133a1809e7b91": "2000000000000000000000",
  "408a69a40715e1b313e1354e600800a1e6dc02a5": "35144000000000000000",
  "ddf0cce1fe996d917635f00712f4052091dff9ea": "2000000000000000000000",
  "50fef296955588caae74c62ec32a23a454e09ab8": "1201200000000000000000",
  "d913f0771949753c4726acaa2bd3619c5c20ff77": "3000000000000000000000",
  "9d6ecfa03af2c6e144b7c4692a86951e902e9e1f": "3000310000000000000000",
  "ecbe5e1c9ad2b1dccf0a305fc9522f4669dd3ae7": "5000000000000000000000",
  "33e9b71823952e1f66958c278fc28b1196a6c5a4": "100000000000000000000",
  "9de20bc37e7f48a80ffd7ad84ffbf1a1abe1738c": "200000000000000000000",
  "16f313cf8ad000914a0a176dc6a4342b79ec2538": "2000000000000000000000",
  "991ac7ca7097115f26205eee0ef7d41eb4e311ae": "20000000000000000000",
  "ddfafdbc7c90f1320e54b98f374617fbd01d109f": "13370000000000000000",
  "26b11d066588ce74a572a85a6328739212aa8b40": "2000000000000000000000",
  "ef2c34bb487d3762c3cca782ccdd7a8fbb0a9931": "180000000000000000000",
  "a9be88ad1e518b0bbb024ab1d8f0e73f790e0c76": "2800000000000000000000",
  "4a7494cce44855cc80582842be958a0d1c0072ee": "2400000000000000000000",
  "23569542c97d566018c907acfcf391d14067e87e": "2000000000000000000000",
  "d252960b0bf6b2848fdead80136db5f507f8be02": "2000000000000000000000",
  "2c0f5b9df43625798e7e03c1a5fd6a6d091af82b": "31200000000000000000",
  "a7c9d388ebd873e66b1713448397d0f37f8bd3a8": "5000000000000000000000",
  "3259bd2fddfbbc6fbad3b6e874f0bbc02cda18b5": "11886645000000000000000",
  "f287ff52f461117adb3e1daa71932d1493c65f2e": "3640000000000000000000",
  "c852428d2b586497acd30c56aa13fb5582f84402": "945600000000000000000",
  "296f00de1dc3bb01d47a8ccd1e5d1dd9a1eb7791": "1000000000000000000000",
  "817493cd9bc623702a24a56f9f82e3fd48f3cd31": "2920000000000000000000",
  "7adfedb06d91f3cc7390450b85550270883c7bb7": "322312000000000000000",
  "8d544c32c07fd0842c761d53a897d6c950bb7599": "200000000000000000000",
  "86297d730fe0f7a9ee24e08fb1087b31adb306a7": "2000000000000000000000",
  "f64fe0939a8d1eea2a0ecd9a9730fd7958e33109": "20600000000000000000",
  "b06eab09a610c6a53d56a946b2c43487ac1d5b2d": "1000000000000000000000",
  "bae9b82f7299631408659dd74e891cb8f3860fe5": "1970000000000000000000",
  "0eda80f4ed074aea697aeddf283b63dbca3dc4da": "2000000000000000000000",
  "ea686c5057093c171c66db99e01b0ececb308683": "384907000000000000000",
  "425725c0f08f0811f5f006eec91c5c5c126b12ae": "150000000000000000000",
  "b18e67a5050a1dc9fb190919a33da838ef445014": "20000000000000000000",
  "8dd484ff8a307364eb66c525a571aac701c5c318": "4000000000000000000000",
  "6671b182c9f741a0cd3c356c73c23126d4f9e6f4": "200000000000000000000",
  "ba0249e01d945bef93ee5ec61925e03c5ca509fd": "4000000000000000000000",
  "b2968f7d35f208871631c6687b3f3daeabc6616c": "156060000000000000000",
  "a6f62b8a3d7f11220701ab9ffffcb327959a2785": "506000000000000000000",
  "c885a18aabf4541b7b7b7ecd30f6fae6869d9569": "2000000000000000000000",
  "33fb577a4d214fe010d32cca7c3eeda63f87ceef": "1000000000000000000000",
  "be86d0b0438419ceb1a038319237ba5206d72e46": "999942000000000000000",
  "466292f0e80d43a78774277590a9eb45961214f4": "970000000000000000000",
  "b33c0323fbf9c26c1d8ac44ef74391d0804696da": "20000000000000000000",
  "f7bc4c44910d5aedd66ed2355538a6b193c361ec": "96980000000000000000",
  "d0f04f52109aebec9a7b1e9332761e9fe2b97bb5": "4000000000000000000000",
  "cb4a914d2bb029f32e5fef5c234c4fec2d2dd577": "1800000000000000000000",
  "2e619f57abc1e987aa936ae3a2264962e7eb2d9a": "756000000000000000000",
  "166bf6dab22d841b486c38e7ba6ab33a1487ed8c": "20000000000000000000000",
  "c3a046e3d2b2bf681488826e32d9c061518cfe8c": "2600000000000000000000",
  "d082275f745a2cac0276fbdb02d4b2a3ab1711fe": "30000000000000000000",
  "a701df79f594901afe1444485e6b20c3bda2b9b3": "1000000000000000000000",
  "dec3eec2640a752c466e2b7e7ee685afe9ac41f4": "1324245000000000000000",
  "8134dd1c9df0d6c8a5812426bb55c761ca831f08": "122360000000000000000",
  "bfc57aa666fae28e9f107a49cb5089a4e22151dd": "1000000000000000000000",
  "c3c2297329a6fd99117e54fc6af379b4d556547e": "6000000000000000000000",
  "40585200683a403901372912a89834aadcb55fdb": "2000000000000000000000",
  "cd49bf185e70d04507999f92a4de4455312827d0": "1000000000000000000000",
  "9c6bc9a46b03ae5404f043dfcf21883e4110cc33": "200000000000000000000",
  "1f49b86d0d3945590698a6aaf1673c37755ca80d": "700000000000000000000",
  "efeb1997aad277cc33430e6111ed0943594048b8": "2000000000000000000000",
  "7c0883054c2d02bc7a852b1f86c42777d0d5c856": "500000000000000000000",
  "ff49a775814ec00051a795a875de24592ea400d4": "200000000000000000000000",
  "f039683d7b3d225bc7d8dfadef63163441be41e2": "34380000000000000000",
  "a3ba0d3a3617b1e31b4e422ce269e873828d5d69": "850000000000000000000",
  "d116f3dcd5db744bd008887687aa0ec9fd7292aa": "1000000000000000000000",
  "5719f49b720da68856f4b9e708f25645bdbc4b41": "640000000000000000000",
  "870796abc0db84af82da52a0ed68734de7e636f5": "300000000000000000000",
  "68b6854788a7c6496cdbf5f84b9ec5ef392b78bb": "19700000000000000000000",
  "8c2fbeee8eacc5c5d77c16abd462ee9c8145f34b": "1940000000000000000000",
  "421684baa9c0b4b5f55338e6f6e7c8e146d41cb7": "1500000000000000000000",
  "dd26b429fd43d84ec179825324bad5bfb916b360": "5142000000000000000000",
  "3821862493242c0aeb84b90de05d250c1e50c074": "322200000000000000000",
  "68a7425fe09eb28cf86eb1793e41b211e57bd68d": "668500000000000000000",
  "da875e4e2f3cabe4f37e0eaed7d1f6dcc6ffef43": "2000000000000000000000",
  "c2663f8145dbfec6c646fc5c49961345de1c9f11": "690000000000000000000",
  "e89c22f1a4e1d4746ecfaa59ed386fee12d51e37": "44932000000000000000",
  "eff86b5123bcdc17ed4ce8e05b7e12e51393a1f7": "500000000000000000000",
  "6c3d18704126aa99ee3342ce60f5d4c85f1867cd": "50000000000000000000",
  "b8d531a964bcea13829620c0ced72422dadb4cca": "169990000000000000000",
  "7c29d47d57a733f56b9b217063b513dc3b315923": "4000000000000000000000",
  "bc1e80c181616342ebb3fb3992072f1b28b802c6": "4000000000000000000000",
  "31313ffd635bf2f3324841a88c07ed146144ceeb": "1970000000000000000000",
  "cc4feb72df98ff35a138e01761d1203f9b7edf0a": "7000000000000000000000",
  "741693c30376508513082020cc2b63e9fa92131b": "1200000000000000000000",
  "aa3135cb54f102cbefe09e96103a1a796718ff54": "57800000000000000000",
  "ef61155ba009dcdebef10b28d9da3d1bc6c9ced4": "59100000000000000000",
  "b3c94811e7175b148b281c1a845bfc9bb6fbc115": "200000000000000000000",
  "96d9cca8f55eea0040ec6eb348a1774b95d93ef4": "4000000000000000000000",
  "ce62125adec3370ac52110953a4e760be9451e3b": "152000000000000000000",
  "aca1e6bc64cc3180f620e94dc5b1bcfd8158e45d": "2000000000000000000000",
  "bc237148d30c13836ffa2cad520ee4d2e5c4eeff": "1970000000000000000000",
  "0e024e7f029c6aaf3a8b910f5e080873b85795aa": "1000000000000000000000",
  "7283cd4675da58c496556151dafd80c7f995d318": "760000000000000000000",
  "39b299327490d72f9a9edff11b83afd0e9d3c450": "200000000000000000000",
  "5f333a3b2310765a0d1832b9be4c0a03704c1c09": "1000000000000000000000",
  "5aaf1c31254a6e005fba7f5ab0ec79d7fc2b630e": "5910000000000000000000",
  "833db42c14163c7be4cab86ac593e06266d699d5": "174212000000000000000000",
  "f32d25eb0ea2b8b3028a4c7a155dc1aae865784d": "5710684000000000000000",
  "1fa2319fed8c2d462adf2e17feec6a6f30516e95": "125300000000000000000",
  "c49cfaa967f3afbf55031061fc4cef88f85da584": "2000000000000000000000",
  "43db7ff95a086d28ebbfb82fb8fb5f230a5ebccd": "16100000000000000000",
  "cf3f9128b07203a3e10d7d5755c0c4abc6e2cac2": "5000000000000000000000",
  "8f4d1e7e4561284a34fef9673c0d34e12af4aa03": "2000000000000000000000",
  "934af21b7ebfa467e2ced65aa34edd3a0ec71332": "35420000000000000000000",
  "5d231a70c1dfeb360abd97f616e2d10d39f3cab5": "400000000000000000000",
  "2d5d7335acb0362b47dfa3a8a4d3f5949544d380": "200000000000000000000",
  "d1e1f2b9c16c309874dee7fac32675aff129c398": "72800000000000000000",
  "a43b6da6cb7aac571dff27f09d39f846f53769b1": "380000000000000000000",
  "779274bf1803a336e4d3b00ddd93f2d4f5f4a62e": "1000000000000000000000",
  "a644ed922cc237a3e5c4979a995477f36e50bc62": "583900000000000000000",
  "ee6c03429969ca1262cb3f0a4a54afa7d348d7f5": "256100000000000000000",
  "4f06246b8d4bd29661f43e93762201d286935ab1": "4818730000000000000000",
  "e04972a83ca4112bc871c72d4ae1616c2f0728db": "267606000000000000000",
  "df098f5e4e3dffa51af237bda8652c4f73ed9ca6": "502000000000000000000",
  "dfded2574b27d1613a7d98b715159b0d00baab28": "20000000000000000000000",
  "17d931d4c56294dcbe77c8655be4695f006d4a3c": "2000000000000000000000",
  "3ccb71aa6880cb0b84012d90e60740ec06acd78f": "2000000000000000000000",
  "e57d2995b0ebdf3f3ca6c015eb04260dbb98b7c6": "2000000000000000000000",
  "fb3860f4121c432ebdc8ec6a0331b1b709792e90": "600400000000000000000",
  "fa00c376e89c05e887817a9dd0748d96f341aa89": "300700000000000000000",
  "c7a018f0968a51d1f6603c5c49dc545bcb0ff293": "4000000000000000000000",
  "7d73863038ccca22f96affda10496e51e1e6cd48": "20000000000000000000",
  "38ea6f5b5a7b88417551b4123dc127dfe9342da6": "400000000000000000000",
  "014b7f67b14f5d983d87014f570c8b993b9872b5": "200000000000000000000",
  "8ac89bd9b8301e6b0677fa25fcf0f58f0cc7b611": "20000000000000000000",
  "7eb4b0185c92b6439a08e7322168cb353c8a774a": "10165988000000000000000",
  "d29dc08efbb3d72e263f78ab7610d0226de76b00": "12000000000000000000000",
  "72a8260826294726a75bf39cd9aa9e07a3ea14cd": "2000000000000000000000",
  "4cb5c6cd713ca447b848ae2f56b761ca14d7ad57": "267400000000000000000",
  "49185dd7c23632f46c759473ebae966008cd3598": "254030000000000000000",
  "13d67a7e25f2b12cdb85585009f8acc49b967301": "1999944000000000000000",
  "9d913b5d339c95d87745562563fea98b23c60cc4": "170718000000000000000",
  "abdc9f1bcf4d19ee96591030e772c334302f7d83": "40110000000000000000000",
  "e9a5ae3c9e05977dd1069e9fd9d3aefbae04b8df": "1970000000000000000000",
  "1fd296be03ad737c92f9c6869e8d80a71c5714aa": "13370000000000000000",
  "2f13657526b177cad547c3908c840eff647b45d9": "1170685000000000000000",
  "e69fcc26ed225f7b2e379834c524d70c1735e5bc": "2000000000000000000000",
  "bade43599e02f84f4c3014571c976b13a36c65ab": "4000000000000000000000",
  "184a4f0beb71ffd558a6b6e8f228b78796c4cf3e": "12000000000000000000000",
  "d1de5aad3a5fd803f1b1aeb6103cb8e14fe723b7": "20000000000000000000",
  "0bd67dbde07a856ebd893b5edc4f3a5be4202616": "2000000000000000000000",
  "6b30f1823910b86d3acb5a6afc9defb6f3a30bf8": "4200000000000000000000",
  "9a63d185a79129fdab19b58bb631ea36a420544e": "42000000000000000000",
  "df660a91dab9f730f6190d50c8390561500756ca": "2000000000000000000000",
  "a1a1f0fa6d20b50a794f02ef52085c9d036aa6ca": "1000000000000000000000",
  "4ec768295eeabafc42958415e22be216cde77618": "59600000000000000000",
  "c348fc5a461323b57be303cb89361b991913df28": "100000000000000000000000",
  "3a7db224acae17de7798797d82cdf8253017dfa8": "5000000000000000000000",
  "8bea40379347a5c891d59a6363315640f5a7e07a": "1999992000000000000000",
  "2257fca16a6e5c2a647c3c29f36ce229ab93b17e": "4000000000000000000000",
  "e492818aa684e5a676561b725d42f3cc56ae5198": "800000000000000000000",
  "c841884fa4785fb773b28e9715fae99a5134305d": "2000000000000000000000",
  "0d9443a79468a5bbf7c13c6e225d1de91aee07df": "70000000000000000000",
  "6d4008b4a888a826f248ee6a0b0dfde9f93210b9": "5460000000000000000000",
  "884980eb4565c1048317a8f47fdbb461965be481": "3999922000000000000000",
  "985d70d207892bed398590024e2421b1cc119359": "20000000000000000000000",
  "d9ec8fe69b7716c0865af888a11b2b12f720ed33": "4000000000000000000000",
  "49b74e169265f01a89ec4c9072c5a4cd72e4e835": "16100000000000000000000",
  "4c3e95cc3957d252ce0bf0c87d5b4f2234672e70": "2500000000000000000000",
  "d9ff115d01266c9f73b063c1c238ef3565e63b36": "680000000000000000000",
  "48c5c6970b9161bb1c7b7adfed9cdede8a1ba864": "4000000000000000000000",
  "ea6afe2cc928ac8391eb1e165fc40040e37421e7": "2997569000000000000000",
  "08ccda50e4b26a0ffc0ef92e9205310706bec2c7": "6077440000000000000000",
  "e6e9a39d750fe994394eb68286e5ea62a6997882": "600000000000000000000",
  "4b58101f44f7e389e12d471d1635b71614fdd605": "160000000000000000000",
  "8d93dac785f88f1a84bf927d53652b45a154ccdd": "158000000000000000000",
  "415d096ab06293183f3c033d25f6cf7178ac3bc7": "40000000000000000000",
  "c3e387b03ce95ccfd7fa51dd840183bc43532809": "2000000000000000000000",
  "da34b2eae30bafe8daeccde819a794cd89e09549": "2000000000000000000000",
  "fa279bfd8767f956bf7fa0bd5660168da75686bd": "2674000000000000000000",
  "b98ca31785ef06be49a1e47e864f60d076ca472e": "4000000000000000000000",
  "b768b5234eba3a9968b34d6ddb481c8419b3655d": "14974000000000000000",
  "31047d703f63b93424fbbd6e2f1f9e74de13e709": "2850123000000000000000",
  "9a24ce8d485cc4c86e49deb39022f92c7430e67e": "1300000000000000000000",
  "e62f9d7c64e8e2635aeb883dd73ba684ee7c1079": "8000000000000000000000",
  "f15d9d5a21b1929e790371a17f16d95f0c69655c": "2000000000000000000000",
  "285ae51b9500c58d541365d97569f14bb2a3709b": "2000000000000000000000",
  "09c177f1ae442411ddacf187d46db956148360e7": "8950000000000000000000",
  "12173074980153aeaa4b0dcbc7132eadcec21b64": "240000000000000000000",
  "351f16e5e0735af56751b0e225b2421171394090": "13370000000000000000000",
  "ac52b77e15664814f39e4f271be641308d91d6cc": "220000000000000000000",
  "99c883258546cc7e4e971f522e389918da5ea63a": "4000000000000000000000",
  "aa16269aac9c0d803068d82fc79151dadd334b66": "4000000000000000000000",
  "7c9a110cb11f2598b2b20e2ca400325e41e9db33": "26000000000000000000000",
  "583e83ba55e67e13e0e76f8392d873cd21fbf798": "20000000000000000000",
  "555ebe84daa42ba256ea789105cec4b693f12f18": "100000000000000000000",
  "978c430ce4359b06bc2cdf5c2985fc950e50d5c8": "480000000000000000000",
  "dc1eb9b6e64351f56424509645f83e79eee76cf4": "4000000000000000000000",
  "5b290c01967c812e4dc4c90b174c1b4015bae71e": "149946000000000000000",
  "e7d213947fcb904ad738480b1eed2f5c329f27e8": "18718000000000000000",
  "c517d0315c878813c717e18cafa1eab2654e01da": "10000000000000000000000",
  "7e972a8a7c2a44c93b21436c38d21b9252c345fe": "1790000000000000000000",
  "9cb28ac1a20a106f7f373692c5ce4c73f13732a1": "1000000000000000000000",
  "14ab164b3b524c82d6abfbc0de831126ae8d1375": "2000000000000000000000",
  "d46f8223452982a1eea019a8816efc2d6fc00768": "137000000000000000000",
  "5cdc4708f14f40dcc15a795f7dc8cb0b7faa9e6e": "537000000000000000000",
  "66fdc9fee351fa1538eb0d87d819fcf09e7c106a": "6016500000000000000000",
  "e7be82c6593c1eeddd2ae0b15001ff201ab57b2f": "19100000000000000000",
  "47d20e6ae4cad3f829eac07e5ac97b66fdd56cf5": "1000000000000000000000",
  "0f2d8daf04b5414a0261f549ff6477b80f2f1d07": "200000000000000000000000",
  "84bfcef0491a0ae0694b37ceac024584f2aa0467": "1999944000000000000000",
  "ec5feafe210c12bfc9a5d05925a123f1e73fbef8": "456000000000000000000000",
  "7023c70956e04a92d70025aad297b539af355869": "2000000000000000000000",
  "d66ddf1159cf22fd8c7a4bc8d5807756d433c43e": "2200000000000000000000",
  "d0638ea57189a6a699024ad78c71d939c1c2ff8c": "2632000000000000000000",
  "70d25ed2c8ada59c088cf70dd22bf2db93acc18a": "1056600000000000000000",
  "a4875928458ec2005dbb578c5cd33580f0cf1452": "1000000000000000000000",
  "b5ad5157dda921e6bafacd9086ae73ae1f611d3f": "2000000000000000000000",
  "c493489e56c3bdd829007dc2f956412906f76bfa": "48968000000000000000",
  "c57612de91110c482e6f505bcd23f3c5047d1d61": "3580000000000000000000",
  "9b18478655a4851cc906e660feac61f7f4c8bffc": "4174120000000000000000",
  "b21b7979bf7c5ca01fa82dd640b41c39e6c6bc75": "1999944000000000000000",
  "a9d4a2bcbe5b9e0869d70f0fe2e1d6aacd45edc5": "198800000000000000000",
  "6f29bb375be5ed34ed999bb830ee2957dde76d16": "2000000000000000000000",
  "a006268446643ec5e81e7acb3f17f1c351ee2ed9": "4000000000000000000000",
  "42ddd014dc52bfbcc555325a40b516f4866a1dd3": "2000000000000000000000",
  "d6d6776958ee23143a81adadeb08382009e996c2": "3000000000000000000000",
  "d34e03d36a2bd4d19a5fa16218d1d61e3ffa0b15": "320000000000000000000",
  "dac0c177f11c5c3e3e78f2efd663d13221488574": "1000000000000000000000",
  "814135da8f9811075783bf1ab67062af8d3e9f40": "20000000000000000000",
  "7c3eb713c4c9e0381cd8154c7c9a7db8645cde17": "200000000000000000000",
  "f49c47b3efd86b6e6a5bc9418d1f9fec814b69ef": "20000000000000000000000",
  "35f1da127b83376f1b88c82a3359f67a5e67dd50": "1910000000000000000000",
  "44dfba50b829becc5f4f14d1b04aab3320a295e5": "1000000000000000000000",
  "0b924df007e9c0878417cfe63b976ea1a382a897": "40000000000000000000",
  "82438fd2b32a9bdd674b49d8cc5fa2eff9781847": "20000000000000000000",
  "794529d09d017271359730027075b87ad83dae6e": "310000000000000000000",
  "f4b49100757772f33c177b9a76ba95226c8f3dd8": "6700000000000000000000",
  "8563c49361b625e768771c96151dbfbd1c906976": "2000000000000000000000",
  "0b9df80fbe232009dacf0aa8cac59376e2476203": "2000000000000000000000",
  "149b6dbde632c19f5af47cb493114bebd9b03c1f": "12000000000000000000000",
  "d7a1431ee453d1e49a0550d1256879b4f5d10201": "1670000000000000000000",
  "1d37616b793f94911838ac8e19ee9449df921ec4": "1500000000000000000000",
  "d6670c036df754be43dadd8f50feea289d061fd6": "5988459000000000000000",
  "02778e390fa17510a3428af2870c4273547d386c": "16163700000000000000000",
  "b89f4632df5909e58b2a9964f74feb9a3b01e0c5": "21406707000000000000000",
  "76c27535bcb59ce1fa2d8c919cabeb4a6bba01d1": "2000000000000000000000",
  "36bf43ff35df90908824336c9b31ce33067e2f50": "346837200000000000000000",
  "b53bcb174c2518348b818aece020364596466ba3": "2000000000000000000000",
  "b4dd460cd016725a64b22ea4f8e06e06674e033e": "5370000000000000000000",
  "cda1741109c0265b3fb2bf8d5ec9c2b8a3346b63": "20000000000000000000",
  "feb8b8e2af716ae41fc7c04bcf29540156461e6b": "1555396000000000000000",
  "a49f523aa51364cbc7d995163d34eb590ded2f08": "2659160000000000000000",
  "a7e74f0bdb278ff0a805a648618ec52b166ff1be": "100000000000000000000",
  "5ead29037a12896478b1296ab714e9cb95428c81": "71500000000000000000",
  "cdecf5675433cdb0c2e55a68db5d8bbe78419dd2": "20000000000000000000",
  "c24ccebc2344cce56417fb684cf81613f0f4b9bd": "1550000000000000000000",
  "5a70106f20d63f875265e48e0d35f00e17d02bc9": "20000000000000000000",
  "2606c3b3b4ca1b091498602cb1978bf3b95221c0": "400000000000000000000",
  "1ad4563ea5786be1159935abb0f1d5879c3e7372": "6000000000000000000000",
  "b782bfd1e2de70f467646f9bc09ea5b1fcf450af": "267400000000000000000",
  "649a2b9879cd8fb736e6703b0c7747849796f10f": "7358102000000000000000",
  "1cc1d3c14f0fb8640e36724dc43229d2ea7a1e48": "1700000000000000000000",
  "824b3c3c443e19295d7ef6faa7f374a4798486a8": "20000000000000000000",
  "a7758cecb60e8f614cce96137ef72b4fbd07774a": "500000000000000000000",
  "981f712775c0dad97518ffedcb47b9ad1d6c2762": "6685000000000000000000",
  "26e801b62c827191dd68d31a011990947fd0ebe0": "20000000000000000000",
  "95447046313b2f3a5e19b948fd3b8bedc82c717c": "500000000000000000000",
  "0b701101a4109f9cb360dc57b77442673d5e5983": "2000000000000000000000",
  "5b25cae86dcafa2a60e7723631fc5fa49c1ad87d": "2491200000000000000000",
  "f73ac46c203be1538111b151ec8220c786d84144": "294515000000000000000",
  "e8c3d3b0e17f97d1e756e684f94e1470f99c95a1": "400000000000000000000",
  "8c900a8236b08c2b65405d39d75f20062a7561fd": "1640000000000000000000",
  "43898c49a34d509bfed4f76041ee91caf3aa6aa5": "300000000000000000000",
  "c85325eab2a59b3ed863c86a5f2906a04229ffa9": "465600000000000000000",
  "4a430170152de5172633dd8262d107a0afd96a0f": "3160000000000000000000",
  "6e0ee70612c976287d499ddfa6c0dcc12c06deea": "129980000000000000000",
  "21c07380484f6cbc8724ad32bc864c3b5ad500b7": "1000000000000000000000",
  "ff5162f2354dc492c75fd6e3a107268660eecb47": "1700000000000000000000",
  "8845e9f90e96336bac3c616be9d88402683e004c": "2000000000000000000000",
  "f23c7b0cb8cd59b82bd890644a57daf40c85e278": "50038000000000000000",
  "1784948bf99848c89e445638504dd698271b5924": "6037580000000000000000",
  "b39f4c00b2630cab7db7295ef43d47d501e17fd7": "4000000000000000000000",
  "3fb7d197b3ba4fe045efc23d50a14585f558d9b2": "20000000000000000000",
  "bd043b67c63e60f841ccca15b129cdfe6590c8e3": "200000000000000000000",
  "86ca0145957e6b0dfe36875fbe7a0dec55e17a28": "10000000000000000000000",
  "dae7201eab8c063302930d693929d07f95e71962": "2687370000000000000000",
  "cc034985d3f28c2d39b1a34bced4d3b2b6ca234e": "182000000000000000000",
  "40e0dbf3efef9084ea1cd7e503f40b3b4a8443f6": "4000000000000000000000",
  "b1896a37e5d8825a2d01765ae5de629977de8352": "200000000000000000000",
  "d9f547f2c1de0ed98a53d161df57635dd21a00bd": "98500000000000000000",
  "2fea1b2f834f02fc54333f8a809f0438e5870aa9": "20200000000000000000",
  "68b31836a30a016ada157b638ac15da73f18cfde": "26000000000000000000",
  "bc967fe4418c18b99858966d870678dca2b88879": "8740000000000000000000",
  "16bae5d24eff91778cd98b4d3a1cc3162f44aa77": "401100000000000000000",
  "f476e1267f86247cc908816f2e7ad5388c952db0": "4000000000000000000000",
  "0203ae01d4c41cae1865e04b1f5b53cdfaecae31": "1006054000000000000000",
  "bd4bd5b122d8ef7b7c8f0667450320db2116142e": "600000000000000000000",
  "a394ad4fd9e6530e6f5c53faecbede81cb172da1": "5600000000000000000000",
  "3a9960266df6492063538a99f487c950a3a5ec9e": "24000000000000000000000",
  "d8069f84b521493f4715037f3226b25f33b60586": "1910000000000000000000",
  "136c834bf111326d207395295b2e583ea7f33572": "100000000000000000000",
  "c5c73d61cce7c8fe4c8fce29f39092cd193e0fff": "8000000000000000000000",
  "3cfbf066565970639e130df2a7d16b0e14d6091c": "1700000000000000000000",
  "61b905de663fc17386523b3a28e2f7d037a655cd": "500000000000000000000",
  "fda0ce15330707f10bce3201172d2018b9ddea74": "51900000000000000000",
  "f7fc45abf76f5088e2e5b5a8d132f28a4d4ec1c0": "2000000000000000000000",
  "c3db9fb6f46c480af34465d79753b4e2b74a67ce": "20000000000000000000000",
  "ebe46cc3c34c32f5add6c3195bb486c4713eb918": "1000000000000000000000",
  "91d2a9ee1a6db20f5317cca7fbe2313895db8ef8": "8499600000000000000000",
  "c4cc45a2b63c27c0b4429e58cd42da59be739bd6": "1000000000000000000000",
  "a43b81f99356c0af141a03010d77bd042c71c1ee": "2000000000000000000000",
  "4c45d4c9a725d11112bfcbca00bf31186ccaadb7": "400000000000000000000",
  "bf9f271f7a7e12e36dd2fe9facebf385fe6142bd": "62760000000000000000",
  "e0ce80a461b648a501fd0b824690c8868b0e4de8": "500000000000000000000",
  "a1f7dde1d738d8cd679ea1ee965bee224be7d04d": "1127000000000000000000",
  "7f1c81ee1697fc144b7c0be5493b5615ae7fddca": "500200000000000000000",
  "b508f987b2de34ae4cf193de85bff61389621f88": "6000000000000000000000",
  "5f26cf34599bc36ea67b9e7a9f9b4330c9d542a3": "1000000000000000000000",
  "d02108d2ae3cab10cbcf1657af223e027c8210f6": "2000140000000000000000",
  "952183cfd38e352e579d36decec5b18450f7fba0": "2000000000000000000000",
  "eb90c793b3539761e1c814a29671148692193eb4": "12000000000000000000000",
  "1076212d4f758c8ec7121c1c7d74254926459284": "35000056000000000000000",
  "f05ceeab65410564709951773c8445ad9f4ec797": "299982000000000000000",
  "05361d8eb6941d4e90fb7e1418a95a32d5257732": "20000000000000000000",
  "a5783bf33432ff82ac498985d7d460ae67ec3673": "1820000000000000000000",
  "b1cd4bdfd104489a026ec99d597307a04279f173": "20000000000000000000000",
  "876c3f218b4776df3ca9dbfb270de152d94ed252": "100000000000000000000",
  "8a36869ad478997cbf6d8924d20a3c8018e9855b": "20000000000000000000",
  "fb3fe09bb836861529d7518da27635f538505615": "1399904000000000000000",
  "d093e829819fd2e25b973800bb3d5841dd152d05": "4000000000000000000000",
  "126d91f7ad86debb0557c612ca276eb7f96d00a1": "100000000000000000000",
  "2a81d27cb6d4770ff4f3c4a3ba18e5e57f07517c": "2000000000000000000000",
  "c4f7b13ac6d4eb4db3d4e6a252af8a07bd5957da": "200000000000000000000",
  "305d26c10bdc103f6b9c21272eb7cb2d9108c47e": "500000000000000000000",
  "d0d0a2ad45f59a9dccc695d85f25ca46ed31a5a3": "840000000000000000000",
  "522323aad71dbc96d85af90f084b99c3f09decb7": "6000000000000000000000",
  "f43da3a4e3f5fab104ca9bc1a0f7f3bb4a56f351": "1999944000000000000000",
  "a2dc65ee256b59a5bd7929774f904b358df3ada1": "21319600000000000000000",
  "f382df583155d8548f3f93440cd5f68cb79d6026": "266619800000000000000000",
  "0c967e3061b87a753e84507eb60986782c8f3013": "100000000000000000000",
  "a3a262afd2936819230892fde84f2d5a594ab283": "1880000000000000000000",
  "93868ddb2a794d02ebda2fa4807c76e3609858dc": "2027851000000000000000",
  "cd35ff010ec501a721a1b2f07a9ca5877dfcf95a": "4011000000000000000000",
  "5824a7e22838277134308c5f4b50dab65e43bb31": "6000000000000000000000",
  "7f7a3a21b3f5a65d81e0fcb7d52dd00a1aa36dba": "100000000000000000000",
  "30513fca9f36fd788cfea7a340e86df98294a244": "447000000000000000000",
  "283e6252b4efcf4654391acb75f903c59b78c5fb": "12000000000000000000000",
  "eddbaafbc21be8f25562f1ed6d05d6afb58f02c2": "2000000000000000000000",
  "0dcfe837ea1cf28c65fccec3bef1f84e59d150c0": "200000000000000000000",
  "828ba651cb930ed9787156299a3de44cd08b7212": "1337000000000000000000",
  "cfd47493c9f89fe680bda5754dd7c9cfe7cb5bbe": "54508000000000000000",
  "0e89eddd3fa0d71d8ab0ff8da5580686e3d4f74f": "2000000000000000000000",
  "205f5166f12440d85762c967d3ae86184f8f4d98": "432500000000000000000",
  "25dad495a11a86b9eeece1eeec805e57f157faff": "16000000000000000000000",
  "6c84cba77c6db4f7f90ef13d5ee21e8cfc7f8314": "2000000000000000000000",
  "91a787bc5196f34857fe0c372f4df376aaa76613": "2000000000000000000000",
  "b0d3c9872b85056ea0c0e6d1ecf7a77e3ce6ab85": "4999711000000000000000",
  "6e4d2e39c8836629e5b487b1918a669aebdd9536": "1000000000000000000000",
  "dc703a5f3794c84d6cb3544918cae14a35c3bd4f": "1850000000000000000000",
  "47beb20f759100542aa93d41118b3211d664920e": "2000000000000000000000",
  "5a7735007d70b06844da9901cdfadb11a2582c2f": "6000000000000000000000",
  "aff107960b7ec34ed690b665024d60838c190f70": "500000000000000000000",
  "563a03ab9c56b600f6d25b660c21e16335517a75": "1000000000000000000000",
  "a106465bbd19e1b6bce50d1b1157dc59095a3630": "2000000000000000000000",
  "ca9dec02841adf5cc920576a5187edd2bd434a18": "500000000000000000000",
  "572ac1aba0de23ae41a7cae1dc0842d8abfc103b": "1910000000000000000000",
  "5f74ed0e24ff80d9b2c4a44baa9975428cd6b935": "2980000000000000000000",
  "f2049532fd458a83ca1bff2eebacb6d5ca63f4a4": "3625693000000000000000",
  "cee699c0707a7836252b292f047ce8ad289b2f55": "324700000000000000000",
  "8b3696f3c60de32432a2e4c395ef0303b7e81e75": "30000000000000000000000",
  "13dee03e3799952d0738843d4be8fc0a803fb20e": "2000000000000000000000",
  "c853215b9b9f2d2cd0741e585e987b5fb80c212e": "1550000000000000000000",
  "851c0d62be4635d4777e8035e37e4ba8517c6132": "500000000000000000000",
  "a76b743f981b693072a131b22ba510965c2fefd7": "18200000000000000000",
  "69bd25ade1a3346c59c4e930db2a9d715ef0a27a": "4000000000000000000000",
  "0fec4ee0d7ca180290b6bd20f9992342f60ff68d": "334383000000000000000",
  "ccfd725760a68823ff1e062f4cc97e1360e8d997": "399800000000000000000",
  "9f017706b830fb9c30efb0a09f506b9157457534": "2000000000000000000000",
  "420fb86e7d2b51401fc5e8c72015decb4ef8fc2e": "1000000000000000000000",
  "cb7d2b8089e9312cc9aeaa2773f35308ec6c2a7b": "10000000000000000000000",
  "6c822029218ac8e98a260c1e064029348839875b": "5010000000000000000000",
  "1c68a66138783a63c98cc675a9ec77af4598d35e": "50100000000000000000",
  "f270792576f05d514493ffd1f5e84bec4b2df810": "1000000000000000000000",
  "9191f94698210516cf6321a142070e20597674ed": "17194000000000000000",
  "c0ca3277942e7445874be31ceb902972714f1823": "250000000000000000000",
  "35e096120deaa5c1ecb1645e2ccb8b4edbd9299a": "500000000000000000000",
  "e2bbf84641e3541f6c33e6ed683a635a70bde2ec": "502763000000000000000",
  "d12d77ae01a92d35117bac705aacd982d02e74c1": "1000000000000000000000",
  "dabb0889fc042926b05ef57b2520910abc4b4149": "2000000000000000000000",
  "5a1a336962d6e0c63031cc83c6a5c6a6f4478ecb": "1000000000000000000000",
  "abd154903513b8da4f019f68284b0656a1d0169b": "1000000000000000000000",
  "ad377cd25eb53e83ae091a0a1d2b4516f484afde": "1940000000000000000000",
  "08c2f236ac4adcd3fda9fbc6e4532253f9da3bec": "20000000000000000000",
  "71135d8f05963c905a4a07922909235a896a52ea": "3000000000000000000000",
  "080546508a3d2682c8b9884f13637b8847b44db3": "2000000000000000000000",
  "2d61bfc56873923c2b00095dc3eaa0f590d8ae0f": "20760000000000000000000",
  "cbfa6af6c283b046e2772c6063b0b21553c40106": "2000000000000000000000",
  "ccabc6048a53464424fcf76eeb9e6e1801fa23d4": "49250000000000000000",
  "60cc3d445ebdf76a7d7ae571c6971dff68cc8585": "1000000000000000000000",
  "fff33a3bd36abdbd412707b8e310d6011454a7ae": "8000000000000000000000",
  "d2dbebe89b0357aea98bbe8e496338debb28e805": "4000000000000000000000",
  "5f521282e9b278dc8c034c72af53ee29e5443d78": "6520000000000000000000",
  "c5a48a8500f9b4e22f0eb16c6f4649687674267d": "812721000000000000000",
  "8cb3aa3fcd212854d7578fcc30fdede6742a312a": "300000000000000000000",
  "90d2809ae1d1ffd8f63eda01de49dd552df3d1bc": "3998000000000000000000",
  "96a55f00dff405dc4de5e58c57f6f6f0cac55d2f": "1962711000000000000000",
  "ae842e81858ecfedf6506c686dc204ac15bf8b24": "40000000000000000000",
  "0be6a09e4307fe48d412b8d1a1a8284dce486261": "19180000000000000000000",
  "c9c7ac0bdd9342b5ead4360923f68c72a6ba633a": "500000000000000000000",
  "ea8f30b6e4c5e65290fb9864259bc5990fa8ee8a": "20000000000000000000",
  "74d37a51747bf8b771bfbf43943933d100d21483": "1000000000000000000000",
  "1a04d5389eb006f9ce880c30d15353f8d11c4b31": "17072800000000000000000",
  "726a14c90e3f84144c765cffacba3e0df11b48be": "10000000000000000000000",
  "86b7bd563ceab686f96244f9ddc02ad7b0b14bc2": "10000000000000000000000",
  "2bbe672a1857508f630f2a5edb563d9e9de92815": "2000000000000000000000",
  "a17070c2e9c5a940a4ec0e4954c4d7d643be8f49": "1999965000000000000000",
  "f2d1b7357724ec4c03185b879b63f57e26589153": "6000000000000000000000",
  "d6a7ac4de7b510f0e8de519d973fa4c01ba83400": "1880000000000000000000",
  "593b45a1864ac5c7e8f0caaeba0d873cd5d113b2": "6000000000000000000000",
  "0837539b5f6a522a482cdcd3a9bb7043af39bdd2": "6000000000000000000000",
  "b927abd2d28aaaa24db31778d27419df8e1b04bb": "27531000000000000000",
  "b2e085fddd1468ba07415b274e734e11237fb2a9": "100000000000000000000",
  "970938522afb5e8f994873c9fbdc26e3b37e314c": "1000000000000000000000",
  "f3de5f26ef6aded6f06d3b911346ee70401da4a0": "354718000000000000000",
  "bffb6929241f788693273e7022e60e3eab1fe84f": "2000000000000000000000",
  "b56ad2aec6c8c3f19e1515bbb7dd91285256b639": "1000000000000000000000",
  "47730f5f8ebf89ac72ef80e46c12195038ecdc49": "3160000000000000000000",
  "f39a9d7aa3581df07ee4279ae6c312ef21033658": "4000000000000000000000",
  "36227cdfa0fd3b9d7e6a744685f5be9aa366a7f0": "198479000000000000000",
  "89e3b59a15864737d493c1d23cc53dbf8dcb1362": "4000000000000000000000",
  "bd08e0cddec097db7901ea819a3d1fd9de8951a2": "20000000000000000000",
  "533444584082eba654e1ad30e149735c6f7ba922": "1730000000000000000000",
  "6a8a4317c45faa0554ccdb482548183e295a24b9": "1000000000000000000000",
  "22ce349159eeb144ef06ff2636588aef79f62832": "188000000000000000000",
  "3cd1d9731bd548c1dd6fcea61beb75d91754f7d3": "5130285000000000000000",
  "8b7056f6abf3b118d026e944d5c073433ca451d7": "999999000000000000000",
  "15f1b352110d68901d8f67aac46a6cfafe031477": "200000000000000000000",
  "0f789e30397c53bf256fc364e6ef39f853504114": "3640000000000000000000",
  "750bbb8c06bbbf240843cc75782ee02f08a97453": "835000000000000000000",
  "fff7ac99c8e4feb60c9750054bdc14ce1857f181": "1000000000000000000000",
  "5c6f36af90ab1a656c6ec8c7d521512762bba3e1": "1999800000000000000000",
  "6811b54cd19663b11b94da1de2448285cd9f68d9": "1100000000000000000000",
  "6f50929777824c291a49c46dc854f379a6bea080": "360000000000000000000",
  "e83604e4ff6be7f96f6018d3ec3072ec525dff6b": "182000000000000000000",
  "d731bb6b5f3c37395e09ceaccd14a918a6060789": "3940000000000000000000",
  "372e453a6b629f27678cc8aeb5e57ce85ec0aef9": "200000000000000000000",
  "86924fb211aad23cf5ce600e0aae806396444087": "10000000000000000000000",
  "18c6723a6753299cb914477d04a3bd218df8c775": "1000000000000000000000",
  "e00484788db50fc6a48e379d123e508b0f6e5ab1": "1000000000000000000000",
  "150e3dbcbcfc84ccf89b73427763a565c23e60d0": "40000000000000000000",
  "8ffa062122ac307418821adb9311075a3703bfa3": "1000000000000000000000",
  "21206ce22ea480e85940d31314e0d64f4e4d3a04": "1000000000000000000000",
  "ac024f594f9558f04943618eb0e6b2ee501dc272": "2000000000000000000000",
  "b2b7cdb4ff4b61d5b7ce0b2270bbb5269743ec04": "2000000000000000000000",
  "abc74706964960dfe0dca3dca79e9216056f1cf4": "40000000000000000000000",
  "d7eb903162271c1afa35fe69e37322c8a4d29b11": "10000000000000000000000",
  "d7c6265dea11876c903b718e4cd8ab24fe265bde": "2000000000000000000000",
  "cba288cd3c1eb4d59ddb06a6421c14c345a47b24": "4000000000000000000000",
  "8c22426055b76f11f0a2de1a7f819a619685fe60": "1980000000000000000000",
  "f463a90cb3f13e1f0643423636beab84c123b06d": "40000000000000000000",
  "2b5ced9987c0765f900e49cf9da2d9f9c1138855": "400000000000000000000",
  "9bb760d5c289a3e1db18db095345ca413b9a43c2": "197000000000000000000",
  "d66ab79294074c8b627d842dab41e17dd70c5de5": "1000000000000000000000",
  "0bdd58b96e7c916dd2fb30356f2aebfaaf1d8630": "2000000000000000000000",
  "d612597bc31743c78633f633f239b1e9426bd925": "76000000000000000000000",
  "140518a3194bad1350b8949e650565debe6db315": "2000000000000000000000",
  "daedd4ad107b271e89486cbf80ebd621dd974578": "2000000000000000000000",
  "c36c0b63bfd75c2f8efb060883d868cccd6cbdb4": "3000000000000000000000",
  "e646665872e40b0d7aa2ff82729caaba5bc3e89e": "400000000000000000000",
  "b5fb7ea2ddc1598b667a9d57dd39e85a38f35d56": "500000000000000000000",
  "e51421f8ee2210c71ed870fe618276c8954afbe9": "1337000000000000000000",
  "08a9a44e1f41de3dbba7a363a3ab412c124cd15e": "200000000000000000000",
  "562bced38ab2ab6c080f3b0541b8456e70824b3f": "641760000000000000000",
  "1e484d0621f0f5331b35d5408d9aae4eb1acf21e": "20000000000000000000",
  "3a476bd2c9e664c63ab266aa4c6e4a4825f516c3": "200000000000000000000",
  "8d6df209484d7b94702b03a53e56b9fb0660f6f0": "2000000000000000000000",
  "5970fb1b144dd751e4ce2eca7caa20e363dc4da3": "10000000000000000000000",
  "d1dd79fb158160e5b4e8e23f312e6a907fbc4d4e": "500000000000000000000",
  "7ee5ca805dce23af89c2d444e7e40766c54c7404": "240660000000000000000",
  "93e0f37ecdfb0086e3e862a97034447b1e4dec1a": "30000000000000000000",
  "e10ac19c546fc2547c61c139f5d1f45a6666d5b0": "4775000000000000000000",
  "1c73d00b6e25d8eb9c1ff4ad827b6b9e9cf6d20c": "200000000000000000000",
  "d771d9e0ca8a08a113775731434eb3270599c40d": "20000000000000000000",
  "e69d1c378b771e0feff051db69d966ac6779f4ed": "553000000000000000000",
  "0ef85b49d08a75198692914eddb4b22cf5fa4450": "2004800000000000000000",
  "ed70a37cdd1cbda9746d939658ae2a6181288578": "9600000000000000000000",
  "eee761847e33fd61d99387ee14628694d1bfd525": "2000000000000000000000",
  "271d3d481cb88e7671ad216949b6365e06303de0": "4000000000000000000000",
  "5255dc69155a45b970c604d30047e2f530690e7f": "20000000000000000000",
  "cabab6274ed15089737e287be878b757934864e2": "20000000000000000000000",
  "9defe56a0ff1a1947dba0923f7dd258d8f12fa45": "26880000000000000000000",
  "b7a2c103728b7305b5ae6e961c94ee99c9fe8e2b": "50000000000000000000000",
  "b498bb0f520005b6216a4425b75aa9adc52d622b": "4000000000000000000000",
  "c1132878235c5ddba5d9f3228b5236e47020dc6f": "1000000000000000000000",
  "f81622e55757daea6675975dd93538da7d16991e": "2000000000000000000000",
  "ce2deab51c0a9ae09cd212c4fa4cc52b53cc0dec": "2000000000000000000000",
  "86a1eadeeb30461345d9ef6bd05216fa247c0d0c": "2000000000000000000000",
  "7b1fe1ab4dfd0088cdd7f60163ef59ec2aee06f5": "2000000000000000000000",
  "6bbc3f358a668dd1a11f0380f3f73108426abd4a": "4000000000000000000000",
  "b1e6e810c24ab0488de9e01e574837829f7c77d0": "400000000000000000000",
  "03eb3cb860f6028da554d344a2bb5a500ae8b86f": "2000000000000000000000",
  "e5481a7fed42b901bbed20789bd4ade50d5f83b9": "2000000000000000000000",
  "1f3da68fe87eaf43a829ab6d7ec5a6e009b204fb": "554988000000000000000",
  "30037988702671acbe892c03fe5788aa98af287a": "2800000000000000000000",
  "edb473353979a206879de144c10a3c51d7d7081a": "6000000000000000000000",
  "22bdffc240a88ff7431af3bff50e14da37d5183e": "1000000000000000000000",
  "9374869d4a9911ee1eaf558bc4c2b63ec63acfdd": "1000000000000000000000",
  "b756ad52f3bf74a7d24c67471e0887436936504c": "20000000000000000000000",
  "8bd0b65a50ef5cef84fec420be7b89ed1470ceb9": "11999000000000000000000",
  "af26f7c6bf453e2078f08953e4b28004a2c1e209": "100000000000000000000",
  "7c532db9e0c06c26fd40acc56ac55c1ee92d3c3a": "300000000000000000000000",
  "dde670d01639667576a22dd05d3246d61f06e083": "26740000000000000000",
  "5cf44e10540d65716423b1bcb542d21ff83a94cd": "10000000000000000000000",
  "f96b4c00766f53736a8574f822e6474c2f21da2d": "400000000000000000000",
  "8d89170b92b2be2c08d57c48a7b190a2f146720f": "19700000000000000000000",
  "142b87c5043ffb5a91df18c2e109ced6fe4a71db": "200000000000000000000",
  "42d34940edd2e7005d46e2188e4cfece8311d74d": "158000000000000000000",
  "562105e82b099735de49f62692cc87cd38a8edcd": "6000000000000000000000",
  "457bcef37dd3d60b2dd019e3fe61d46b3f1e7252": "20000000000000000000",
  "cf8882359c0fb23387f5674074d8b17ade512f98": "6000000000000000000000",
  "f0c081da52a9ae36642adf5e08205f05c54168a6": "111000000000000000000",
  "551e7784778ef8e048e495df49f2614f84a4f1dc": "600000000000000000000",
  "3c869c09696523ced824a070414605bb76231ff2": "1000000000000000000000",
  "7e7f18a02eccaa5d61ab8fbf030343c434a25ef7": "66850000000000000000",
  "9328d55ccb3fce531f199382339f0e576ee840a3": "4000000000000000000000",
  "9d0f347e826b7dceaad279060a35c0061ecf334b": "4000000000000000000000",
  "680640838bd07a447b168d6d923b90cf6c43cdca": "1730000000000000000000",
  "c951900c341abbb3bafbf7ee2029377071dbc36a": "327600000000000000000",
  "ddf5810a0eb2fb2e32323bb2c99509ab320f24ac": "17900000000000000000000",
  "2489ac126934d4d6a94df08743da7b7691e9798e": "1000000000000000000000",
  "f42f905231c770f0a406f2b768877fb49eee0f21": "197000000000000000000",
  "756f45e3fa69347a9a973a725e3c98bc4db0b5a0": "200000000000000000000"
}

},{}],114:[function(require,module,exports){
'use strict';

var params = require('./params.json');
params.genesisState = require('./genesisState.json');
params.bootstrapNodes = require('./bootstrapNodes.json');
module.exports = params;

},{"./bootstrapNodes.json":112,"./genesisState.json":113,"./params.json":115}],115:[function(require,module,exports){
arguments[4][105][0].apply(exports,arguments)
},{"dup":105}],116:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var hex = require('convert-hex');

// For simplicity we redefine it, as the default uses lowercase
var BASE36_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var bs36 = require('base-x')(BASE36_ALPHABET);

var ICAP = {};

ICAP.decodeBBAN = function (bban) {
  var length = bban.length;
  if (length === 30 || length === 31) {
    var tmp = hex.bytesToHex(bs36.decode(bban));

    // FIXME: horrible padding code
    while (tmp.length < 40) {
      tmp = '0' + tmp;
    }

    // NOTE: certain tools include an extra leading 0, drop that
    if (tmp.length === 42 && tmp[0] === '0' && tmp[1] === '0') {
      tmp = tmp.slice(2);
    }

    return '0x' + tmp;
  } else if (length === 16) {
    return {
      asset: bban.slice(0, 3),
      institution: bban.slice(3, 7),
      client: bban.slice(7, 16)
    };
  } else {
    throw new Error('Not a valid Ethereum BBAN');
  }
};

ICAP.encodeBBAN = function (bban) {
  if ((typeof bban === 'undefined' ? 'undefined' : _typeof(bban)) === 'object') {
    if (bban.asset.length !== 3 || bban.institution.length !== 4 || bban.client.length !== 9) {
      throw new Error('Invalid \'indirect\' Ethereum BBAN');
    }
    return [bban.asset, bban.institution, bban.client].join('').toUpperCase();
  } else if (bban.length === 42 && bban[0] === '0' && bban[1] === 'x') {
    // Workaround for base-x, see https://github.com/cryptocoinjs/base-x/issues/18
    if (bban[2] === '0' && bban[3] === '0') {
      bban = '0x' + bban.slice(4);
    }

    return bs36.encode(hex.hexToBytes(bban));
  } else {
    throw new Error('Not a valid input for Ethereum BBAN');
  }
};

// ISO13616 reordering and letter translation
// NOTE: we assume input is uppercase only
// based off code from iban.js
function prepare(iban) {
  // move front to the back
  iban = iban.slice(4) + iban.slice(0, 4);

  // translate letters to numbers
  return iban.split('').map(function (n) {
    var code = n.charCodeAt(0);
    // 65 == A, 90 == Z in ASCII
    if (code >= 65 && code <= 90) {
      // A = 10, B = 11, ... Z = 35
      return code - 65 + 10;
    } else {
      return n;
    }
  }).join('');
}

// Calculate ISO7064 mod 97-10
// NOTE: assumes all numeric input string
function mod9710(input) {
  var m = 0;
  for (var i = 0; i < input.length; i++) {
    m *= 10;
    m += input.charCodeAt(i) - 48; // parseInt()
    m %= 97;
  }
  return m;
}

ICAP.encode = function (bban, print) {
  bban = ICAP.encodeBBAN(bban);

  var checksum = 98 - mod9710(prepare('XE00' + bban));

  // format into 2 digits
  checksum = ('0' + checksum).slice(-2);

  var iban = 'XE' + checksum + bban;
  if (print === true) {
    // split a group of 4 chars with spaces
    iban = iban.replace(/(.{4})/g, '$1 ');
  }

  return iban;
};

ICAP.decode = function (iban, novalidity) {
  // change from 'print format' to 'electronic format', e.g. remove spaces
  iban = iban.replace(/\ /g, '');

  // check for validity
  if (!novalidity) {
    if (iban.slice(0, 2) !== 'XE') {
      throw new Error('Not in ICAP format');
    }

    if (mod9710(prepare(iban)) !== 1) {
      throw new Error('Invalid checksum in IBAN');
    }
  }

  return ICAP.decodeBBAN(iban.slice(4, 35));
};

/*
 * Convert Ethereum address to ICAP
 * @method fromAddress
 * @param {String} address Address as a hex string.
 * @param {bool} nonstd Accept address which will result in non-standard IBAN
 * @returns {String}
 */
ICAP.fromAddress = function (address, print, nonstd) {
  var ret = ICAP.encode(address, print);

  if (ret.replace(' ', '').length !== 34 && nonstd !== true) {
    throw new Error('Supplied address will result in invalid an IBAN');
  }

  return ret;
};

/*
 * Convert asset into ICAP
 * @method fromAsset
 * @param {Object} asset Asset object, must contain the fields asset, institution and client
 * @returns {String}
 */
ICAP.fromAsset = function (asset, print) {
  return ICAP.encode(asset, print);
};

/*
 * Convert an ICAP into an address
 * @method toAddress
 * @param {String} iban IBAN/ICAP, must have an address encoded
 * @returns {String}
 */
ICAP.toAddress = function (iban) {
  var address = ICAP.decode(iban);
  if (typeof address !== 'string') {
    throw new Error('Not an address-encoded ICAP');
  }
  return address;
};

/*
 * Convert an ICAP into an asset
 * @method toAsset
 * @param {String} iban IBAN/ICAP, must have an asset encoded
 * @returns {Object}
 */
ICAP.toAsset = function (iban) {
  var asset = ICAP.decode(iban);
  if ((typeof asset === 'undefined' ? 'undefined' : _typeof(asset)) !== 'object') {
    throw new Error('Not an asset-encoded ICAP');
  }
  return asset;
};

ICAP.isICAP = function (iban) {
  try {
    ICAP.decode(iban);
    return true;
  } catch (e) {
    return false;
  }
};

ICAP.isAddress = function (iban) {
  try {
    ICAP.toAddress(iban);
    return true;
  } catch (e) {
    return false;
  }
};

ICAP.isAsset = function (iban) {
  try {
    ICAP.toAsset(iban);
    return true;
  } catch (e) {
    return false;
  }
};

module.exports = ICAP;

},{"base-x":26,"convert-hex":65}],117:[function(require,module,exports){
(function (Buffer){
'use strict';

var ethUtil = require('ethereumjs-util');
var fees = require('ethereum-common/params');
var BN = ethUtil.BN;

// secp256k1n/2
var N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);

/**
 * Creates a new transaction object
 * @constructor
 * @class {Buffer|Array} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple. Or lastly an Object containing the Properties of the transaction like in the Usage example
 *
 * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum
 * @example
 * var rawTx = {
 *   nonce: '00',
 *   gasPrice: '09184e72a000',
 *   gasLimit: '2710',
 *   to: '0000000000000000000000000000000000000000',
 *   value: '00',
 *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',
 *   v: '1c',
 *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',
 *   s '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'
 * };
 * var tx = new Transaction(rawTx);
 * @prop {Buffer} raw The raw rlp decoded transaction
 * @prop {Buffer} nonce
 * @prop {Buffer} to the to address
 * @prop {Buffer} value the amount of ether sent
 * @prop {Buffer} data this will contain the data of the message or the init of a contract
 * @prop {Buffer} v EC signature parameter
 * @prop {Buffer} r EC signature parameter
 * @prop {Buffer} s EC recovery ID
 */
var Transaction = module.exports = function (data) {
  // Define Properties
  var fields = [{
    name: 'nonce',
    length: 32,
    allowLess: true,
    default: new Buffer([])
  }, {
    name: 'gasPrice',
    length: 32,
    allowLess: true,
    default: new Buffer([])
  }, {
    name: 'gasLimit',
    alias: 'gas',
    length: 32,
    allowLess: true,
    default: new Buffer([])
  }, {
    name: 'to',
    allowZero: true,
    length: 20,
    default: new Buffer([])
  }, {
    name: 'value',
    length: 32,
    allowLess: true,
    default: new Buffer([])
  }, {
    name: 'data',
    alias: 'input',
    allowZero: true,
    default: new Buffer([])
  }, {
    name: 'v',
    length: 1,
    default: new Buffer([0x1c])
  }, {
    name: 'r',
    length: 32,
    allowLess: true,
    default: new Buffer([])
  }, {
    name: 's',
    length: 32,
    allowLess: true,
    default: new Buffer([])
  }];

  /**
   * Returns the rlp encoding of the transaction
   * @method serialize
   * @return {Buffer}
   */
  // attached serialize
  ethUtil.defineProperties(this, fields, data);

  /**
   * @prop {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
   */
  Object.defineProperty(this, 'from', {
    enumerable: true,
    configurable: true,
    get: this.getSenderAddress.bind(this)
  });

  this._homestead = true;
};

/**
 * If the tx's `to` is to the creation address
 * @method toCreationAddress
 * @return {Boolean}
 */
Transaction.prototype.toCreationAddress = function () {
  return this.to.toString('hex') === '';
};

/**
 * Computes a sha3-256 hash of the serialized tx
 * @method hash
 * @param {Boolean} [signature=true] whether or not to inculde the signature
 * @return {Buffer}
 */
Transaction.prototype.hash = function (signature) {
  var toHash = void 0;

  if (typeof signature === 'undefined') {
    signature = true;
  }

  toHash = signature ? this.raw : this.raw.slice(0, 6);

  // create hash
  return ethUtil.rlphash(toHash);
};

/**
 * returns the sender's address
 * @method getSenderAddress
 * @return {Buffer}
 */
Transaction.prototype.getSenderAddress = function () {
  if (this._from) {
    return this._from;
  }
  var pubkey = this.getSenderPublicKey();
  this._from = ethUtil.publicToAddress(pubkey);
  return this._from;
};

/**
 * returns the public key of the sender
 * @method getSenderPublicKey
 * @return {Buffer}
 */
Transaction.prototype.getSenderPublicKey = function () {
  if (!this._senderPubKey || !this._senderPubKey.length) {
    this.verifySignature();
  }

  return this._senderPubKey;
};

/**
 * Determines if the signature is valid
 * @method verifySignature
 * @return {Boolean}
 */
Transaction.prototype.verifySignature = function () {
  var msgHash = this.hash(false);

  // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
  if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {
    return false;
  }

  try {
    this._senderPubKey = ethUtil.ecrecover(msgHash, this.v, this.r, this.s);
  } catch (e) {
    return false;
  }

  return !!this._senderPubKey;
};

/**
 * sign a transaction with a given a private key
 * @method sign
 * @param {Buffer} privateKey
 */
Transaction.prototype.sign = function (privateKey) {
  var msgHash = this.hash(false);
  var sig = ethUtil.ecsign(msgHash, privateKey);
  Object.assign(this, sig);
};

/**
 * The amount of gas paid for the data in this tx
 * @method getDataFee
 * @return {BN}
 */
Transaction.prototype.getDataFee = function () {
  var data = this.raw[5];
  var cost = new BN(0);
  for (var i = 0; i < data.length; i++) {
    data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);
  }
  return cost;
};

/**
 * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
 * @method getBaseFee
 * @return {BN}
 */
Transaction.prototype.getBaseFee = function () {
  var fee = this.getDataFee().iaddn(fees.txGas.v);
  if (this._homestead && this.toCreationAddress()) {
    fee.iaddn(fees.txCreation.v);
  }
  return fee;
};

/**
 * the up front amount that an account must have for this transaction to be valid
 * @method getUpfrontCost
 * @return {BN}
 */
Transaction.prototype.getUpfrontCost = function () {
  return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));
};

/**
 * validates the signature and checks to see if it has enough gas
 * @method validate
 * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean
 * @return {Boolean|String}
 */
Transaction.prototype.validate = function (stringError) {
  var errors = [];
  if (!this.verifySignature()) {
    errors.push('Invalid Signature');
  }

  if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {
    errors.push(['gas limit is to low. Need at least ' + this.getBaseFee()]);
  }

  if (stringError === undefined || stringError === false) {
    return errors.length === 0;
  } else {
    return errors.join(' ');
  }
};

}).call(this,require("buffer").Buffer)
},{"buffer":62,"ethereum-common/params":106,"ethereumjs-util":120}],118:[function(require,module,exports){
'use strict';

var BigNumber = require('bignumber.js');

var Units = {};

var rawUnits = require('./units.js');
var units = {};

Object.keys(rawUnits).map(function (unit) {
  units[unit] = new BigNumber(rawUnits[unit], 10);
});

Units.units = rawUnits;

Units.convert = function (value, from, to) {
  from = from.toLowerCase();
  if (!units[from]) {
    throw new Error('Unsupported input unit');
  }

  to = to.toLowerCase();
  if (!units[to]) {
    throw new Error('Unsupported output unit');
  }

  return new BigNumber(value, 10).mul(units[from]).div(units[to]).toString(10);
};

Units.lazyConvert = function (value, to) {
  var tmp = value.split(' ');
  if (tmp.length !== 2) {
    throw new Error('Invalid input');
  }
  return Units.convert(tmp[0], tmp[1], to) + ' ' + to;
};

module.exports = Units;

},{"./units.js":119,"bignumber.js":28}],119:[function(require,module,exports){
'use strict';

// Compatible with web3 plus includes 'eth'

/* eslint-disable key-spacing */
module.exports = {
  'wei': '1',
  'kwei': '1000',
  'Kwei': '1000',
  'babbage': '1000',
  'femtoether': '1000',
  'mwei': '1000000',
  'Mwei': '1000000',
  'lovelace': '1000000',
  'picoether': '1000000',
  'gwei': '1000000000',
  'Gwei': '1000000000',
  'shannon': '1000000000',
  'nanoether': '1000000000',
  'nano': '1000000000',
  'szabo': '1000000000000',
  'microether': '1000000000000',
  'micro': '1000000000000',
  'finney': '1000000000000000',
  'milliether': '1000000000000000',
  'milli': '1000000000000000',
  'ether': '1000000000000000000',
  'eth': '1000000000000000000',
  'kether': '1000000000000000000000',
  'grand': '1000000000000000000000',
  'mether': '1000000000000000000000000',
  'gether': '1000000000000000000000000000',
  'tether': '1000000000000000000000000000000'
};

},{}],120:[function(require,module,exports){
(function (Buffer){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var SHA3 = require('keccakjs');
var secp256k1 = require('secp256k1');
var assert = require('assert');
var rlp = require('rlp');
var BN = require('bn.js');
var createHash = require('create-hash');

/**
 * the max integer that this VM can handle (a ```BN```)
 * @var {BN} MAX_INTEGER
 */
exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

/**
 * 2^256 (a ```BN```)
 * @var {BN} TWO_POW256
 */
exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);

/**
 * SHA3-256 hash of null (a ```String```)
 * @var {String} SHA3_NULL_S
 */
exports.SHA3_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';

/**
 * SHA3-256 hash of null (a ```Buffer```)
 * @var {Buffer} SHA3_NULL
 */
exports.SHA3_NULL = new Buffer(exports.SHA3_NULL_S, 'hex');

/**
 * SHA3-256 of an RLP of an empty array (a ```String```)
 * @var {String} SHA3_RLP_ARRAY_S
 */
exports.SHA3_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';

/**
 * SHA3-256 of an RLP of an empty array (a ```Buffer```)
 * @var {Buffer} SHA3_RLP_ARRAY
 */
exports.SHA3_RLP_ARRAY = new Buffer(exports.SHA3_RLP_ARRAY_S, 'hex');

/**
 * SHA3-256 hash of the RLP of null  (a ```String```)
 * @var {String} SHA3_RLP_S
 */
exports.SHA3_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';

/**
 * SHA3-256 hash of the RLP of null (a ```Buffer```)
 * @var {Buffer} SHA3_RLP
 */
exports.SHA3_RLP = new Buffer(exports.SHA3_RLP_S, 'hex');

/**
 * [`BN`](https://github.com/indutny/bn.js)
 * @var {Function}
 */
exports.BN = BN;

/**
 * [`rlp`](https://github.com/ethereumjs/rlp)
 * @var {Function}
 */
exports.rlp = rlp;

/**
 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
 * @var {Object}
 */
exports.secp256k1 = secp256k1;

/**
 * Returns a buffer filled with 0s
 * @method zeros
 * @param {Number} bytes  the number of bytes the buffer should be
 * @return {Buffer}
 */
exports.zeros = function (bytes) {
  var buf = new Buffer(bytes);
  buf.fill(0);
  return buf;
};

/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method lsetLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @param {Boolean} [right=false] whether to start padding form the left or right
 * @return {Buffer|Array}
 */
exports.setLengthLeft = exports.setLength = function (msg, length, right) {
  var buf = exports.zeros(length);
  msg = exports.toBuffer(msg);
  if (right) {
    if (msg.length < length) {
      msg.copy(buf);
      return buf;
    }
    return msg.slice(0, length);
  } else {
    if (msg.length < length) {
      msg.copy(buf, length - msg.length);
      return buf;
    }
    return msg.slice(-length);
  }
};

/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method lsetLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @return {Buffer|Array}
 */
exports.setLengthRight = function (msg, length) {
  return exports.setLength(msg, length, true);
};

/**
 * Trims leading zeros from a `Buffer` or an `Array`
 * @method unpad
 * @param {Buffer|Array|String} a
 * @return {Buffer|Array|String}
 */
exports.unpad = exports.stripZeros = function (a) {
  a = exports.stripHexPrefix(a);
  var first = a[0];
  while (a.length > 0 && first.toString() === '0') {
    a = a.slice(1);
    first = a[0];
  }
  return a;
};
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @method toBuffer
 * @param {*} v the value
 */
exports.toBuffer = function (v) {
  if (!Buffer.isBuffer(v)) {
    if (Array.isArray(v)) {
      v = new Buffer(v);
    } else if (typeof v === 'string') {
      if (exports.isHexPrefixed(v)) {
        v = new Buffer(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
      } else {
        v = new Buffer(v);
      }
    } else if (typeof v === 'number') {
      v = exports.intToBuffer(v);
    } else if (v === null || v === undefined) {
      v = new Buffer([]);
    } else if (v.toArray) {
      // converts a BN to a Buffer
      v = new Buffer(v.toArray());
    } else {
      throw new Error('invalid type');
    }
  }
  return v;
};

/**
 * Converts a `Number` into a hex `String`
 * @method intToHex
 * @param {Number} i
 * @return {String}
 */
exports.intToHex = function (i) {
  assert(i % 1 === 0, 'number is not a integer');
  assert(i >= 0, 'number must be positive');
  var hex = i.toString(16);
  if (hex.length % 2) {
    hex = '0' + hex;
  }

  return '0x' + hex;
};

/**
 * Converts an `Number` to a `Buffer`
 * @method intToBuffer
 * @param {Number} i
 * @return {Buffer}
 */
exports.intToBuffer = function (i) {
  var hex = exports.intToHex(i);
  return new Buffer(hex.slice(2), 'hex');
};

/**
 * Converts a `Buffer` to a `Number`
 * @method bufferToInt
 * @param {Buffer} buf
 * @return {Number}
 */
exports.bufferToInt = function (buf) {
  return parseInt(exports.bufferToHex(buf), 16);
};

/**
 * Converts a `Buffer` into a hex `String`
 * @method bufferToHex
 * @param {Buffer} buf
 * @return {String}
 */
exports.bufferToHex = function (buf) {
  buf = exports.toBuffer(buf);
  if (buf.length === 0) {
    return 0;
  }

  return '0x' + buf.toString('hex');
};

/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @method fromSigned
 * @param {Buffer} num
 * @return {BN}
 */
exports.fromSigned = function (num) {
  return new BN(num).fromTwos(256);
};

/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @method toUnsigned
 * @param {BN} num
 * @return {Buffer}
 */
exports.toUnsigned = function (num) {
  return new Buffer(num.toTwos(256).toArray());
};

/**
 * Creates SHA-3 hash of the input
 * @method sha3
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bytes=256] the SHA width
 * @return {Buffer}
 */
exports.sha3 = function (a, bytes) {
  a = exports.toBuffer(a);
  if (!bytes) bytes = 256;

  var h = new SHA3(bytes);
  if (a) {
    h.update(a);
  }
  return new Buffer(h.digest('hex'), 'hex');
};

/**
 * Creates SHA256 hash of the input
 * @method sha256
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.sha256 = function (a) {
  a = exports.toBuffer(a);
  return createHash('sha256').update(a).digest();
};

/**
 * Creates RIPEMD160 hash of the input
 * @method ripemd160
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Boolean} padded whether it should be padded to 256 bits or not
 * @return {Buffer}
 */
exports.ripemd160 = function (a, padded) {
  a = exports.toBuffer(a);
  var hash = createHash('rmd160').update(a).digest();
  if (padded === true) {
    return exports.setLength(hash, 32);
  } else {
    return hash;
  }
};

/**
 * Creates SHA-3 hash of the RLP encoded version of the input
 * @method rlphash
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.rlphash = function (a) {
  return exports.sha3(rlp.encode(a));
};

/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 * @method isValidPrivate
 * @param {Buffer} privateKey
 * @return {Boolean}
 */
exports.isValidPrivate = function (privateKey) {
  return secp256k1.privateKeyVerify(privateKey);
};

/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @method isValidPublic
 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Boolean}
 */
exports.isValidPublic = function (publicKey, sanitize) {
  if (publicKey.length === 64) {
    // Convert to SEC1 for secp256k1
    return secp256k1.publicKeyVerify(Buffer.concat([new Buffer([4]), publicKey]));
  }

  if (!sanitize) {
    return false;
  }

  return secp256k1.publicKeyVerify(publicKey);
};

/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @method publicToAddress
 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Buffer}
 */
exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
  pubKey = exports.toBuffer(pubKey);
  if (sanitize && pubKey.length !== 64) {
    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
  }
  assert(pubKey.length === 64);
  // Only take the lower 160bits of the hash
  return exports.sha3(pubKey).slice(-20);
};

/**
 * Returns the ethereum public key of a given private key
 * @method privateToPublic
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
var privateToPublic = exports.privateToPublic = function (privateKey) {
  privateKey = exports.toBuffer(privateKey);
  // skip the type flag and use the X, Y points
  return secp256k1.publicKeyCreate(privateKey, false).slice(1);
};

/**
 * Converts a public key to the Ethereum format.
 * @method importPublic
 * @param {Buffer} publicKey
 * @return {Buffer}
 */
exports.importPublic = function (publicKey) {
  publicKey = exports.toBuffer(publicKey);
  if (publicKey.length !== 64) {
    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
  }
  return publicKey;
};

/**
 * ECDSA sign
 * @method ecsign
 * @param {Buffer} msgHash
 * @param {Buffer} privateKey
 * @return {Object}
 */
exports.ecsign = function (msgHash, privateKey) {
  var sig = secp256k1.sign(msgHash, privateKey);

  var ret = {};
  ret.r = sig.signature.slice(0, 32);
  ret.s = sig.signature.slice(32, 64);
  ret.v = sig.recovery + 27;
  return ret;
};

/**
 * ECDSA public key recovery from signature
 * @method ecrecover
 * @param {Buffer} msgHash
 * @param {Buffer} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {Buffer} publicKey
 */
exports.ecrecover = function (msgHash, v, r, s) {
  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
  var recovery = exports.bufferToInt(v) - 27;
  if (recovery !== 0 && recovery !== 1) {
    throw new Error('Invalid signature v value');
  }
  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
};

/**
 * Convert signature parameters into the format of `eth_sign` RPC method
 * @method toRpcSig
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {String} sig
 */
exports.toRpcSig = function (v, r, s) {
  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
  return exports.bufferToHex(Buffer.concat([r, s, exports.toBuffer(v - 27)]));
};

/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * @method fromRpcSig
 * @param {String} sig
 * @return {Object}
 */
exports.fromRpcSig = function (sig) {
  sig = exports.toBuffer(sig);

  var v = sig[64];
  // support both versions of `eth_sign` responses
  if (v < 27) {
    v += 27;
  }

  return {
    v: v,
    r: sig.slice(0, 32),
    s: sig.slice(32, 64)
  };
};

/**
 * Returns the ethereum address of a given private key
 * @method privateToAddress
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
exports.privateToAddress = function (privateKey) {
  return exports.publicToAddress(privateToPublic(privateKey));
};

/**
 * Checks if the address is a valid. Accepts checksummed addresses too
 * @method isValidAddress
 * @param {String} address
 * @return {Boolean}
 */
exports.isValidAddress = function (address) {
  return (/^0x[0-9a-fA-F]{40}$/i.test(address)
  );
};

/**
 * Returns a checksummed address
 * @method toChecksumAddress
 * @param {String} address
 * @return {String}
 */
exports.toChecksumAddress = function (address) {
  address = exports.stripHexPrefix(address).toLowerCase();
  var hash = exports.sha3(address).toString('hex');
  var ret = '0x';

  for (var i = 0; i < address.length; i++) {
    if (parseInt(hash[i], 16) >= 8) {
      ret += address[i].toUpperCase();
    } else {
      ret += address[i];
    }
  }

  return ret;
};

/**
 * Checks if the address is a valid checksummed address
 * @method isValidChecksumAddress
 * @param {Buffer} address
 * @return {Boolean}
 */
exports.isValidChecksumAddress = function (address) {
  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
};

/**
 * Generates an address of a newly created contract
 * @method generateAddress
 * @param {Buffer} from the address which is creating this new address
 * @param {Buffer} nonce the nonce of the from account
 * @return {Buffer}
 */
exports.generateAddress = function (from, nonce) {
  from = exports.toBuffer(from);
  nonce = new BN(nonce);

  if (nonce.isZero()) {
    // in RLP we want to encode null in the case of zero nonce
    // read the RLP documentation for an answer if you dare
    nonce = null;
  } else {
    nonce = new Buffer(nonce.toArray());
  }

  // Only take the lower 160bits of the hash
  return exports.rlphash([from, nonce]).slice(-20);
};

/**
 * Returns true if the supplied address belongs to a precompiled account
 * @method isPrecompiled
 * @param {Buffer|String} address
 * @return {Boolean}
 */
exports.isPrecompiled = function (address) {
  var a = exports.unpad(address);
  return a.length === 1 && a[0] > 0 && a[0] < 5;
};

/**
 * Returns a `Boolean` on whether or not the a `String` starts with "0x"
 * @method isHexPrefixed
 * @param {String} str
 * @return {Boolean}
 */
exports.isHexPrefixed = function (str) {
  return str.slice(0, 2) === '0x';
};

/**
 * Removes "0x" from a given `String`
 * @method stripHexPrefix
 * @param {String} str
 * @return {String}
 */
exports.stripHexPrefix = function (str) {
  if (typeof str !== 'string') {
    return str;
  }
  return exports.isHexPrefixed(str) ? str.slice(2) : str;
};

/**
 * Adds "0x" to a given `String` if it does not already start with "0x"
 * @method addHexPrefix
 * @param {String} str
 * @return {String}
 */
exports.addHexPrefix = function (str) {
  if (typeof str !== 'string') {
    return str;
  }

  return exports.isHexPrefixed(str) ? str : '0x' + str;
};

/**
 * Pads a `String` to have an even length
 * @method padToEven
 * @param {String} a
 * @return {String}
 */
exports.padToEven = function (a) {
  if (a.length % 2) a = '0' + a;
  return a;
};

/**
 * Converts a `Buffer` or `Array` to JSON
 * @method BAToJSON
 * @param {Buffer|Array} ba
 * @return {Array|String|null}
 */
exports.baToJSON = function (ba) {
  if (Buffer.isBuffer(ba)) {
    return '0x' + ba.toString('hex');
  } else if (ba instanceof Array) {
    var array = [];
    for (var i = 0; i < ba.length; i++) {
      array.push(exports.baToJSON(ba[i]));
    }
    return array;
  }
};

/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @method defineProperties
 * @param {Object} self the `Object` to define properties on
 * @param {Array} fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param {*} data data to be validated against the definitions
 */
exports.defineProperties = function (self, fields, data) {
  self.raw = [];
  self._fields = [];

  // attach the `toJSON`
  self.toJSON = function (label) {
    if (label) {
      var obj = {};
      self._fields.forEach(function (field) {
        obj[field] = '0x' + self[field].toString('hex');
      });
      return obj;
    }
    return exports.baToJSON(this.raw);
  };

  self.serialize = function serialize() {
    return rlp.encode(self.raw);
  };

  fields.forEach(function (field, i) {
    self._fields.push(field.name);
    function getter() {
      return self.raw[i];
    }
    function setter(v) {
      v = exports.toBuffer(v);

      if (v.toString('hex') === '00' && !field.allowZero) {
        v = new Buffer([]);
      }

      if (field.allowLess && field.length) {
        v = exports.stripZeros(v);
        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
      } else if (!(field.allowZero && v.length === 0) && field.length) {
        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
      }

      self.raw[i] = v;
    }

    Object.defineProperty(self, field.name, {
      enumerable: true,
      configurable: true,
      get: getter,
      set: setter
    });

    if (field.default) {
      self[field.name] = field.default;
    }

    // attach alias
    if (field.alias) {
      Object.defineProperty(self, field.alias, {
        enumerable: false,
        configurable: true,
        set: setter,
        get: getter
      });
    }
  });

  // if the constuctor is passed data
  if (data) {
    if (typeof data === 'string') {
      data = new Buffer(exports.stripHexPrefix(data), 'hex');
    }

    if (Buffer.isBuffer(data)) {
      data = rlp.decode(data);
    }

    if (Array.isArray(data)) {
      if (data.length > self._fields.length) {
        throw new Error('wrong number of fields in data');
      }

      // make sure all the items are buffers
      data.forEach(function (d, i) {
        self[self._fields[i]] = exports.toBuffer(d);
      });
    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
      for (var prop in data) {
        if (self._fields.indexOf(prop) !== -1) {
          self[prop] = data[prop];
        }
      }
    } else {
      throw new Error('invalid data');
    }
  }
};

}).call(this,require("buffer").Buffer)
},{"assert":21,"bn.js":30,"buffer":62,"create-hash":68,"keccakjs":164,"rlp":234,"secp256k1":237}],121:[function(require,module,exports){
arguments[4][107][0].apply(exports,arguments)
},{"./lib/index.js":126,"dup":107}],122:[function(require,module,exports){
(function (Buffer){
'use strict';

var assert = require('assert');
var utils = require('ethereumjs-util');
var byteSize = 256;

/**
 * Represents a Bloom
 * @constructor
 * @param {Buffer} bitvector
 */
var Bloom = module.exports = function (bitvector) {
  if (!bitvector) {
    this.bitvector = utils.zeros(byteSize);
  } else {
    assert(bitvector.length === byteSize, 'bitvectors must be 2048 bits long');
    this.bitvector = bitvector;
  }
};

/**
 * adds an element to a bit vector of a 64 byte bloom filter
 * @method add
 * @param {Buffer} element
 */
Bloom.prototype.add = function (e) {
  e = utils.sha3(e);
  var mask = 2047; // binary 11111111111

  for (var i = 0; i < 3; i++) {
    var first2bytes = e.readUInt16BE(i * 2);
    var loc = mask & first2bytes;
    var byteLoc = loc >> 3;
    var bitLoc = 1 << loc % 8;
    this.bitvector[byteSize - byteLoc - 1] |= bitLoc;
  }
};

/**
 * checks if an element is in the blooom
 * @method check
 * @param {Buffer} element
 */
Bloom.prototype.check = function (e) {
  e = utils.sha3(e);
  var mask = 511; // binary 111111111
  var match = true;

  for (var i = 0; i < 3 && match; i++) {
    var first2bytes = e.readUInt16BE(i * 2);
    var loc = mask & first2bytes;
    var byteLoc = loc >> 3;
    var bitLoc = 1 << loc % 8;
    match = this.bitvector[byteSize - byteLoc - 1] & bitLoc;
  }

  return Boolean(match);
};

/**
 * checks if multple topics are in a bloom
 * @method check
 * @param {Buffer} element
 */
Bloom.prototype.multiCheck = function (topics) {
  var self = this;
  var match = true;
  topics.forEach(function (t) {
    if (!Buffer.isBuffer(t)) {
      t = new Buffer(t, 'hex');
    }

    match && self.check(t);
  });

  return match;
};

/**
 * bitwise or blooms together
 * @method or
 * @param {Bloom} bloom
 */
Bloom.prototype.or = function (bloom) {
  if (bloom) {
    for (var i = 0; i <= byteSize; i++) {
      this.bitvector[i] = this.bitvector[i] | bloom.bitvector[i];
    }
  }
};

}).call(this,require("buffer").Buffer)
},{"assert":21,"buffer":62,"ethereumjs-util":120}],123:[function(require,module,exports){
(function (Buffer){
'use strict';

var Tree = require('functional-red-black-tree');
var Account = require('ethereumjs-account');
var async = require('async');

var Cache = module.exports = function (trie) {
  this._cache = Tree();
  this._checkpoints = [];
  this._deletes = [];
  this._trie = trie;
};

Cache.prototype.put = function (key, val, fromTrie) {
  var modified = !fromTrie;
  this._update(key, val, modified, true);
};

// returns the queried account or an empty account
Cache.prototype.get = function (key) {
  var account = this.lookup(key);
  if (!account) {
    account = new Account();
    account.exists = false;
  }
  return account;
};

// returns the queried account or undefined
Cache.prototype.lookup = function (key) {
  key = key.toString('hex');

  var it = this._cache.find(key);
  if (it.node) {
    var account = new Account(it.value.val);
    account.exists = it.value.exists;
    return account;
  }
};

Cache.prototype._lookupAccount = function (address, cb) {
  var self = this;
  self._trie.get(address, function (err, raw) {
    if (err) return cb(err);
    var account = new Account(raw);
    var exists = !!raw;
    account.exists = exists;
    cb(null, account, exists);
  });
};

Cache.prototype.getOrLoad = function (key, cb) {
  var self = this;
  var account = this.lookup(key);
  if (account) {
    cb(null, account);
  } else {
    self._lookupAccount(key, function (err, account, exists) {
      if (err) return cb(err);
      self._update(key, account, false, exists);
      cb(null, account);
    });
  }
};

Cache.prototype.warm = function (addresses, cb) {
  var self = this;
  // shim till async supports iterators
  var accountArr = [];
  addresses.forEach(function (val) {
    if (val) accountArr.push(val);
  });

  async.eachSeries(accountArr, function (addressHex, done) {
    var address = new Buffer(addressHex, 'hex');
    self._lookupAccount(address, function (err, account) {
      if (err) return done(err);
      self._update(address, account, false, account.exists);
      done();
    });
  }, cb);
};

Cache.prototype.flush = function (cb) {
  var it = this._cache.begin;
  var self = this;
  var next = true;
  async.whilst(function () {
    return next;
  }, function (done) {
    if (it.value.modified) {
      it.value.modified = false;
      it.value.val = it.value.val.serialize();
      self._trie.put(new Buffer(it.key, 'hex'), it.value.val, function () {
        next = it.hasNext;
        it.next();
        done();
      });
    } else {
      next = it.hasNext;
      it.next();
      done();
    }
  }, function () {
    async.eachSeries(self._deletes, function (address, done) {
      self._trie.del(address, done);
    }, function () {
      self._deletes = [];
      cb();
    });
  });
};

Cache.prototype.checkpoint = function () {
  this._checkpoints.push(this._cache);
};

Cache.prototype.revert = function () {
  this._cache = this._checkpoints.pop(this._cache);
};

Cache.prototype.commit = function () {
  this._checkpoints.pop();
};

Cache.prototype.clear = function () {
  this._deletes = [];
  this._cache = Tree();
};

Cache.prototype.del = function (key) {
  this._deletes.push(key);
  key = key.toString('hex');
  this._cache = this._cache.remove(key);
};

Cache.prototype._update = function (key, val, modified, exists) {
  key = key.toString('hex');
  var it = this._cache.find(key);
  if (it.node) {
    this._cache = it.update({
      val: val,
      modified: modified,
      exists: true
    });
  } else {
    this._cache = this._cache.insert(key, {
      val: val,
      modified: modified,
      exists: exists
    });
  }
};

}).call(this,require("buffer").Buffer)
},{"async":25,"buffer":62,"ethereumjs-account":109,"functional-red-black-tree":150}],124:[function(require,module,exports){
'use strict';

exports.ERROR = {
  OUT_OF_GAS: 'out of gas',
  STACK_UNDERFLOW: 'stack underflow',
  INVALID_JUMP: 'invalid JUMP',
  INVALID_OPCODE: 'invalid opcode'
};

},{}],125:[function(require,module,exports){
(function (Buffer){
'use strict';

var utils = require('ethereumjs-util');

module.exports = {
  getBlock: function getBlock(n, cb) {
    var _hash = utils.sha3(new Buffer(utils.bufferToInt(n).toString()));

    var block = {
      hash: function hash() {
        return _hash;
      }
    };

    cb(null, block);
  }
};

}).call(this,require("buffer").Buffer)
},{"buffer":62,"ethereumjs-util":120}],126:[function(require,module,exports){
(function (Buffer){
'use strict';

var util = require('util');
var StateManager = require('./stateManager.js');
var Account = require('ethereumjs-account');
var AsyncEventEmitter = require('async-eventemitter');

// require the percomiled contracts
var num01 = require('./precompiled/01-ecrecover.js');
var num02 = require('./precompiled/02-sha256.js');
var num03 = require('./precompiled/03-ripemd160.js');
var num04 = require('./precompiled/04-identity.js');

module.exports = VM;

VM.deps = {
  ethUtil: require('ethereumjs-util'),
  Account: require('ethereumjs-account'),
  Trie: require('merkle-patricia-tree'),
  rlp: require('ethereumjs-util').rlp
};

/**
 * @constructor
 * @param {Trie} [trie] A merkle-patricia-tree instance for the state tree
 * @param {Blockchain} [blockchain] A blockchain object for storing/retrieving blocks
 * @param {Object} [opts]
 * @param {Boolean} [opts.activatePrecompiles] Create entries in the state tree for the precompiled contracts
 * @param {Boolean} [opts.enableHomestead] Force enable Homestead irrelevant to block number
 */
function VM(trie, blockchain, opts) {
  this.stateManager = new StateManager({
    trie: trie,
    blockchain: blockchain
  });

  // temporary
  // this is here for a gradual transition to StateManager
  this.blockchain = this.stateManager.blockchain;
  this.trie = this.stateManager.trie;
  this.opts = opts || {};

  // precompiled contracts
  this._precompiled = {};
  this._precompiled['0000000000000000000000000000000000000001'] = num01;
  this._precompiled['0000000000000000000000000000000000000002'] = num02;
  this._precompiled['0000000000000000000000000000000000000003'] = num03;
  this._precompiled['0000000000000000000000000000000000000004'] = num04;

  if (this.opts.activatePrecompiles) {
    for (var i = 1; i <= 4; i++) {
      this.trie.put(new Buffer('000000000000000000000000000000000000000' + i, 'hex'), new Account().serialize());
    }
  }

  AsyncEventEmitter.call(this);
}

util.inherits(VM, AsyncEventEmitter);

VM.prototype.runCode = require('./runCode.js');
VM.prototype.runJIT = require('./runJit.js');
VM.prototype.runBlock = require('./runBlock.js');
VM.prototype.runTx = require('./runTx.js');
VM.prototype.runCall = require('./runCall.js');
VM.prototype.runBlockchain = require('./runBlockchain.js');

VM.prototype.copy = function () {
  var trie = this.trie.copy();
  return new VM(trie, this.blockchain);
};

/**
 * Loads precompiled contracts into the state
 */
VM.prototype.loadCompiled = function (address, src, cb) {
  this.trie.db.put(address, src, cb);
};

VM.prototype.populateCache = function (addresses, cb) {
  this.stateManager.warmCache(addresses, cb);
};

}).call(this,require("buffer").Buffer)
},{"./precompiled/01-ecrecover.js":130,"./precompiled/02-sha256.js":131,"./precompiled/03-ripemd160.js":132,"./precompiled/04-identity.js":133,"./runBlock.js":134,"./runBlockchain.js":135,"./runCall.js":136,"./runCode.js":137,"./runJit.js":138,"./runTx.js":139,"./stateManager.js":140,"async-eventemitter":22,"buffer":62,"ethereumjs-account":109,"ethereumjs-util":120,"merkle-patricia-tree":194,"util":259}],127:[function(require,module,exports){
'use strict';

var utils = require('ethereumjs-util');
var BN = utils.BN;
var pow32 = new BN('010000000000000000000000000000000000000000000000000000000000000000', 16);
var pow31 = new BN('0100000000000000000000000000000000000000000000000000000000000000', 16);
var pow30 = new BN('01000000000000000000000000000000000000000000000000000000000000', 16);
var pow29 = new BN('010000000000000000000000000000000000000000000000000000000000', 16);
var pow28 = new BN('0100000000000000000000000000000000000000000000000000000000', 16);
var pow27 = new BN('01000000000000000000000000000000000000000000000000000000', 16);
var pow26 = new BN('010000000000000000000000000000000000000000000000000000', 16);
var pow25 = new BN('0100000000000000000000000000000000000000000000000000', 16);
var pow24 = new BN('01000000000000000000000000000000000000000000000000', 16);
var pow23 = new BN('010000000000000000000000000000000000000000000000', 16);
var pow22 = new BN('0100000000000000000000000000000000000000000000', 16);
var pow21 = new BN('01000000000000000000000000000000000000000000', 16);
var pow20 = new BN('010000000000000000000000000000000000000000', 16);
var pow19 = new BN('0100000000000000000000000000000000000000', 16);
var pow18 = new BN('01000000000000000000000000000000000000', 16);
var pow17 = new BN('010000000000000000000000000000000000', 16);
var pow16 = new BN('0100000000000000000000000000000000', 16);
var pow15 = new BN('01000000000000000000000000000000', 16);
var pow14 = new BN('010000000000000000000000000000', 16);
var pow13 = new BN('0100000000000000000000000000', 16);
var pow12 = new BN('01000000000000000000000000', 16);
var pow11 = new BN('010000000000000000000000', 16);
var pow10 = new BN('0100000000000000000000', 16);
var pow9 = new BN('01000000000000000000', 16);
var pow8 = new BN('010000000000000000', 16);
var pow7 = new BN('0100000000000000', 16);
var pow6 = new BN('01000000000000', 16);
var pow5 = new BN('010000000000', 16);
var pow4 = new BN('0100000000', 16);
var pow3 = new BN('01000000', 16);
var pow2 = new BN('010000', 16);
var pow1 = new BN('0100', 16);

module.exports = function (a) {
  if (a.cmp(pow1) === -1) {
    return 0;
  } else if (a.cmp(pow2) === -1) {
    return 1;
  } else if (a.cmp(pow3) === -1) {
    return 2;
  } else if (a.cmp(pow4) === -1) {
    return 3;
  } else if (a.cmp(pow5) === -1) {
    return 4;
  } else if (a.cmp(pow6) === -1) {
    return 5;
  } else if (a.cmp(pow7) === -1) {
    return 6;
  } else if (a.cmp(pow8) === -1) {
    return 7;
  } else if (a.cmp(pow9) === -1) {
    return 8;
  } else if (a.cmp(pow10) === -1) {
    return 9;
  } else if (a.cmp(pow11) === -1) {
    return 10;
  } else if (a.cmp(pow12) === -1) {
    return 11;
  } else if (a.cmp(pow13) === -1) {
    return 12;
  } else if (a.cmp(pow14) === -1) {
    return 13;
  } else if (a.cmp(pow15) === -1) {
    return 14;
  } else if (a.cmp(pow16) === -1) {
    return 15;
  } else if (a.cmp(pow17) === -1) {
    return 16;
  } else if (a.cmp(pow18) === -1) {
    return 17;
  } else if (a.cmp(pow19) === -1) {
    return 18;
  } else if (a.cmp(pow20) === -1) {
    return 19;
  } else if (a.cmp(pow21) === -1) {
    return 20;
  } else if (a.cmp(pow22) === -1) {
    return 21;
  } else if (a.cmp(pow23) === -1) {
    return 22;
  } else if (a.cmp(pow24) === -1) {
    return 23;
  } else if (a.cmp(pow25) === -1) {
    return 24;
  } else if (a.cmp(pow26) === -1) {
    return 25;
  } else if (a.cmp(pow27) === -1) {
    return 26;
  } else if (a.cmp(pow28) === -1) {
    return 27;
  } else if (a.cmp(pow29) === -1) {
    return 28;
  } else if (a.cmp(pow30) === -1) {
    return 29;
  } else if (a.cmp(pow31) === -1) {
    return 30;
  } else if (a.cmp(pow32) === -1) {
    return 31;
  } else {
    return 32;
  }
};

},{"ethereumjs-util":120}],128:[function(require,module,exports){
(function (Buffer){
'use strict';

var async = require('async');
var fees = require('ethereum-common');
var utils = require('ethereumjs-util');
var BN = utils.BN;
var constants = require('./constants.js');
var logTable = require('./logTable.js');
var ERROR = constants.ERROR;
var MAX_INT = 9007199254740991;

// the opcode functions
module.exports = {
  STOP: function STOP(runState) {
    runState.stopped = true;
  },
  ADD: function ADD(a, b, runState) {
    return new Buffer(new BN(a).add(new BN(b)).mod(utils.TWO_POW256).toArray());
  },
  MUL: function MUL(a, b, runState) {
    return new Buffer(new BN(a).mul(new BN(b)).mod(utils.TWO_POW256).toArray());
  },
  SUB: function SUB(a, b, runState) {
    return utils.toUnsigned(new BN(a).sub(new BN(b)));
  },
  DIV: function DIV(a, b, runState) {
    a = new BN(a);
    b = new BN(b);
    var r;
    if (b.isZero()) {
      r = [0];
    } else {
      r = a.div(b).toArray();
    }
    return new Buffer(r);
  },
  SDIV: function SDIV(a, b, runState) {
    a = utils.fromSigned(a);
    b = utils.fromSigned(b);

    var r;
    if (b.isZero()) {
      r = new Buffer([0]);
    } else {
      r = utils.toUnsigned(a.div(b));
    }

    return r;
  },
  MOD: function MOD(a, b, runState) {
    a = new BN(a);
    b = new BN(b);
    var r;

    if (b.isZero()) {
      r = [0];
    } else {
      r = a.mod(b).toArray();
    }

    return new Buffer(r);
  },
  SMOD: function SMOD(a, b, runState) {
    a = utils.fromSigned(a);
    b = utils.fromSigned(b);
    var r;

    if (b.isZero()) {
      r = new Buffer([0]);
    } else {
      r = a.abs().mod(b.abs());
      if (a.isNeg()) {
        r = r.neg();
      }

      r = utils.toUnsigned(r);
    }
    return r;
  },
  ADDMOD: function ADDMOD(a, b, c, runState) {
    a = new BN(a).add(new BN(b));
    c = new BN(c);
    var r;

    if (c.isZero()) {
      r = [0];
    } else {
      r = a.mod(c).toArray();
    }

    return new Buffer(r);
  },
  MULMOD: function MULMOD(a, b, c, runState) {
    a = new BN(a).mul(new BN(b));
    c = new BN(c);
    var r;

    if (c.isZero()) {
      r = [0];
    } else {
      r = a.mod(c).toArray();
    }

    return new Buffer(r);
  },
  EXP: function EXP(base, exponent, runState) {
    base = new BN(base);
    exponent = new BN(exponent);
    var m = BN.red(utils.TWO_POW256);
    var result;

    base = base.toRed(m);

    if (!exponent.isZero()) {
      var bytes = 1 + logTable(exponent);
      subGas(runState, new BN(bytes).muln(fees.expByteGas.v));
      result = new Buffer(base.redPow(exponent).toArray());
    } else {
      result = new Buffer([1]);
    }

    return result;
  },
  SIGNEXTEND: function SIGNEXTEND(k, runState) {
    k = new BN(k);
    var extendOnes = false;

    if (k.cmpn(31) <= 0) {
      k = k.toNumber();

      var val = new Buffer(utils.setLengthLeft(runState.stack.pop(), 32));

      if (val[31 - k] & 0x80) {
        extendOnes = true;
      }

      // 31-k-1 since k-th byte shouldn't be modified
      for (var i = 30 - k; i >= 0; i--) {
        val[i] = extendOnes ? 0xff : 0;
      }

      return val;
    }
  },
  // 0x10 range - bit ops
  LT: function LT(a, b, runState) {
    return new Buffer([new BN(a).cmp(new BN(b)) === -1]);
  },
  GT: function GT(a, b, runState) {
    return new Buffer([new BN(a).cmp(new BN(b)) === 1]);
  },
  SLT: function SLT(a, b, runState) {
    runState.stack.push(new Buffer([utils.fromSigned(a).cmp(utils.fromSigned(b)) === -1]));
  },
  SGT: function SGT(a, b, runState) {
    return new Buffer([utils.fromSigned(a).cmp(utils.fromSigned(b)) === 1]);
  },
  EQ: function EQ(a, b, runState) {
    a = utils.unpad(a);
    b = utils.unpad(b);
    return new Buffer([a.toString('hex') === b.toString('hex')]);
  },
  ISZERO: function ISZERO(a, runState) {
    a = utils.bufferToInt(a);
    return new Buffer([!a]);
  },
  AND: function AND(a, b, runState) {
    return new Buffer(new BN(a).and(new BN(b)).toArray());
  },
  OR: function OR(a, b, runState) {
    return new Buffer(new BN(a).or(new BN(b)).toArray());
  },
  XOR: function XOR(a, b, runState) {
    return new Buffer(new BN(a).xor(new BN(b)).toArray());
  },
  NOT: function NOT(a, runState) {
    return new Buffer(new BN(a).inotn(256).toArray());
  },
  BYTE: function BYTE(pos, word, runState) {
    pos = utils.bufferToInt(pos);
    word = utils.setLengthLeft(word, 32);
    var byte;

    if (pos < 32) {
      byte = utils.intToBuffer(word[pos]);
    } else {
      byte = new Buffer([0]);
    }

    return byte;
  },
  // 0x20 range - crypto
  SHA3: function SHA3(offset, length, runState) {
    offset = utils.bufferToInt(offset);
    length = utils.bufferToInt(length);
    var data = memLoad(runState, offset, length);
    // copy fee
    subGas(runState, new BN(fees.sha3WordGas.v).imuln(Math.ceil(length / 32)));
    return utils.sha3(data);
  },
  // 0x30 range - closure state
  ADDRESS: function ADDRESS(runState) {
    return runState.address;
  },
  BALANCE: function BALANCE(address, runState, cb) {
    var stateManager = runState.stateManager;
    // stack to address
    address = utils.setLengthLeft(address.slice(-20), 20);

    // shortcut if current account
    if (address.toString('hex') === runState.address.toString('hex')) {
      cb(null, runState.contract.balance);
      return;
    }

    // otherwise load account then return balance
    stateManager.getAccountBalance(address, cb);
  },
  ORIGIN: function ORIGIN(runState) {
    return runState.origin;
  },
  CALLER: function CALLER(runState) {
    return runState.caller;
  },
  CALLVALUE: function CALLVALUE(runState) {
    return runState.callValue;
  },
  CALLDATALOAD: function CALLDATALOAD(pos, runState) {
    pos = utils.bufferToInt(pos);
    var loaded = runState.callData.slice(pos, pos + 32);

    loaded = loaded.length ? loaded : new Buffer([0]);

    return utils.setLengthRight(loaded, 32);
  },
  CALLDATASIZE: function CALLDATASIZE(runState) {
    if (runState.callData.length === 1 && runState.callData[0] === 0) {
      return new Buffer([0]);
    } else {
      return utils.intToBuffer(runState.callData.length);
    }
  },
  CALLDATACOPY: function CALLDATACOPY(memOffset, dataOffsetBuf, dataLength, runState) {
    memOffset = utils.bufferToInt(memOffset);
    dataLength = utils.bufferToInt(dataLength);
    var dataOffset = utils.bufferToInt(dataOffsetBuf);

    memStore(runState, memOffset, runState.callData, dataOffset, dataLength);
    // sub the COPY fee
    subGas(runState, new BN(Number(fees.copyGas.v) * Math.ceil(dataLength / 32)));
  },
  CODESIZE: function CODESIZE(runState) {
    return utils.intToBuffer(runState.code.length);
  },
  CODECOPY: function CODECOPY(memOffset, codeOffset, length, runState) {
    memOffset = utils.bufferToInt(memOffset);
    codeOffset = utils.bufferToInt(codeOffset);
    length = utils.bufferToInt(length);

    memStore(runState, memOffset, runState.code, codeOffset, length);
    // sub the COPY fee
    subGas(runState, new BN(fees.copyGas.v * Math.ceil(length / 32)));
  },
  EXTCODESIZE: function EXTCODESIZE(address, runState, cb) {
    var stateManager = runState.stateManager;
    address = address.slice(-20);
    stateManager.getContractCode(address, function (err, code) {
      cb(err, utils.intToBuffer(code.length));
    });
  },
  EXTCODECOPY: function EXTCODECOPY(address, memOffset, codeOffset, length, runState, cb) {
    var stateManager = runState.stateManager;
    address = address.slice(-20);
    memOffset = utils.bufferToInt(memOffset);
    codeOffset = utils.bufferToInt(codeOffset);
    length = utils.bufferToInt(length);
    subMemUsage(runState, memOffset, length);

    // copy fee
    subGas(runState, new BN(fees.copyGas.v).imuln(Math.ceil(length / 32)));

    stateManager.getContractCode(address, function (err, code) {
      code = err ? new Buffer([0]) : code;
      memStore(runState, memOffset, code, codeOffset, length, false);
      cb(err);
    });
  },
  GASPRICE: function GASPRICE(runState) {
    runState.stack.push(runState.gasPrice);
  },
  // '0x40' range - block operations
  BLOCKHASH: function BLOCKHASH(number, runState, cb) {
    var stateManager = runState.stateManager;
    number = utils.bufferToInt(number);
    var diff = utils.bufferToInt(runState.block.header.number) - utils.bufferToInt(number);

    // block lookups must be within the past 256 blocks
    if (diff > 256 || diff <= 0) {
      cb(null, new Buffer([0]));
      return;
    }

    stateManager.getBlockHash(number, function (err, blockHash) {
      if (err) {
        // if we are at a low block height and request a blockhash before the genesis block
        cb(null, new Buffer([0]));
      } else {
        cb(null, blockHash);
      }
    });
  },
  COINBASE: function COINBASE(runState) {
    return runState.block.header.coinbase;
  },
  TIMESTAMP: function TIMESTAMP(runState) {
    return runState.block.header.timestamp;
  },
  NUMBER: function NUMBER(runState) {
    return runState.block.header.number;
  },
  DIFFICULTY: function DIFFICULTY(runState) {
    return runState.block.header.difficulty;
  },
  GASLIMIT: function GASLIMIT(runState) {
    return runState.block.header.gasLimit;
  },
  // 0x50 range - 'storage' and execution
  POP: function POP() {},
  MLOAD: function MLOAD(pos, runState) {
    pos = utils.bufferToInt(pos);
    var loaded = utils.unpad(memLoad(runState, pos, 32));
    return loaded;
  },
  MSTORE: function MSTORE(offset, word, runState) {
    offset = utils.bufferToInt(offset);
    word = utils.setLengthLeft(word, 32);
    memStore(runState, offset, word, 0, 32);
  },
  MSTORE8: function MSTORE8(offset, byte, runState) {
    offset = utils.bufferToInt(offset);
    // grab the last byte
    byte = byte.slice(byte.length - 1);
    memStore(runState, offset, byte, 0, 1);
  },
  SLOAD: function SLOAD(key, runState, cb) {
    var stateManager = runState.stateManager;
    key = utils.setLengthLeft(key, 32);

    stateManager.getContractStorage(runState.address, key, function (err, value) {
      if (err) return cb(err);
      value = value.length ? value : new Buffer([0]);
      cb(null, value);
    });
  },
  SSTORE: function SSTORE(key, val, runState, cb) {
    var stateManager = runState.stateManager;
    var address = runState.address;
    key = utils.setLengthLeft(key, 32);
    var value = utils.unpad(val);

    stateManager.getContractStorage(runState.address, key, function (err, found) {
      if (err) return cb(err);
      try {
        if (value.length === 0 && !found.length) {
          subGas(runState, new BN(fees.sstoreResetGas.v));
        } else if (value.length === 0 && found.length) {
          subGas(runState, new BN(fees.sstoreResetGas.v));
          runState.gasRefund.iadd(new BN(fees.sstoreRefundGas.v));
        } else if (value.length !== 0 && !found.length) {
          subGas(runState, new BN(fees.sstoreSetGas.v));
        } else if (value.length !== 0 && found.length) {
          subGas(runState, new BN(fees.sstoreResetGas.v));
        }
      } catch (e) {
        cb(e.error);
        return;
      }

      stateManager.putContractStorage(address, key, value, function (err) {
        if (err) return cb(err);
        runState.contract = stateManager.cache.get(address);
        cb();
      });
    });
  },
  JUMP: function JUMP(dest, runState) {
    dest = utils.bufferToInt(dest);

    if (!jumpIsValid(runState, dest)) {
      trap(ERROR.INVALID_JUMP);
    }

    runState.programCounter = dest;
  },
  JUMPI: function JUMPI(c, i, runState) {
    c = utils.bufferToInt(c);
    i = utils.bufferToInt(i);

    var dest = i ? c : runState.programCounter;

    if (i && !jumpIsValid(runState, dest)) {
      trap(ERROR.INVALID_JUMP);
    }

    runState.programCounter = dest;
  },
  PC: function PC(runState) {
    return utils.intToBuffer(runState.programCounter - 1);
  },
  MSIZE: function MSIZE(runState) {
    return utils.intToBuffer(runState.memoryWordCount * 32);
  },
  GAS: function GAS(runState) {
    return new Buffer(runState.gasLeft.toArray());
  },
  JUMPDEST: function JUMPDEST(runState) {},
  PUSH: function PUSH(runState) {
    var numToPush = runState.opCode - 0x5f;
    var loaded = utils.unpad(runState.code.slice(runState.programCounter, runState.programCounter + numToPush));
    runState.programCounter += numToPush;
    return loaded;
  },
  DUP: function DUP(runState) {
    var stackPos = runState.opCode - 0x7f;

    if (stackPos > runState.stack.length) {
      trap(ERROR.STACK_UNDERFLOW);
    }

    // dupilcated stack items point to the same Buffer
    return runState.stack[runState.stack.length - stackPos];
  },
  SWAP: function SWAP(runState) {
    var stackPos = runState.opCode - 0x8f;

    // check the stack to make sure we have enough items on teh stack
    var swapIndex = runState.stack.length - stackPos - 1;
    if (swapIndex < 0) {
      trap(ERROR.STACK_UNDERFLOW);
    }

    // preform the swap
    var newTop = runState.stack[swapIndex];
    runState.stack[swapIndex] = runState.stack.pop();
    return newTop;
  },
  LOG: function LOG(memOffset, memLength) {
    var args = Array.prototype.slice.call(arguments, 0);
    args.pop(); // pop off callback
    var runState = args.pop();
    var topics = args.slice(2);
    topics = topics.map(function (a) {
      return utils.setLengthLeft(a, 32);
    });

    memOffset = utils.bufferToInt(memOffset);
    memLength = utils.bufferToInt(memLength);
    var numOfTopics = runState.opCode - 0xa0;
    var mem = memLoad(runState, memOffset, memLength);
    subGas(runState, new BN(numOfTopics * fees.logTopicGas.v + memLength * fees.logDataGas.v));

    // add address
    var log = [runState.address];
    log.push(topics);

    // add data
    log.push(mem);
    runState.logs.push(log);
  },

  // '0xf0' range - closures
  CREATE: function CREATE(value, offset, length, runState, done) {
    value = new BN(value);
    offset = utils.bufferToInt(offset);
    length = utils.bufferToInt(length);
    // set up config
    var options = {
      value: value
    };
    var localOpts = {
      inOffset: offset,
      inLength: length
    };

    checkCallMemCost(runState, options, localOpts);
    makeCall(runState, options, localOpts, done);
  },
  CALL: function CALL(gasLimit, toAddress, value, inOffset, inLength, outOffset, outLength, runState, done) {
    var stateManager = runState.stateManager;
    gasLimit = new BN(gasLimit);
    toAddress = utils.setLengthLeft(toAddress, 20);
    value = new BN(value);
    inOffset = utils.bufferToInt(inOffset);
    inLength = utils.bufferToInt(inLength);
    outOffset = utils.bufferToInt(outOffset);
    outLength = utils.bufferToInt(outLength);
    var data = memLoad(runState, inOffset, inLength);
    var options = {
      gasLimit: gasLimit,
      value: value,
      to: toAddress,
      data: data
    };
    var localOpts = {
      inOffset: inOffset,
      inLength: inLength,
      outOffset: outOffset,
      outLength: outLength
    };

    // add stipend
    if (!value.isZero()) {
      runState.gasLeft.iadd(new BN(fees.callStipend.v));
      subGas(runState, new BN(fees.callValueTransferGas.v));
      options.gasLimit.iadd(new BN(fees.callStipend.v));
    }

    checkCallMemCost(runState, options, localOpts);

    stateManager.exists(toAddress, function (err, exists) {
      if (err) {
        done(err);
        return;
      }
      if (!exists) {
        // can't wrap because we are in a callback
        runState.gasLeft.isub(new BN(fees.callNewAccountGas.v));
      }
      makeCall(runState, options, localOpts, done);
    });
  },
  CALLCODE: function CALLCODE(gas, toAddress, value, inOffset, inLength, outOffset, outLength, runState, done) {
    var stateManager = runState.stateManager;
    gas = new BN(gas);
    toAddress = utils.setLengthLeft(toAddress, 20);
    value = new BN(value);
    inOffset = utils.bufferToInt(inOffset);
    inLength = utils.bufferToInt(inLength);
    outOffset = utils.bufferToInt(outOffset);
    outLength = utils.bufferToInt(outLength);

    var options = {
      gasLimit: gas,
      value: value,
      to: runState.address
    };

    var localOpts = {
      inOffset: inOffset,
      inLength: inLength,
      outOffset: outOffset,
      outLength: outLength
    };

    // add stipend
    if (!value.isZero()) {
      runState.gasLeft.isub(new BN(fees.callValueTransferGas.v)).iadd(new BN(fees.callStipend.v));
      options.gasLimit.iadd(new BN(fees.callStipend.v));
    }

    checkCallMemCost(runState, options, localOpts);

    // load the code
    stateManager.getAccount(toAddress, function (err, account) {
      if (err) return done(err);
      if (utils.isPrecompiled(toAddress)) {
        options.compiled = true;
        options.code = runState._precompiled[toAddress.toString('hex')];
        makeCall(runState, options, localOpts, done);
      } else {
        stateManager.getContractCode(toAddress, function (err, code, compiled) {
          if (err) return done(err);
          options.code = code;
          options.compiled = compiled;
          makeCall(runState, options, localOpts, done);
        });
      }
    });
  },
  DELEGATECALL: function DELEGATECALL(gas, toAddress, inOffset, inLength, outOffset, outLength, runState, done) {
    var stateManager = runState.stateManager;
    var value = runState.callValue;
    gas = new BN(gas);
    toAddress = utils.setLengthLeft(toAddress, 20);
    inOffset = utils.bufferToInt(inOffset);
    inLength = utils.bufferToInt(inLength);
    outOffset = utils.bufferToInt(outOffset);
    outLength = utils.bufferToInt(outLength);

    var options = {
      gasLimit: gas,
      value: value,
      to: runState.address,
      caller: runState.caller
    };

    var localOpts = {
      inOffset: inOffset,
      inLength: inLength,
      outOffset: outOffset,
      outLength: outLength
    };

    checkCallMemCost(runState, options, localOpts);

    // load the code
    stateManager.getAccount(toAddress, function (err, account) {
      if (err) return done(err);
      if (utils.isPrecompiled(toAddress)) {
        options.compiled = true;
        options.code = runState._precompiled[toAddress.toString('hex')];
        makeCall(runState, options, localOpts, done);
      } else {
        stateManager.getContractCode(toAddress, function (err, code, compiled) {
          if (err) return done(err);
          options.code = code;
          options.compiled = compiled;
          makeCall(runState, options, localOpts, done);
        });
      }
    });
  },
  RETURN: function RETURN(offset, length, runState) {
    offset = utils.bufferToInt(offset);
    length = utils.bufferToInt(length);
    runState.returnValue = memLoad(runState, offset, length);
  },
  // '0x70', range - other
  SUICIDE: function SUICIDE(suicideToAddress, runState, cb) {
    var stateManager = runState.stateManager;
    var contract = runState.contract;
    var contractAddress = runState.address;
    suicideToAddress = utils.setLengthLeft(suicideToAddress, 20);

    // only add to refund if this is the first suicide for the address
    if (!runState.suicides[contractAddress.toString('hex')]) {
      runState.gasRefund = runState.gasRefund.add(new BN(fees.suicideRefundGas.v));
    }

    runState.suicideTo = suicideToAddress;
    runState.suicides[contractAddress.toString('hex')] = suicideToAddress;
    runState.stopped = true;

    stateManager.getAccount(suicideToAddress, function (err, toAccount) {
      // update balances
      if (err) {
        cb(err);
        return;
      }
      var newBalance = new Buffer(new BN(contract.balance).add(new BN(toAccount.balance)).toArray());
      async.series([stateManager.putAccountBalance.bind(stateManager, suicideToAddress, newBalance), stateManager.putAccountBalance.bind(stateManager, contractAddress, new BN(0))], cb);
    });
  }
};

module.exports._DC = module.exports.DELEGATECALL;

function subGas(runState, amount) {
  runState.gasLeft.isub(amount);
  if (runState.gasLeft.cmpn(0) === -1) {
    trap(ERROR.OUT_OF_GAS);
  }
}

function trap(err) {
  function VmError(error) {
    this.error = error;
  }
  throw new VmError(err);
}

/**
 * Subtracts the amount needed for memory usage from `runState.gasLeft`
 * @method subMemUsage
 * @param {Number} offset
 * @param {Number} length
 * @return {String}
 */
function subMemUsage(runState, offset, length) {
  //  abort if no usage
  if (!length) return;

  // hacky: if the dataOffset is larger than the largest safeInt then just
  // load 0's because if tx.data did have that amount of data then the fee
  // would be high than the maxGasLimit in the block
  if (offset > MAX_INT || length > MAX_INT) {
    trap(ERROR.OUT_OF_GAS);
  }

  var newMemoryWordCount = Math.ceil((offset + length) / 32);
  runState.memoryWordCount = Math.max(newMemoryWordCount, runState.memoryWordCount);
  var words = new BN(newMemoryWordCount);
  var fee = new BN(fees.memoryGas.v);
  var quadCoeff = new BN(fees.quadCoeffDiv.v);
  var cost = words.mul(fee).add(words.mul(words).div(quadCoeff));

  if (cost.cmp(runState.highestMemCost) === 1) {
    subGas(runState, cost.sub(runState.highestMemCost));
    runState.highestMemCost = cost;
  }
}

/**
 * Loads bytes from memory and returns them as a buffer. If an error occurs
 * a string is instead returned. The function also subtracts the amount of
 * gas need for memory expansion.
 * @method memLoad
 * @param {Number} offset where to start reading from
 * @param {Number} length how far to read
 * @return {Buffer|String}
 */
function memLoad(runState, offset, length) {
  // check to see if we have enougth gas for the mem read
  subMemUsage(runState, offset, length);
  var loaded = runState.memory.slice(offset, offset + length);
  // fill the remaining lenth with zeros
  for (var i = loaded.length; i < length; i++) {
    loaded.push(0);
  }
  return new Buffer(loaded);
}

/**
 * Stores bytes to memory. If an error occurs a string is instead returned.
 * The function also subtracts the amount of gas need for memory expansion.
 * @method memStore
 * @param {Number} offset where to start reading from
 * @param {Number} length how far to read
 * @return {Buffer|String}
 */
function memStore(runState, offset, val, valOffset, length, skipSubMem) {
  if (skipSubMem !== false) {
    subMemUsage(runState, offset, length);
  }

  for (var i = 0; i < length; i++) {
    runState.memory[offset + i] = val[valOffset + i];
  }
}

// checks if a jump is valid given a destination
function jumpIsValid(runState, dest) {
  return runState.validJumps.indexOf(dest) !== -1;
}

// checks to see if we have enough gas left for the memory reads and writes
// required by the CALLs
function checkCallMemCost(runState, callOptions, localOpts) {
  // calculates the gase need for reading the input from memory
  callOptions.data = memLoad(runState, localOpts.inOffset, localOpts.inLength);

  // calculates the gas need for saving the output in memory
  if (localOpts.outLength) {
    subMemUsage(runState, localOpts.outOffset, localOpts.outLength);
  }

  if (!callOptions.gasLimit) {
    callOptions.gasLimit = runState.gasLeft;
  }

  if (runState.gasLeft.cmp(callOptions.gasLimit) === -1) {
    trap(ERROR.OUT_OF_GAS);
  }
}

// sets up and calls runCall
function makeCall(runState, callOptions, localOpts, cb) {
  callOptions.caller = callOptions.caller || runState.address;
  callOptions.origin = runState.origin;
  callOptions.gasPrice = runState.gasPrice;
  callOptions.block = runState.block;
  callOptions.populateCache = false;
  callOptions.suicides = runState.suicides;

  // increment the runState.depth
  callOptions.depth = runState.depth + 1;

  // check if account has enough ether
  if (runState.depth >= fees.stackLimit.v || new BN(runState.contract.balance).cmp(callOptions.value) === -1) {
    runState.stack.push(new Buffer([0]));
    cb();
  } else {
    // if creating a new contract then increament the nonce
    if (!callOptions.to) {
      runState.contract.nonce = new BN(runState.contract.nonce).addn(1);
    }

    runState.stateManager.cache.put(runState.address, runState.contract);
    runState._vm.runCall(callOptions, parseCallResults);
  }

  function parseCallResults(err, results) {
    // concat the runState.logs
    if (results.vm.logs) {
      runState.logs = runState.logs.concat(results.vm.logs);
    }

    // add gasRefund
    if (results.vm.gasRefund) {
      runState.gasRefund = runState.gasRefund.add(results.vm.gasRefund);
    }

    // this should always be safe
    runState.gasLeft.isub(results.gasUsed);

    if (!results.vm.exceptionError) {
      // save results to memory
      if (results.vm.return) {
        for (var i = 0; i < Math.min(localOpts.outLength, results.vm.return.length); i++) {
          runState.memory[localOpts.outOffset + i] = results.vm.return[i];
        }
      }

      // update stateRoot on current contract
      runState.stateManager.getAccount(runState.address, function (err, account) {
        runState.contract = account;
        // push the created address to the stack
        if (results.createdAddress) {
          cb(err, results.createdAddress);
        } else {
          cb(err, new Buffer([results.vm.exception]));
        }
      });
    } else {
      // creation failed so don't increament the nonce
      if (results.vm.createdAddress) {
        runState.contract.nonce = new BN(runState.contract.nonce).subn(1);
      }

      cb(err, new Buffer([results.vm.exception]));
    }
  }
}

}).call(this,require("buffer").Buffer)
},{"./constants.js":124,"./logTable.js":127,"async":25,"buffer":62,"ethereum-common":143,"ethereumjs-util":120}],129:[function(require,module,exports){
'use strict';

var codes = {
  // 0x0 range - arithmetic ops
  // name, baseCost, off stack, on stack, dynamic
  0x00: ['STOP', 0, 0, 0, false],
  0x01: ['ADD', 3, 2, 1, false],
  0x02: ['MUL', 5, 2, 1, false],
  0x03: ['SUB', 3, 2, 1, false],
  0x04: ['DIV', 5, 2, 1, false],
  0x05: ['SDIV', 5, 2, 1, false],
  0x06: ['MOD', 5, 2, 1, false],
  0x07: ['SMOD', 5, 2, 1, false],
  0x08: ['ADDMOD', 8, 3, 1, false],
  0x09: ['MULMOD', 8, 3, 1, false],
  0x0a: ['EXP', 10, 2, 1, false],
  0x0b: ['SIGNEXTEND', 5, 1, 1, false],

  // 0x10 range - bit ops
  0x10: ['LT', 3, 2, 1, false],
  0x11: ['GT', 3, 2, 1, false],
  0x12: ['SLT', 3, 2, 1, false],
  0x13: ['SGT', 3, 2, 1, false],
  0x14: ['EQ', 3, 2, 1, false],
  0x15: ['ISZERO', 3, 1, 1, false],
  0x16: ['AND', 3, 2, 1, false],
  0x17: ['OR', 3, 2, 1, false],
  0x18: ['XOR', 3, 2, 1, false],
  0x19: ['NOT', 3, 1, 1, false],
  0x1a: ['BYTE', 3, 2, 1, false],

  // 0x20 range - crypto
  0x20: ['SHA3', 30, 2, 1, false],

  // 0x30 range - closure state
  0x30: ['ADDRESS', 2, 0, 1, true],
  0x31: ['BALANCE', 20, 1, 1, true],
  0x32: ['ORIGIN', 2, 0, 1, true],
  0x33: ['CALLER', 2, 0, 1, true],
  0x34: ['CALLVALUE', 2, 0, 1, true],
  0x35: ['CALLDATALOAD', 3, 1, 1, true],
  0x36: ['CALLDATASIZE', 2, 0, 1, true],
  0x37: ['CALLDATACOPY', 3, 3, 0, true],
  0x38: ['CODESIZE', 2, 0, 1, false],
  0x39: ['CODECOPY', 3, 3, 0, false],
  0x3a: ['GASPRICE', 2, 0, 1, false],
  0x3b: ['EXTCODESIZE', 20, 1, 1, true],
  0x3c: ['EXTCODECOPY', 20, 4, 0, true],

  // '0x40' range - block operations
  0x40: ['BLOCKHASH', 20, 1, 1, true],
  0x41: ['COINBASE', 2, 0, 1, true],
  0x42: ['TIMESTAMP', 2, 0, 1, true],
  0x43: ['NUMBER', 2, 0, 1, true],
  0x44: ['DIFFICULTY', 2, 0, 1, true],
  0x45: ['GASLIMIT', 2, 0, 1, true],

  // 0x50 range - 'storage' and execution
  0x50: ['POP', 2, 1, 0, false],
  0x51: ['MLOAD', 3, 1, 1, false],
  0x52: ['MSTORE', 3, 2, 0, false],
  0x53: ['MSTORE8', 3, 2, 0, false],
  0x54: ['SLOAD', 50, 1, 1, true],
  0x55: ['SSTORE', 0, 2, 0, true],
  0x56: ['JUMP', 8, 1, 0, false],
  0x57: ['JUMPI', 10, 2, 0, false],
  0x58: ['PC', 2, 0, 1, false],
  0x59: ['MSIZE', 2, 0, 1, false],
  0x5a: ['GAS', 2, 0, 1, false],
  0x5b: ['JUMPDEST', 1, 0, 0, false],

  // 0x60, range
  0x60: ['PUSH', 3, 0, 1, false],
  0x61: ['PUSH', 3, 0, 1, false],
  0x62: ['PUSH', 3, 0, 1, false],
  0x63: ['PUSH', 3, 0, 1, false],
  0x64: ['PUSH', 3, 0, 1, false],
  0x65: ['PUSH', 3, 0, 1, false],
  0x66: ['PUSH', 3, 0, 1, false],
  0x67: ['PUSH', 3, 0, 1, false],
  0x68: ['PUSH', 3, 0, 1, false],
  0x69: ['PUSH', 3, 0, 1, false],
  0x6a: ['PUSH', 3, 0, 1, false],
  0x6b: ['PUSH', 3, 0, 1, false],
  0x6c: ['PUSH', 3, 0, 1, false],
  0x6d: ['PUSH', 3, 0, 1, false],
  0x6e: ['PUSH', 3, 0, 1, false],
  0x6f: ['PUSH', 3, 0, 1, false],
  0x70: ['PUSH', 3, 0, 1, false],
  0x71: ['PUSH', 3, 0, 1, false],
  0x72: ['PUSH', 3, 0, 1, false],
  0x73: ['PUSH', 3, 0, 1, false],
  0x74: ['PUSH', 3, 0, 1, false],
  0x75: ['PUSH', 3, 0, 1, false],
  0x76: ['PUSH', 3, 0, 1, false],
  0x77: ['PUSH', 3, 0, 1, false],
  0x78: ['PUSH', 3, 0, 1, false],
  0x79: ['PUSH', 3, 0, 1, false],
  0x7a: ['PUSH', 3, 0, 1, false],
  0x7b: ['PUSH', 3, 0, 1, false],
  0x7c: ['PUSH', 3, 0, 1, false],
  0x7d: ['PUSH', 3, 0, 1, false],
  0x7e: ['PUSH', 3, 0, 1, false],
  0x7f: ['PUSH', 3, 0, 1, false],

  0x80: ['DUP', 3, 0, 1, false],
  0x81: ['DUP', 3, 0, 1, false],
  0x82: ['DUP', 3, 0, 1, false],
  0x83: ['DUP', 3, 0, 1, false],
  0x84: ['DUP', 3, 0, 1, false],
  0x85: ['DUP', 3, 0, 1, false],
  0x86: ['DUP', 3, 0, 1, false],
  0x87: ['DUP', 3, 0, 1, false],
  0x88: ['DUP', 3, 0, 1, false],
  0x89: ['DUP', 3, 0, 1, false],
  0x8a: ['DUP', 3, 0, 1, false],
  0x8b: ['DUP', 3, 0, 1, false],
  0x8c: ['DUP', 3, 0, 1, false],
  0x8d: ['DUP', 3, 0, 1, false],
  0x8e: ['DUP', 3, 0, 1, false],
  0x8f: ['DUP', 3, 0, 1, false],

  0x90: ['SWAP', 3, 0, 0, false],
  0x91: ['SWAP', 3, 0, 0, false],
  0x92: ['SWAP', 3, 0, 0, false],
  0x93: ['SWAP', 3, 0, 0, false],
  0x94: ['SWAP', 3, 0, 0, false],
  0x95: ['SWAP', 3, 0, 0, false],
  0x96: ['SWAP', 3, 0, 0, false],
  0x97: ['SWAP', 3, 0, 0, false],
  0x98: ['SWAP', 3, 0, 0, false],
  0x99: ['SWAP', 3, 0, 0, false],
  0x9a: ['SWAP', 3, 0, 0, false],
  0x9b: ['SWAP', 3, 0, 0, false],
  0x9c: ['SWAP', 3, 0, 0, false],
  0x9d: ['SWAP', 3, 0, 0, false],
  0x9e: ['SWAP', 3, 0, 0, false],
  0x9f: ['SWAP', 3, 0, 0, false],

  0xa0: ['LOG', 375, 2, 0, false],
  0xa1: ['LOG', 375, 3, 0, false],
  0xa2: ['LOG', 375, 4, 0, false],
  0xa3: ['LOG', 375, 5, 0, false],
  0xa4: ['LOG', 375, 6, 0, false],

  // '0xf0' range - closures
  0xf0: ['CREATE', 32000, 3, 1, true],
  0xf1: ['CALL', 40, 7, 1, true],
  0xf2: ['CALLCODE', 40, 7, 1, true],
  0xf3: ['RETURN', 0, 2, 0, false],
  0xf4: ['DELEGATECALL', 40, 6, 1, true],

  // '0x70', range - other
  0xff: ['SUICIDE', 0, 1, 0, false]
};

module.exports = function (op, full) {
  var code = codes[op] ? codes[op] : ['INVALID', 0];
  var opcode = code[0];

  if (full) {
    if (opcode === 'LOG') {
      opcode += op - 0xa0;
    }

    if (opcode === 'PUSH') {
      opcode += op - 0x5f;
    }

    if (opcode === 'DUP') {
      opcode += op - 0x7f;
    }

    if (opcode === 'SWAP') {
      opcode += op - 0x8f;
    }
  }

  return { name: opcode, fee: code[1], in: code[2], out: code[3], dynamic: code[4] };
};

},{}],130:[function(require,module,exports){
'use strict';

var utils = require('ethereumjs-util');
var BN = utils.BN;
var error = require('../constants.js').ERROR;
var fees = require('ethereum-common');

module.exports = function (opts) {
  var results = {};

  results.gasUsed = new BN(fees.ecrecoverGas.v);

  if (opts.gasLimit.cmp(results.gasUsed) === -1) {
    results.gasUsed = opts.gasLimit;
    results.exception = 0; // 0 means VM fail (in this case because of OOG)
    results.exceptionError = error.OUT_OF_GAS;
    return results;
  }

  var data = utils.setLengthRight(opts.data, 128);

  var msgHash = data.slice(0, 32);
  var v = data.slice(32, 64);
  var r = data.slice(64, 96);
  var s = data.slice(96, 128);

  var publicKey;
  try {
    publicKey = utils.ecrecover(msgHash, v, r, s);
  } catch (e) {
    return results;
  }

  results.return = utils.setLengthLeft(utils.publicToAddress(publicKey), 32);
  results.exception = 1;

  return results;
};

},{"../constants.js":124,"ethereum-common":143,"ethereumjs-util":120}],131:[function(require,module,exports){
'use strict';

var utils = require('ethereumjs-util');
var BN = utils.BN;
var error = require('../constants.js').ERROR;
var fees = require('ethereum-common');

module.exports = function (opts) {
  var results = {};
  var data = opts.data;

  results.gasUsed = new BN(fees.sha256Gas.v);
  results.gasUsed.iadd(new BN(fees.sha256WordGas.v).imuln(Math.ceil(data.length / 32)));

  if (opts.gasLimit.cmp(results.gasUsed) === -1) {
    results.gasUsed = opts.gasLimit;
    results.exceptionError = error.OUT_OF_GAS;
    results.exception = 0; // 0 means VM fail (in this case because of OOG)
    return results;
  }

  results.return = utils.sha256(data);
  results.exception = 1;

  return results;
};

},{"../constants.js":124,"ethereum-common":143,"ethereumjs-util":120}],132:[function(require,module,exports){
'use strict';

var utils = require('ethereumjs-util');
var BN = utils.BN;
var error = require('../constants.js').ERROR;
var fees = require('ethereum-common');

module.exports = function (opts) {
  var results = {};
  var data = opts.data;

  results.gasUsed = new BN(fees.ripemd160Gas.v);
  results.gasUsed.iadd(new BN(fees.ripemd160WordGas.v).imuln(Math.ceil(data.length / 32)));

  if (opts.gasLimit.cmp(results.gasUsed) === -1) {
    results.gasUsed = opts.gasLimit;
    results.exceptionError = error.OUT_OF_GAS;
    results.exception = 0; // 0 means VM fail (in this case because of OOG)
    return results;
  }

  results.return = utils.ripemd160(data, true);
  results.exception = 1;

  return results;
};

},{"../constants.js":124,"ethereum-common":143,"ethereumjs-util":120}],133:[function(require,module,exports){
'use strict';

var utils = require('ethereumjs-util');
var BN = utils.BN;
var fees = require('ethereum-common');
var error = require('../constants.js').ERROR;

module.exports = function (opts) {
  var results = {};
  var data = opts.data;

  results.gasUsed = new BN(fees.identityGas.v);
  results.gasUsed.iadd(new BN(fees.identityWordGas.v).imuln(Math.ceil(data.length / 32)));

  if (opts.gasLimit.cmp(results.gasUsed) === -1) {
    results.gasUsed = opts.gasLimit;
    results.exceptionError = error.OUT_OF_GAS;
    results.exception = 0; // 0 means VM fail (in this case because of OOG)
    return results;
  }

  results.return = data;
  results.exception = 1;

  return results;
};

},{"../constants.js":124,"ethereum-common":143,"ethereumjs-util":120}],134:[function(require,module,exports){
(function (Buffer){
'use strict';

var async = require('async');
var ethUtil = require('ethereumjs-util');
var Bloom = require('./bloom.js');
var common = require('ethereum-common');
var rlp = ethUtil.rlp;
var Trie = require('merkle-patricia-tree');
var BN = ethUtil.BN;

var minerReward = new BN(common.minerReward.v);
var niblingReward = new BN(common.niblingReward.v);
var ommerReward = new BN(common.ommerReward.v);

/**
 * process the transaction in a block and pays the miners
 * @param opts
 * @param opts.block {Block} the block we are processing
 * @param opts.generate {Boolean} [gen=false] whether to generate the stateRoot
 * @param cb {Function} the callback which is given an error string
 */
module.exports = function (opts, cb) {
  var self = this;

  // parse options
  var block = opts.block;
  var generateStateRoot = !!opts.generate;
  var validateStateRoot = !generateStateRoot;
  var bloom = new Bloom();
  var receiptTrie = new Trie();
  // the total amount of gas used processing this block
  var gasUsed = new BN(0);
  // miner account
  var minerAccount;
  var receipts = [];
  var txResults = [];
  var result;

  if (opts.root) {
    self.stateManager.trie.root = opts.root;
  }

  this.trie.checkpoint();

  // run everything
  async.series([beforeBlock, populateCache, processTransactions], parseBlockResults);

  function beforeBlock(cb) {
    self.emit('beforeBlock', opts.block, cb);
  }

  function afterBlock(cb) {
    self.emit('afterBlock', result, cb);
  }

  // populates the cache with accounts that we know we will need
  function populateCache(cb) {
    var accounts = new Set();
    accounts.add(block.header.coinbase.toString('hex'));
    block.transactions.forEach(function (tx) {
      accounts.add(tx.getSenderAddress().toString('hex'));
      accounts.add(tx.to.toString('hex'));
    });

    block.uncleHeaders.forEach(function (uh) {
      accounts.add(uh.coinbase.toString('hex'));
    });

    self.populateCache(accounts, cb);
  }

  /**
   * Processes all of the transaction in the block
   * @method processTransaction
   * @param {Function} cb the callback is given error if there are any
   */
  function processTransactions(cb) {
    var validReceiptCount = 0;

    async.eachSeries(block.transactions, processTx, cb);

    function processTx(tx, cb) {
      var gasLimitIsHigherThanBlock = new BN(block.header.gasLimit).cmp(new BN(tx.gasLimit).add(gasUsed)) === -1;
      if (gasLimitIsHigherThanBlock) {
        cb('tx has a higher gas limit than the block');
        return;
      }

      // run the tx through the VM
      self.runTx({
        tx: tx,
        block: block,
        populateCache: false
      }, parseTxResult);

      function parseTxResult(err, result) {
        txResults.push(result);

        // abort if error
        if (err) {
          receipts.push(null);
          cb(err);
          return;
        }

        gasUsed = gasUsed.add(result.gasUsed);
        // combine blooms via bitwise OR
        bloom.or(result.bloom);

        if (generateStateRoot) {
          block.header.bloom = bloom.bitvector;
        }

        var txLogs = result.vm.logs || [];
        var rawTxReceipt = [self.trie.root, new Buffer(gasUsed.toArray()), result.bloom.bitvector, txLogs];
        var txReceipt = {
          stateRoot: rawTxReceipt[0],
          gasUsed: rawTxReceipt[1],
          bitvector: rawTxReceipt[2],
          logs: rawTxReceipt[3]
        };

        receipts.push(txReceipt);
        receiptTrie.put(rlp.encode(validReceiptCount), rlp.encode(rawTxReceipt));
        validReceiptCount++;
        cb();
      }
    }
  }

  // handle results or error from block run
  function parseBlockResults(err) {
    if (err) {
      self.trie.revert();
      cb(err);
      return;
    }

    // credit all block rewards
    payOmmersAndMiner();

    // credit all block rewards
    if (generateStateRoot) {
      block.header.stateRoot = self.trie.root;
    }

    self.trie.commit(function (err) {
      self.stateManager.cache.flush(function () {
        if (validateStateRoot) {
          if (receiptTrie.root && receiptTrie.root.toString('hex') !== block.header.receiptTrie.toString('hex')) {
            err = (err || '') + 'invalid receiptTrie ';
          }
          if (bloom.bitvector.toString('hex') !== block.header.bloom.toString('hex')) {
            err = (err || '') + 'invalid bloom ';
          }
          if (ethUtil.bufferToInt(block.header.gasUsed) !== Number(gasUsed)) {
            err = (err || '') + 'invalid gasUsed ';
          }
          if (self.trie.root.toString('hex') !== block.header.stateRoot.toString('hex')) {
            err = (err || '') + 'invalid block stateRoot ';
          }
        }

        self.stateManager.cache.clear();

        result = {
          receipts: receipts,
          results: txResults,
          error: err
        };

        afterBlock(cb.bind(this, err, result));
      });
    });
  }

  // credit all block rewards
  function payOmmersAndMiner() {
    var ommers = block.uncleHeaders;
    // pay each ommer
    ommers.forEach(rewardOmmer);
    // calculate nibling reward
    var totalNiblingReward = niblingReward.mul(new BN(ommers.length));
    minerAccount = self.stateManager.cache.get(block.header.coinbase);
    // give miner the block reward
    minerAccount.balance = new BN(minerAccount.balance).add(minerReward).add(totalNiblingReward);
    self.stateManager.cache.put(block.header.coinbase, minerAccount);
  }

  // credit ommer
  function rewardOmmer(ommer) {
    // calculate reward
    var heightDiff = new BN(block.header.number).sub(new BN(ommer.number));
    var reward = minerReward.sub(ommerReward.mul(heightDiff));
    // credit miners account
    var ommerAccount = self.stateManager.cache.get(ommer.coinbase);
    ommerAccount.balance = reward.add(new BN(ommerAccount.balance));
    self.stateManager.cache.put(ommer.coinbase, ommerAccount);
  }
};

}).call(this,require("buffer").Buffer)
},{"./bloom.js":122,"async":25,"buffer":62,"ethereum-common":143,"ethereumjs-util":120,"merkle-patricia-tree":194}],135:[function(require,module,exports){
'use strict';

var async = require('async');

/**
 * processes blocks and adds them to the blockchain
 * @method onBlock
 * @param blockchain
 */
module.exports = function (blockchain, cb) {
  var self = this;
  var headBlock, parentState;

  // parse arguments
  if (typeof blockchain === 'function') {
    cb = blockchain;
  } else if (blockchain) {
    self.blockchain = blockchain;
  }

  // setup blockchain iterator
  this.stateManager.blockchain.iterator('vm', processBlock, cb);
  function processBlock(block, reorg, cb) {
    async.series([getStartingState, runBlock], cb);

    // determine starting state for block run
    function getStartingState(cb) {
      // if we are just starting or if a chain re-org has happened
      if (!headBlock || reorg) {
        self.stateManager.blockchain.getBlock(block.header.parentHash, function (err, parentBlock) {
          parentState = parentBlock.header.stateRoot;
          // generate genesis state if we are at the genesis block
          // we don't have the genesis state
          if (!headBlock) {
            return self.stateManager.generateCanonicalGenesis(cb);
          } else {
            cb(err);
          }
        });
      } else {
        parentState = headBlock.header.stateRoot;
        cb();
      }
    }

    // run block, update head if valid
    function runBlock(cb) {
      self.runBlock({
        block: block,
        root: parentState
      }, function (err, results) {
        if (err) {
          // remove invalid block
          self.stateManager.blockchain.delBlock(block.header.hash(), cb);
        } else {
          // set as new head block
          headBlock = block;
          cb();
        }
      });
    }
  }
};

},{"async":25}],136:[function(require,module,exports){
(function (Buffer){
'use strict';

var async = require('async');
var ethUtil = require('ethereumjs-util');
var BN = ethUtil.BN;
var fees = require('ethereum-common');
var constants = require('./constants.js');

var ERROR = constants.ERROR;

/**
 * runs a CALL operation
 * @method runCall
 * @param opts
 * @param opts.block {Block}
 * @param opts.caller {Buffer}
 * @param opts.code {Buffer} this is for CALLCODE where the code to load is different than the code from the to account.
 * @param opts.data {Buffer}
 * @param opts.gasLimit {Buffer | BN.js }
 * @param opts.gasPrice {Buffer}
 * @param opts.origin {Buffer} []
 * @param opts.to {Buffer}
 * @param opts.value {Buffer}
 */
module.exports = function (opts, cb) {
  var self = this;
  var stateManager = self.stateManager;

  var vmResults = {};
  var toAccount;
  var toAddress = opts.to;
  var createdAddress;
  var txValue = opts.value || new Buffer(0);
  var caller = opts.caller;
  var account = stateManager.cache.get(caller);
  var block = opts.block;
  var code = opts.code;
  var txData = opts.data;
  var gasLimit = opts.gasLimit || new BN(0xffffff);
  gasLimit = new BN(opts.gasLimit); // make sure is a BN
  var gasPrice = opts.gasPrice;
  var gasUsed = new BN(0);
  var origin = opts.origin;
  var isCompiled = opts.compiled;
  var depth = opts.depth;
  var suicides = opts.suicides;
  var enableHomestead = this.opts.enableHomestead === undefined ? block.isHomestead() : this.opts.enableHomestead;

  txValue = new BN(txValue);

  stateManager.checkpoint();

  // run and parse
  subTxValue();

  async.series([loadToAccount, loadCode, runCode, saveCode], parseCallResult);

  function loadToAccount(done) {
    // get receiver's account
    // toAccount = stateManager.cache.get(toAddress)
    if (!toAddress) {
      // generate a new contract if no `to`
      code = txData;
      txData = undefined;
      var newNonce = new BN(account.nonce).subn(1);
      createdAddress = toAddress = ethUtil.generateAddress(caller, newNonce.toArray());
      stateManager.getAccount(createdAddress, function (err, account) {
        toAccount = account;
        done(err);
      });
    } else {
      // else load the `to` account
      toAccount = stateManager.cache.get(toAddress);
      done();
    }
  }

  function subTxValue() {
    account.balance = new BN(account.balance).sub(txValue);
    stateManager.cache.put(caller, account);
  }

  function addTxValue() {
    // add the amount sent to the `to` account
    toAccount.balance = new BN(toAccount.balance).add(txValue);
    stateManager.cache.put(toAddress, toAccount);
  }

  function loadCode(cb) {
    addTxValue();
    // loads the contract's code if the account is a contract
    if (code || !(toAccount.isContract() || ethUtil.isPrecompiled(toAddress))) {
      cb();
      return;
    }

    if (ethUtil.isPrecompiled(toAddress)) {
      isCompiled = true;
      code = self._precompiled[toAddress.toString('hex')];
      cb();
      return;
    }

    stateManager.getContractCode(toAddress, function (err, c, comp) {
      if (err) return cb(err);
      isCompiled = comp;
      code = c;
      cb();
    });
  }

  function runCode(cb) {
    if (!code) {
      vmResults.exception = 1;
      stateManager.commit(cb);
      return;
    }

    var runCodeOpts = {
      code: code,
      data: txData,
      gasLimit: gasLimit,
      gasPrice: gasPrice,
      address: toAddress,
      origin: origin,
      caller: caller,
      value: new Buffer(txValue.toArray()),
      block: block,
      depth: depth,
      suicides: suicides,
      populateCache: false
    };

    // run Code through vm
    var codeRunner = isCompiled ? self.runJIT : self.runCode;
    codeRunner.call(self, runCodeOpts, parseRunResult);

    function parseRunResult(err, results) {
      toAccount = self.stateManager.cache.get(toAddress);
      vmResults = results;

      if (createdAddress) {
        // fee for size of the return value
        var returnFee = results.return.length * fees.createDataGas.v;
        var totalGas = results.gasUsed.addn(returnFee);
        // if not enough gas
        if (totalGas.cmp(gasLimit) <= 0) {
          results.gasUsed = totalGas;
        } else {
          results.return = new Buffer([]);
          if (enableHomestead) {
            results.exception = 0;
            err = results.exceptionError = ERROR.OUT_OF_GAS;
            results.gasUsed = gasLimit;
          }
        }
      }

      gasUsed = results.gasUsed;
      if (err) {
        results.logs = [];
        stateManager.revert(cb);
      } else {
        stateManager.commit(cb);
      }
    }
  }

  function saveCode(cb) {
    // store code for a new contract
    if (createdAddress && vmResults.return.toString() !== '') {
      stateManager.putContractCode(createdAddress, vmResults.return, cb);
    } else {
      cb();
    }
  }

  function parseCallResult(err) {
    if (err) return cb(err);
    var results = {
      gasUsed: gasUsed,
      createdAddress: createdAddress,
      vm: vmResults
    };

    cb(null, results);
  }
};

}).call(this,require("buffer").Buffer)
},{"./constants.js":124,"async":25,"buffer":62,"ethereum-common":143,"ethereumjs-util":120}],137:[function(require,module,exports){
(function (Buffer){
'use strict';

/*

This is the core of the Ethereum Virtual Machine (EVM or just VM).

NOTES:

stack items are lazly dupilicated.
So you must never directly change a buffer from the stack,
instead you should `copy` it first

not all stack items are 32 bytes, so if the operation realies on the stack
item length then you must use utils.pad(<item>, 32) first.
*/
var async = require('async');
var utils = require('ethereumjs-util');
var Block = require('ethereumjs-block');
var lookupOpInfo = require('./opcodes.js');
var opFns = require('./opFns.js');
var constants = require('./constants.js');
var setImmediate = require('timers').setImmediate;
var BN = utils.BN;

var ERROR = constants.ERROR;

/**
 * Runs EVM code
 * @param opts
 * @param opts.account {Account} the account that the exucuting code belongs to
 * @param opts.address {Buffer}  the address of the account that is exucuting this code
 * @param opts.block {Block} the block that the transaction is part of
 * @param opts.caller {Buffer} the address that ran this code
 * @param opts.code {Buffer} the code to be run
 * @param opts.data {Buffer}  the input data
 * @param opts.gasLimit {Buffer}
 * @param opts.origin {Buffer} the address where the call originated from
 * @param opts.value {Buffer} the amount the being transfered
 * @param cb {Function}
 */
module.exports = function (opts, cb) {
  var self = this;
  var stateManager = self.stateManager;

  var block = opts.block || new Block();

  // VM internal state
  var runState = {
    stateManager: stateManager,
    returnValue: false,
    stopped: false,
    vmError: false,
    suicideTo: undefined,
    programCounter: 0,
    opCode: undefined,
    opName: undefined,
    gasLeft: new BN(opts.gasLimit),
    gasLimit: new BN(opts.gasLimit),
    gasPrice: opts.gasPrice,
    memory: [],
    memoryWordCount: 0,
    stack: [],
    logs: [],
    validJumps: [],
    gasRefund: new BN(0),
    highestMemCost: new BN(0),
    depth: opts.depth || 0,
    suicides: opts.suicides || {},
    block: block,
    callValue: opts.value || new BN(0),
    address: opts.address || utils.zeros(32),
    caller: opts.caller || utils.zeros(32),
    origin: opts.origin || opts.caller || utils.zeros(32),
    callData: opts.data || new Buffer([0]),
    code: opts.code,
    populateCache: opts.populateCache === undefined ? true : opts.populateCache,
    enableHomestead: this.opts.enableHomestead === undefined ? block.isHomestead() : this.opts.enableHomestead // this == vm
  };

  // temporary - to be factored out
  runState._precompiled = self._precompiled;
  runState._vm = self;

  if (!runState.enableHomestead) {
    delete opFns.DELEGATECALL;
  } else {
    opFns.DELEGATECALL = opFns._DC;
  }

  // prepare to run vm
  preprocessValidJumps(runState);
  // load contract then start vm run
  loadContract(runVm);

  // iterate through the given ops until something breaks or we hit STOP
  function runVm() {
    async.whilst(vmIsActive, iterateVm, parseVmResults);
  }

  // ensure contract is loaded; only used if runCode is called directly
  function loadContract(cb) {
    stateManager.getAccount(runState.address, function (err, account) {
      if (err) return cb(err);
      runState.contract = account;
      cb();
    });
  }

  function vmIsActive() {
    var notAtEnd = runState.programCounter < runState.code.length;
    return !runState.stopped && notAtEnd && !runState.vmError && !runState.returnValue;
  }

  function iterateVm(done) {
    if (runState.stack.length > 1024) {
      return done(ERROR.INVALID_OPCODE);
    }

    var opCode = runState.code[runState.programCounter];
    var opInfo = lookupOpInfo(opCode);
    var opName = opInfo.name;
    var opFn = opFns[opName];

    runState.opName = opName;
    runState.opCode = opCode;

    // check for invalid opcode
    if (opName === 'INVALID') {
      return done(ERROR.INVALID_OPCODE);
    }

    // check for stack underflows
    if (runState.stack.length < opInfo.in) {
      return done(ERROR.STACK_UNDERFLOW);
    }

    async.series([runStepHook, runOp], function (err) {
      setImmediate(done.bind(null, err));
    });

    function runStepHook(cb) {
      var eventObj = {
        pc: runState.programCounter,
        gasLeft: runState.gasLeft,
        opcode: lookupOpInfo(opCode, true),
        stack: runState.stack,
        depth: runState.depth,
        address: runState.address,
        account: runState.contract,
        cache: runState.stateManager.cache,
        memory: runState.memory
      };
      self.emit('step', eventObj, cb);
    }

    function runOp(cb) {
      // calculate gas
      var fee = new BN(opInfo.fee);
      // TODO: move to a shared funtion; subGas in opFuns
      runState.gasLeft = runState.gasLeft.sub(fee);
      if (runState.gasLeft.cmpn(0) === -1) {
        runState.vmError = ERROR.OUT_OF_GAS;
        cb();
        return;
      }
      // advance program counter
      runState.programCounter++;
      var argsNum = opInfo.in;
      // pop the stack
      var args = argsNum ? runState.stack.splice(-opInfo.in) : [];
      args.reverse();
      args.push(runState);
      // create a callback for async opFunc
      args.push(function (err, val) {
        // save result to the stack
        if (val) {
          runState.stack.push(val);
        }
        cb(err);
      });
      try {
        // run the opcode
        var result = opFn.apply(null, args);
      } catch (e) {
        runState.vmError = e.error;
        cb();
        return;
      }

      // save result to the stack
      if (result) {
        runState.stack.push(result);
      }
      // call the callback if opFn was sync
      if (opFn.length - argsNum !== 2) {
        cb();
      }
    }
  }

  function parseVmResults(err) {
    err = runState.vmError || err;

    // remove any logs on error
    if (err) {
      runState.logs = [];
      stateManager.revertContracts();
    }

    var results = {
      runState: runState,
      suicides: runState.suicides,
      suicideTo: runState.suicideTo,
      gasRefund: runState.gasRefund,
      exception: err ? 0 : 1,
      exceptionError: err,
      logs: runState.logs,
      gas: runState.gasLeft,
      'return': runState.returnValue ? runState.returnValue : new Buffer([])
    };

    if (results.exceptionError) {
      delete results.gasRefund;
    }

    if (err) {
      results.gasUsed = runState.gasLimit;
    } else {
      results.gasUsed = runState.gasLimit.sub(runState.gasLeft);
    }

    if (runState.populateCache) {
      self.stateManager.cache.flush(function () {
        self.stateManager.cache.clear();
        cb(err, results);
      });
    } else {
      cb(err, results);
    }
  }
};

// find all the valid jumps and puts them in the `validJumps` array
function preprocessValidJumps(runState) {
  for (var i = 0; i < runState.code.length; i++) {
    var curOpCode = lookupOpInfo(runState.code[i]).name;

    // no destinations into the middle of PUSH
    if (curOpCode === 'PUSH') {
      i += runState.code[i] - 0x5f;
    }

    if (curOpCode === 'JUMPDEST') {
      runState.validJumps.push(i);
    }
  }
}

}).call(this,require("buffer").Buffer)
},{"./constants.js":124,"./opFns.js":128,"./opcodes.js":129,"async":25,"buffer":62,"ethereumjs-block":111,"ethereumjs-util":120,"timers":254}],138:[function(require,module,exports){
'use strict';

module.exports = function (opts, cb) {
  // for precompiled
  var results;
  if (typeof opts.code === 'function') {
    results = opts.code(opts);
    results.account = opts.account;
    if (results.exception === undefined) {
      results.exception = 1;
    }
    cb(results.exceptionError, results);
  } else {
    var f = new Function('require', 'opts', opts.code.toString()); // eslint-disable-line
    results = f(require, opts);
    results.account = opts.account;
    cb(results.exceptionError, results);
  }
};

},{}],139:[function(require,module,exports){
(function (Buffer){
'use strict';

var async = require('async');
var utils = require('ethereumjs-util');
var BN = utils.BN;
var Bloom = require('./bloom.js');
var Block = require('ethereumjs-block');

/**
 * Process a transaction. Run the vm. Transfers eth. checks balaces
 * @method processTx
 * @param opts
 * @param opts.tx {Transaction} - a transaction
 * @param opts.skipNonce - skips the nonce check
 * @param opts.skipBalance - skips the balance check
 * @param opts.block {Block} needed to process the transaction, if no block is given a default one is created
 * @param cb {Function} - the callback
 */
module.exports = function (opts, cb) {
  var self = this;
  var block = opts.block;
  var tx = opts.tx;
  var gasLimit;
  var results;
  var basefee;

  // create a reasonable default if no block is given
  if (!block) {
    block = new Block();
  }

  if (this.opts.enableHomestead) {
    tx._homestead = true;
  }

  if (new BN(block.header.gasLimit).cmp(new BN(tx.gasLimit)) === -1) {
    cb(new Error('tx has a higher gas limit than the block'));
    return;
  }

  if (opts.populateCache === undefined) {
    opts.populateCache = true;
  }

  // run everything
  async.series([populateCache, runTxHook, runCall, saveTries, runAfterTxHook, function (cb) {
    self.stateManager.cache.flush(function () {
      if (opts.populateCache) {
        self.stateManager.cache.clear();
      }
      cb();
    });
  }], function (err) {
    cb(err, results);
  });

  // run the transaction hook
  function runTxHook(cb) {
    self.emit('beforeTx', tx, cb);
  }

  // run the transaction hook
  function runAfterTxHook(cb) {
    self.emit('afterTx', results, cb);
  }

  /**
   * populates the cache with the two and from of the tx
   */
  function populateCache(cb) {
    var accounts = new Set();
    accounts.add(tx.from.toString('hex'));
    accounts.add(tx.to.toString('hex'));
    accounts.add(block.header.coinbase.toString('hex'));

    if (opts.populateCache === false) {
      return cb();
    }

    self.stateManager.warmCache(accounts, cb);
  }

  // sets up the envorment and runs a `call`
  function runCall(cb) {
    // check to the sender's account to make sure it has enought wei and the
    // correct nonce
    var fromAccount = self.stateManager.cache.get(tx.from);
    var message;

    if (!opts.skipBalance && new BN(fromAccount.balance).cmp(tx.getUpfrontCost()) === -1) {
      message = "sender doesn't have enough funds to send tx. The upfront cost is: " + tx.getUpfrontCost().toString() + ' and the sender\s account only has: ' + new BN(fromAccount.balance).toString();
      cb(new Error(message));
      return;
    } else if (!opts.skipNonce && new BN(fromAccount.nonce).cmp(new BN(tx.nonce)) !== 0) {
      message = "the tx doesn't have the correct nonce. account has nonce of: " + new BN(fromAccount.nonce).toString() + ' tx has nonce of: ' + new BN(tx.nonce).toString();
      cb(new Error(message));
      return;
    }

    // increment the nonce
    fromAccount.nonce = new BN(fromAccount.nonce).addn(1);
    basefee = tx.getBaseFee();
    gasLimit = new BN(tx.gasLimit).sub(basefee);
    fromAccount.balance = new BN(fromAccount.balance).sub(new BN(tx.gasLimit).mul(new BN(tx.gasPrice)));
    self.stateManager.cache.put(tx.from, fromAccount);

    var options = {
      caller: tx.from,
      gasLimit: gasLimit,
      gasPrice: tx.gasPrice,
      to: tx.to,
      value: tx.value,
      data: tx.data,
      block: block,
      populateCache: false
    };

    if (tx.to.toString('hex') === '') {
      delete options.to;
    }

    // run call
    self.runCall(options, parseResults);

    function parseResults(err, _results) {
      if (err) return cb(err);
      results = _results;

      // generate the bloom for the tx
      results.bloom = txLogsBloom(results.vm.logs);
      fromAccount = self.stateManager.cache.get(tx.from);

      // caculate the totall gas used
      results.gasUsed = results.gasUsed.add(basefee);

      // refund the accoun.stateManagert
      var gasRefund = results.vm.gasRefund;
      if (gasRefund) {
        if (gasRefund.cmp(results.gasUsed.divn(2)) === -1) {
          results.gasUsed.isub(gasRefund);
        } else {
          results.gasUsed.isub(results.gasUsed.divn(2));
        }
      }

      results.amountSpent = results.gasUsed.mul(new BN(tx.gasPrice));
      // refund the left over gas amount
      fromAccount.balance = new BN(tx.gasLimit).sub(results.gasUsed).mul(new BN(tx.gasPrice)).add(new BN(fromAccount.balance));

      self.stateManager.cache.put(tx.from, fromAccount);

      var minerAccount = self.stateManager.cache.get(block.header.coinbase);
      // add the amount spent on gas to the miner's account
      minerAccount.balance = new BN(minerAccount.balance).add(results.amountSpent);

      // save the miner's account
      self.stateManager.cache.put(block.header.coinbase, minerAccount);

      if (!results.vm.suicides) {
        results.vm.suicides = {};
      }

      var keys = Object.keys(results.vm.suicides);

      keys.forEach(function (s) {
        self.stateManager.cache.del(new Buffer(s, 'hex'));
      });

      cb();
    }
  }

  function saveTries(cb) {
    self.stateManager.commitContracts(cb);
  }
};

/**
 * @method txLogsBloom
 */
function txLogsBloom(logs) {
  var bloom = new Bloom();
  if (logs) {
    for (var i = 0; i < logs.length; i++) {
      var log = logs[i];
      // add the address
      bloom.add(log[0]);
      // add the topics
      var topics = log[1];
      for (var q = 0; q < topics.length; q++) {
        bloom.add(topics[q]);
      }
    }
  }
  return bloom;
}

}).call(this,require("buffer").Buffer)
},{"./bloom.js":122,"async":25,"buffer":62,"ethereumjs-block":111,"ethereumjs-util":120}],140:[function(require,module,exports){
(function (Buffer){
'use strict';

var Trie = require('merkle-patricia-tree/secure.js');
var common = require('ethereum-common');
var async = require('async');
var Account = require('ethereumjs-account');
var fakeBlockchain = require('./fakeBlockChain.js');
var Cache = require('./cache.js');
var utils = require('ethereumjs-util');
var BN = utils.BN;
var rlp = utils.rlp;

module.exports = StateManager;

function StateManager(opts) {
  var self = this;

  var trie = opts.trie;
  if (!trie) {
    trie = new Trie(trie);
  }

  var blockchain = opts.blockchain;
  if (!blockchain) {
    blockchain = fakeBlockchain;
  }

  self.blockchain = blockchain;
  self.trie = trie;
  self._storageTries = {}; // the storage trie cache
  self.cache = new Cache(trie);
}

var proto = StateManager.prototype;

// gets the account from the cache, or triggers a lookup and stores
// the result in the cache
proto.getAccount = function (address, cb) {
  this.cache.getOrLoad(address, cb);
};

// checks if an account exists
proto.exists = function (address, cb) {
  this.cache.getOrLoad(address, function (err, account) {
    cb(err, account.exists);
  });
};

// saves the account
proto._putAccount = function (address, account, cb) {
  var self = this;
  var addressHex = new Buffer(address, 'hex');
  // TODO: dont save newly created accounts that have no balance
  // if (toAccount.balance.toString('hex') === '00') {
  // if they have money or a non-zero nonce or code, then write to tree
  self.cache.put(addressHex, account);
  // self.trie.put(addressHex, account.serialize(), cb)
  cb();
};

proto.getAccountBalance = function (address, cb) {
  var self = this;
  self.getAccount(address, function (err, account) {
    if (err) {
      return cb(err);
    }
    cb(null, account.balance);
  });
};

proto.putAccountBalance = function (address, balance, cb) {
  var self = this;
  self.getAccount(address, function (err, account) {
    if (err) {
      return cb(err);
    }
    account.balance = balance;
    self._putAccount(address, account, cb);
  });
};

// sets the contract code on the account
proto.putContractCode = function (address, value, cb) {
  var self = this;
  self.getAccount(address, function (err, account) {
    if (err) {
      return cb(err);
    }
    // TODO: setCode use trie.setRaw which creates a storage leak
    account.setCode(self.trie, value, function (err) {
      if (err) {
        return cb(err);
      }
      self._putAccount(address, account, cb);
    });
  });
};

// given an account object, returns the code
proto.getContractCode = function (address, cb) {
  var self = this;
  self.getAccount(address, function (err, account) {
    if (err) {
      return cb(err);
    }
    account.getCode(self.trie, cb);
  });
};

// creates a storage trie from the primary storage trie
proto._lookupStorageTrie = function (address, cb) {
  var self = this;
  // from state trie
  self.getAccount(address, function (err, account) {
    if (err) {
      return cb(err);
    }
    var storageTrie = self.trie.copy();
    storageTrie.root = account.stateRoot;
    storageTrie._checkpoints = [];
    cb(null, storageTrie);
  });
};

// gets the storage trie from the storage cache or does lookup
proto._getStorageTrie = function (address, cb) {
  var self = this;
  var storageTrie = self._storageTries[address.toString('hex')];
  // from storage cache
  if (storageTrie) {
    return cb(null, storageTrie);
  }
  // lookup from state
  self._lookupStorageTrie(address, cb);
};

proto.getContractStorage = function (address, key, cb) {
  var self = this;
  self._getStorageTrie(address, function (err, trie) {
    if (err) {
      return cb(err);
    }
    trie.get(key, function (err, value) {
      if (err) {
        return cb(err);
      }
      var decoded = rlp.decode(value);
      cb(null, decoded);
    });
  });
};

proto.putContractStorage = function (address, key, value, cb) {
  var self = this;
  self._getStorageTrie(address, function (err, storageTrie) {
    if (err) {
      return cb(err);
    }

    if (value && value.length) {
      // format input
      var encodedValue = rlp.encode(value);
      storageTrie.put(key, encodedValue, finalize);
    } else {
      // deleting a value
      storageTrie.del(key, finalize);
    }

    function finalize(err) {
      if (err) return cb(err);
      // update storage cache
      self._storageTries[address.toString('hex')] = storageTrie;
      // update contract stateRoot
      var contract = self.cache.get(address);
      contract.stateRoot = storageTrie.root;
      self._putAccount(address, contract, cb);
    }
  });
};

proto.commitContracts = function (cb) {
  var self = this;
  async.each(Object.keys(self._storageTries), function (address, cb) {
    var trie = self._storageTries[address];
    delete self._storageTries[address];
    // TODO: this is broken on the block level; all the contracts get written to
    // disk redardless of whether or not the block is valid
    if (trie.isCheckpoint) {
      trie.commit(cb);
    } else {
      cb();
    }
  }, cb);
};

proto.revertContracts = function () {
  var self = this;
  self._storageTries = {};
};

//
// blockchain
//
proto.getBlockHash = function (number, cb) {
  var self = this;
  self.blockchain.getBlock(number, function (err, block) {
    if (err) {
      return cb(err);
    }
    var blockHash = block.hash();
    cb(null, blockHash);
  });
};

//
// revision history
//
proto.checkpoint = function () {
  var self = this;
  self.trie.checkpoint();
  self.cache.checkpoint();
};

proto.commit = function (cb) {
  var self = this;
  // setup trie checkpointing
  self.trie.commit(function () {
    // setup cache checkpointing
    self.cache.commit();
    cb();
  });
};

proto.revert = function (cb) {
  var self = this;
  // setup trie checkpointing
  self.trie.revert();
  // setup cache checkpointing
  self.cache.revert();
  cb();
};

//
// cache stuff
//
proto.getStateRoot = function (cb) {
  var self = this;
  self.cacheFlush(function (err) {
    if (err) {
      return cb(err);
    }
    var stateRoot = self.trie.root;
    cb(null, stateRoot);
  });
};

/**
 * @param {Set} address
 * @param {cb} function
 */
proto.warmCache = function (addresses, cb) {
  this.cache.warm(addresses, cb);
};

proto.dumpStorage = function (address, cb) {
  var self = this;
  self._getStorageTrie(address, function (err, trie) {
    if (err) {
      return cb(err);
    }
    var storage = {};
    var stream = trie.createReadStream();
    stream.on('data', function (val) {
      storage[val.key.toString('hex')] = val.value.toString('hex');
    });
    stream.on('end', function () {
      cb(storage);
    });
  });
};

proto.hasGenesisState = function (cb) {
  var root = common.genesisStateRoot.v;
  this.trie.checkRoot(root, cb);
};

proto.generateCanonicalGenesis = function (cb) {
  var self = this;

  this.hasGenesisState(function (err, genesis) {
    if (!genesis & !err) {
      self.generateGenesis(common.genesisState, cb);
    } else {
      cb(err);
    }
  });
};

proto.generateGenesis = function (initState, cb) {
  var self = this;
  var addresses = Object.keys(initState);
  async.eachSeries(addresses, function (address, done) {
    var account = new Account();
    account.balance = new Buffer(new BN(initState[address]).toArray());
    address = new Buffer(address, 'hex');
    self.trie.put(address, account.serialize(), done);
  }, cb);
};

}).call(this,require("buffer").Buffer)
},{"./cache.js":123,"./fakeBlockChain.js":125,"async":25,"buffer":62,"ethereum-common":143,"ethereumjs-account":109,"ethereumjs-util":120,"merkle-patricia-tree/secure.js":197}],141:[function(require,module,exports){
arguments[4][112][0].apply(exports,arguments)
},{"dup":112}],142:[function(require,module,exports){
arguments[4][113][0].apply(exports,arguments)
},{"dup":113}],143:[function(require,module,exports){
arguments[4][114][0].apply(exports,arguments)
},{"./bootstrapNodes.json":141,"./genesisState.json":142,"./params.json":144,"dup":114}],144:[function(require,module,exports){
arguments[4][105][0].apply(exports,arguments)
},{"dup":105}],145:[function(require,module,exports){
'use strict';

var HDKey = require('hdkey');
var Wallet = require('./index.js');

function EthereumHDKey() {}

/*
 * Horrible wrapping.
 */
function fromHDKey(hdkey) {
  var ret = new EthereumHDKey();
  ret._hdkey = hdkey;
  return ret;
}

EthereumHDKey.fromMasterSeed = function (seedBuffer) {
  return fromHDKey(HDKey.fromMasterSeed(seedBuffer));
};

EthereumHDKey.fromExtendedKey = function (base58key) {
  return fromHDKey(HDKey.fromExtendedKey(base58key));
};

EthereumHDKey.prototype.privateExtendedKey = function () {
  // FIXME: change this according to the outcome of https://github.com/cryptocoinjs/hdkey/issues/7
  if (!this._hdkey._privateKey) {
    throw new Error('Private key is not available');
  }
  return this._hdkey.privateExtendedKey;
};

EthereumHDKey.prototype.publicExtendedKey = function () {
  return this._hdkey.publicExtendedKey;
};

EthereumHDKey.prototype.derivePath = function (path) {
  return fromHDKey(this._hdkey.derive(path));
};

EthereumHDKey.prototype.deriveChild = function (index) {
  return fromHDKey(this._hdkey.deriveChild(index));
};

EthereumHDKey.prototype.getWallet = function () {
  if (this._hdkey._privateKey) {
    return Wallet.fromPrivateKey(this._hdkey._privateKey);
  } else {
    return Wallet.fromPublicKey(this._hdkey._publicKey, true);
  }
};

module.exports = EthereumHDKey;

},{"./index.js":146,"hdkey":157}],146:[function(require,module,exports){
(function (Buffer){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var ethUtil = require('ethereumjs-util');
var crypto = require('crypto');
var scryptsy = require('scrypt.js');
var uuid = require('uuid');
var bs58check = require('bs58check');

function assert(val, msg) {
  if (!val) {
    throw new Error(msg || 'Assertion failed');
  }
}

function decipherBuffer(decipher, data) {
  return Buffer.concat([decipher.update(data), decipher.final()]);
}

var Wallet = function Wallet(priv, pub) {
  if (priv && pub) {
    throw new Error('Cannot supply both a private and a public key to the constructor');
  }

  if (priv && !ethUtil.isValidPrivate(priv)) {
    throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');
  }

  if (pub && !ethUtil.isValidPublic(pub)) {
    throw new Error('Invalid public key');
  }

  this._privKey = priv;
  this._pubKey = pub;
};

Object.defineProperty(Wallet.prototype, 'privKey', {
  get: function get() {
    assert(this._privKey, 'This is a public key only wallet');
    return this._privKey;
  }
});

Object.defineProperty(Wallet.prototype, 'pubKey', {
  get: function get() {
    if (!this._pubKey) {
      this._pubKey = ethUtil.privateToPublic(this.privKey);
    }
    return this._pubKey;
  }
});

Wallet.generate = function (icapDirect) {
  if (icapDirect) {
    while (true) {
      var privKey = crypto.randomBytes(32);
      if (ethUtil.privateToAddress(privKey)[0] === 0) {
        return new Wallet(privKey);
      }
    }
  } else {
    return new Wallet(crypto.randomBytes(32));
  }
};

Wallet.prototype.getPrivateKey = function () {
  return this.privKey;
};

Wallet.prototype.getPrivateKeyString = function () {
  return ethUtil.bufferToHex(this.getPrivateKey());
};

Wallet.prototype.getPublicKey = function () {
  return this.pubKey;
};

Wallet.prototype.getPublicKeyString = function () {
  return ethUtil.bufferToHex(this.getPublicKey());
};

Wallet.prototype.getAddress = function () {
  return ethUtil.publicToAddress(this.pubKey);
};

Wallet.prototype.getAddressString = function () {
  return ethUtil.bufferToHex(this.getAddress());
};

Wallet.prototype.getChecksumAddressString = function () {
  return ethUtil.toChecksumAddress(this.getAddressString());
};

// https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
Wallet.prototype.toV3 = function (password, opts) {
  assert(this._privKey, 'This is a public key only wallet');

  opts = opts || {};
  var salt = opts.salt || crypto.randomBytes(32);
  var iv = opts.iv || crypto.randomBytes(16);

  var derivedKey;
  var kdf = opts.kdf || 'scrypt';
  var kdfparams = {
    dklen: opts.dklen || 32,
    salt: salt.toString('hex')
  };

  if (kdf === 'pbkdf2') {
    kdfparams.c = opts.c || 262144;
    kdfparams.prf = 'hmac-sha256';
    derivedKey = crypto.pbkdf2Sync(new Buffer(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');
  } else if (kdf === 'scrypt') {
    // FIXME: support progress reporting callback
    kdfparams.n = opts.n || 262144;
    kdfparams.r = opts.r || 8;
    kdfparams.p = opts.p || 1;
    derivedKey = scryptsy(new Buffer(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
  } else {
    throw new Error('Unsupported kdf');
  }

  var cipher = crypto.createCipheriv(opts.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);
  if (!cipher) {
    throw new Error('Unsupported cipher');
  }

  var ciphertext = Buffer.concat([cipher.update(this.privKey), cipher.final()]);

  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), new Buffer(ciphertext, 'hex')]));

  return {
    version: 3,
    id: uuid.v4({ random: opts.uuid || crypto.randomBytes(16) }),
    address: this.getAddress().toString('hex'),
    crypto: {
      ciphertext: ciphertext.toString('hex'),
      cipherparams: {
        iv: iv.toString('hex')
      },
      cipher: opts.cipher || 'aes-128-ctr',
      kdf: kdf,
      kdfparams: kdfparams,
      mac: mac.toString('hex')
    }
  };
};

Wallet.prototype.getV3Filename = function (timestamp) {
  /*
   * We want a timestamp like 2016-03-15T17-11-33.007598288Z. Date formatting
   * is a pain in Javascript, everbody knows that. We could use moment.js,
   * but decide to do it manually in order to save space.
   *
   * toJSON() returns a pretty close version, so let's use it. It is not UTC though,
   * but does it really matter?
   *
   * Alternative manual way with padding and Date fields: http://stackoverflow.com/a/7244288/4964819
   *
   */
  var ts = timestamp ? new Date(timestamp) : new Date();

  return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');
};

Wallet.prototype.toV3String = function (password, opts) {
  return JSON.stringify(this.toV3(password, opts));
};

Wallet.fromPublicKey = function (pub, nonStrict) {
  if (nonStrict) {
    pub = ethUtil.importPublic(pub);
  }
  return new Wallet(null, pub);
};

Wallet.fromExtendedPublicKey = function (pub) {
  assert(pub.slice(0, 4) === 'xpub', 'Not an extended public key');
  pub = bs58check.decode(pub).slice(45);
  // Convert to an Ethereum public key
  return Wallet.fromPublicKey(pub, true);
};

Wallet.fromPrivateKey = function (priv) {
  return new Wallet(priv);
};

Wallet.fromExtendedPrivateKey = function (priv) {
  assert(priv.slice(0, 4) === 'xprv', 'Not an extended private key');
  var tmp = bs58check.decode(priv);
  assert(tmp[45] === 0, 'Invalid extended private key');
  return Wallet.fromPrivateKey(tmp.slice(46));
};

// https://github.com/ethereum/go-ethereum/wiki/Passphrase-protected-key-store-spec
Wallet.fromV1 = function (input, password) {
  assert(typeof password === 'string');
  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);

  if (json.Version !== '1') {
    throw new Error('Not a V1 wallet');
  }

  if (json.Crypto.KeyHeader.Kdf !== 'scrypt') {
    throw new Error('Unsupported key derivation scheme');
  }

  var kdfparams = json.Crypto.KeyHeader.KdfParams;
  var derivedKey = scryptsy(new Buffer(password), new Buffer(json.Crypto.Salt, 'hex'), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen);

  var ciphertext = new Buffer(json.Crypto.CipherText, 'hex');

  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));

  if (mac.toString('hex') !== json.Crypto.MAC) {
    throw new Error('Key derivation failed - possibly wrong passphrase');
  }

  var decipher = crypto.createDecipheriv('aes-128-cbc', ethUtil.sha3(derivedKey.slice(0, 16)).slice(0, 16), new Buffer(json.Crypto.IV, 'hex'));
  var seed = decipherBuffer(decipher, ciphertext);

  return new Wallet(seed);
};

Wallet.fromV3 = function (input, password, nonStrict) {
  assert(typeof password === 'string');
  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);

  if (json.version !== 3) {
    throw new Error('Not a V3 wallet');
  }

  var derivedKey;
  var kdfparams;
  if (json.crypto.kdf === 'scrypt') {
    kdfparams = json.crypto.kdfparams;

    // FIXME: support progress reporting callback
    derivedKey = scryptsy(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
  } else if (json.crypto.kdf === 'pbkdf2') {
    kdfparams = json.crypto.kdfparams;

    if (kdfparams.prf !== 'hmac-sha256') {
      throw new Error('Unsupported parameters to PBKDF2');
    }

    derivedKey = crypto.pbkdf2Sync(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
  } else {
    throw new Error('Unsupported key derivation scheme');
  }

  var ciphertext = new Buffer(json.crypto.ciphertext, 'hex');

  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));
  if (mac.toString('hex') !== json.crypto.mac) {
    throw new Error('Key derivation failed - possibly wrong passphrase');
  }

  var decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), new Buffer(json.crypto.cipherparams.iv, 'hex'));
  var seed = decipherBuffer(decipher, ciphertext, 'hex');

  return new Wallet(seed);
};

/*
 * Based on https://github.com/ethereum/pyethsaletool/blob/master/pyethsaletool.py
 * JSON fields: encseed, ethaddr, btcaddr, email
 */
Wallet.fromEthSale = function (input, password) {
  assert(typeof password === 'string');
  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);

  var encseed = new Buffer(json.encseed, 'hex');

  // key derivation
  var derivedKey = crypto.pbkdf2Sync(password, password, 2000, 32, 'sha256').slice(0, 16);

  // seed decoding (IV is first 16 bytes)
  // NOTE: crypto (derived from openssl) when used with aes-*-cbc will handle PKCS#7 padding internally
  //       see also http://stackoverflow.com/a/31614770/4964819
  var decipher = crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));
  var seed = decipherBuffer(decipher, encseed.slice(16));

  var wallet = new Wallet(ethUtil.sha3(seed));
  if (wallet.getAddress().toString('hex') !== json.ethaddr) {
    throw new Error('Decoded key mismatch - possibly wrong passphrase');
  }
  return wallet;
};

module.exports = Wallet;

}).call(this,require("buffer").Buffer)
},{"bs58check":59,"buffer":62,"crypto":72,"ethereumjs-util":120,"scrypt.js":235,"uuid":261}],147:[function(require,module,exports){
(function (Buffer){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var Wallet = require('./index.js');
var ethUtil = require('ethereumjs-util');
var crypto = require('crypto');
var scryptsy = require('scrypt.js');
var utf8 = require('utf8');
var aesjs = require('aes-js');

function assert(val, msg) {
  if (!val) {
    throw new Error(msg || 'Assertion failed');
  }
}

function decipherBuffer(decipher, data) {
  return Buffer.concat([decipher.update(data), decipher.final()]);
}

var Thirdparty = {};

/*
 * opts:
 * - digest - digest algorithm, defaults to md5
 * - count - hash iterations
 * - keysize - desired key size
 * - ivsize - desired IV size
 *
 * Algorithm form https://www.openssl.org/docs/manmaster/crypto/EVP_BytesToKey.html
 *
 * FIXME: not optimised at all
 */
function evp_kdf(data, salt, opts) {
  // A single EVP iteration, returns `D_i`, where block equlas to `D_(i-1)`
  function iter(block) {
    var hash = crypto.createHash(opts.digest || 'md5');
    hash.update(block);
    hash.update(data);
    hash.update(salt);
    block = hash.digest();

    for (var i = 1; i < (opts.count || 1); i++) {
      hash = crypto.createHash(opts.digest || 'md5');
      hash.update(block);
      block = hash.digest();
    }

    return block;
  }

  var keysize = opts.keysize || 16;
  var ivsize = opts.ivsize || 16;

  var ret = [];

  var i = 0;
  while (Buffer.concat(ret).length < keysize + ivsize) {
    ret[i] = iter(i === 0 ? new Buffer(0) : ret[i - 1]);
    i++;
  }

  var tmp = Buffer.concat(ret);

  return {
    key: tmp.slice(0, keysize),
    iv: tmp.slice(keysize, keysize + ivsize)
  };
}

// http://stackoverflow.com/questions/25288311/cryptojs-aes-pattern-always-ends-with
function decodeCryptojsSalt(input) {
  var ciphertext = new Buffer(input, 'base64');
  if (ciphertext.slice(0, 8).toString() === 'Salted__') {
    return {
      salt: ciphertext.slice(8, 16),
      ciphertext: ciphertext.slice(16)
    };
  } else {
    return {
      ciphertext: ciphertext
    };
  }
}

/*
 * This wallet format is created by https://github.com/SilentCicero/ethereumjs-accounts
 * and used on https://www.myetherwallet.com/
 */
Thirdparty.fromEtherWallet = function (input, password) {
  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);

  var privKey;
  if (!json.locked) {
    if (json.private.length !== 64) {
      throw new Error('Invalid private key length');
    }

    privKey = new Buffer(json.private, 'hex');
  } else {
    if (typeof password !== 'string') {
      throw new Error('Password required');
    }
    if (password.length < 7) {
      throw new Error('Password must be at least 7 characters');
    }

    // the "encrypted" version has the low 4 bytes
    // of the hash of the address appended
    var cipher = json.encrypted ? json.private.slice(0, 128) : json.private;

    // decode openssl ciphertext + salt encoding
    cipher = decodeCryptojsSalt(cipher);

    if (!cipher.salt) {
      throw new Error('Unsupported EtherWallet key format');
    }

    // derive key/iv using OpenSSL EVP as implemented in CryptoJS
    var evp = evp_kdf(new Buffer(password), cipher.salt, { keysize: 32, ivsize: 16 });

    var decipher = crypto.createDecipheriv('aes-256-cbc', evp.key, evp.iv);
    privKey = decipherBuffer(decipher, new Buffer(cipher.ciphertext));

    // NOTE: yes, they've run it through UTF8
    privKey = new Buffer(utf8.decode(privKey.toString()), 'hex');
  }

  var wallet = new Wallet(privKey);

  if (wallet.getAddressString() !== json.address) {
    throw new Error('Invalid private key or address');
  }

  return wallet;
};

Thirdparty.fromEtherCamp = function (passphrase) {
  return new Wallet(ethUtil.sha3(new Buffer(passphrase)));
};

Thirdparty.fromKryptoKit = function (entropy, password) {
  function kryptoKitBrokenScryptSeed(buf) {
    // js-scrypt calls `new Buffer(String(salt), 'utf8')` on the seed even though it is a buffer
    //
    // The `buffer`` implementation used does the below transformation (doesn't matches the current version):
    // https://github.com/feross/buffer/blob/67c61181b938b17d10dbfc0a545f713b8bd59de8/index.js

    function decodeUtf8Char(str) {
      try {
        return decodeURIComponent(str);
      } catch (err) {
        return String.fromCharCode(0xFFFD); // UTF 8 invalid char
      }
    }

    var res = '';
    var tmp = '';

    for (var i = 0; i < buf.length; i++) {
      if (buf[i] <= 0x7F) {
        res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);
        tmp = '';
      } else {
        tmp += '%' + buf[i].toString(16);
      }
    }

    return new Buffer(res + decodeUtf8Char(tmp));
  }

  if (entropy[0] === '#') {
    entropy = entropy.slice(1);
  }

  var type = entropy[0];
  entropy = entropy.slice(1);

  var privKey;
  if (type === 'd') {
    privKey = ethUtil.sha256(entropy);
  } else if (type === 'q') {
    if (typeof password !== 'string') {
      throw new Error('Password required');
    }

    var encryptedSeed = ethUtil.sha256(new Buffer(entropy.slice(0, 30)));
    var checksum = entropy.slice(30, 46);

    var salt = kryptoKitBrokenScryptSeed(encryptedSeed);
    var aesKey = scryptsy(new Buffer(password, 'utf8'), salt, 16384, 8, 1, 32);

    /* FIXME: try to use `crypto` instead of `aesjs`
     // NOTE: ECB doesn't use the IV, so it can be anything
    var decipher = crypto.createDecipheriv("aes-256-ecb", aesKey, new Buffer(0))
     // FIXME: this is a clear abuse, but seems to match how ECB in aesjs works
    privKey = Buffer.concat([
      decipher.update(encryptedSeed).slice(0, 16),
      decipher.update(encryptedSeed).slice(0, 16),
    ])
    */

    /* eslint-disable new-cap */
    var decipher = new aesjs.ModeOfOperation.ecb(aesKey);
    /* eslint-enable new-cap */
    privKey = Buffer.concat([decipher.decrypt(encryptedSeed.slice(0, 16)), decipher.decrypt(encryptedSeed.slice(16, 32))]);

    if (checksum.length > 0) {
      if (checksum !== ethUtil.sha256(ethUtil.sha256(privKey)).slice(0, 8).toString('hex')) {
        throw new Error('Failed to decrypt input - possibly invalid passphrase');
      }
    }
  } else {
    throw new Error('Unsupported or invalid entropy type');
  }

  return new Wallet(privKey);
};

Thirdparty.fromQuorumWallet = function (passphrase, userid) {
  assert(passphrase.length >= 10);
  assert(userid.length >= 10);

  var seed = passphrase + userid;
  seed = crypto.pbkdf2Sync(seed, seed, 2000, 32, 'sha256');

  return new Wallet(seed);
};

module.exports = Thirdparty;

}).call(this,require("buffer").Buffer)
},{"./index.js":146,"aes-js":6,"buffer":62,"crypto":72,"ethereumjs-util":120,"scrypt.js":235,"utf8":255}],148:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function (n) {
  if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function (type) {
  var er, handler, len, args, i, listeners;

  if (!this._events) this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler)) return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++) {
      listeners[i].apply(this, args);
    }
  }

  return true;
};

EventEmitter.prototype.addListener = function (type, listener) {
  var m;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function (type, listener) {
  if (!isFunction(listener)) throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function (type, listener) {
  var list, position, length, i;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events || !this._events[type]) return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener || isFunction(list.listener) && list.listener === listener) {
    delete this._events[type];
    if (this._events.removeListener) this.emit('removeListener', type, listener);
  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        position = i;
        break;
      }
    }

    if (position < 0) return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener) this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function (type) {
  var key, listeners;

  if (!this._events) return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length) {
      this.removeListener(type, listeners[listeners.length - 1]);
    }
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function (type) {
  var ret;
  if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function (type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function (emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],149:[function(require,module,exports){
(function (Buffer){
'use strict';

var md5 = require('create-hash/md5');
module.exports = EVP_BytesToKey;
function EVP_BytesToKey(password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary');
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary');
  }
  keyLen = keyLen / 8;
  ivLen = ivLen || 0;
  var ki = 0;
  var ii = 0;
  var key = new Buffer(keyLen);
  var iv = new Buffer(ivLen);
  var addmd = 0;
  var md_buf;
  var i;
  var bufs = [];
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf);
    }
    bufs.push(password);
    if (salt) {
      bufs.push(salt);
    }
    md_buf = md5(Buffer.concat(bufs));
    bufs = [];
    i = 0;
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break;
        }
        if (i === md_buf.length) {
          break;
        }
        key[ki++] = md_buf[i];
        keyLen--;
        i++;
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break;
        }
        if (i === md_buf.length) {
          break;
        }
        iv[ii++] = md_buf[i];
        ivLen--;
        i++;
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break;
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0;
  }
  return {
    key: key,
    iv: iv
  };
}

}).call(this,require("buffer").Buffer)
},{"buffer":62,"create-hash/md5":70}],150:[function(require,module,exports){
"use strict";

module.exports = createRBTree;

var RED = 0;
var BLACK = 1;

function RBNode(color, key, value, left, right, count) {
  this._color = color;
  this.key = key;
  this.value = value;
  this.left = left;
  this.right = right;
  this._count = count;
}

function cloneNode(node) {
  return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count);
}

function repaint(color, node) {
  return new RBNode(color, node.key, node.value, node.left, node.right, node._count);
}

function recount(node) {
  node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0);
}

function RedBlackTree(compare, root) {
  this._compare = compare;
  this.root = root;
}

var proto = RedBlackTree.prototype;

Object.defineProperty(proto, "keys", {
  get: function get() {
    var result = [];
    this.forEach(function (k, v) {
      result.push(k);
    });
    return result;
  }
});

Object.defineProperty(proto, "values", {
  get: function get() {
    var result = [];
    this.forEach(function (k, v) {
      result.push(v);
    });
    return result;
  }
});

//Returns the number of nodes in the tree
Object.defineProperty(proto, "length", {
  get: function get() {
    if (this.root) {
      return this.root._count;
    }
    return 0;
  }
});

//Insert a new item into the tree
proto.insert = function (key, value) {
  var cmp = this._compare;
  //Find point to insert new node at
  var n = this.root;
  var n_stack = [];
  var d_stack = [];
  while (n) {
    var d = cmp(key, n.key);
    n_stack.push(n);
    d_stack.push(d);
    if (d <= 0) {
      n = n.left;
    } else {
      n = n.right;
    }
  }
  //Rebuild path to leaf node
  n_stack.push(new RBNode(RED, key, value, null, null, 1));
  for (var s = n_stack.length - 2; s >= 0; --s) {
    var n = n_stack[s];
    if (d_stack[s] <= 0) {
      n_stack[s] = new RBNode(n._color, n.key, n.value, n_stack[s + 1], n.right, n._count + 1);
    } else {
      n_stack[s] = new RBNode(n._color, n.key, n.value, n.left, n_stack[s + 1], n._count + 1);
    }
  }
  //Rebalance tree using rotations
  //console.log("start insert", key, d_stack)
  for (var s = n_stack.length - 1; s > 1; --s) {
    var p = n_stack[s - 1];
    var n = n_stack[s];
    if (p._color === BLACK || n._color === BLACK) {
      break;
    }
    var pp = n_stack[s - 2];
    if (pp.left === p) {
      if (p.left === n) {
        var y = pp.right;
        if (y && y._color === RED) {
          //console.log("LLr")
          p._color = BLACK;
          pp.right = repaint(BLACK, y);
          pp._color = RED;
          s -= 1;
        } else {
          //console.log("LLb")
          pp._color = RED;
          pp.left = p.right;
          p._color = BLACK;
          p.right = pp;
          n_stack[s - 2] = p;
          n_stack[s - 1] = n;
          recount(pp);
          recount(p);
          if (s >= 3) {
            var ppp = n_stack[s - 3];
            if (ppp.left === pp) {
              ppp.left = p;
            } else {
              ppp.right = p;
            }
          }
          break;
        }
      } else {
        var y = pp.right;
        if (y && y._color === RED) {
          //console.log("LRr")
          p._color = BLACK;
          pp.right = repaint(BLACK, y);
          pp._color = RED;
          s -= 1;
        } else {
          //console.log("LRb")
          p.right = n.left;
          pp._color = RED;
          pp.left = n.right;
          n._color = BLACK;
          n.left = p;
          n.right = pp;
          n_stack[s - 2] = n;
          n_stack[s - 1] = p;
          recount(pp);
          recount(p);
          recount(n);
          if (s >= 3) {
            var ppp = n_stack[s - 3];
            if (ppp.left === pp) {
              ppp.left = n;
            } else {
              ppp.right = n;
            }
          }
          break;
        }
      }
    } else {
      if (p.right === n) {
        var y = pp.left;
        if (y && y._color === RED) {
          //console.log("RRr", y.key)
          p._color = BLACK;
          pp.left = repaint(BLACK, y);
          pp._color = RED;
          s -= 1;
        } else {
          //console.log("RRb")
          pp._color = RED;
          pp.right = p.left;
          p._color = BLACK;
          p.left = pp;
          n_stack[s - 2] = p;
          n_stack[s - 1] = n;
          recount(pp);
          recount(p);
          if (s >= 3) {
            var ppp = n_stack[s - 3];
            if (ppp.right === pp) {
              ppp.right = p;
            } else {
              ppp.left = p;
            }
          }
          break;
        }
      } else {
        var y = pp.left;
        if (y && y._color === RED) {
          //console.log("RLr")
          p._color = BLACK;
          pp.left = repaint(BLACK, y);
          pp._color = RED;
          s -= 1;
        } else {
          //console.log("RLb")
          p.left = n.right;
          pp._color = RED;
          pp.right = n.left;
          n._color = BLACK;
          n.right = p;
          n.left = pp;
          n_stack[s - 2] = n;
          n_stack[s - 1] = p;
          recount(pp);
          recount(p);
          recount(n);
          if (s >= 3) {
            var ppp = n_stack[s - 3];
            if (ppp.right === pp) {
              ppp.right = n;
            } else {
              ppp.left = n;
            }
          }
          break;
        }
      }
    }
  }
  //Return new tree
  n_stack[0]._color = BLACK;
  return new RedBlackTree(cmp, n_stack[0]);
};

//Visit all nodes inorder
function doVisitFull(visit, node) {
  if (node.left) {
    var v = doVisitFull(visit, node.left);
    if (v) {
      return v;
    }
  }
  var v = visit(node.key, node.value);
  if (v) {
    return v;
  }
  if (node.right) {
    return doVisitFull(visit, node.right);
  }
}

//Visit half nodes in order
function doVisitHalf(lo, compare, visit, node) {
  var l = compare(lo, node.key);
  if (l <= 0) {
    if (node.left) {
      var v = doVisitHalf(lo, compare, visit, node.left);
      if (v) {
        return v;
      }
    }
    var v = visit(node.key, node.value);
    if (v) {
      return v;
    }
  }
  if (node.right) {
    return doVisitHalf(lo, compare, visit, node.right);
  }
}

//Visit all nodes within a range
function doVisit(lo, hi, compare, visit, node) {
  var l = compare(lo, node.key);
  var h = compare(hi, node.key);
  var v;
  if (l <= 0) {
    if (node.left) {
      v = doVisit(lo, hi, compare, visit, node.left);
      if (v) {
        return v;
      }
    }
    if (h > 0) {
      v = visit(node.key, node.value);
      if (v) {
        return v;
      }
    }
  }
  if (h > 0 && node.right) {
    return doVisit(lo, hi, compare, visit, node.right);
  }
}

proto.forEach = function rbTreeForEach(visit, lo, hi) {
  if (!this.root) {
    return;
  }
  switch (arguments.length) {
    case 1:
      return doVisitFull(visit, this.root);
      break;

    case 2:
      return doVisitHalf(lo, this._compare, visit, this.root);
      break;

    case 3:
      if (this._compare(lo, hi) >= 0) {
        return;
      }
      return doVisit(lo, hi, this._compare, visit, this.root);
      break;
  }
};

//First item in list
Object.defineProperty(proto, "begin", {
  get: function get() {
    var stack = [];
    var n = this.root;
    while (n) {
      stack.push(n);
      n = n.left;
    }
    return new RedBlackTreeIterator(this, stack);
  }
});

//Last item in list
Object.defineProperty(proto, "end", {
  get: function get() {
    var stack = [];
    var n = this.root;
    while (n) {
      stack.push(n);
      n = n.right;
    }
    return new RedBlackTreeIterator(this, stack);
  }
});

//Find the ith item in the tree
proto.at = function (idx) {
  if (idx < 0) {
    return new RedBlackTreeIterator(this, []);
  }
  var n = this.root;
  var stack = [];
  while (true) {
    stack.push(n);
    if (n.left) {
      if (idx < n.left._count) {
        n = n.left;
        continue;
      }
      idx -= n.left._count;
    }
    if (!idx) {
      return new RedBlackTreeIterator(this, stack);
    }
    idx -= 1;
    if (n.right) {
      if (idx >= n.right._count) {
        break;
      }
      n = n.right;
    } else {
      break;
    }
  }
  return new RedBlackTreeIterator(this, []);
};

proto.ge = function (key) {
  var cmp = this._compare;
  var n = this.root;
  var stack = [];
  var last_ptr = 0;
  while (n) {
    var d = cmp(key, n.key);
    stack.push(n);
    if (d <= 0) {
      last_ptr = stack.length;
    }
    if (d <= 0) {
      n = n.left;
    } else {
      n = n.right;
    }
  }
  stack.length = last_ptr;
  return new RedBlackTreeIterator(this, stack);
};

proto.gt = function (key) {
  var cmp = this._compare;
  var n = this.root;
  var stack = [];
  var last_ptr = 0;
  while (n) {
    var d = cmp(key, n.key);
    stack.push(n);
    if (d < 0) {
      last_ptr = stack.length;
    }
    if (d < 0) {
      n = n.left;
    } else {
      n = n.right;
    }
  }
  stack.length = last_ptr;
  return new RedBlackTreeIterator(this, stack);
};

proto.lt = function (key) {
  var cmp = this._compare;
  var n = this.root;
  var stack = [];
  var last_ptr = 0;
  while (n) {
    var d = cmp(key, n.key);
    stack.push(n);
    if (d > 0) {
      last_ptr = stack.length;
    }
    if (d <= 0) {
      n = n.left;
    } else {
      n = n.right;
    }
  }
  stack.length = last_ptr;
  return new RedBlackTreeIterator(this, stack);
};

proto.le = function (key) {
  var cmp = this._compare;
  var n = this.root;
  var stack = [];
  var last_ptr = 0;
  while (n) {
    var d = cmp(key, n.key);
    stack.push(n);
    if (d >= 0) {
      last_ptr = stack.length;
    }
    if (d < 0) {
      n = n.left;
    } else {
      n = n.right;
    }
  }
  stack.length = last_ptr;
  return new RedBlackTreeIterator(this, stack);
};

//Finds the item with key if it exists
proto.find = function (key) {
  var cmp = this._compare;
  var n = this.root;
  var stack = [];
  while (n) {
    var d = cmp(key, n.key);
    stack.push(n);
    if (d === 0) {
      return new RedBlackTreeIterator(this, stack);
    }
    if (d <= 0) {
      n = n.left;
    } else {
      n = n.right;
    }
  }
  return new RedBlackTreeIterator(this, []);
};

//Removes item with key from tree
proto.remove = function (key) {
  var iter = this.find(key);
  if (iter) {
    return iter.remove();
  }
  return this;
};

//Returns the item at `key`
proto.get = function (key) {
  var cmp = this._compare;
  var n = this.root;
  while (n) {
    var d = cmp(key, n.key);
    if (d === 0) {
      return n.value;
    }
    if (d <= 0) {
      n = n.left;
    } else {
      n = n.right;
    }
  }
  return;
};

//Iterator for red black tree
function RedBlackTreeIterator(tree, stack) {
  this.tree = tree;
  this._stack = stack;
}

var iproto = RedBlackTreeIterator.prototype;

//Test if iterator is valid
Object.defineProperty(iproto, "valid", {
  get: function get() {
    return this._stack.length > 0;
  }
});

//Node of the iterator
Object.defineProperty(iproto, "node", {
  get: function get() {
    if (this._stack.length > 0) {
      return this._stack[this._stack.length - 1];
    }
    return null;
  },
  enumerable: true
});

//Makes a copy of an iterator
iproto.clone = function () {
  return new RedBlackTreeIterator(this.tree, this._stack.slice());
};

//Swaps two nodes
function swapNode(n, v) {
  n.key = v.key;
  n.value = v.value;
  n.left = v.left;
  n.right = v.right;
  n._color = v._color;
  n._count = v._count;
}

//Fix up a double black node in a tree
function fixDoubleBlack(stack) {
  var n, p, s, z;
  for (var i = stack.length - 1; i >= 0; --i) {
    n = stack[i];
    if (i === 0) {
      n._color = BLACK;
      return;
    }
    //console.log("visit node:", n.key, i, stack[i].key, stack[i-1].key)
    p = stack[i - 1];
    if (p.left === n) {
      //console.log("left child")
      s = p.right;
      if (s.right && s.right._color === RED) {
        //console.log("case 1: right sibling child red")
        s = p.right = cloneNode(s);
        z = s.right = cloneNode(s.right);
        p.right = s.left;
        s.left = p;
        s.right = z;
        s._color = p._color;
        n._color = BLACK;
        p._color = BLACK;
        z._color = BLACK;
        recount(p);
        recount(s);
        if (i > 1) {
          var pp = stack[i - 2];
          if (pp.left === p) {
            pp.left = s;
          } else {
            pp.right = s;
          }
        }
        stack[i - 1] = s;
        return;
      } else if (s.left && s.left._color === RED) {
        //console.log("case 1: left sibling child red")
        s = p.right = cloneNode(s);
        z = s.left = cloneNode(s.left);
        p.right = z.left;
        s.left = z.right;
        z.left = p;
        z.right = s;
        z._color = p._color;
        p._color = BLACK;
        s._color = BLACK;
        n._color = BLACK;
        recount(p);
        recount(s);
        recount(z);
        if (i > 1) {
          var pp = stack[i - 2];
          if (pp.left === p) {
            pp.left = z;
          } else {
            pp.right = z;
          }
        }
        stack[i - 1] = z;
        return;
      }
      if (s._color === BLACK) {
        if (p._color === RED) {
          //console.log("case 2: black sibling, red parent", p.right.value)
          p._color = BLACK;
          p.right = repaint(RED, s);
          return;
        } else {
          //console.log("case 2: black sibling, black parent", p.right.value)
          p.right = repaint(RED, s);
          continue;
        }
      } else {
        //console.log("case 3: red sibling")
        s = cloneNode(s);
        p.right = s.left;
        s.left = p;
        s._color = p._color;
        p._color = RED;
        recount(p);
        recount(s);
        if (i > 1) {
          var pp = stack[i - 2];
          if (pp.left === p) {
            pp.left = s;
          } else {
            pp.right = s;
          }
        }
        stack[i - 1] = s;
        stack[i] = p;
        if (i + 1 < stack.length) {
          stack[i + 1] = n;
        } else {
          stack.push(n);
        }
        i = i + 2;
      }
    } else {
      //console.log("right child")
      s = p.left;
      if (s.left && s.left._color === RED) {
        //console.log("case 1: left sibling child red", p.value, p._color)
        s = p.left = cloneNode(s);
        z = s.left = cloneNode(s.left);
        p.left = s.right;
        s.right = p;
        s.left = z;
        s._color = p._color;
        n._color = BLACK;
        p._color = BLACK;
        z._color = BLACK;
        recount(p);
        recount(s);
        if (i > 1) {
          var pp = stack[i - 2];
          if (pp.right === p) {
            pp.right = s;
          } else {
            pp.left = s;
          }
        }
        stack[i - 1] = s;
        return;
      } else if (s.right && s.right._color === RED) {
        //console.log("case 1: right sibling child red")
        s = p.left = cloneNode(s);
        z = s.right = cloneNode(s.right);
        p.left = z.right;
        s.right = z.left;
        z.right = p;
        z.left = s;
        z._color = p._color;
        p._color = BLACK;
        s._color = BLACK;
        n._color = BLACK;
        recount(p);
        recount(s);
        recount(z);
        if (i > 1) {
          var pp = stack[i - 2];
          if (pp.right === p) {
            pp.right = z;
          } else {
            pp.left = z;
          }
        }
        stack[i - 1] = z;
        return;
      }
      if (s._color === BLACK) {
        if (p._color === RED) {
          //console.log("case 2: black sibling, red parent")
          p._color = BLACK;
          p.left = repaint(RED, s);
          return;
        } else {
          //console.log("case 2: black sibling, black parent")
          p.left = repaint(RED, s);
          continue;
        }
      } else {
        //console.log("case 3: red sibling")
        s = cloneNode(s);
        p.left = s.right;
        s.right = p;
        s._color = p._color;
        p._color = RED;
        recount(p);
        recount(s);
        if (i > 1) {
          var pp = stack[i - 2];
          if (pp.right === p) {
            pp.right = s;
          } else {
            pp.left = s;
          }
        }
        stack[i - 1] = s;
        stack[i] = p;
        if (i + 1 < stack.length) {
          stack[i + 1] = n;
        } else {
          stack.push(n);
        }
        i = i + 2;
      }
    }
  }
}

//Removes item at iterator from tree
iproto.remove = function () {
  var stack = this._stack;
  if (stack.length === 0) {
    return this.tree;
  }
  //First copy path to node
  var cstack = new Array(stack.length);
  var n = stack[stack.length - 1];
  cstack[cstack.length - 1] = new RBNode(n._color, n.key, n.value, n.left, n.right, n._count);
  for (var i = stack.length - 2; i >= 0; --i) {
    var n = stack[i];
    if (n.left === stack[i + 1]) {
      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i + 1], n.right, n._count);
    } else {
      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);
    }
  }

  //Get node
  n = cstack[cstack.length - 1];
  //console.log("start remove: ", n.value)

  //If not leaf, then swap with previous node
  if (n.left && n.right) {
    //console.log("moving to leaf")

    //First walk to previous leaf
    var split = cstack.length;
    n = n.left;
    while (n.right) {
      cstack.push(n);
      n = n.right;
    }
    //Copy path to leaf
    var v = cstack[split - 1];
    cstack.push(new RBNode(n._color, v.key, v.value, n.left, n.right, n._count));
    cstack[split - 1].key = n.key;
    cstack[split - 1].value = n.value;

    //Fix up stack
    for (var i = cstack.length - 2; i >= split; --i) {
      n = cstack[i];
      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);
    }
    cstack[split - 1].left = cstack[split];
  }
  //console.log("stack=", cstack.map(function(v) { return v.value }))

  //Remove leaf node
  n = cstack[cstack.length - 1];
  if (n._color === RED) {
    //Easy case: removing red leaf
    //console.log("RED leaf")
    var p = cstack[cstack.length - 2];
    if (p.left === n) {
      p.left = null;
    } else if (p.right === n) {
      p.right = null;
    }
    cstack.pop();
    for (var i = 0; i < cstack.length; ++i) {
      cstack[i]._count--;
    }
    return new RedBlackTree(this.tree._compare, cstack[0]);
  } else {
    if (n.left || n.right) {
      //Second easy case:  Single child black parent
      //console.log("BLACK single child")
      if (n.left) {
        swapNode(n, n.left);
      } else if (n.right) {
        swapNode(n, n.right);
      }
      //Child must be red, so repaint it black to balance color
      n._color = BLACK;
      for (var i = 0; i < cstack.length - 1; ++i) {
        cstack[i]._count--;
      }
      return new RedBlackTree(this.tree._compare, cstack[0]);
    } else if (cstack.length === 1) {
      //Third easy case: root
      //console.log("ROOT")
      return new RedBlackTree(this.tree._compare, null);
    } else {
      //Hard case: Repaint n, and then do some nasty stuff
      //console.log("BLACK leaf no children")
      for (var i = 0; i < cstack.length; ++i) {
        cstack[i]._count--;
      }
      var parent = cstack[cstack.length - 2];
      fixDoubleBlack(cstack);
      //Fix up links
      if (parent.left === n) {
        parent.left = null;
      } else {
        parent.right = null;
      }
    }
  }
  return new RedBlackTree(this.tree._compare, cstack[0]);
};

//Returns key
Object.defineProperty(iproto, "key", {
  get: function get() {
    if (this._stack.length > 0) {
      return this._stack[this._stack.length - 1].key;
    }
    return;
  },
  enumerable: true
});

//Returns value
Object.defineProperty(iproto, "value", {
  get: function get() {
    if (this._stack.length > 0) {
      return this._stack[this._stack.length - 1].value;
    }
    return;
  },
  enumerable: true
});

//Returns the position of this iterator in the sorted list
Object.defineProperty(iproto, "index", {
  get: function get() {
    var idx = 0;
    var stack = this._stack;
    if (stack.length === 0) {
      var r = this.tree.root;
      if (r) {
        return r._count;
      }
      return 0;
    } else if (stack[stack.length - 1].left) {
      idx = stack[stack.length - 1].left._count;
    }
    for (var s = stack.length - 2; s >= 0; --s) {
      if (stack[s + 1] === stack[s].right) {
        ++idx;
        if (stack[s].left) {
          idx += stack[s].left._count;
        }
      }
    }
    return idx;
  },
  enumerable: true
});

//Advances iterator to next element in list
iproto.next = function () {
  var stack = this._stack;
  if (stack.length === 0) {
    return;
  }
  var n = stack[stack.length - 1];
  if (n.right) {
    n = n.right;
    while (n) {
      stack.push(n);
      n = n.left;
    }
  } else {
    stack.pop();
    while (stack.length > 0 && stack[stack.length - 1].right === n) {
      n = stack[stack.length - 1];
      stack.pop();
    }
  }
};

//Checks if iterator is at end of tree
Object.defineProperty(iproto, "hasNext", {
  get: function get() {
    var stack = this._stack;
    if (stack.length === 0) {
      return false;
    }
    if (stack[stack.length - 1].right) {
      return true;
    }
    for (var s = stack.length - 1; s > 0; --s) {
      if (stack[s - 1].left === stack[s]) {
        return true;
      }
    }
    return false;
  }
});

//Update value
iproto.update = function (value) {
  var stack = this._stack;
  if (stack.length === 0) {
    throw new Error("Can't update empty node!");
  }
  var cstack = new Array(stack.length);
  var n = stack[stack.length - 1];
  cstack[cstack.length - 1] = new RBNode(n._color, n.key, value, n.left, n.right, n._count);
  for (var i = stack.length - 2; i >= 0; --i) {
    n = stack[i];
    if (n.left === stack[i + 1]) {
      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i + 1], n.right, n._count);
    } else {
      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);
    }
  }
  return new RedBlackTree(this.tree._compare, cstack[0]);
};

//Moves iterator backward one element
iproto.prev = function () {
  var stack = this._stack;
  if (stack.length === 0) {
    return;
  }
  var n = stack[stack.length - 1];
  if (n.left) {
    n = n.left;
    while (n) {
      stack.push(n);
      n = n.right;
    }
  } else {
    stack.pop();
    while (stack.length > 0 && stack[stack.length - 1].left === n) {
      n = stack[stack.length - 1];
      stack.pop();
    }
  }
};

//Checks if iterator is at start of tree
Object.defineProperty(iproto, "hasPrev", {
  get: function get() {
    var stack = this._stack;
    if (stack.length === 0) {
      return false;
    }
    if (stack[stack.length - 1].left) {
      return true;
    }
    for (var s = stack.length - 1; s > 0; --s) {
      if (stack[s - 1].right === stack[s]) {
        return true;
      }
    }
    return false;
  }
});

//Default comparison function
function defaultCompare(a, b) {
  if (a < b) {
    return -1;
  }
  if (a > b) {
    return 1;
  }
  return 0;
}

//Build a tree
function createRBTree(compare) {
  return new RedBlackTree(compare || defaultCompare, null);
}

},{}],151:[function(require,module,exports){
'use strict';

var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":152,"./hash/hmac":153,"./hash/ripemd":154,"./hash/sha":155,"./hash/utils":156}],152:[function(require,module,exports){
'use strict';

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0) this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32) {
      this._update(msg, i, i + this._delta32);
    }
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - (len + this.padLength) % bytes;
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++) {
    res[i] = 0;
  } // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }
  }

  return res;
};

},{"../hash":151}],153:[function(require,module,exports){
'use strict';

var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++) {
    key.push(0);
  }for (var i = 0; i < key.length; i++) {
    key[i] ^= 0x36;
  }this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++) {
    key[i] ^= 0x6a;
  }this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"../hash":151}],154:[function(require,module,exports){
'use strict';

var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160)) return new RIPEMD160();

  BlockHash.call(this);

  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
}

function K(j) {
  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
}

var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];

var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];

var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];

var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

},{"../hash":151}],155:[function(require,module,exports){
'use strict';

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];

function SHA256() {
  if (!(this instanceof SHA256)) return new SHA256();

  BlockHash.call(this);
  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }for (; i < W.length; i++) {
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
  }var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224)) return new SHA224();

  SHA256.call(this);
  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512)) return new SHA512();

  BlockHash.call(this);
  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++) {
    W[i] = msg[start + i];
  }for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14]; // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32]; // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384)) return new SHA384();

  SHA512.call(this);
  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1)) return new SHA1();

  BlockHash.call(this);
  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }for (; i < W.length; i++) {
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
  }var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return x & y ^ ~x & z;
}

function maj32(x, y, z) {
  return x & y ^ x & z ^ y & z;
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}

function ft_1(s, x, y, z) {
  if (s === 0) return ch32(x, y, z);
  if (s === 1 || s === 3) return p32(x, y, z);
  if (s === 2) return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = xh & yh ^ ~xh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ ~xl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = xh & yh ^ xh & zh ^ yh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ xl & zl ^ yl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2); // 34
  var c2_hi = rotr64_hi(xl, xh, 7); // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2); // 34
  var c2_lo = rotr64_lo(xl, xh, 7); // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9); // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9); // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29); // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29); // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

},{"../hash":151}],156:[function(require,module,exports){
'use strict';

var utils = exports;
var inherits = require('inherits');

function toArray(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);else res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0) msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2) {
        res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    }
  } else {
    for (var i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little') w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = m >>> 16 & 0xff;
      res[k + 2] = m >>> 8 & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = m >>> 16 & 0xff;
      res[k + 1] = m >>> 8 & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return w >>> b | w << 32 - b;
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return w << b | w >>> 32 - b;
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return a + b >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return a + b + c >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return a + b + c + d >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return a + b + c + d + e >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond) throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = lo + el >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = al << 32 - num | ah >>> num;
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;

},{"inherits":160}],157:[function(require,module,exports){
(function (Buffer){
'use strict';

var assert = require('assert');
var crypto = require('crypto');
var cs = require('coinstring');
var secp256k1 = require('secp256k1');

var MASTER_SECRET = new Buffer('Bitcoin seed');
var HARDENED_OFFSET = 0x80000000;
var LEN = 78;

// Bitcoin hardcoded by default, can use package `coininfo` for others
var BITCOIN_VERSIONS = { private: 0x0488ADE4, public: 0x0488B21E };

function HDKey(versions) {
  this.versions = versions || BITCOIN_VERSIONS;
  this.depth = 0;
  this.index = 0;
  this._privateKey = null;
  this._publicKey = null;
  this.chainCode = null;
  this._fingerprint = 0;
  this.parentFingerprint = 0;
}

Object.defineProperty(HDKey.prototype, 'fingerprint', { get: function get() {
    return this._fingerprint;
  } });
Object.defineProperty(HDKey.prototype, 'identifier', { get: function get() {
    return this._identifier;
  } });
Object.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function get() {
    return this.identifier;
  } });

Object.defineProperty(HDKey.prototype, 'privateKey', {
  get: function get() {
    return this._privateKey;
  },
  set: function set(value) {
    assert.equal(value.length, 32, 'Private key must be 32 bytes.');
    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key');

    this._privateKey = value;
    this._publicKey = secp256k1.publicKeyCreate(value, true);
    this._identifier = hash160(this.publicKey);
    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
  }
});

Object.defineProperty(HDKey.prototype, 'publicKey', {
  get: function get() {
    return this._publicKey;
  },
  set: function set(value) {
    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');
    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key');

    this._publicKey = secp256k1.publicKeyConvert(value, true); // force compressed point
    this._identifier = hash160(this.publicKey);
    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
    this._privateKey = null;
  }
});

Object.defineProperty(HDKey.prototype, 'privateExtendedKey', {
  get: function get() {
    if (this._privateKey) return cs.encode(serialize(this, this.versions.private, Buffer.concat([new Buffer([0]), this.privateKey])));else return null;
  }
});

Object.defineProperty(HDKey.prototype, 'publicExtendedKey', {
  get: function get() {
    return cs.encode(serialize(this, this.versions.public, this.publicKey));
  }
});

HDKey.prototype.derive = function (path) {
  if (path === 'm' || path === 'M' || path === "m'" || path === "M'") {
    return this;
  }

  var entries = path.split('/');
  var hdkey = this;
  entries.forEach(function (c, i) {
    if (i === 0) {
      assert(c, 'm', 'Invalid path');
      return;
    }

    var hardened = c.length > 1 && c[c.length - 1] === "'";
    var childIndex = parseInt(c, 10); // & (HARDENED_OFFSET - 1)
    assert(childIndex < HARDENED_OFFSET, 'Invalid index');
    if (hardened) childIndex += HARDENED_OFFSET;

    hdkey = hdkey.deriveChild(childIndex);
  });

  return hdkey;
};

HDKey.prototype.deriveChild = function (index) {
  var isHardened = index >= HARDENED_OFFSET;
  var indexBuffer = new Buffer(4);
  indexBuffer.writeUInt32BE(index, 0);

  var data;

  if (isHardened) {
    // Hardened child
    assert(this.privateKey, 'Could not derive hardened child key');

    var pk = this.privateKey;
    var zb = new Buffer([0]);
    pk = Buffer.concat([zb, pk]);

    // data = 0x00 || ser256(kpar) || ser32(index)
    data = Buffer.concat([pk, indexBuffer]);
  } else {
    // Normal child
    // data = serP(point(kpar)) || ser32(index)
    //      = serP(Kpar) || ser32(index)
    data = Buffer.concat([this.publicKey, indexBuffer]);
  }

  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest();
  var IL = I.slice(0, 32);
  var IR = I.slice(32);

  var hd = new HDKey(this.versions);

  // Private parent key -> private child key
  if (this.privateKey) {
    // ki = parse256(IL) + kpar (mod n)
    try {
      hd.privateKey = secp256k1.privateKeyTweakAdd(this.privateKey, IL);
      // throw if IL >= n || (privateKey + IL) === 0
    } catch (err) {
      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i
      return this.derive(index + 1);
    }
    // Public parent key -> public child key
  } else {
    // Ki = point(parse256(IL)) + Kpar
    //    = G*IL + Kpar
    try {
      hd.publicKey = secp256k1.publicKeyTweakAdd(this.publicKey, IL, true);
      // throw if IL >= n || (g**IL + publicKey) is infinity
    } catch (err) {
      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i
      return this.derive(index + 1, isHardened);
    }
  }

  hd.chainCode = IR;
  hd.depth = this.depth + 1;
  hd.parentFingerprint = this.fingerprint; // .readUInt32BE(0)
  hd.index = index;

  return hd;
};

HDKey.prototype.toJSON = function () {
  return {
    xpriv: this.privateExtendedKey,
    xpub: this.publicExtendedKey
  };
};

HDKey.fromMasterSeed = function (seedBuffer, versions) {
  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest();
  var IL = I.slice(0, 32);
  var IR = I.slice(32);

  var hdkey = new HDKey(versions);
  hdkey.chainCode = IR;
  hdkey.privateKey = IL;

  return hdkey;
};

HDKey.fromExtendedKey = function (base58key, versions) {
  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
  versions = versions || BITCOIN_VERSIONS;
  var hdkey = new HDKey(versions);

  var keyBuffer = cs.decode(base58key);

  var version = keyBuffer.readUInt32BE(0);
  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public');

  hdkey.depth = keyBuffer.readUInt8(4);
  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);
  hdkey.index = keyBuffer.readUInt32BE(9);
  hdkey.chainCode = keyBuffer.slice(13, 45);

  var key = keyBuffer.slice(45);
  if (key.readUInt8(0) === 0) {
    // private
    assert(version === versions.private, 'Version mismatch: version does not match private');
    hdkey.privateKey = key.slice(1); // cut off first 0x0 byte
  } else {
    assert(version === versions.public, 'Version mismatch: version does not match public');
    hdkey.publicKey = key;
  }

  return hdkey;
};

HDKey.fromJSON = function (obj) {
  return HDKey.fromExtendedKey(obj.xpriv);
};

function serialize(hdkey, version, key) {
  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
  var buffer = new Buffer(LEN);

  buffer.writeUInt32BE(version, 0);
  buffer.writeUInt8(hdkey.depth, 4);

  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;
  buffer.writeUInt32BE(fingerprint, 5);
  buffer.writeUInt32BE(hdkey.index, 9);

  hdkey.chainCode.copy(buffer, 13);
  key.copy(buffer, 45);

  return buffer;
}

function hash160(buf) {
  var sha = crypto.createHash('sha256').update(buf).digest();
  return crypto.createHash('rmd160').update(sha).digest();
}

HDKey.HARDENED_OFFSET = HARDENED_OFFSET;
module.exports = HDKey;

}).call(this,require("buffer").Buffer)
},{"assert":21,"buffer":62,"coinstring":64,"crypto":72,"secp256k1":237}],158:[function(require,module,exports){
"use strict";

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

},{}],159:[function(require,module,exports){
"use strict";

var indexOf = [].indexOf;

module.exports = function (arr, obj) {
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

},{}],160:[function(require,module,exports){
'use strict';

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function TempCtor() {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

},{}],161:[function(require,module,exports){
'use strict';

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};

function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
}

},{}],162:[function(require,module,exports){
'use strict';

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],163:[function(require,module,exports){
(function (global){
'use strict';

/*
 * js-sha3 v0.3.1
 * https://github.com/emn178/js-sha3
 *
 * Copyright 2015, emn178@gmail.com
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */
;(function (root, undefined) {
  'use strict';

  var NODE_JS = typeof module != 'undefined';
  if (NODE_JS) {
    root = global;
    if (root.JS_SHA3_TEST) {
      root.navigator = { userAgent: 'Chrome' };
    }
  }
  var CHROME = (root.JS_SHA3_TEST || !NODE_JS) && navigator.userAgent.indexOf('Chrome') != -1;
  var HEX_CHARS = '0123456789abcdef'.split('');
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

  var blocks = [],
      s = [];

  var keccak_224 = function keccak_224(message) {
    return keccak(message, 224, KECCAK_PADDING);
  };

  var keccak_256 = function keccak_256(message) {
    return keccak(message, 256, KECCAK_PADDING);
  };

  var keccak_384 = function keccak_384(message) {
    return keccak(message, 384, KECCAK_PADDING);
  };

  var sha3_224 = function sha3_224(message) {
    return keccak(message, 224, PADDING);
  };

  var sha3_256 = function sha3_256(message) {
    return keccak(message, 256, PADDING);
  };

  var sha3_384 = function sha3_384(message) {
    return keccak(message, 384, PADDING);
  };

  var sha3_512 = function sha3_512(message) {
    return keccak(message, 512, PADDING);
  };

  var keccak = function keccak(message, bits, padding) {
    var notString = typeof message != 'string';
    if (notString && message.constructor == root.ArrayBuffer) {
      message = new Uint8Array(message);
    }

    if (bits === undefined) {
      bits = 512;
      padding = KECCAK_PADDING;
    }

    var block,
        code,
        end = false,
        index = 0,
        start = 0,
        length = message.length,
        n,
        i,
        h,
        l,
        c0,
        c1,
        c2,
        c3,
        c4,
        c5,
        c6,
        c7,
        c8,
        c9,
        b0,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7,
        b8,
        b9,
        b10,
        b11,
        b12,
        b13,
        b14,
        b15,
        b16,
        b17,
        b18,
        b19,
        b20,
        b21,
        b22,
        b23,
        b24,
        b25,
        b26,
        b27,
        b28,
        b29,
        b30,
        b31,
        b32,
        b33,
        b34,
        b35,
        b36,
        b37,
        b38,
        b39,
        b40,
        b41,
        b42,
        b43,
        b44,
        b45,
        b46,
        b47,
        b48,
        b49;
    var blockCount = (1600 - bits * 2) / 32;
    var byteCount = blockCount * 4;

    for (i = 0; i < 50; ++i) {
      s[i] = 0;
    }

    block = 0;
    do {
      blocks[0] = block;
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
      if (notString) {
        for (i = start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          }
        }
      }
      start = i - byteCount;
      if (index == length) {
        blocks[i >> 2] |= padding[i & 3];
        ++index;
      }
      block = blocks[blockCount];
      if (index > length && i < byteCount) {
        blocks[blockCount - 1] |= 0x80000000;
        end = true;
      }

      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }

      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

        h = c8 ^ (c2 << 1 | c3 >>> 31);
        l = c9 ^ (c3 << 1 | c2 >>> 31);
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ (c4 << 1 | c5 >>> 31);
        l = c1 ^ (c5 << 1 | c4 >>> 31);
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ (c6 << 1 | c7 >>> 31);
        l = c3 ^ (c7 << 1 | c6 >>> 31);
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ (c8 << 1 | c9 >>> 31);
        l = c5 ^ (c9 << 1 | c8 >>> 31);
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ (c0 << 1 | c1 >>> 31);
        l = c7 ^ (c1 << 1 | c0 >>> 31);
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;

        b0 = s[0];
        b1 = s[1];
        b32 = s[11] << 4 | s[10] >>> 28;
        b33 = s[10] << 4 | s[11] >>> 28;
        b14 = s[20] << 3 | s[21] >>> 29;
        b15 = s[21] << 3 | s[20] >>> 29;
        b46 = s[31] << 9 | s[30] >>> 23;
        b47 = s[30] << 9 | s[31] >>> 23;
        b28 = s[40] << 18 | s[41] >>> 14;
        b29 = s[41] << 18 | s[40] >>> 14;
        b20 = s[2] << 1 | s[3] >>> 31;
        b21 = s[3] << 1 | s[2] >>> 31;
        b2 = s[13] << 12 | s[12] >>> 20;
        b3 = s[12] << 12 | s[13] >>> 20;
        b34 = s[22] << 10 | s[23] >>> 22;
        b35 = s[23] << 10 | s[22] >>> 22;
        b16 = s[33] << 13 | s[32] >>> 19;
        b17 = s[32] << 13 | s[33] >>> 19;
        b48 = s[42] << 2 | s[43] >>> 30;
        b49 = s[43] << 2 | s[42] >>> 30;
        b40 = s[5] << 30 | s[4] >>> 2;
        b41 = s[4] << 30 | s[5] >>> 2;
        b22 = s[14] << 6 | s[15] >>> 26;
        b23 = s[15] << 6 | s[14] >>> 26;
        b4 = s[25] << 11 | s[24] >>> 21;
        b5 = s[24] << 11 | s[25] >>> 21;
        b36 = s[34] << 15 | s[35] >>> 17;
        b37 = s[35] << 15 | s[34] >>> 17;
        b18 = s[45] << 29 | s[44] >>> 3;
        b19 = s[44] << 29 | s[45] >>> 3;
        b10 = s[6] << 28 | s[7] >>> 4;
        b11 = s[7] << 28 | s[6] >>> 4;
        b42 = s[17] << 23 | s[16] >>> 9;
        b43 = s[16] << 23 | s[17] >>> 9;
        b24 = s[26] << 25 | s[27] >>> 7;
        b25 = s[27] << 25 | s[26] >>> 7;
        b6 = s[36] << 21 | s[37] >>> 11;
        b7 = s[37] << 21 | s[36] >>> 11;
        b38 = s[47] << 24 | s[46] >>> 8;
        b39 = s[46] << 24 | s[47] >>> 8;
        b30 = s[8] << 27 | s[9] >>> 5;
        b31 = s[9] << 27 | s[8] >>> 5;
        b12 = s[18] << 20 | s[19] >>> 12;
        b13 = s[19] << 20 | s[18] >>> 12;
        b44 = s[29] << 7 | s[28] >>> 25;
        b45 = s[28] << 7 | s[29] >>> 25;
        b26 = s[38] << 8 | s[39] >>> 24;
        b27 = s[39] << 8 | s[38] >>> 24;
        b8 = s[48] << 14 | s[49] >>> 18;
        b9 = s[49] << 14 | s[48] >>> 18;

        s[0] = b0 ^ ~b2 & b4;
        s[1] = b1 ^ ~b3 & b5;
        s[10] = b10 ^ ~b12 & b14;
        s[11] = b11 ^ ~b13 & b15;
        s[20] = b20 ^ ~b22 & b24;
        s[21] = b21 ^ ~b23 & b25;
        s[30] = b30 ^ ~b32 & b34;
        s[31] = b31 ^ ~b33 & b35;
        s[40] = b40 ^ ~b42 & b44;
        s[41] = b41 ^ ~b43 & b45;
        s[2] = b2 ^ ~b4 & b6;
        s[3] = b3 ^ ~b5 & b7;
        s[12] = b12 ^ ~b14 & b16;
        s[13] = b13 ^ ~b15 & b17;
        s[22] = b22 ^ ~b24 & b26;
        s[23] = b23 ^ ~b25 & b27;
        s[32] = b32 ^ ~b34 & b36;
        s[33] = b33 ^ ~b35 & b37;
        s[42] = b42 ^ ~b44 & b46;
        s[43] = b43 ^ ~b45 & b47;
        s[4] = b4 ^ ~b6 & b8;
        s[5] = b5 ^ ~b7 & b9;
        s[14] = b14 ^ ~b16 & b18;
        s[15] = b15 ^ ~b17 & b19;
        s[24] = b24 ^ ~b26 & b28;
        s[25] = b25 ^ ~b27 & b29;
        s[34] = b34 ^ ~b36 & b38;
        s[35] = b35 ^ ~b37 & b39;
        s[44] = b44 ^ ~b46 & b48;
        s[45] = b45 ^ ~b47 & b49;
        s[6] = b6 ^ ~b8 & b0;
        s[7] = b7 ^ ~b9 & b1;
        s[16] = b16 ^ ~b18 & b10;
        s[17] = b17 ^ ~b19 & b11;
        s[26] = b26 ^ ~b28 & b20;
        s[27] = b27 ^ ~b29 & b21;
        s[36] = b36 ^ ~b38 & b30;
        s[37] = b37 ^ ~b39 & b31;
        s[46] = b46 ^ ~b48 & b40;
        s[47] = b47 ^ ~b49 & b41;
        s[8] = b8 ^ ~b0 & b2;
        s[9] = b9 ^ ~b1 & b3;
        s[18] = b18 ^ ~b10 & b12;
        s[19] = b19 ^ ~b11 & b13;
        s[28] = b28 ^ ~b20 & b22;
        s[29] = b29 ^ ~b21 & b23;
        s[38] = b38 ^ ~b30 & b32;
        s[39] = b39 ^ ~b31 & b33;
        s[48] = b48 ^ ~b40 & b42;
        s[49] = b49 ^ ~b41 & b43;

        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
      }
    } while (!end);

    var hex = '';
    if (CHROME) {
      b0 = s[0];
      b1 = s[1];
      b2 = s[2];
      b3 = s[3];
      b4 = s[4];
      b5 = s[5];
      b6 = s[6];
      b7 = s[7];
      b8 = s[8];
      b9 = s[9];
      b10 = s[10];
      b11 = s[11];
      b12 = s[12];
      b13 = s[13];
      b14 = s[14];
      b15 = s[15];
      hex += HEX_CHARS[b0 >> 4 & 0x0F] + HEX_CHARS[b0 & 0x0F] + HEX_CHARS[b0 >> 12 & 0x0F] + HEX_CHARS[b0 >> 8 & 0x0F] + HEX_CHARS[b0 >> 20 & 0x0F] + HEX_CHARS[b0 >> 16 & 0x0F] + HEX_CHARS[b0 >> 28 & 0x0F] + HEX_CHARS[b0 >> 24 & 0x0F] + HEX_CHARS[b1 >> 4 & 0x0F] + HEX_CHARS[b1 & 0x0F] + HEX_CHARS[b1 >> 12 & 0x0F] + HEX_CHARS[b1 >> 8 & 0x0F] + HEX_CHARS[b1 >> 20 & 0x0F] + HEX_CHARS[b1 >> 16 & 0x0F] + HEX_CHARS[b1 >> 28 & 0x0F] + HEX_CHARS[b1 >> 24 & 0x0F] + HEX_CHARS[b2 >> 4 & 0x0F] + HEX_CHARS[b2 & 0x0F] + HEX_CHARS[b2 >> 12 & 0x0F] + HEX_CHARS[b2 >> 8 & 0x0F] + HEX_CHARS[b2 >> 20 & 0x0F] + HEX_CHARS[b2 >> 16 & 0x0F] + HEX_CHARS[b2 >> 28 & 0x0F] + HEX_CHARS[b2 >> 24 & 0x0F] + HEX_CHARS[b3 >> 4 & 0x0F] + HEX_CHARS[b3 & 0x0F] + HEX_CHARS[b3 >> 12 & 0x0F] + HEX_CHARS[b3 >> 8 & 0x0F] + HEX_CHARS[b3 >> 20 & 0x0F] + HEX_CHARS[b3 >> 16 & 0x0F] + HEX_CHARS[b3 >> 28 & 0x0F] + HEX_CHARS[b3 >> 24 & 0x0F] + HEX_CHARS[b4 >> 4 & 0x0F] + HEX_CHARS[b4 & 0x0F] + HEX_CHARS[b4 >> 12 & 0x0F] + HEX_CHARS[b4 >> 8 & 0x0F] + HEX_CHARS[b4 >> 20 & 0x0F] + HEX_CHARS[b4 >> 16 & 0x0F] + HEX_CHARS[b4 >> 28 & 0x0F] + HEX_CHARS[b4 >> 24 & 0x0F] + HEX_CHARS[b5 >> 4 & 0x0F] + HEX_CHARS[b5 & 0x0F] + HEX_CHARS[b5 >> 12 & 0x0F] + HEX_CHARS[b5 >> 8 & 0x0F] + HEX_CHARS[b5 >> 20 & 0x0F] + HEX_CHARS[b5 >> 16 & 0x0F] + HEX_CHARS[b5 >> 28 & 0x0F] + HEX_CHARS[b5 >> 24 & 0x0F] + HEX_CHARS[b6 >> 4 & 0x0F] + HEX_CHARS[b6 & 0x0F] + HEX_CHARS[b6 >> 12 & 0x0F] + HEX_CHARS[b6 >> 8 & 0x0F] + HEX_CHARS[b6 >> 20 & 0x0F] + HEX_CHARS[b6 >> 16 & 0x0F] + HEX_CHARS[b6 >> 28 & 0x0F] + HEX_CHARS[b6 >> 24 & 0x0F];

      if (bits >= 256) {
        hex += HEX_CHARS[b7 >> 4 & 0x0F] + HEX_CHARS[b7 & 0x0F] + HEX_CHARS[b7 >> 12 & 0x0F] + HEX_CHARS[b7 >> 8 & 0x0F] + HEX_CHARS[b7 >> 20 & 0x0F] + HEX_CHARS[b7 >> 16 & 0x0F] + HEX_CHARS[b7 >> 28 & 0x0F] + HEX_CHARS[b7 >> 24 & 0x0F];
      }
      if (bits >= 384) {
        hex += HEX_CHARS[b8 >> 4 & 0x0F] + HEX_CHARS[b8 & 0x0F] + HEX_CHARS[b8 >> 12 & 0x0F] + HEX_CHARS[b8 >> 8 & 0x0F] + HEX_CHARS[b8 >> 20 & 0x0F] + HEX_CHARS[b8 >> 16 & 0x0F] + HEX_CHARS[b8 >> 28 & 0x0F] + HEX_CHARS[b8 >> 24 & 0x0F] + HEX_CHARS[b9 >> 4 & 0x0F] + HEX_CHARS[b9 & 0x0F] + HEX_CHARS[b9 >> 12 & 0x0F] + HEX_CHARS[b9 >> 8 & 0x0F] + HEX_CHARS[b9 >> 20 & 0x0F] + HEX_CHARS[b9 >> 16 & 0x0F] + HEX_CHARS[b9 >> 28 & 0x0F] + HEX_CHARS[b9 >> 24 & 0x0F] + HEX_CHARS[b10 >> 4 & 0x0F] + HEX_CHARS[b10 & 0x0F] + HEX_CHARS[b10 >> 12 & 0x0F] + HEX_CHARS[b10 >> 8 & 0x0F] + HEX_CHARS[b10 >> 20 & 0x0F] + HEX_CHARS[b10 >> 16 & 0x0F] + HEX_CHARS[b10 >> 28 & 0x0F] + HEX_CHARS[b10 >> 24 & 0x0F] + HEX_CHARS[b11 >> 4 & 0x0F] + HEX_CHARS[b11 & 0x0F] + HEX_CHARS[b11 >> 12 & 0x0F] + HEX_CHARS[b11 >> 8 & 0x0F] + HEX_CHARS[b11 >> 20 & 0x0F] + HEX_CHARS[b11 >> 16 & 0x0F] + HEX_CHARS[b11 >> 28 & 0x0F] + HEX_CHARS[b11 >> 24 & 0x0F];
      }
      if (bits == 512) {
        hex += HEX_CHARS[b12 >> 4 & 0x0F] + HEX_CHARS[b12 & 0x0F] + HEX_CHARS[b12 >> 12 & 0x0F] + HEX_CHARS[b12 >> 8 & 0x0F] + HEX_CHARS[b12 >> 20 & 0x0F] + HEX_CHARS[b12 >> 16 & 0x0F] + HEX_CHARS[b12 >> 28 & 0x0F] + HEX_CHARS[b12 >> 24 & 0x0F] + HEX_CHARS[b13 >> 4 & 0x0F] + HEX_CHARS[b13 & 0x0F] + HEX_CHARS[b13 >> 12 & 0x0F] + HEX_CHARS[b13 >> 8 & 0x0F] + HEX_CHARS[b13 >> 20 & 0x0F] + HEX_CHARS[b13 >> 16 & 0x0F] + HEX_CHARS[b13 >> 28 & 0x0F] + HEX_CHARS[b13 >> 24 & 0x0F] + HEX_CHARS[b14 >> 4 & 0x0F] + HEX_CHARS[b14 & 0x0F] + HEX_CHARS[b14 >> 12 & 0x0F] + HEX_CHARS[b14 >> 8 & 0x0F] + HEX_CHARS[b14 >> 20 & 0x0F] + HEX_CHARS[b14 >> 16 & 0x0F] + HEX_CHARS[b14 >> 28 & 0x0F] + HEX_CHARS[b14 >> 24 & 0x0F] + HEX_CHARS[b15 >> 4 & 0x0F] + HEX_CHARS[b15 & 0x0F] + HEX_CHARS[b15 >> 12 & 0x0F] + HEX_CHARS[b15 >> 8 & 0x0F] + HEX_CHARS[b15 >> 20 & 0x0F] + HEX_CHARS[b15 >> 16 & 0x0F] + HEX_CHARS[b15 >> 28 & 0x0F] + HEX_CHARS[b15 >> 24 & 0x0F];
      }
    } else {
      for (i = 0, n = bits / 32; i < n; ++i) {
        h = s[i];
        hex += HEX_CHARS[h >> 4 & 0x0F] + HEX_CHARS[h & 0x0F] + HEX_CHARS[h >> 12 & 0x0F] + HEX_CHARS[h >> 8 & 0x0F] + HEX_CHARS[h >> 20 & 0x0F] + HEX_CHARS[h >> 16 & 0x0F] + HEX_CHARS[h >> 28 & 0x0F] + HEX_CHARS[h >> 24 & 0x0F];
      }
    }
    return hex;
  };

  if (!root.JS_SHA3_TEST && NODE_JS) {
    module.exports = {
      sha3_512: sha3_512,
      sha3_384: sha3_384,
      sha3_256: sha3_256,
      sha3_224: sha3_224,
      keccak_512: keccak,
      keccak_384: keccak_384,
      keccak_256: keccak_256,
      keccak_224: keccak_224
    };
  } else if (root) {
    root.sha3_512 = sha3_512;
    root.sha3_384 = sha3_384;
    root.sha3_256 = sha3_256;
    root.sha3_224 = sha3_224;
    root.keccak_512 = keccak;
    root.keccak_384 = keccak_384;
    root.keccak_256 = keccak_256;
    root.keccak_224 = keccak_224;
  }
})(undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],164:[function(require,module,exports){
'use strict';

module.exports = require('browserify-sha3').SHA3Hash;

},{"browserify-sha3":52}],165:[function(require,module,exports){
'use strict';

var encodings = require('./lib/encodings');

module.exports = Codec;

function Codec(opts) {
  this.opts = opts || {};
  this.encodings = encodings;
}

Codec.prototype._encoding = function (encoding) {
  if (typeof encoding == 'string') encoding = encodings[encoding];
  if (!encoding) encoding = encodings.id;
  return encoding;
};

Codec.prototype._keyEncoding = function (opts, batchOpts) {
  return this._encoding(batchOpts && batchOpts.keyEncoding || opts && opts.keyEncoding || this.opts.keyEncoding);
};

Codec.prototype._valueEncoding = function (opts, batchOpts) {
  return this._encoding(batchOpts && (batchOpts.valueEncoding || batchOpts.encoding) || opts && (opts.valueEncoding || opts.encoding) || this.opts.valueEncoding || this.opts.encoding);
};

Codec.prototype.encodeKey = function (key, opts, batchOpts) {
  return this._keyEncoding(opts, batchOpts).encode(key);
};

Codec.prototype.encodeValue = function (value, opts, batchOpts) {
  return this._valueEncoding(opts, batchOpts).encode(value);
};

Codec.prototype.decodeKey = function (key, opts) {
  return this._keyEncoding(opts).decode(key);
};

Codec.prototype.decodeValue = function (value, opts) {
  return this._valueEncoding(opts).decode(value);
};

Codec.prototype.encodeBatch = function (ops, opts) {
  var self = this;

  return ops.map(function (_op) {
    var op = {
      type: _op.type,
      key: self.encodeKey(_op.key, opts, _op)
    };
    if (self.keyAsBuffer(opts, _op)) op.keyEncoding = 'binary';
    if (_op.prefix) op.prefix = _op.prefix;
    if ('value' in _op) {
      op.value = self.encodeValue(_op.value, opts, _op);
      if (self.valueAsBuffer(opts, _op)) op.valueEncoding = 'binary';
    }
    return op;
  });
};

var ltgtKeys = ['lt', 'gt', 'lte', 'gte', 'start', 'end'];

Codec.prototype.encodeLtgt = function (ltgt) {
  var self = this;
  var ret = {};
  Object.keys(ltgt).forEach(function (key) {
    ret[key] = ltgtKeys.indexOf(key) > -1 ? self.encodeKey(ltgt[key], ltgt) : ltgt[key];
  });
  return ret;
};

Codec.prototype.createStreamDecoder = function (opts) {
  var self = this;

  if (opts.keys && opts.values) {
    return function (key, value) {
      return {
        key: self.decodeKey(key, opts),
        value: self.decodeValue(value, opts)
      };
    };
  } else if (opts.keys) {
    return function (key) {
      return self.decodeKey(key, opts);
    };
  } else if (opts.values) {
    return function (_, value) {
      return self.decodeValue(value, opts);
    };
  } else {
    return function () {};
  }
};

Codec.prototype.keyAsBuffer = function (opts) {
  return this._keyEncoding(opts).buffer;
};

Codec.prototype.valueAsBuffer = function (opts) {
  return this._valueEncoding(opts).buffer;
};

},{"./lib/encodings":166}],166:[function(require,module,exports){
(function (Buffer){
'use strict';

exports.utf8 = exports['utf-8'] = {
  encode: function encode(data) {
    return isBinary(data) ? data : String(data);
  },
  decode: identity,
  buffer: false,
  type: 'utf8'
};

exports.json = {
  encode: JSON.stringify,
  decode: JSON.parse,
  buffer: false,
  type: 'json'
};

exports.binary = {
  encode: function encode(data) {
    return isBinary(data) ? data : new Buffer(data);
  },
  decode: identity,
  buffer: true,
  type: 'binary'
};

exports.id = {
  encode: function encode(data) {
    return data;
  },
  decode: function decode(data) {
    return data;
  },
  buffer: false,
  type: 'id'
};

var bufferEncodings = ['hex', 'ascii', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le'];

bufferEncodings.forEach(function (type) {
  exports[type] = {
    encode: function encode(data) {
      return isBinary(data) ? data : new Buffer(data, type);
    },
    decode: function decode(buffer) {
      return buffer.toString(type);
    },
    buffer: true,
    type: type
  };
});

function identity(value) {
  return value;
}

function isBinary(data) {
  return data === undefined || data === null || Buffer.isBuffer(data);
}

}).call(this,require("buffer").Buffer)
},{"buffer":62}],167:[function(require,module,exports){
'use strict';

/* Copyright (c) 2012-2015 LevelUP contributors
 * See list at <https://github.com/rvagg/node-levelup#contributing>
 * MIT License
 * <https://github.com/rvagg/node-levelup/blob/master/LICENSE.md>
 */

var createError = require('errno').create,
    LevelUPError = createError('LevelUPError'),
    NotFoundError = createError('NotFoundError', LevelUPError);

NotFoundError.prototype.notFound = true;
NotFoundError.prototype.status = 404;

module.exports = {
  LevelUPError: LevelUPError,
  InitializationError: createError('InitializationError', LevelUPError),
  OpenError: createError('OpenError', LevelUPError),
  ReadError: createError('ReadError', LevelUPError),
  WriteError: createError('WriteError', LevelUPError),
  NotFoundError: NotFoundError,
  EncodingError: createError('EncodingError', LevelUPError)
};

},{"errno":103}],168:[function(require,module,exports){
'use strict';

var inherits = require('inherits');
var Readable = require('readable-stream').Readable;
var extend = require('xtend');
var EncodingError = require('level-errors').EncodingError;

module.exports = ReadStream;
inherits(ReadStream, Readable);

function ReadStream(iterator, options) {
  if (!(this instanceof ReadStream)) return new ReadStream(iterator, options);
  Readable.call(this, extend(options, {
    objectMode: true
  }));
  this._iterator = iterator;
  this._destroyed = false;
  this._decoder = null;
  if (options && options.decoder) this._decoder = options.decoder;
  this.on('end', this._cleanup.bind(this));
}

ReadStream.prototype._read = function () {
  var self = this;
  if (this._destroyed) return;

  this._iterator.next(function (err, key, value) {
    if (self._destroyed) return;
    if (err) return self.emit('error', err);
    if (key === undefined && value === undefined) {
      self.push(null);
    } else {
      if (!self._decoder) return self.push({ key: key, value: value });

      try {
        var value = self._decoder(key, value);
      } catch (err) {
        self.emit('error', new EncodingError(err));
        self.push(null);
        return;
      }
      self.push(value);
    }
  });
};

ReadStream.prototype.destroy = ReadStream.prototype._cleanup = function () {
  var self = this;
  if (this._destroyed) return;
  this._destroyed = true;

  this._iterator.end(function (err) {
    if (err) return self.emit('error', err);
    self.emit('close');
  });
};

},{"inherits":160,"level-errors":167,"readable-stream":175,"xtend":263}],169:[function(require,module,exports){
'use strict';

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],170:[function(require,module,exports){
(function (process){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function (method) {
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
},{"./_stream_readable":172,"./_stream_writable":174,"_process":213,"core-util-is":66,"inherits":160}],171:[function(require,module,exports){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":173,"core-util-is":66,"inherits":160}],172:[function(require,module,exports){
(function (process){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;

/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (util.isString(chunk) && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (util.isNullOrUndefined(chunk)) {
    state.reading = false;
    if (!state.ended) onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding) chunk = state.decoder.write(chunk);

      if (!addToFront) state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

        if (state.needReadable) emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) {
      n |= n >> p;
    }n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended) return 0;

  if (state.objectMode) return n === 0 ? 0 : 1;

  if (isNaN(n) || util.isNull(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
  }

  if (n <= 0) return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark) state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n) || n > 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (util.isNull(ret)) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended) state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);

  if (!util.isNull(ret)) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!util.isBuffer(chunk) && !util.isString(chunk) && !util.isNullOrUndefined(chunk) && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) process.nextTick(function () {
      emitReadable_(stream);
    });else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function () {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause', src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0) dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1) return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        var self = this;
        process.nextTick(function () {
          debug('readable nexttick read 0');
          self.read(0);
        });
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    if (!state.reading) {
      debug('resume read 0');
      this.read(0);
    }
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(function () {
      resume_(stream, state);
    });
  }
}

function resume_(stream, state) {
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0) return null;

  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode) ret = list.join('');else ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode) ret = '';else ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(function () {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":170,"_process":213,"buffer":62,"core-util-is":66,"events":148,"inherits":160,"isarray":169,"stream":252,"string_decoder/":253,"util":32}],173:[function(require,module,exports){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(options, stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (!util.isNullOrUndefined(data)) stream.push(data);

  if (cb) cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('prefinish', function () {
    if (util.isFunction(this._flush)) this._flush(function (er) {
      done(stream, er);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er) {
  if (er) return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":170,"core-util-is":66,"inherits":160}],174:[function(require,module,exports){
(function (process){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};

function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function () {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!util.isBuffer(chunk) && !util.isString(chunk) && !util.isNullOrUndefined(chunk) && !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function () {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (util.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (!util.isFunction(cb)) cb = function cb() {};

  if (state.ended) writeAfterEnd(this, state, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.buffer.length) clearBuffer(this, state);
  }
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && util.isString(chunk)) {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (util.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) state.buffer.push(new WriteReq(chunk, encoding, cb));else doWrite(stream, state, false, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync) process.nextTick(function () {
    state.pendingcb--;
    cb(er);
  });else {
    state.pendingcb--;
    cb(er);
  }

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished && !state.corked && !state.bufferProcessing && state.buffer.length) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(function () {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  if (stream._writev && state.buffer.length > 1) {
    // Fast case, write everything using _writev()
    var cbs = [];
    for (var c = 0; c < state.buffer.length; c++) {
      cbs.push(state.buffer[c].callback);
    } // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    doWrite(stream, state, true, state.length, state.buffer, '', function (err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
    state.buffer = [];
  } else {
    // Slow case, write chunks one-by-one
    for (var c = 0; c < state.buffer.length; c++) {
      var entry = state.buffer[c];
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);

      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        c++;
        break;
      }
    }

    if (c < state.buffer.length) state.buffer = state.buffer.slice(c);else state.buffer.length = 0;
  }

  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (util.isFunction(chunk)) {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (!util.isNullOrUndefined(chunk)) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(stream, state) {
  return state.ending && state.length === 0 && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else prefinish(stream, state);
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":170,"_process":213,"buffer":62,"core-util-is":66,"inherits":160,"stream":252}],175:[function(require,module,exports){
(function (process){
'use strict';

exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = require('stream');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
if (!process.browser && process.env.READABLE_STREAM === 'disable') {
  module.exports = require('stream');
}

}).call(this,require('_process'))
},{"./lib/_stream_duplex.js":170,"./lib/_stream_passthrough.js":171,"./lib/_stream_readable.js":172,"./lib/_stream_transform.js":173,"./lib/_stream_writable.js":174,"_process":213,"stream":252}],176:[function(require,module,exports){
(function (process){
'use strict';

/* Copyright (c) 2013 LevelUP contributors
 * See list at <https://github.com/rvagg/node-levelup#contributing>
 * MIT +no-false-attribs License
 * <https://github.com/Level/level-ws/master/LICENSE>
 */

var Writable = require('stream').Writable || require('readable-stream').Writable,
    inherits = require('util').inherits,
    extend = require('xtend'),
    defaultOptions = {
  type: 'put',
  keyEncoding: 'utf8',
  valueEncoding: 'utf8'
}

// copied from LevelUP
,
    encodingNames = ['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le']

// copied from LevelUP
,
    encodingOpts = function () {
  var eo = {};
  encodingNames.forEach(function (e) {
    eo[e] = { valueEncoding: e };
  });
  return eo;
}();

// copied from LevelUP
function getOptions(levelup, options) {
  var s = typeof options == 'string'; // just an encoding
  if (!s && options && options.encoding && !options.valueEncoding) options.valueEncoding = options.encoding;
  return extend(levelup && levelup.options || {}, s ? encodingOpts[options] || encodingOpts[defaultOptions.valueEncoding] : options);
}

function WriteStream(options, db) {
  if (!(this instanceof WriteStream)) return new WriteStream(options, db);

  Writable.call(this, { objectMode: true });
  this._options = extend(defaultOptions, getOptions(db, options));
  this._db = db;
  this._buffer = [];
  this.writable = true;
  this.readable = false;

  var self = this;
  this.on('finish', function f() {
    if (self._buffer && self._buffer.length) {
      return self._flush(f);
    }
    self.writable = false;
    self.emit('close');
  });
}

inherits(WriteStream, Writable);

WriteStream.prototype._write = function write(d, enc, next) {
  var self = this;
  if (self._destroyed) return;
  if (!self._db.isOpen()) return self._db.once('ready', function () {
    write.call(self, d, enc, next);
  });

  if (self._options.maxBufferLength && self._buffer.length > self._options.maxBufferLength) {
    self.once('_flush', next);
  } else {
    if (self._buffer.length === 0) process.nextTick(function () {
      self._flush();
    });
    self._buffer.push(d);
    next();
  }
};

WriteStream.prototype._flush = function (f) {
  var self = this,
      buffer = self._buffer;

  if (self._destroyed || !buffer) return;

  if (!self._db.isOpen()) {
    return self._db.on('ready', function () {
      self._flush(f);
    });
  }
  self._buffer = [];

  self._db.batch(buffer.map(function (d) {
    return {
      type: d.type || self._options.type,
      key: d.key,
      value: d.value,
      keyEncoding: d.keyEncoding || self._options.keyEncoding,
      valueEncoding: d.valueEncoding || d.encoding || self._options.valueEncoding
    };
  }), cb);

  function cb(err) {
    if (err) {
      self.writable = false;
      self.emit('error', err);
    } else {
      if (f) f();
      self.emit('_flush');
    }
  }
};

WriteStream.prototype.toString = function () {
  return 'LevelUP.WriteStream';
};

WriteStream.prototype.destroy = function () {
  if (this._destroyed) return;
  this._buffer = null;
  this._destroyed = true;
  this.writable = false;
  this.emit('close');
};

WriteStream.prototype.destroySoon = function () {
  this.end();
};

module.exports = function (db) {
  db.writeStream = db.createWriteStream = function (options) {
    return new WriteStream(options, db);
  };
  return db;
};

module.exports.WriteStream = WriteStream;

}).call(this,require('_process'))
},{"_process":213,"readable-stream":183,"stream":252,"util":259,"xtend":185}],177:[function(require,module,exports){
arguments[4][169][0].apply(exports,arguments)
},{"dup":169}],178:[function(require,module,exports){
arguments[4][170][0].apply(exports,arguments)
},{"./_stream_readable":180,"./_stream_writable":182,"_process":213,"core-util-is":66,"dup":170,"inherits":160}],179:[function(require,module,exports){
arguments[4][171][0].apply(exports,arguments)
},{"./_stream_transform":181,"core-util-is":66,"dup":171,"inherits":160}],180:[function(require,module,exports){
(function (process){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  this.highWaterMark = hwm || hwm === 0 ? hwm : 16 * 1024;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = false;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // In streams that never have any data, and do push(null) right away,
  // the consumer can miss the 'end' event if they do some I/O before
  // consuming the stream.  So, we don't emit('end') until some reading
  // happens.
  this.calledRead = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (typeof chunk === 'string' && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null || chunk === undefined) {
    state.reading = false;
    if (!state.ended) onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding) chunk = state.decoder.write(chunk);

      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) {
        state.buffer.unshift(chunk);
      } else {
        state.reading = false;
        state.buffer.push(chunk);
      }

      if (state.needReadable) emitReadable(stream);

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) {
      n |= n >> p;
    }n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended) return 0;

  if (state.objectMode) return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
  }

  if (n <= 0) return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark) state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  var state = this._readableState;
  state.calledRead = true;
  var nOrig = n;
  var ret;

  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    ret = null;

    // In cases where the decoder did not receive enough data
    // to produce a full chunk, then immediately received an
    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
    // howMuchToRead will see this and coerce the amount to
    // read to zero (because it's looking at the length of the
    // first <Buffer > in state.buffer), and we'll end up here.
    //
    // This can only happen via state.decoder -- no other venue
    // exists for pushing a zero-length chunk into state.buffer
    // and triggering this behavior. In this case, we return our
    // remaining data and end the stream, if appropriate.
    if (state.length > 0 && state.decoder) {
      ret = fromList(n, state);
      state.length -= ret.length;
    }

    if (state.length === 0) endReadable(this);

    return ret;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;

  // if we currently have less than the highWaterMark, then also read some
  if (state.length - n <= state.highWaterMark) doRead = true;

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) doRead = false;

  if (doRead) {
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read called its callback synchronously, then `reading`
  // will be false, and we need to re-evaluate how much data we
  // can return to the user.
  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);

  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended) state.needReadable = true;

  // If we happened to read() exactly the remaining amount in the
  // buffer, and the EOF has been seen at this point, then make sure
  // that we emit 'end' on the very next tick.
  if (state.ended && !state.endEmitted && state.length === 0) endReadable(this);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && 'string' !== typeof chunk && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // if we've ended and we have some data left, then emit
  // 'readable' now to make sure it gets picked up.
  if (state.length > 0) emitReadable(stream);else endReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (state.emittedReadable) return;

  state.emittedReadable = true;
  if (state.sync) process.nextTick(function () {
    emitReadable_(stream);
  });else emitReadable_(stream);
}

function emitReadable_(stream) {
  stream.emit('readable');
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function () {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    if (readable !== src) return;
    cleanup();
  }

  function onend() {
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (!dest._writableState || dest._writableState.needDrain) ondrain();
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0) dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    // the handler that waits for readable events after all
    // the data gets sucked out in flow.
    // This would be easier to follow with a .once() handler
    // in flow(), but that is too slow.
    this.on('readable', pipeOnReadable);

    state.flowing = true;
    process.nextTick(function () {
      flow(src);
    });
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var dest = this;
    var state = src._readableState;
    state.awaitDrain--;
    if (state.awaitDrain === 0) flow(src);
  };
}

function flow(src) {
  var state = src._readableState;
  var chunk;
  state.awaitDrain = 0;

  function write(dest, i, list) {
    var written = dest.write(chunk);
    if (false === written) {
      state.awaitDrain++;
    }
  }

  while (state.pipesCount && null !== (chunk = src.read())) {

    if (state.pipesCount === 1) write(state.pipes, 0, null);else forEach(state.pipes, write);

    src.emit('data', chunk);

    // if anyone needs a drain, then we have to wait for that.
    if (state.awaitDrain > 0) return;
  }

  // if every destination was unpiped, either before entering this
  // function, or in the while loop, then stop flowing.
  //
  // NB: This is a pretty rare edge case.
  if (state.pipesCount === 0) {
    state.flowing = false;

    // if there were data event listeners added, then switch to old mode.
    if (EE.listenerCount(src, 'data') > 0) emitDataEvents(src);
    return;
  }

  // at this point, no one needed a drain, so we just ran out of data
  // on the next readable event, start it over again.
  state.ranOut = true;
}

function pipeOnReadable() {
  if (this._readableState.ranOut) {
    this._readableState.ranOut = false;
    flow(this);
  }
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1) return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data' && !this._readableState.flowing) emitDataEvents(this);

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        this.read(0);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  emitDataEvents(this);
  this.read(0);
  this.emit('resume');
};

Readable.prototype.pause = function () {
  emitDataEvents(this, true);
  this.emit('pause');
};

function emitDataEvents(stream, startPaused) {
  var state = stream._readableState;

  if (state.flowing) {
    // https://github.com/isaacs/readable-stream/issues/16
    throw new Error('Cannot switch to old mode now.');
  }

  var paused = startPaused || false;
  var readable = false;

  // convert to an old-style stream.
  stream.readable = true;
  stream.pipe = Stream.prototype.pipe;
  stream.on = stream.addListener = Stream.prototype.on;

  stream.on('readable', function () {
    readable = true;

    var c;
    while (!paused && null !== (c = stream.read())) {
      stream.emit('data', c);
    }if (c === null) {
      readable = false;
      stream._readableState.needReadable = true;
    }
  });

  stream.pause = function () {
    paused = true;
    this.emit('pause');
  };

  stream.resume = function () {
    paused = false;
    if (readable) process.nextTick(function () {
      stream.emit('readable');
    });else this.read(0);
    this.emit('resume');
  };

  // now make it start, just in case it hadn't already.
  stream.emit('readable');
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    //if (state.objectMode && util.isNullOrUndefined(chunk))
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (typeof stream[i] === 'function' && typeof this[i] === 'undefined') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0) return null;

  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode) ret = list.join('');else ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode) ret = '';else ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted && state.calledRead) {
    state.ended = true;
    process.nextTick(function () {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"_process":213,"buffer":62,"core-util-is":66,"events":148,"inherits":160,"isarray":177,"stream":252,"string_decoder/":253}],181:[function(require,module,exports){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(options, stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  if (cb) cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  var ts = this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('finish', function () {
    if ('function' === typeof this._flush) this._flush(function (er) {
      done(stream, er);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er) {
  if (er) return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var rs = stream._readableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":178,"core-util-is":66,"inherits":160}],182:[function(require,module,exports){
(function (process){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  this.highWaterMark = hwm || hwm === 0 ? hwm : 16 * 1024;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};

function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function () {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!Buffer.isBuffer(chunk) && 'string' !== typeof chunk && chunk !== null && chunk !== undefined && !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function () {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = function cb() {};

  if (state.ended) writeAfterEnd(this, state, cb);else if (validChunk(this, state, chunk, cb)) ret = writeOrBuffer(this, state, chunk, encoding, cb);

  return ret;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing) state.buffer.push(new WriteReq(chunk, encoding, cb));else doWrite(stream, state, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync) process.nextTick(function () {
    cb(er);
  });else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished && !state.bufferProcessing && state.buffer.length) clearBuffer(stream, state);

    if (sync) {
      process.nextTick(function () {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  cb();
  if (finished) finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  for (var c = 0; c < state.buffer.length; c++) {
    var entry = state.buffer[c];
    var chunk = entry.chunk;
    var encoding = entry.encoding;
    var cb = entry.callback;
    var len = state.objectMode ? 1 : chunk.length;

    doWrite(stream, state, len, chunk, encoding, cb);

    // if we didn't call the onwrite immediately, then
    // it means that we need to wait until it does.
    // also, that means that the chunk and cb are currently
    // being processed, so move the buffer counter past them.
    if (state.writing) {
      c++;
      break;
    }
  }

  state.bufferProcessing = false;
  if (c < state.buffer.length) state.buffer = state.buffer.slice(c);else state.buffer.length = 0;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (typeof chunk !== 'undefined' && chunk !== null) this.write(chunk, encoding);

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(stream, state) {
  return state.ending && state.length === 0 && !state.finished && !state.writing;
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    state.finished = true;
    stream.emit('finish');
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":178,"_process":213,"buffer":62,"core-util-is":66,"inherits":160,"stream":252}],183:[function(require,module,exports){
(function (process){
'use strict';

var Stream = require('stream'); // hack to fix a circular dependency issue when used with browserify
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
if (!process.browser && process.env.READABLE_STREAM === 'disable') {
  module.exports = require('stream');
}

}).call(this,require('_process'))
},{"./lib/_stream_duplex.js":178,"./lib/_stream_passthrough.js":179,"./lib/_stream_readable.js":180,"./lib/_stream_transform.js":181,"./lib/_stream_writable.js":182,"_process":213,"stream":252}],184:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

module.exports = hasKeys;

function hasKeys(source) {
    return source !== null && ((typeof source === "undefined" ? "undefined" : _typeof(source)) === "object" || typeof source === "function");
}

},{}],185:[function(require,module,exports){
"use strict";

var Keys = require("object-keys");
var hasKeys = require("./has-keys");

module.exports = extend;

function extend() {
    var target = {};

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];

        if (!hasKeys(source)) {
            continue;
        }

        var keys = Keys(source);

        for (var j = 0; j < keys.length; j++) {
            var name = keys[j];
            target[name] = source[name];
        }
    }

    return target;
}

},{"./has-keys":184,"object-keys":203}],186:[function(require,module,exports){
'use strict';

/* Copyright (c) 2012-2016 LevelUP contributors
 * See list at <https://github.com/level/levelup#contributing>
 * MIT License
 * <https://github.com/level/levelup/blob/master/LICENSE.md>
 */

var util = require('./util'),
    WriteError = require('level-errors').WriteError,
    getOptions = util.getOptions,
    dispatchError = util.dispatchError;

function Batch(levelup, codec) {
  this._levelup = levelup;
  this._codec = codec;
  this.batch = levelup.db.batch();
  this.ops = [];
  this.length = 0;
}

Batch.prototype.put = function (key_, value_, options) {
  options = getOptions(options);

  var key = this._codec.encodeKey(key_, options),
      value = this._codec.encodeValue(value_, options);

  try {
    this.batch.put(key, value);
  } catch (e) {
    throw new WriteError(e);
  }
  this.ops.push({ type: 'put', key: key, value: value });
  this.length++;

  return this;
};

Batch.prototype.del = function (key_, options) {
  options = getOptions(options);

  var key = this._codec.encodeKey(key_, options);

  try {
    this.batch.del(key);
  } catch (err) {
    throw new WriteError(err);
  }
  this.ops.push({ type: 'del', key: key });
  this.length++;

  return this;
};

Batch.prototype.clear = function () {
  try {
    this.batch.clear();
  } catch (err) {
    throw new WriteError(err);
  }

  this.ops = [];
  this.length = 0;
  return this;
};

Batch.prototype.write = function (callback) {
  var levelup = this._levelup,
      ops = this.ops;

  try {
    this.batch.write(function (err) {
      if (err) return dispatchError(levelup, new WriteError(err), callback);
      levelup.emit('batch', ops);
      if (callback) callback();
    });
  } catch (err) {
    throw new WriteError(err);
  }
};

module.exports = Batch;

},{"./util":188,"level-errors":167}],187:[function(require,module,exports){
(function (process){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/* Copyright (c) 2012-2016 LevelUP contributors
 * See list at <https://github.com/level/levelup#contributing>
 * MIT License
 * <https://github.com/level/levelup/blob/master/LICENSE.md>
 */

var EventEmitter = require('events').EventEmitter,
    inherits = require('util').inherits,
    deprecate = require('util').deprecate,
    extend = require('xtend'),
    prr = require('prr'),
    DeferredLevelDOWN = require('deferred-leveldown'),
    IteratorStream = require('level-iterator-stream'),
    errors = require('level-errors'),
    WriteError = errors.WriteError,
    ReadError = errors.ReadError,
    NotFoundError = errors.NotFoundError,
    OpenError = errors.OpenError,
    EncodingError = errors.EncodingError,
    InitializationError = errors.InitializationError,
    util = require('./util'),
    Batch = require('./batch'),
    Codec = require('level-codec'),
    getOptions = util.getOptions,
    defaultOptions = util.defaultOptions,
    getLevelDOWN = util.getLevelDOWN,
    dispatchError = util.dispatchError,
    isDefined = util.isDefined;

function getCallback(options, callback) {
  return typeof options == 'function' ? options : callback;
}

// Possible LevelUP#_status values:
//  - 'new'     - newly created, not opened or closed
//  - 'opening' - waiting for the database to be opened, post open()
//  - 'open'    - successfully opened the database, available for use
//  - 'closing' - waiting for the database to be closed, post close()
//  - 'closed'  - database has been successfully closed, should not be
//                 used except for another open() operation

function LevelUP(location, options, callback) {
  if (!(this instanceof LevelUP)) return new LevelUP(location, options, callback);

  var error;

  EventEmitter.call(this);
  this.setMaxListeners(Infinity);

  if (typeof location == 'function') {
    options = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) == 'object' ? options : {};
    options.db = location;
    location = null;
  } else if ((typeof location === 'undefined' ? 'undefined' : _typeof(location)) == 'object' && typeof location.db == 'function') {
    options = location;
    location = null;
  }

  if (typeof options == 'function') {
    callback = options;
    options = {};
  }

  if ((!options || typeof options.db != 'function') && typeof location != 'string') {
    error = new InitializationError('Must provide a location for the database');
    if (callback) {
      return process.nextTick(function () {
        callback(error);
      });
    }
    throw error;
  }

  options = getOptions(options);
  this.options = extend(defaultOptions, options);
  this._codec = new Codec(this.options);
  this._status = 'new';
  // set this.location as enumerable but not configurable or writable
  prr(this, 'location', location, 'e');

  this.open(callback);
}

inherits(LevelUP, EventEmitter);

LevelUP.prototype.open = function (callback) {
  var self = this,
      dbFactory,
      db;

  if (this.isOpen()) {
    if (callback) process.nextTick(function () {
      callback(null, self);
    });
    return this;
  }

  if (this._isOpening()) {
    return callback && this.once('open', function () {
      callback(null, self);
    });
  }

  this.emit('opening');

  this._status = 'opening';
  this.db = new DeferredLevelDOWN(this.location);
  dbFactory = this.options.db || getLevelDOWN();
  db = dbFactory(this.location);

  db.open(this.options, function (err) {
    if (err) {
      return dispatchError(self, new OpenError(err), callback);
    } else {
      self.db.setDb(db);
      self.db = db;
      self._status = 'open';
      if (callback) callback(null, self);
      self.emit('open');
      self.emit('ready');
    }
  });
};

LevelUP.prototype.close = function (callback) {
  var self = this;

  if (this.isOpen()) {
    this._status = 'closing';
    this.db.close(function () {
      self._status = 'closed';
      self.emit('closed');
      if (callback) callback.apply(null, arguments);
    });
    this.emit('closing');
    this.db = new DeferredLevelDOWN(this.location);
  } else if (this._status == 'closed' && callback) {
    return process.nextTick(callback);
  } else if (this._status == 'closing' && callback) {
    this.once('closed', callback);
  } else if (this._isOpening()) {
    this.once('open', function () {
      self.close(callback);
    });
  }
};

LevelUP.prototype.isOpen = function () {
  return this._status == 'open';
};

LevelUP.prototype._isOpening = function () {
  return this._status == 'opening';
};

LevelUP.prototype.isClosed = function () {
  return (/^clos/.test(this._status)
  );
};

function maybeError(db, options, callback) {
  if (!db._isOpening() && !db.isOpen()) {
    dispatchError(db, new ReadError('Database is not open'), callback);
    return true;
  }
}

function writeError(db, message, callback) {
  dispatchError(db, new WriteError(message), callback);
}

function readError(db, message, callback) {
  dispatchError(db, new ReadError(message), callback);
}

LevelUP.prototype.get = function (key_, options, callback) {
  var self = this,
      key;

  callback = getCallback(options, callback);

  if (maybeError(this, options, callback)) return;

  if (key_ === null || key_ === undefined || 'function' !== typeof callback) return readError(this, 'get() requires key and callback arguments', callback);

  options = util.getOptions(options);
  key = this._codec.encodeKey(key_, options);

  options.asBuffer = this._codec.valueAsBuffer(options);

  this.db.get(key, options, function (err, value) {
    if (err) {
      if (/notfound/i.test(err) || err.notFound) {
        err = new NotFoundError('Key not found in database [' + key_ + ']', err);
      } else {
        err = new ReadError(err);
      }
      return dispatchError(self, err, callback);
    }
    if (callback) {
      try {
        value = self._codec.decodeValue(value, options);
      } catch (e) {
        return callback(new EncodingError(e));
      }
      callback(null, value);
    }
  });
};

LevelUP.prototype.put = function (key_, value_, options, callback) {
  var self = this,
      key,
      value;

  callback = getCallback(options, callback);

  if (key_ === null || key_ === undefined) return writeError(this, 'put() requires a key argument', callback);

  if (maybeError(this, options, callback)) return;

  options = getOptions(options);
  key = this._codec.encodeKey(key_, options);
  value = this._codec.encodeValue(value_, options);

  this.db.put(key, value, options, function (err) {
    if (err) {
      return dispatchError(self, new WriteError(err), callback);
    } else {
      self.emit('put', key_, value_);
      if (callback) callback();
    }
  });
};

LevelUP.prototype.del = function (key_, options, callback) {
  var self = this,
      key;

  callback = getCallback(options, callback);

  if (key_ === null || key_ === undefined) return writeError(this, 'del() requires a key argument', callback);

  if (maybeError(this, options, callback)) return;

  options = getOptions(options);
  key = this._codec.encodeKey(key_, options);

  this.db.del(key, options, function (err) {
    if (err) {
      return dispatchError(self, new WriteError(err), callback);
    } else {
      self.emit('del', key_);
      if (callback) callback();
    }
  });
};

LevelUP.prototype.batch = function (arr_, options, callback) {
  var self = this,
      keyEnc,
      valueEnc,
      arr;

  if (!arguments.length) return new Batch(this, this._codec);

  callback = getCallback(options, callback);

  if (!Array.isArray(arr_)) return writeError(this, 'batch() requires an array argument', callback);

  if (maybeError(this, options, callback)) return;

  options = getOptions(options);
  arr = self._codec.encodeBatch(arr_, options);
  arr = arr.map(function (op) {
    if (!op.type && op.key !== undefined && op.value !== undefined) op.type = 'put';
    return op;
  });

  this.db.batch(arr, options, function (err) {
    if (err) {
      return dispatchError(self, new WriteError(err), callback);
    } else {
      self.emit('batch', arr_);
      if (callback) callback();
    }
  });
};

LevelUP.prototype.approximateSize = deprecate(function (start_, end_, options, callback) {
  var self = this,
      start,
      end;

  callback = getCallback(options, callback);

  options = getOptions(options);

  if (start_ === null || start_ === undefined || end_ === null || end_ === undefined || 'function' !== typeof callback) return readError(this, 'approximateSize() requires start, end and callback arguments', callback);

  start = this._codec.encodeKey(start_, options);
  end = this._codec.encodeKey(end_, options);

  this.db.approximateSize(start, end, function (err, size) {
    if (err) {
      return dispatchError(self, new OpenError(err), callback);
    } else if (callback) {
      callback(null, size);
    }
  });
}, 'db.approximateSize() is deprecated. Use db.db.approximateSize() instead');

LevelUP.prototype.readStream = LevelUP.prototype.createReadStream = function (options) {
  options = extend({ keys: true, values: true }, this.options, options);

  options.keyEncoding = options.keyEncoding;
  options.valueEncoding = options.valueEncoding;

  options = this._codec.encodeLtgt(options);
  options.keyAsBuffer = this._codec.keyAsBuffer(options);
  options.valueAsBuffer = this._codec.valueAsBuffer(options);

  if ('number' !== typeof options.limit) options.limit = -1;

  return new IteratorStream(this.db.iterator(options), extend(options, {
    decoder: this._codec.createStreamDecoder(options)
  }));
};

LevelUP.prototype.keyStream = LevelUP.prototype.createKeyStream = function (options) {
  return this.createReadStream(extend(options, { keys: true, values: false }));
};

LevelUP.prototype.valueStream = LevelUP.prototype.createValueStream = function (options) {
  return this.createReadStream(extend(options, { keys: false, values: true }));
};

LevelUP.prototype.toString = function () {
  return 'LevelUP';
};

function utilStatic(name) {
  return function (location, callback) {
    getLevelDOWN()[name](location, callback || function () {});
  };
}

module.exports = LevelUP;
module.exports.errors = require('level-errors');
module.exports.destroy = deprecate(utilStatic('destroy'), 'levelup.destroy() is deprecated. Use leveldown.destroy() instead');
module.exports.repair = deprecate(utilStatic('repair'), 'levelup.repair() is deprecated. Use leveldown.repair() instead');

}).call(this,require('_process'))
},{"./batch":186,"./util":188,"_process":213,"deferred-leveldown":74,"events":148,"level-codec":165,"level-errors":167,"level-iterator-stream":168,"prr":214,"util":259,"xtend":263}],188:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/* Copyright (c) 2012-2016 LevelUP contributors
 * See list at <https://github.com/level/levelup#contributing>
 * MIT License
 * <https://github.com/level/levelup/blob/master/LICENSE.md>
 */

var extend = require('xtend'),
    LevelUPError = require('level-errors').LevelUPError,
    format = require('util').format,
    defaultOptions = {
  createIfMissing: true,
  errorIfExists: false,
  keyEncoding: 'utf8',
  valueEncoding: 'utf8',
  compression: true
},
    leveldown;

function getOptions(options) {
  if (typeof options == 'string') options = { valueEncoding: options };
  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) != 'object') options = {};
  return options;
}

function getLevelDOWN() {
  if (leveldown) return leveldown;

  var requiredVersion = require('../package.json').devDependencies.leveldown,
      leveldownVersion;

  try {
    leveldownVersion = require('leveldown/package').version;
  } catch (e) {
    throw requireError(e);
  }

  if (!require('semver').satisfies(leveldownVersion, requiredVersion)) {
    throw new LevelUPError('Installed version of LevelDOWN (' + leveldownVersion + ') does not match required version (' + requiredVersion + ')');
  }

  try {
    return leveldown = require('leveldown');
  } catch (e) {
    throw requireError(e);
  }
}

function requireError(e) {
  var template = 'Failed to require LevelDOWN (%s). Try `npm install leveldown` if it\'s missing';
  return new LevelUPError(format(template, e.message));
}

function dispatchError(db, error, callback) {
  typeof callback == 'function' ? callback(error) : db.emit('error', error);
}

function isDefined(v) {
  return typeof v !== 'undefined';
}

module.exports = {
  defaultOptions: defaultOptions,
  getOptions: getOptions,
  getLevelDOWN: getLevelDOWN,
  dispatchError: dispatchError,
  isDefined: isDefined
};

},{"../package.json":189,"level-errors":167,"leveldown":32,"leveldown/package":32,"semver":32,"util":259,"xtend":263}],189:[function(require,module,exports){
module.exports={
  "_args": [
    [
      {
        "raw": "levelup@^1.2.1",
        "scope": null,
        "escapedName": "levelup",
        "name": "levelup",
        "rawSpec": "^1.2.1",
        "spec": ">=1.2.1 <2.0.0",
        "type": "range"
      },
      "/Users/pelleb/code/browser-builds/node_modules/merkle-patricia-tree"
    ]
  ],
  "_from": "levelup@>=1.2.1 <2.0.0",
  "_id": "levelup@1.3.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/levelup",
  "_nodeVersion": "6.1.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/levelup-1.3.2.tgz_1463496525467_0.4644940535072237"
  },
  "_npmUser": {
    "name": "ralphtheninja",
    "email": "ralphtheninja@riseup.net"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "levelup@^1.2.1",
    "scope": null,
    "escapedName": "levelup",
    "name": "levelup",
    "rawSpec": "^1.2.1",
    "spec": ">=1.2.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/merkle-patricia-tree"
  ],
  "_resolved": "https://registry.npmjs.org/levelup/-/levelup-1.3.2.tgz",
  "_shasum": "b321d3071f0e75c2dfaf2f0fe8864e5b9a387bc9",
  "_shrinkwrap": null,
  "_spec": "levelup@^1.2.1",
  "_where": "/Users/pelleb/code/browser-builds/node_modules/merkle-patricia-tree",
  "browser": {
    "leveldown": false,
    "leveldown/package": false,
    "semver": false
  },
  "bugs": {
    "url": "https://github.com/level/levelup/issues"
  },
  "contributors": [
    {
      "name": "Rod Vagg",
      "email": "r@va.gg",
      "url": "https://github.com/rvagg"
    },
    {
      "name": "John Chesley",
      "email": "john@chesl.es",
      "url": "https://github.com/chesles/"
    },
    {
      "name": "Jake Verbaten",
      "email": "raynos2@gmail.com",
      "url": "https://github.com/raynos"
    },
    {
      "name": "Dominic Tarr",
      "email": "dominic.tarr@gmail.com",
      "url": "https://github.com/dominictarr"
    },
    {
      "name": "Max Ogden",
      "email": "max@maxogden.com",
      "url": "https://github.com/maxogden"
    },
    {
      "name": "Lars-Magnus Skog",
      "email": "ralphtheninja@riseup.net",
      "url": "https://github.com/ralphtheninja"
    },
    {
      "name": "David Björklund",
      "email": "david.bjorklund@gmail.com",
      "url": "https://github.com/kesla"
    },
    {
      "name": "Julian Gruber",
      "email": "julian@juliangruber.com",
      "url": "https://github.com/juliangruber"
    },
    {
      "name": "Paolo Fragomeni",
      "email": "paolo@async.ly",
      "url": "https://github.com/0x00a"
    },
    {
      "name": "Anton Whalley",
      "email": "anton.whalley@nearform.com",
      "url": "https://github.com/No9"
    },
    {
      "name": "Matteo Collina",
      "email": "matteo.collina@gmail.com",
      "url": "https://github.com/mcollina"
    },
    {
      "name": "Pedro Teixeira",
      "email": "pedro.teixeira@gmail.com",
      "url": "https://github.com/pgte"
    },
    {
      "name": "James Halliday",
      "email": "mail@substack.net",
      "url": "https://github.com/substack"
    },
    {
      "name": "Jarrett Cruger",
      "email": "jcrugzz@gmail.com",
      "url": "https://github.com/jcrugzz"
    }
  ],
  "dependencies": {
    "deferred-leveldown": "~1.2.1",
    "level-codec": "~6.1.0",
    "level-errors": "~1.0.3",
    "level-iterator-stream": "~1.3.0",
    "prr": "~1.0.1",
    "semver": "~5.1.0",
    "xtend": "~4.0.0"
  },
  "description": "Fast & simple storage - a Node.js-style LevelDB wrapper",
  "devDependencies": {
    "async": "~1.5.0",
    "bustermove": "~1.0.0",
    "delayed": "~1.0.1",
    "faucet": "~0.0.1",
    "leveldown": "^1.1.0",
    "memdown": "~1.1.0",
    "msgpack-js": "~0.3.0",
    "referee": "~1.2.0",
    "rimraf": "~2.4.3",
    "slow-stream": "0.0.4",
    "tap": "~2.3.1",
    "tape": "~4.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "b321d3071f0e75c2dfaf2f0fe8864e5b9a387bc9",
    "tarball": "https://registry.npmjs.org/levelup/-/levelup-1.3.2.tgz"
  },
  "gitHead": "bcc242cfc4ec035f9228a5cd54903cb126659a00",
  "homepage": "https://github.com/level/levelup",
  "keywords": [
    "leveldb",
    "stream",
    "database",
    "db",
    "store",
    "storage",
    "json"
  ],
  "license": "MIT",
  "main": "lib/levelup.js",
  "maintainers": [
    {
      "name": "rvagg",
      "email": "rod@vagg.org"
    },
    {
      "name": "ralphtheninja",
      "email": "ralphtheninja@riseup.net"
    },
    {
      "name": "juliangruber",
      "email": "julian@juliangruber.com"
    }
  ],
  "name": "levelup",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/level/levelup.git"
  },
  "scripts": {
    "test": "tape test/*-test.js | faucet"
  },
  "version": "1.3.2"
}

},{}],190:[function(require,module,exports){
(function (Buffer){
'use strict';

exports.compare = function (a, b) {

  if (Buffer.isBuffer(a)) {
    var l = Math.min(a.length, b.length);
    for (var i = 0; i < l; i++) {
      var cmp = a[i] - b[i];
      if (cmp) return cmp;
    }
    return a.length - b.length;
  }

  return a < b ? -1 : a > b ? 1 : 0;
};

function has(obj, key) {
  return Object.hasOwnProperty.call(obj, key);
}

// to be compatible with the current abstract-leveldown tests
// nullish or empty strings.
// I could use !!val but I want to permit numbers and booleans,
// if possible.

function isDef(val) {
  return val != null && val !== '';
}

var lowerBound = exports.lowerBound = function (range) {
  return isDef(range.gt) ? range.gt : isDef(range.gte) ? range.gte : isDef(range.min) ? range.min : isDef(range.start) && !range.reverse ? range.start : isDef(range.end) && range.reverse ? range.end : undefined;
};

exports.lowerBoundInclusive = function (range) {
  return isDef(range.gt) ? false : true;
};

exports.upperBoundInclusive = function (range) {
  return isDef(range.lt) ? false : true;
};

var lowerBoundExclusive = exports.lowerBoundExclusive = function (range) {
  return isDef(range.gt) ? true : false;
};

var upperBoundExclusive = exports.upperBoundExclusive = function (range) {
  return isDef(range.lt) ? true : false;
};

var upperBound = exports.upperBound = function (range) {
  return isDef(range.lt) ? range.lt : isDef(range.lte) ? range.lte : isDef(range.max) ? range.max : isDef(range.start) && range.reverse ? range.start : isDef(range.end) && !range.reverse ? range.end : undefined;
};

exports.contains = function (range, key, compare) {
  compare = compare || exports.compare;

  var lb = lowerBound(range);
  if (isDef(lb)) {
    var cmp = compare(key, lb);
    if (cmp < 0 || cmp === 0 && lowerBoundExclusive(range)) return false;
  }

  var ub = upperBound(range);
  if (isDef(ub)) {
    var cmp = compare(key, ub);
    if (cmp > 0 || cmp === 0 && upperBoundExclusive(range)) return false;
  }

  return true;
};

exports.filter = function (range, compare) {
  return function (key) {
    return exports.contains(range, key, compare);
  };
};

}).call(this,{"isBuffer":require("../is-buffer/index.js")})
},{"../is-buffer/index.js":161}],191:[function(require,module,exports){
(function (process,global,Buffer){
'use strict';

var inherits = require('inherits'),
    AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN,
    AbstractIterator = require('abstract-leveldown').AbstractIterator,
    ltgt = require('ltgt'),
    createRBT = require('functional-red-black-tree'),
    globalStore = {};
/* istanbul ignore next */
var setImmediate = global.setImmediate || process.nextTick;

function gt(value) {
  return ltgt.compare(value, this._end) > 0;
}

function gte(value) {
  return ltgt.compare(value, this._end) >= 0;
}

function lt(value) {
  return ltgt.compare(value, this._end) < 0;
}

function lte(value) {
  return ltgt.compare(value, this._end) <= 0;
}

function MemIterator(db, options) {
  AbstractIterator.call(this, db);
  this._limit = options.limit;

  if (this._limit === -1) this._limit = Infinity;

  var tree = db._store[db._location];

  this.keyAsBuffer = options.keyAsBuffer !== false;
  this.valueAsBuffer = options.valueAsBuffer !== false;
  this._reverse = options.reverse;
  this._options = options;
  this._done = 0;

  if (!this._reverse) {
    this._incr = 'next';
    this._start = ltgt.lowerBound(options);
    this._end = ltgt.upperBound(options);

    if (typeof this._start === 'undefined') this._tree = tree.begin;else if (ltgt.lowerBoundInclusive(options)) this._tree = tree.ge(this._start);else this._tree = tree.gt(this._start);

    if (this._end) {
      if (ltgt.upperBoundInclusive(options)) this._test = lte;else this._test = lt;
    }
  } else {
    this._incr = 'prev';
    this._start = ltgt.upperBound(options);
    this._end = ltgt.lowerBound(options);

    if (typeof this._start === 'undefined') this._tree = tree.end;else if (ltgt.upperBoundInclusive(options)) this._tree = tree.le(this._start);else this._tree = tree.lt(this._start);

    if (this._end) {
      if (ltgt.lowerBoundInclusive(options)) this._test = gte;else this._test = gt;
    }
  }
}

inherits(MemIterator, AbstractIterator);

MemIterator.prototype._next = function (callback) {
  var key, value;

  if (this._done++ >= this._limit) return setImmediate(callback);

  if (!this._tree.valid) return setImmediate(callback);

  key = this._tree.key;
  value = this._tree.value;

  if (!this._test(key)) return setImmediate(callback);

  if (this.keyAsBuffer) key = new Buffer(key);

  if (this.valueAsBuffer) value = new Buffer(value);

  this._tree[this._incr]();

  setImmediate(function callNext() {
    callback(null, key, value);
  });
};

MemIterator.prototype._test = function () {
  return true;
};

function MemDOWN(location) {
  if (!(this instanceof MemDOWN)) return new MemDOWN(location);

  AbstractLevelDOWN.call(this, typeof location == 'string' ? location : '');

  this._location = this.location ? '$' + this.location : '_tree';
  this._store = this.location ? globalStore : this;
  this._store[this._location] = this._store[this._location] || createRBT(ltgt.compare);
}

MemDOWN.clearGlobalStore = function (strict) {
  if (strict) {
    Object.keys(globalStore).forEach(function (key) {
      delete globalStore[key];
    });
  } else {
    globalStore = {};
  }
};

inherits(MemDOWN, AbstractLevelDOWN);

MemDOWN.prototype._open = function (options, callback) {
  var self = this;
  setImmediate(function callNext() {
    callback(null, self);
  });
};

MemDOWN.prototype._put = function (key, value, options, callback) {
  if (typeof value === 'undefined' || value === null) value = '';

  var iter = this._store[this._location].find(key);

  if (iter.valid) {
    this._store[this._location] = iter.update(value);
  } else {
    this._store[this._location] = this._store[this._location].insert(key, value);
  }

  setImmediate(callback);
};

MemDOWN.prototype._get = function (key, options, callback) {
  var value = this._store[this._location].get(key);

  if (typeof value === 'undefined') {
    // 'NotFound' error, consistent with LevelDOWN API
    return setImmediate(function callNext() {
      callback(new Error('NotFound'));
    });
  }

  if (options.asBuffer !== false && !this._isBuffer(value)) value = new Buffer(String(value));

  setImmediate(function callNext() {
    callback(null, value);
  });
};

MemDOWN.prototype._del = function (key, options, callback) {
  this._store[this._location] = this._store[this._location].remove(key);
  setImmediate(callback);
};

MemDOWN.prototype._batch = function (array, options, callback) {
  var i = -1,
      key,
      value,
      iter,
      len = array.length,
      tree = this._store[this._location];

  while (++i < len) {
    if (!array[i]) continue;

    key = this._isBuffer(array[i].key) ? array[i].key : String(array[i].key);
    iter = tree.find(key);

    if (array[i].type === 'put') {
      value = this._isBuffer(array[i].value) ? array[i].value : String(array[i].value);
      tree = iter.valid ? iter.update(value) : tree.insert(key, value);
    } else {
      tree = iter.remove();
    }
  }

  this._store[this._location] = tree;

  setImmediate(callback);
};

MemDOWN.prototype._iterator = function (options) {
  return new MemIterator(this, options);
};

MemDOWN.prototype._isBuffer = function (obj) {
  return Buffer.isBuffer(obj);
};

MemDOWN.destroy = function (name, callback) {
  var key = '$' + name;

  if (key in globalStore) delete globalStore[key];

  setImmediate(callback);
};

module.exports = MemDOWN;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"_process":213,"abstract-leveldown":4,"buffer":62,"functional-red-black-tree":150,"inherits":160,"ltgt":190}],192:[function(require,module,exports){
'use strict';

var assert = require('assert');
var levelup = require('levelup');
var memdown = require('memdown');
var async = require('async');
var rlp = require('rlp');
var ethUtil = require('ethereumjs-util');
var semaphore = require('semaphore');
var TrieNode = require('./trieNode');
var ReadStream = require('./readStream');
var matchingNibbleLength = require('./util').matchingNibbleLength;
var doKeysMatch = require('./util').doKeysMatch;
var callTogether = require('./util').callTogether;
var asyncFirstSeries = require('./util').asyncFirstSeries;

module.exports = Trie;

/**
 * Use `require('merkel-patricia-tree')` for the base interface. In Ethereum applications stick with the Secure Trie Overlay `require('merkel-patricia-tree/secure')`. The API for the raw and the secure interface are about the same
 * @class Trie
 * @param {Object} [db] An instance of [levelup](https://github.com/rvagg/node-levelup/) or a compatible API. If the db is `null` or left undefined, then the trie will be stored in memory via [memdown](https://github.com/rvagg/memdown)
 * @param {Buffer|String} [root]` A hex `String` or `Buffer` for the root of a previously stored trie
 * @prop {Buffer} root The current root of the `trie`
 * @prop {Boolean} isCheckpoint  determines if you are saving to a checkpoint or directly to the db
 * @prop {Buffer} EMPTY_TRIE_ROOT the Root for an empty trie
 */
function Trie(db, root) {
  var self = this;
  this.EMPTY_TRIE_ROOT = ethUtil.SHA3_RLP;
  this.sem = semaphore(1);

  // setup dbs
  this.db = db || levelup('', {
    db: memdown
  });

  this._getDBs = [this.db];
  this._putDBs = [this.db];

  Object.defineProperty(this, 'root', {
    set: function set(value) {
      if (value) {
        value = ethUtil.toBuffer(value);
        assert(value.length === 32, 'Invalid root length. Roots are 32 bytes');
      } else {
        value = self.EMPTY_TRIE_ROOT;
      }

      this._root = value;
    },
    get: function get() {
      return this._root;
    }
  });

  this.root = root;
}

/**
 * Gets a value given a `key`
 * @method get
 * @param {Buffer|String} key - the key to search for
 * @param {Function} cb A callback `Function` which is given the arguments `err` - for errors that may have occured and `value` - the found value in a `Buffer` or if no value was found `null`
 */
Trie.prototype.get = function (key, cb) {
  var self = this;

  key = ethUtil.toBuffer(key);

  self._findPath(key, function (err, node, remainder, stack) {
    var value = null;
    if (node && remainder.length === 0) {
      value = node.value;
    }

    cb(err, value);
  });
};

/**
 * Stores a given `value` at the given `key`
 * @method put
 * @param {Buffer|String} key
 * @param {Buffer|String} Value
 * @param {Function} cb A callback `Function` which is given the argument `err` - for errors that may have occured
 */
Trie.prototype.put = function (key, value, cb) {
  var self = this;

  key = ethUtil.toBuffer(key);
  value = ethUtil.toBuffer(value);

  if (!value || value.toString() === '') {
    self.del(key, cb);
  } else {
    cb = callTogether(cb, self.sem.leave);

    self.sem.take(function () {
      if (self.root.toString('hex') !== ethUtil.SHA3_RLP.toString('hex')) {
        // first try to find the give key or its nearst node
        self._findPath(key, function (err, foundValue, keyRemainder, stack) {
          if (err) {
            return cb(err);
          }
          // then update
          self._updateNode(key, value, keyRemainder, stack, cb);
        });
      } else {
        self._createInitialNode(key, value, cb); // if no root initialize this trie
      }
    });
  }
};

/**
 * deletes a value given a `key`
 * @method del
 * @param {Buffer|String} key
 * @param {Function} callback the callback `Function`
 */
Trie.prototype.del = function (key, cb) {
  var self = this;

  key = ethUtil.toBuffer(key);
  cb = callTogether(cb, self.sem.leave);

  self.sem.take(function () {
    self._findPath(key, function (err, foundValue, keyRemainder, stack) {
      if (err) {
        return cb(err);
      }
      if (foundValue) {
        self._deleteNode(key, stack, cb);
      } else {
        cb();
      }
    });
  });
};

/**
 * Retrieves a raw value in the underlying db
 * @method getRaw
 * @param {Buffer} key
 * @param {Function} callback A callback `Function`, which is given the arguments `err` - for errors that may have occured and `value` - the found value in a `Buffer` or if no value was found `null`.
 */
Trie.prototype.getRaw = function (key, cb) {
  key = ethUtil.toBuffer(key);

  function dbGet(db, cb2) {
    db.get(key, {
      keyEncoding: 'binary',
      valueEncoding: 'binary'
    }, function (err, foundNode) {
      if (err || !foundNode) {
        cb2(null, null);
      } else {
        cb2(null, foundNode);
      }
    });
  }
  asyncFirstSeries(this._getDBs, dbGet, cb);
};

// retrieves a node from dbs by hash
Trie.prototype._lookupNode = function (node, cb) {
  if (TrieNode.isRawNode(node)) {
    cb(new TrieNode(node));
  } else {
    this.getRaw(node, function (err, value) {
      if (err) {
        throw err;
      }

      if (value) {
        value = new TrieNode(rlp.decode(value));
      }

      cb(value);
    });
  }
};

// TODO: remove the proxy method when changing the caching
Trie.prototype._putRaw = function (key, val, cb) {
  function dbPut(db, cb2) {
    db.put(key, val, {
      keyEncoding: 'binary',
      valueEncoding: 'binary'
    }, cb2);
  }
  async.each(this._putDBs, dbPut, cb);
};

/**
 * Writes a value directly to the underlining db
 * @method putRaw
 * @param {Buffer|String} key The key as a `Buffer` or `String`
 * @param {Buffer} value The value to be stored
 * @param {Function} callback A callback `Function`, which is given the argument `err` - for errors that may have occured
 */
Trie.prototype.putRaw = Trie.prototype._putRaw;

/**
 * Removes a raw value in the underlying db
 * @method delRaw
 * @param {Buffer|String} key
 * @param {Function} callback A callback `Function`, which is given the argument `err` - for errors that may have occured
 */
Trie.prototype.delRaw = function (key, cb) {
  function del(db, cb2) {
    db.del(key, {
      keyEncoding: 'binary'
    }, cb2);
  }
  async.each(this._putDBs, del, cb);
};

// writes a single node to dbs
Trie.prototype._putNode = function (node, cb) {
  var hash = node.hash();
  var serialized = node.serialize();
  this._putRaw(hash, serialized, cb);
};

// writes many nodes to db
Trie.prototype._batchNodes = function (opStack, cb) {
  function dbBatch(db, cb) {
    db.batch(opStack, {
      keyEncoding: 'binary',
      valueEncoding: 'binary'
    }, cb);
  }

  async.each(this._putDBs, dbBatch, cb);
};

/**
 * Trys to find a path to the node for the given key
 * It returns a `stack` of nodes to the closet node
 * @method _findPath
 * @param {String|Buffer} - key - the search key
 * @param {Function} - cb - the callback function. Its is given the following
 * arguments
 *  - err - any errors encontered
 *  - node - the last node found
 *  - keyRemainder - the remaining key nibbles not accounted for
 *  - stack - an array of nodes that forms the path to node we are searching for
 */

Trie.prototype._findPath = function (targetKey, cb) {
  var self = this;
  var root = self.root;
  var stack = [];
  targetKey = TrieNode.stringToNibbles(targetKey);

  this._walkTrie(root, processNode, cb);

  function processNode(root, node, keyProgress, walkController) {
    var nodeKey = node.key || [];
    var keyRemainder = targetKey.slice(matchingNibbleLength(keyProgress, targetKey));
    var matchingLen = matchingNibbleLength(keyRemainder, nodeKey);

    stack.push(node);

    if (node.type === 'branch') {
      if (keyRemainder.length === 0) {
        walkController.return(null, node, [], stack);
        // we exhausted the key without finding a node
      } else {
        var branchIndex = keyRemainder[0];
        var branchNode = node.getValue(branchIndex);
        if (!branchNode) {
          // there are no more nodes to find and we didn't find the key
          walkController.return(null, null, keyRemainder, stack);
        } else {
          // node found, continuing search
          walkController.only(branchIndex);
        }
      }
    } else if (node.type === 'leaf') {
      if (doKeysMatch(keyRemainder, nodeKey)) {
        // keys match, return node with empty key
        walkController.return(null, node, [], stack);
      } else {
        // reached leaf but keys dont match
        walkController.return(null, null, keyRemainder, stack);
      }
    } else if (node.type === 'extention') {
      if (matchingLen !== nodeKey.length) {
        // keys dont match, fail
        walkController.return(null, null, keyRemainder, stack);
      } else {
        // keys match, continue search
        walkController.next();
      }
    }
  }
};

/*
 * Finds all nodes that store k,v values
 */
Trie.prototype._findNode = function (key, root, stack, cb) {
  this._findPath(key, function () {
    cb.apply(null, arguments);
  });
};

/*
 * Finds all nodes that store k,v values
 */
Trie.prototype._findValueNodes = function (onFound, cb) {
  this._walkTrie(this.root, function (root, node, key, walkController) {
    var fullKey = key;

    if (node.key) {
      fullKey = key.concat(node.key);
    }

    if (node.type === 'leaf') {
      // found leaf node!
      onFound(root, node, fullKey, walkController.next);
    } else if (node.type === 'branch' && node.value) {
      // found branch with value
      onFound(root, node, fullKey, walkController.next);
    } else {
      // keep looking for value nodes
      walkController.next();
    }
  }, cb);
};

/*
 * Finds all nodes that are stored directly in the db
 * (some nodes are stored raw inside other nodes)
 */
Trie.prototype._findDbNodes = function (onFound, cb) {
  this._walkTrie(this.root, function (root, node, key, walkController) {
    if (TrieNode.isRawNode(root)) {
      walkController.next();
    } else {
      onFound(root, node, key, walkController.next);
    }
  }, cb);
};

/**
 * Updates a node
 * @method _updateNode
 * @param {Buffer} key
 * @param {Buffer| String} value
 * @param {Array} keyRemainder
 * @param {Array} stack -
 * @param {Function} cb - the callback
 */
Trie.prototype._updateNode = function (key, value, keyRemainder, stack, cb) {
  var toSave = [];
  var lastNode = stack.pop();

  // add the new nodes
  key = TrieNode.stringToNibbles(key);
  if (lastNode.type === 'branch') {
    stack.push(lastNode);
    if (keyRemainder !== 0) {
      // add an extention to a branch node
      keyRemainder.shift();
      // create a new leaf
      var newLeaf = new TrieNode('leaf', keyRemainder, value);
      stack.push(newLeaf);
    } else {
      lastNode.value = value;
    }
  } else if (lastNode.type === 'leaf' && keyRemainder.length === 0) {
    // just updating a found value
    lastNode.value = value;
    stack.push(lastNode);
  } else {
    // create a branch node
    var lastKey = lastNode.key;
    var matchingLength = matchingNibbleLength(lastKey, keyRemainder);
    var newBranchNode = new TrieNode('branch');

    // create a new extention node
    if (matchingLength !== 0) {
      var newKey = lastNode.key.slice(0, matchingLength);
      var newExtNode = new TrieNode('extention', newKey, value);
      stack.push(newExtNode);
      lastKey.splice(0, matchingLength);
      keyRemainder.splice(0, matchingLength);
    }

    stack.push(newBranchNode);

    if (lastKey.length !== 0) {
      var branchKey = lastKey.shift();
      if (lastKey.length !== 0 || lastNode.type === 'leaf') {
        // shriking extention or leaf
        lastNode.key = lastKey;
        var formatedNode = this._formatNode(lastNode, false, toSave);
        newBranchNode.setValue(branchKey, formatedNode);
      } else {
        // remove extention or attaching
        this._formatNode(lastNode, false, true, toSave);
        newBranchNode.setValue(branchKey, lastNode.value);
      }
    } else {
      newBranchNode.value = lastNode.value;
    }

    if (keyRemainder.length !== 0) {
      keyRemainder.shift();
      // add a leaf node to the new branch node
      var newLeafNode = new TrieNode('leaf', keyRemainder, value);
      stack.push(newLeafNode);
    } else {
      newBranchNode.value = value;
    }
  }

  this._saveStack(key, stack, toSave, cb);
};

// walk tree

Trie.prototype._walkTrie = function (root, onNode, onDone) {
  var self = this;
  root = root || self.root;
  onDone = onDone || function () {};
  var aborted = false;
  var returnValues = [];

  if (root.toString('hex') === ethUtil.SHA3_RLP.toString('hex')) {
    return onDone();
  }

  self._lookupNode(root, function (node) {
    processNode(root, node, null, function (err) {
      if (err) {
        return onDone(err);
      }
      onDone.apply(null, returnValues);
    });
  });

  function processNode(root, node, key, cb) {
    if (!node) return cb();
    if (aborted) return cb();
    var stopped = false;
    key = key || [];

    var walkController = {
      stop: function stop() {
        stopped = true;
        cb();
      },
      // end all traversal and return values to the onDone cb
      return: function _return() {
        aborted = true;
        returnValues = arguments;
        cb();
      },
      next: function next() {
        if (aborted) {
          return cb();
        }
        if (stopped) {
          return cb();
        }
        var children = node.getChildren();
        async.forEachOf(children, function (data, index, cb) {
          var keyExtension = data[0];
          var childRoot = data[1];
          var childKey = key.concat(keyExtension);
          self._lookupNode(childRoot, function (node) {
            processNode(childRoot, node, childKey, cb);
          });
        }, cb);
      },
      only: function only(childIndex) {
        var childRoot = node.getValue(childIndex);
        self._lookupNode(childRoot, function (node) {
          var childKey = key.slice();
          childKey.push(childIndex);
          processNode(childRoot, node, childKey, cb);
        });
      }
    };
    onNode(root, node, key, walkController);
  }
};

/**
 * saves a stack
 * @method _saveStack
 * @param {Array} key - the key. Should follow the stack
 * @param {Array} stack - a stack of nodes to the value given by the key
 * @param {Array} opStack - a stack of levelup operations to commit at the end of this funciton
 * @param {Function} cb
 */
Trie.prototype._saveStack = function (key, stack, opStack, cb) {
  var lastRoot;

  // update nodes
  while (stack.length) {
    var node = stack.pop();
    if (node.type === 'leaf') {
      key.splice(key.length - node.key.length);
    } else if (node.type === 'extention') {
      key.splice(key.length - node.key.length);
      if (lastRoot) {
        node.value = lastRoot;
      }
    } else if (node.type === 'branch') {
      if (lastRoot) {
        var branchKey = key.pop();
        node.setValue(branchKey, lastRoot);
      }
    }
    lastRoot = this._formatNode(node, stack.length === 0, opStack);
  }

  if (lastRoot) {
    this.root = lastRoot;
  }

  this._batchNodes(opStack, cb);
};

Trie.prototype._deleteNode = function (key, stack, cb) {
  function processBranchNode(key, branchKey, branchNode, parentNode, stack) {
    // branchNode is the node ON the branch node not THE branch node
    var branchNodeKey = branchNode.key;
    if (!parentNode || parentNode.type === 'branch') {
      // branch->?
      if (parentNode) {
        stack.push(parentNode);
      }

      if (branchNode.type === 'branch') {
        // create an extention node
        // branch->extention->branch
        var extentionNode = new TrieNode('extention', [branchKey], null);
        stack.push(extentionNode);
        key.push(branchKey);
      } else {
        // branch key is an extention or a leaf
        // branch->(leaf or extention)
        branchNodeKey.unshift(branchKey);
        branchNode.key = branchNodeKey;

        // hackery. This is equvilant to array.concat except we need keep the
        // rerfance to the `key` that was passed in.
        branchNodeKey.unshift(0);
        branchNodeKey.unshift(key.length);
        key.splice.apply(key, branchNodeKey);
      }
      stack.push(branchNode);
    } else {
      // parent is a extention
      var parentKey = parentNode.key;
      if (branchNode.type === 'branch') {
        // ext->branch
        parentKey.push(branchKey);
        key.push(branchKey);
        parentNode.key = parentKey;
        stack.push(parentNode);
      } else {
        // branch node is an leaf or extention and parent node is an exstention
        // add two keys together
        // dont push the parent node
        branchNodeKey.unshift(branchKey);
        key = key.concat(branchNodeKey);
        parentKey = parentKey.concat(branchNodeKey);
        branchNode.key = parentKey;
      }
      stack.push(branchNode);
    }

    return key;
  }

  var lastNode = stack.pop();
  var parentNode = stack.pop();
  var opStack = [];
  var self = this;

  if (!Array.isArray(key)) {
    // convert key to nibbles
    key = TrieNode.stringToNibbles(key);
  }

  if (!parentNode) {
    // the root here has to be a leaf.
    this.root = this.EMPTY_TRIE_ROOT;
    cb();
  } else {
    if (lastNode.type === 'branch') {
      lastNode.value = null;
    } else {
      // the lastNode has to be a leaf if its not a branch. And a leaf's parent
      // if it has one must be a branch.
      var lastNodeKey = lastNode.key;
      key.splice(key.length - lastNodeKey.length);
      // delete the value
      this._formatNode(lastNode, false, true, opStack);
      parentNode.setValue(key.pop(), null);
      lastNode = parentNode;
      parentNode = stack.pop();
    }

    // nodes on the branch
    var branchNodes = [];
    // count the number of nodes on the branch
    lastNode.raw.forEach(function (node, i) {
      var val = lastNode.getValue(i);
      if (val) branchNodes.push([i, val]);
    });

    // if there is only one branch node left, collapse the branch node
    if (branchNodes.length === 1) {
      // add the one remaing branch node to node above it
      var branchNode = branchNodes[0][1];
      var branchNodeKey = branchNodes[0][0];

      // look up node
      this._lookupNode(branchNode, function (foundNode) {
        key = processBranchNode(key, branchNodeKey, foundNode, parentNode, stack, opStack);
        self._saveStack(key, stack, opStack, cb);
      });
    } else {
      // simple removing a leaf and recaluclation the stack
      if (parentNode) {
        stack.push(parentNode);
      }

      stack.push(lastNode);
      self._saveStack(key, stack, opStack, cb);
    }
  }
};

// Creates the initial node from an empty tree
Trie.prototype._createInitialNode = function (key, value, cb) {
  var newNode = new TrieNode('leaf', key, value);
  this.root = newNode.hash();
  this._putNode(newNode, cb);
};

// formats node to be saved by levelup.batch.
// returns either the hash that will be used key or the rawNode
Trie.prototype._formatNode = function (node, topLevel, remove, opStack) {
  if (arguments.length === 3) {
    opStack = remove;
    remove = false;
  }

  var rlpNode = node.serialize();
  if (rlpNode.length >= 32 || topLevel) {
    var hashRoot = node.hash();

    if (remove && this.isCheckpoint) {
      opStack.push({
        type: 'del',
        key: hashRoot
      });
    } else {
      opStack.push({
        type: 'put',
        key: hashRoot,
        value: rlpNode
      });
    }
    return hashRoot;
  }
  return node.raw;
};

/**
 * The `data` event is given an `Object` hat has two properties; the `key` and the `value`. Both should be Buffers.
 * @method createReadStream
 * @return {stream.Readable} Returns a [stream](https://nodejs.org/dist/latest-v5.x/docs/api/stream.html#stream_class_stream_readable) of the contents of the `trie`
 */
Trie.prototype.createReadStream = function () {
  return new ReadStream(this);
};

// creates a new trie backed by the same db
// and starting at the same root
Trie.prototype.copy = function () {
  return new Trie(this.db, this.root);
};

/**
 * The given hash of operations (key additions or deletions) are executed on the DB
 * @method batch
 * @example
 * var ops = [
 *    { type: 'del', key: 'father' }
 *  , { type: 'put', key: 'name', value: 'Yuri Irsenovich Kim' }
 *  , { type: 'put', key: 'dob', value: '16 February 1941' }
 *  , { type: 'put', key: 'spouse', value: 'Kim Young-sook' }
 *  , { type: 'put', key: 'occupation', value: 'Clown' }
 * ]
 * trie.batch(ops)
 * @param {Array} ops
 * @param {Function} cb
 */
Trie.prototype.batch = function (ops, cb) {
  var self = this;

  async.eachSeries(ops, function (op, cb2) {
    if (op.type === 'put') {
      self.put(op.key, op.value, cb2);
    } else if (op.type === 'del') {
      self.del(op.key, cb2);
    } else {
      cb2();
    }
  }, cb);
};

/**
 * Checks if a given root exists
 * @method checkRoot
 * @param {Buffer} root
 * @param {Function} cb
 */
Trie.prototype.checkRoot = function (root, cb) {
  root = ethUtil.toBuffer(root);
  this._lookupNode(root, function (value) {
    cb(null, !!value);
  });
};

},{"./readStream":195,"./trieNode":198,"./util":199,"assert":21,"async":25,"ethereumjs-util":120,"levelup":187,"memdown":191,"rlp":234,"semaphore":243}],193:[function(require,module,exports){
'use strict';

var levelup = require('levelup');
var memdown = require('memdown');
var async = require('async');
var inherits = require('util').inherits;
var Readable = require('readable-stream').Readable;
var levelws = require('level-ws');
var callTogether = require('./util').callTogether;

module.exports = checkpointInterface;

function checkpointInterface(trie) {
  this._scratch = null;
  trie._checkpoints = [];

  Object.defineProperty(trie, 'isCheckpoint', {
    get: function get() {
      return !!trie._checkpoints.length;
    }
  });

  // new methods
  trie.checkpoint = checkpoint;
  trie.commit = commit;
  trie.revert = revert;
  trie._enterCpMode = _enterCpMode;
  trie._exitCpMode = _exitCpMode;
  trie.createScratchReadStream = createScratchReadStream;

  // overwrites
  trie.copy = copy.bind(trie, trie.copy.bind(trie));
}

/**
 * Creates a checkpoint that can later be reverted to or committed. After this is called, no changes to the trie will be permanently saved until `commit` is called
 * @method checkpoint
 */
function checkpoint() {
  var self = this;
  var wasCheckpoint = self.isCheckpoint;
  self._checkpoints.push(self.root);
  if (!wasCheckpoint && self.isCheckpoint) {
    self._enterCpMode();
  }
}

/**
 * commits a checkpoint to disk
 * @method commit
 * @param {Function} cb the callback
 */
function commit(cb) {
  var self = this;
  cb = callTogether(cb, self.sem.leave);

  self.sem.take(function () {
    if (self.isCheckpoint) {
      self._checkpoints.pop();
      if (!self.isCheckpoint) {
        self._exitCpMode(true, cb);
      } else {
        cb();
      }
    } else {
      throw new Error('trying to commit when not checkpointed');
    }
  });
}

/**
 * Reverts the trie to the state it was at when `checkpoint` was first called.
 * @method revert
 * @param {Function} cb the callback
 */
function revert(cb) {
  var self = this;
  cb = callTogether(cb, self.sem.leave);

  self.sem.take(function () {
    if (self.isCheckpoint) {
      self.root = self._checkpoints.pop();
      if (!self.isCheckpoint) {
        self._exitCpMode(false, cb);
        return;
      }
    }

    cb();
  });
}

// enter into checkpoint mode
function _enterCpMode() {
  this._scratch = levelup('', {
    db: memdown
  });
  this._getDBs.unshift(this._scratch);
  this.__putDBs = this._putDBs;
  this._putDBs = [this._scratch];
  this._putRaw = this.putRaw;
  this.putRaw = putRaw;
}

// exit from checkpoint mode
function _exitCpMode(commitState, cb) {
  var self = this;
  var scratch = this._scratch;
  this._scratch = null;
  this._getDBs.shift();
  this._putDBs = this.__putDBs;
  this.putRaw = this._putRaw;

  function flushScratch(db, cb) {
    if (!db.createWriteStream) {
      db = levelws(db);
    }

    self.createScratchReadStream(scratch).pipe(db.createWriteStream()).on('close', cb);
  }

  if (commitState) {
    async.map(this._putDBs, flushScratch, cb);
  } else {
    cb();
  }
}

// adds the interface when copying the trie
function copy(_super) {
  var trie = _super();
  checkpointInterface(trie);
  trie._scratch = this._scratch;
  // trie._checkpoints = this._checkpoints.slice()
  return trie;
}

function putRaw(key, val, cb) {
  function dbPut(db, cb2) {
    db.put(key, val, {
      keyEncoding: 'binary',
      valueEncoding: 'binary'
    }, cb2);
  }
  async.each(this.__putDBs, dbPut, cb);
}

function createScratchReadStream(scratch) {
  var trie = this.copy();
  scratch = scratch || this._scratch;
  // only read from the scratch
  trie._getDBs = [scratch];
  trie._scratch = scratch;
  return new ScratchReadStream(trie);
}

// ScratchReadStream
// this is used to minimally dump the scratch into the db

inherits(ScratchReadStream, Readable);

function ScratchReadStream(trie) {
  this.trie = trie;
  this.next = null;
  Readable.call(this, {
    objectMode: true
  });
}

ScratchReadStream.prototype._read = function () {
  var self = this;
  if (!self._started) {
    self._started = true;
    self.trie._findDbNodes(function (root, node, key, next) {
      self.push({
        key: root,
        value: node.serialize()
      });
      next();
    }, function () {
      // close stream
      self.push(null);
    });
  }
};

},{"./util":199,"async":25,"level-ws":176,"levelup":187,"memdown":191,"readable-stream":230,"util":259}],194:[function(require,module,exports){
'use strict';

var BaseTrie = require('./baseTrie');
var checkpointInterface = require('./checkpoint-interface');
var inherits = require('util').inherits;

module.exports = CheckpointTrie;

inherits(CheckpointTrie, BaseTrie);

function CheckpointTrie() {
  BaseTrie.apply(this, arguments);
  checkpointInterface(this);
}

},{"./baseTrie":192,"./checkpoint-interface":193,"util":259}],195:[function(require,module,exports){
'use strict';

var Readable = require('readable-stream').Readable;
var TrieNode = require('./trieNode');
var util = require('util');

module.exports = TrieReadStream;

function TrieReadStream(trie) {
  this.trie = trie;
  this.next = null;
  Readable.call(this, {
    objectMode: true
  });
}

util.inherits(TrieReadStream, Readable);

TrieReadStream.prototype._read = function () {
  var self = this;
  if (!self._started) {
    self._started = true;
    self.trie._findValueNodes(function (root, node, key, next) {
      self.push({
        key: TrieNode.nibblesToBuffer(key),
        value: node.value
      });
      next();
    }, function () {
      // close stream
      self.push(null);
    });
  }
};

},{"./trieNode":198,"readable-stream":230,"util":259}],196:[function(require,module,exports){
'use strict';

var ethUtil = require('ethereumjs-util');

module.exports = secureInterface;

function secureInterface(trie) {
  // overwrites
  trie.copy = copy.bind(trie, trie.copy.bind(trie));
  trie.get = get.bind(trie, trie.get.bind(trie));
  trie.put = put.bind(trie, trie.put.bind(trie));
  trie.del = del.bind(trie, trie.del.bind(trie));
}

// adds the interface when copying the trie
function copy(_super) {
  var trie = _super();
  secureInterface(trie);
  return trie;
}

function get(_super, key, cb) {
  var hash = ethUtil.sha3(key);
  _super(hash, cb);
}

// for a falsey value, use the original key
// to avoid double hashing the key
function put(_super, key, val, cb) {
  if (!val) {
    this.del(key, cb);
  } else {
    var hash = ethUtil.sha3(key);
    _super(hash, val, cb);
  }
}

function del(_super, key, cb) {
  var hash = ethUtil.sha3(key);
  _super(hash, cb);
}

},{"ethereumjs-util":120}],197:[function(require,module,exports){
'use strict';

var CheckpointTrie = require('./index');
var secureInterface = require('./secure-interface');
var inherits = require('util').inherits;

module.exports = SecureTrie;
inherits(SecureTrie, CheckpointTrie);

/**
 * You can create a secure Trie where the keys are automatically hashed using **SHA3** by using `require('merkle-patricia-tree/secure')`. It has the same methods and constuctor as `Trie`
 * @class SecureTrie
 * @extends Trie
 */
function SecureTrie() {
  CheckpointTrie.apply(this, arguments);
  secureInterface(this);
}

},{"./index":194,"./secure-interface":196,"util":259}],198:[function(require,module,exports){
(function (Buffer){
'use strict';

var rlp = require('rlp');
var ethUtil = require('ethereumjs-util');

module.exports = TrieNode;

function TrieNode(type, key, value) {
  if (Array.isArray(type)) {
    // parse raw node
    this.parseNode(type);
  } else {
    this.type = type;
    if (type === 'branch') {
      var values = key;
      this.raw = Array.apply(null, Array(17));
      if (values) {
        values.forEach(function (keyVal) {
          this.set.apply(this, keyVal);
        });
      }
    } else {
      this.raw = Array(2);
      this.setValue(value);
      this.setKey(key);
    }
  }
}

TrieNode.isRawNode = isRawNode;
TrieNode.addHexPrefix = addHexPrefix;
TrieNode.removeHexPrefix = removeHexPrefix;
TrieNode.isTerminator = isTerminator;
TrieNode.stringToNibbles = stringToNibbles;
TrieNode.nibblesToBuffer = nibblesToBuffer;
TrieNode.getNodeType = getNodeType;

Object.defineProperty(TrieNode.prototype, 'value', {
  get: function get() {
    return this.getValue();
  },
  set: function set(v) {
    this.setValue(v);
  }
});

Object.defineProperty(TrieNode.prototype, 'key', {
  get: function get() {
    return this.getKey();
  },
  set: function set(k) {
    this.setKey(k);
  }
});

// parses a raw node
TrieNode.prototype.parseNode = function (rawNode) {
  this.raw = rawNode;
  this.type = getNodeType(rawNode);
};

// sets the value of the node
TrieNode.prototype.setValue = function (key, value) {
  if (this.type !== 'branch') {
    this.raw[1] = key;
  } else {
    if (arguments.length === 1) {
      value = key;
      key = 16;
    }
    this.raw[key] = value;
  }
};

TrieNode.prototype.getValue = function (key) {
  if (this.type === 'branch') {
    if (arguments.length === 0) {
      key = 16;
    }

    var val = this.raw[key];
    if (val !== null && val !== undefined && val.length !== 0) {
      return val;
    }
  } else {
    return this.raw[1];
  }
};

TrieNode.prototype.setKey = function (key) {
  if (this.type !== 'branch') {
    if (Buffer.isBuffer(key)) {
      key = stringToNibbles(key);
    } else {
      key = key.slice(0); // copy the key
    }

    key = addHexPrefix(key, this.type === 'leaf');
    this.raw[0] = nibblesToBuffer(key);
  }
};

// returns the key as a nibble
TrieNode.prototype.getKey = function () {
  if (this.type !== 'branch') {
    var key = this.raw[0];
    key = removeHexPrefix(stringToNibbles(key));
    return key;
  }
};

TrieNode.prototype.serialize = function () {
  return rlp.encode(this.raw);
};

TrieNode.prototype.hash = function () {
  return ethUtil.sha3(this.serialize());
};

TrieNode.prototype.toString = function () {
  var out = this.type;
  out += ': [';
  this.raw.forEach(function (el) {
    if (Buffer.isBuffer(el)) {
      out += el.toString('hex') + ', ';
    } else if (el) {
      out += 'object, ';
    } else {
      out += 'empty, ';
    }
  });
  out = out.slice(0, -2);
  out += ']';
  return out;
};

TrieNode.prototype.getChildren = function () {
  var children = [];
  switch (this.type) {
    case 'leaf':
      // no children
      break;
    case 'extention':
      // one child
      children.push([this.key, this.getValue()]);
      break;
    case 'branch':
      for (var index = 0, end = 16; index < end; index++) {
        var value = this.getValue(index);
        if (value) {
          children.push([[index], value]);
        }
      }
      break;
  }
  return children;
};

/**
 * @param {Array} dataArr
 * @returns {Buffer} - returns buffer of encoded data
 * hexPrefix
 **/
function addHexPrefix(key, terminator) {
  // odd
  if (key.length % 2) {
    key.unshift(1);
  } else {
    // even
    key.unshift(0);
    key.unshift(0);
  }

  if (terminator) {
    key[0] += 2;
  }

  return key;
}

function removeHexPrefix(val) {
  if (val[0] % 2) {
    val = val.slice(1);
  } else {
    val = val.slice(2);
  }

  return val;
}

/*
 * Detrimines if a key has Arnold Schwarzenegger in it.
 * @method isTerminator
 * @param {Array} key - an hexprefixed array of nibbles
 */
function isTerminator(key) {
  return key[0] > 1;
}

/*
 * Converts a string OR a buffer to a nibble array
 * @method stringToNibbles
 * @param {Buffer| String} key
 */
function stringToNibbles(key) {
  var bkey = new Buffer(key);
  var nibbles = [];

  for (var i = 0; i < bkey.length; i++) {
    var q = i * 2;
    nibbles[q] = bkey[i] >> 4;
    ++q;
    nibbles[q] = bkey[i] % 16;
  }
  return nibbles;
}

/*
 * Converts a  nibble array into a buffer
 * @method nibblesToBuffer
 * @param arr
 */
function nibblesToBuffer(arr) {
  var buf = new Buffer(arr.length / 2);
  for (var i = 0; i < buf.length; i++) {
    var q = i * 2;
    buf[i] = (arr[q] << 4) + arr[++q];
  }
  return buf;
}

/*
 * Determines the node type
 * Returns the following
 * - leaf - if teh node is a leaf
 * - branch - if the node is a branch
 * - extention - if the node is an extention
 * - unknown - if somehting fucked up
 */
function getNodeType(node) {
  if (node.length === 17) {
    return 'branch';
  } else if (node.length === 2) {
    var key = stringToNibbles(node[0]);
    if (isTerminator(key)) {
      return 'leaf';
    }

    return 'extention';
  }
}

function isRawNode(node) {
  return Array.isArray(node) && !Buffer.isBuffer(node);
}

}).call(this,require("buffer").Buffer)
},{"buffer":62,"ethereumjs-util":120,"rlp":234}],199:[function(require,module,exports){
(function (process){
'use strict';

var async = require('async');

module.exports = {
  matchingNibbleLength: matchingNibbleLength,
  callTogether: callTogether,
  asyncFirstSeries: asyncFirstSeries,
  doKeysMatch: doKeysMatch
};

/**
 * Returns the number of in order matching nibbles of two give nibble arrayes
 * @method matchingNibbleLength
 * @param {Array} nib1
 * @param {Array} nib2
 */
function matchingNibbleLength(nib1, nib2) {
  var i = 0;
  while (nib1[i] === nib2[i] && nib1.length > i) {
    i++;
  }
  return i;
}

/**
 * Compare two 'nibble array' keys
 */
function doKeysMatch(keyA, keyB) {
  var length = matchingNibbleLength(keyA, keyB);
  return length === keyA.length && length === keyB.length;
}

/**
 * Take two or more functions and returns a function  that will execute all of
 * the given functions
 */
function callTogether() {
  var funcs = arguments;
  var length = funcs.length;
  var index = length;

  if (!length) {
    return function () {};
  }

  return function () {
    length = index;

    while (length--) {
      var fn = funcs[length];
      if (typeof fn === 'function') {
        var result = funcs[length].apply(this, arguments);
      }
    }
    return result;
  };
}

/**
 * Take a collection of async fns, call the cb on the first to return a truthy value.
 * If all run without a truthy result, return undefined
 */
function asyncFirstSeries(array, iterator, cb) {
  var didComplete = false;
  async.eachSeries(array, function (item, next) {
    if (didComplete) return next;
    iterator(item, function (err, result) {
      if (result) {
        didComplete = true;
        process.nextTick(cb.bind(null, null, result));
      }
      next(err);
    });
  }, function () {
    if (!didComplete) {
      cb();
    }
  });
}

}).call(this,require('_process'))
},{"_process":213,"async":25}],200:[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0) buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k) k = Math.max(1, len / 48 | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb) cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0) return false;
      if (x.cmp(rn1) === 0) break;
    }

    if (i === s) return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k) k = Math.max(1, len / 48 | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0) return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0) break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":30,"brorand":31}],201:[function(require,module,exports){
'use strict';

module.exports = assert;

function assert(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

},{}],202:[function(require,module,exports){
'use strict';

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

var isFunction = function isFunction(fn) {
	var isFunc = typeof fn === 'function' && !(fn instanceof RegExp) || toString.call(fn) === '[object Function]';
	if (!isFunc && typeof window !== 'undefined') {
		isFunc = fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt;
	}
	return isFunc;
};

module.exports = function forEach(obj, fn) {
	if (!isFunction(fn)) {
		throw new TypeError('iterator must be a function');
	}
	var i,
	    k,
	    isString = typeof obj === 'string',
	    l = obj.length,
	    context = arguments.length > 2 ? arguments[2] : null;
	if (l === +l) {
		for (i = 0; i < l; i++) {
			if (context === null) {
				fn(isString ? obj.charAt(i) : obj[i], i, obj);
			} else {
				fn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);
			}
		}
	} else {
		for (k in obj) {
			if (hasOwn.call(obj, k)) {
				if (context === null) {
					fn(obj[k], k, obj);
				} else {
					fn.call(context, obj[k], k, obj);
				}
			}
		}
	}
};

},{}],203:[function(require,module,exports){
'use strict';

module.exports = Object.keys || require('./shim');

},{"./shim":205}],204:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var toString = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toString.call(value);
	var isArguments = str === '[object Arguments]';
	if (!isArguments) {
		isArguments = str !== '[object Array]' && value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.length === 'number' && value.length >= 0 && toString.call(value.callee) === '[object Function]';
	}
	return isArguments;
};

},{}],205:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

(function () {
	"use strict";

	// modified from https://github.com/kriskowal/es5-shim

	var has = Object.prototype.hasOwnProperty,
	    toString = Object.prototype.toString,
	    forEach = require('./foreach'),
	    isArgs = require('./isArguments'),
	    hasDontEnumBug = !{ 'toString': null }.propertyIsEnumerable('toString'),
	    hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype'),
	    dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"],
	    keysShim;

	keysShim = function keys(object) {
		var isObject = object !== null && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object',
		    isFunction = toString.call(object) === '[object Function]',
		    isArguments = isArgs(object),
		    theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError("Object.keys called on a non-object");
		}

		if (isArguments) {
			forEach(object, function (value) {
				theKeys.push(value);
			});
		} else {
			var name,
			    skipProto = hasProtoEnumBug && isFunction;

			for (name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(name);
				}
			}
		}

		if (hasDontEnumBug) {
			var ctor = object.constructor,
			    skipConstructor = ctor && ctor.prototype === object;

			forEach(dontEnums, function (dontEnum) {
				if (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {
					theKeys.push(dontEnum);
				}
			});
		}
		return theKeys;
	};

	module.exports = keysShim;
})();

},{"./foreach":202,"./isArguments":204}],206:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],207:[function(require,module,exports){
'use strict';

// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = require('asn1.js');

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
exports.RSAPrivateKey = RSAPrivateKey;

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
});
exports.RSAPublicKey = RSAPublicKey;

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
exports.PublicKey = PublicKey;

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
});

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(this.key('version').int(), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
});
exports.DSAPrivateKey = DSAPrivateKey;

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int();
});
var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  });
});

exports.signature = asn1.define('signature', function () {
  this.seq().obj(this.key('r').int(), this.key('s').int());
});

},{"asn1.js":7}],208:[function(require,module,exports){
(function (Buffer){
'use strict';

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m;
var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m;
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m;
var evp = require('evp_bytestokey');
var ciphers = require('browserify-aes');
module.exports = function (okey, password) {
  var key = okey.toString();
  var match = key.match(findProc);
  var decrypted;
  if (!match) {
    var match2 = key.match(fullRegex);
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64');
  } else {
    var suite = 'aes' + match[1];
    var iv = new Buffer(match[2], 'hex');
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64');
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
    var out = [];
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    decrypted = Buffer.concat(out);
  }
  var tag = key.match(startRegex)[1] + ' KEY';
  return {
    tag: tag,
    data: decrypted
  };
};

}).call(this,require("buffer").Buffer)
},{"browserify-aes":35,"buffer":62,"evp_bytestokey":149}],209:[function(require,module,exports){
(function (Buffer){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var asn1 = require('./asn1');
var aesid = require('./aesid.json');
var fixProc = require('./fixProc');
var ciphers = require('browserify-aes');
var compat = require('pbkdf2');
module.exports = parseKeys;

function parseKeys(buffer) {
  var password;
  if ((typeof buffer === 'undefined' ? 'undefined' : _typeof(buffer)) === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase;
    buffer = buffer.key;
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer);
  }

  var stripped = fixProc(buffer, password);

  var type = stripped.tag;
  var data = stripped.data;
  var subtype, ndata;
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey;
          return {
            type: 'ec',
            data: ndata
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          };
        default:
          throw new Error('unknown key id ' + subtype);
      }
      throw new Error('unknown key type ' + type);
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der');
      data = decrypt(data, password);
    // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          };
        default:
          throw new Error('unknown key id ' + subtype);
      }
      throw new Error('unknown key type ' + type);
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der');
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der');
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      };
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der');
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      };
    default:
      throw new Error('unknown key type ' + type);
  }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt;
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
  var iv = data.algorithm.decrypt.cipher.iv;
  var cipherText = data.subjectPrivateKey;
  var keylen = parseInt(algo.split('-')[1], 10) / 8;
  var key = compat.pbkdf2Sync(password, salt, iters, keylen);
  var cipher = ciphers.createDecipheriv(algo, key, iv);
  var out = [];
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  return Buffer.concat(out);
}

}).call(this,require("buffer").Buffer)
},{"./aesid.json":206,"./asn1":207,"./fixProc":208,"browserify-aes":35,"buffer":62,"pbkdf2":210}],210:[function(require,module,exports){
(function (process,Buffer){
'use strict';

var createHmac = require('create-hmac');
var checkParameters = require('./precondition');

exports.pbkdf2 = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest;
    digest = undefined;
  }

  checkParameters(iterations, keylen);
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');

  setTimeout(function () {
    callback(null, exports.pbkdf2Sync(password, salt, iterations, keylen, digest));
  });
};

var defaultEncoding;
if (process.browser) {
  defaultEncoding = 'utf-8';
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
}

exports.pbkdf2Sync = function (password, salt, iterations, keylen, digest) {
  if (!Buffer.isBuffer(password)) password = new Buffer(password, defaultEncoding);
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, defaultEncoding);

  checkParameters(iterations, keylen);

  digest = digest || 'sha1';

  var hLen;
  var l = 1;
  var DK = new Buffer(keylen);
  var block1 = new Buffer(salt.length + 4);
  salt.copy(block1, 0, 0, salt.length);

  var r;
  var T;

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length);
    var U = createHmac(digest, password).update(block1).digest();

    if (!hLen) {
      hLen = U.length;
      T = new Buffer(hLen);
      l = Math.ceil(keylen / hLen);
      r = keylen - (l - 1) * hLen;
    }

    U.copy(T, 0, 0, hLen);

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest();
      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k];
      }
    }

    var destPos = (i - 1) * hLen;
    var len = i === l ? r : hLen;
    T.copy(DK, destPos, 0, len);
  }

  return DK;
};

}).call(this,require('_process'),require("buffer").Buffer)
},{"./precondition":211,"_process":213,"buffer":62,"create-hmac":71}],211:[function(require,module,exports){
'use strict';

var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs
module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number');
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations');
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number');
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
    /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length');
  }
};

},{}],212:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);
    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });
    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });
    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });
    default:
      args = new Array(len - 1);
      i = 0;
      while (i < args.length) {
        args[i++] = arguments[i];
      }
      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
  }
}

}).call(this,require('_process'))
},{"_process":213}],213:[function(require,module,exports){
'use strict';

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

},{}],214:[function(require,module,exports){
arguments[4][104][0].apply(exports,arguments)
},{"dup":104}],215:[function(require,module,exports){
'use strict';

exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};

},{"./privateDecrypt":217,"./publicEncrypt":218}],216:[function(require,module,exports){
(function (Buffer){
'use strict';

var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var i = 0,
      c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c, 0);
  return out;
}

}).call(this,require("buffer").Buffer)
},{"buffer":62,"create-hash":68}],217:[function(require,module,exports){
(function (Buffer){
'use strict';

var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }

  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg) {
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb = msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse) {
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) {
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return msg.slice(i);
}
function compare(a, b) {
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += a[i] ^ b[i];
  }
  return dif;
}

}).call(this,require("buffer").Buffer)
},{"./mgf":216,"./withPublic":219,"./xor":220,"bn.js":30,"browserify-rsa":51,"buffer":62,"create-hash":68,"parse-asn1":209}],218:[function(require,module,exports){
(function (Buffer){
'use strict';

var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg) {
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse) {
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse ? 1 : 2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len * 2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}

}).call(this,require("buffer").Buffer)
},{"./mgf":216,"./withPublic":219,"./xor":220,"bn.js":30,"browserify-rsa":51,"buffer":62,"create-hash":68,"parse-asn1":209,"randombytes":221}],219:[function(require,module,exports){
(function (Buffer){
'use strict';

var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg.toRed(bn.mont(key.modulus)).redPow(new bn(key.publicExponent)).fromRed().toArray());
}

module.exports = withPublic;

}).call(this,require("buffer").Buffer)
},{"bn.js":30,"buffer":62}],220:[function(require,module,exports){
"use strict";

module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a;
};

},{}],221:[function(require,module,exports){
(function (process,global,Buffer){
'use strict';

function oldBrowser() {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}

var crypto = global.crypto || global.msCrypto;

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}

function randomBytes(size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes');
  // in case browserify  isn't using the Uint8Array version
  var rawBytes = new global.Uint8Array(size);

  // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
  if (size > 0) {
    // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes);
  }
  // phantomjs doesn't like a buffer being passed here
  var bytes = new Buffer(rawBytes.buffer);

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }

  return bytes;
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"_process":213,"buffer":62}],222:[function(require,module,exports){
"use strict";

module.exports = require("./lib/_stream_duplex.js");

},{"./lib/_stream_duplex.js":223}],223:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

},{"./_stream_readable":225,"./_stream_writable":227,"core-util-is":66,"inherits":160,"process-nextick-args":212}],224:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":226,"core-util-is":66,"inherits":160}],225:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var StringDecoder;

util.inherits(Readable, Stream);

function prependListener(emitter, event, fn) {
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

var Duplex;
function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

var Duplex;
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = bufferShim.from(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');
      stream.emit('error', _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var _i = 0; _i < len; _i++) {
      dests[_i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1) return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = bufferShim.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":223,"./internal/streams/BufferList":228,"_process":213,"buffer":62,"buffer-shims":60,"core-util-is":66,"events":148,"inherits":160,"isarray":162,"process-nextick-args":212,"string_decoder/":253,"util":32}],226:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er) {
      done(stream, er);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('Not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er) {
  if (er) return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":223,"core-util-is":66,"inherits":160}],227:[function(require,module,exports){
(function (process){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

var Duplex;
function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

var Duplex;
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  // Always throw error if a null is written
  // if we are not in object mode then throw
  // if it is not a buffer, string, or undefined.
  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = bufferShim.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}

}).call(this,require('_process'))
},{"./_stream_duplex":223,"_process":213,"buffer":62,"buffer-shims":60,"core-util-is":66,"events":148,"inherits":160,"process-nextick-args":212,"util-deprecate":256}],228:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

module.exports = BufferList;

function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}

BufferList.prototype.push = function (v) {
  var entry = { data: v, next: null };
  if (this.length > 0) this.tail.next = entry;else this.head = entry;
  this.tail = entry;
  ++this.length;
};

BufferList.prototype.unshift = function (v) {
  var entry = { data: v, next: this.head };
  if (this.length === 0) this.tail = entry;
  this.head = entry;
  ++this.length;
};

BufferList.prototype.shift = function () {
  if (this.length === 0) return;
  var ret = this.head.data;
  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  --this.length;
  return ret;
};

BufferList.prototype.clear = function () {
  this.head = this.tail = null;
  this.length = 0;
};

BufferList.prototype.join = function (s) {
  if (this.length === 0) return '';
  var p = this.head;
  var ret = '' + p.data;
  while (p = p.next) {
    ret += s + p.data;
  }return ret;
};

BufferList.prototype.concat = function (n) {
  if (this.length === 0) return bufferShim.alloc(0);
  if (this.length === 1) return this.head.data;
  var ret = bufferShim.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;
  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }
  return ret;
};

},{"buffer":62,"buffer-shims":60}],229:[function(require,module,exports){
"use strict";

module.exports = require("./lib/_stream_passthrough.js");

},{"./lib/_stream_passthrough.js":224}],230:[function(require,module,exports){
(function (process){
'use strict';

var Stream = function () {
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch (_) {}
}();
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
  module.exports = Stream;
}

}).call(this,require('_process'))
},{"./lib/_stream_duplex.js":223,"./lib/_stream_passthrough.js":224,"./lib/_stream_readable.js":225,"./lib/_stream_transform.js":226,"./lib/_stream_writable.js":227,"_process":213}],231:[function(require,module,exports){
"use strict";

module.exports = require("./lib/_stream_transform.js");

},{"./lib/_stream_transform.js":226}],232:[function(require,module,exports){
"use strict";

module.exports = require("./lib/_stream_writable.js");

},{"./lib/_stream_writable.js":227}],233:[function(require,module,exports){
(function (Buffer){
'use strict';

/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];

var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];

var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];

var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

function bytesToWords(bytes) {
  var words = [];
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << 24 - b % 32;
  }
  return words;
}

function wordsToBytes(words) {
  var bytes = [];
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push(words[b >>> 5] >>> 24 - b % 32 & 0xFF);
  }
  return bytes;
}

function processBlock(H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i;
    var M_offset_i = M[offset_i];

    // Swap
    M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
  }

  // Working variables
  var al, bl, cl, dl, el;
  var ar, br, cr, dr, er;

  ar = al = H[0];
  br = bl = H[1];
  cr = cl = H[2];
  dr = dl = H[3];
  er = el = H[4];

  // computation
  var t;
  for (i = 0; i < 80; i += 1) {
    t = al + M[offset + zl[i]] | 0;
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0];
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1];
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2];
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3];
    } else {
      // if (i<80) {
      t += f5(bl, cl, dl) + hl[4];
    }
    t = t | 0;
    t = rotl(t, sl[i]);
    t = t + el | 0;
    al = el;
    el = dl;
    dl = rotl(cl, 10);
    cl = bl;
    bl = t;

    t = ar + M[offset + zr[i]] | 0;
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0];
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1];
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2];
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3];
    } else {
      // if (i<80) {
      t += f1(br, cr, dr) + hr[4];
    }

    t = t | 0;
    t = rotl(t, sr[i]);
    t = t + er | 0;
    ar = er;
    er = dr;
    dr = rotl(cr, 10);
    cr = br;
    br = t;
  }

  // intermediate hash value
  t = H[1] + cl + dr | 0;
  H[1] = H[2] + dl + er | 0;
  H[2] = H[3] + el + ar | 0;
  H[3] = H[4] + al + br | 0;
  H[4] = H[0] + bl + cr | 0;
  H[0] = t;
}

function f1(x, y, z) {
  return x ^ y ^ z;
}

function f2(x, y, z) {
  return x & y | ~x & z;
}

function f3(x, y, z) {
  return (x | ~y) ^ z;
}

function f4(x, y, z) {
  return x & z | y & ~z;
}

function f5(x, y, z) {
  return x ^ (y | ~z);
}

function rotl(x, n) {
  return x << n | x >>> 32 - n;
}

function ripemd160(message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8');
  }

  var m = bytesToWords(message);

  var nBitsLeft = message.length * 8;
  var nBitsTotal = message.length * 8;

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
  m[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i);
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i];

    // Swap
    H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
  }

  var digestbytes = wordsToBytes(H);
  return new Buffer(digestbytes);
}

module.exports = ripemd160;

}).call(this,require("buffer").Buffer)
},{"buffer":62}],234:[function(require,module,exports){
(function (Buffer){
'use strict';

var assert = require('assert');
/**
 * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
 * This function takes in a data, convert it to buffer if not, and a length for recursion
 *
 * @param {Buffer,String,Integer,Array} data - will be converted to buffer
 * @returns {Buffer} - returns buffer of encoded data
 **/
exports.encode = function (input) {
  if (input instanceof Array) {
    var output = [];
    for (var i = 0; i < input.length; i++) {
      output.push(exports.encode(input[i]));
    }
    var buf = Buffer.concat(output);
    return Buffer.concat([encodeLength(buf.length, 192), buf]);
  } else {
    input = toBuffer(input);
    if (input.length === 1 && input[0] < 128) {
      return input;
    } else {
      return Buffer.concat([encodeLength(input.length, 128), input]);
    }
  }
};

function safeParseInt(v, base) {
  if (v.slice(0, 2) === '00') {
    throw new Error('invalid RLP: extra zeros');
  }

  return parseInt(v, base);
}

function encodeLength(len, offset) {
  if (len < 56) {
    return new Buffer([len + offset]);
  } else {
    var hexLength = intToHex(len);
    var lLength = hexLength.length / 2;
    var firstByte = intToHex(offset + 55 + lLength);
    return new Buffer(firstByte + hexLength, 'hex');
  }
}

/**
 * RLP Decoding based on: {@link https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP|RLP}
 * @param {Buffer,String,Integer,Array} data - will be converted to buffer
 * @returns {Array} - returns decode Array of Buffers containg the original message
 **/
exports.decode = function (input, stream) {
  if (!input || input.length === 0) {
    return new Buffer([]);
  }

  input = toBuffer(input);
  var decoded = _decode(input);

  if (stream) {
    return decoded;
  }

  assert.equal(decoded.remainder.length, 0, 'invalid remainder');
  return decoded.data;
};

exports.getLength = function (input) {
  if (!input || input.length === 0) {
    return new Buffer([]);
  }

  input = toBuffer(input);
  var firstByte = input[0];
  if (firstByte <= 0x7f) {
    return input.length;
  } else if (firstByte <= 0xb7) {
    return firstByte - 0x7f;
  } else if (firstByte <= 0xbf) {
    return firstByte - 0xb6;
  } else if (firstByte <= 0xf7) {
    // a list between  0-55 bytes long
    return firstByte - 0xbf;
  } else {
    // a list  over 55 bytes long
    var llength = firstByte - 0xf6;
    var length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
    return llength + length;
  }
};

function _decode(input) {
  var length, llength, data, innerRemainder, d;
  var decoded = [];
  var firstByte = input[0];

  if (firstByte <= 0x7f) {
    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
    return {
      data: input.slice(0, 1),
      remainder: input.slice(1)
    };
  } else if (firstByte <= 0xb7) {
    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
    // The range of the first byte is [0x80, 0xb7]
    length = firstByte - 0x7f;

    // set 0x80 null to 0
    if (firstByte === 0x80) {
      data = new Buffer([]);
    } else {
      data = input.slice(1, length);
    }

    if (length === 2 && data[0] < 0x80) {
      throw new Error('invalid rlp encoding: byte must be less 0x80');
    }

    return {
      data: data,
      remainder: input.slice(length)
    };
  } else if (firstByte <= 0xbf) {
    llength = firstByte - 0xb6;
    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
    data = input.slice(llength, length + llength);
    if (data.length < length) {
      throw new Error('invalid RLP');
    }

    return {
      data: data,
      remainder: input.slice(length + llength)
    };
  } else if (firstByte <= 0xf7) {
    // a list between  0-55 bytes long
    length = firstByte - 0xbf;
    innerRemainder = input.slice(1, length);
    while (innerRemainder.length) {
      d = _decode(innerRemainder);
      decoded.push(d.data);
      innerRemainder = d.remainder;
    }

    return {
      data: decoded,
      remainder: input.slice(length)
    };
  } else {
    // a list  over 55 bytes long
    llength = firstByte - 0xf6;
    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
    var totalLength = llength + length;
    if (totalLength > input.length) {
      throw new Error('invalid rlp: total length is larger than the data');
    }

    innerRemainder = input.slice(llength, totalLength);
    if (innerRemainder.length === 0) {
      throw new Error('invalid rlp, List has a invalid length');
    }

    while (innerRemainder.length) {
      d = _decode(innerRemainder);
      decoded.push(d.data);
      innerRemainder = d.remainder;
    }
    return {
      data: decoded,
      remainder: input.slice(totalLength)
    };
  }
}

function isHexPrefixed(str) {
  return str.slice(0, 2) === '0x';
}

// Removes 0x from a given String
function stripHexPrefix(str) {
  if (typeof str !== 'string') {
    return str;
  }
  return isHexPrefixed(str) ? str.slice(2) : str;
}

function intToHex(i) {
  var hex = i.toString(16);
  if (hex.length % 2) {
    hex = '0' + hex;
  }

  return hex;
}

function padToEven(a) {
  if (a.length % 2) a = '0' + a;
  return a;
}

function intToBuffer(i) {
  var hex = intToHex(i);
  return new Buffer(hex, 'hex');
}

function toBuffer(v) {
  if (!Buffer.isBuffer(v)) {
    if (typeof v === 'string') {
      if (isHexPrefixed(v)) {
        v = new Buffer(padToEven(stripHexPrefix(v)), 'hex');
      } else {
        v = new Buffer(v);
      }
    } else if (typeof v === 'number') {
      if (!v) {
        v = new Buffer([]);
      } else {
        v = intToBuffer(v);
      }
    } else if (v === null || v === undefined) {
      v = new Buffer([]);
    } else if (v.toArray) {
      // converts a BN to a Buffer
      v = new Buffer(v.toArray());
    } else {
      throw new Error('invalid type');
    }
  }
  return v;
}

}).call(this,require("buffer").Buffer)
},{"assert":21,"buffer":62}],235:[function(require,module,exports){
'use strict';

module.exports = require('scryptsy');

},{"scryptsy":236}],236:[function(require,module,exports){
(function (Buffer){
'use strict';

var pbkdf2Sync = require('pbkdf2').pbkdf2Sync;

var MAX_VALUE = 0x7fffffff;

// N = Cpu cost, r = Memory cost, p = parallelization cost
function scrypt(key, salt, N, r, p, dkLen, progressCallback) {
  if (N === 0 || (N & N - 1) !== 0) throw Error('N must be > 0 and a power of 2');

  if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large');
  if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large');

  var XY = new Buffer(256 * r);
  var V = new Buffer(128 * r * N);

  // pseudo global
  var B32 = new Int32Array(16); // salsa20_8
  var x = new Int32Array(16); // salsa20_8
  var _X = new Buffer(64); // blockmix_salsa8

  // pseudo global
  var B = pbkdf2Sync(key, salt, 1, p * 128 * r, 'sha256');

  var tickCallback;
  if (progressCallback) {
    var totalOps = p * N * 2;
    var currentOp = 0;

    tickCallback = function tickCallback() {
      ++currentOp;

      // send progress notifications once every 1,000 ops
      if (currentOp % 1000 === 0) {
        progressCallback({
          current: currentOp,
          total: totalOps,
          percent: currentOp / totalOps * 100.0
        });
      }
    };
  }

  for (var i = 0; i < p; i++) {
    smix(B, i * 128 * r, r, N, V, XY);
  }

  return pbkdf2Sync(key, B, 1, dkLen, 'sha256');

  // all of these functions are actually moved to the top
  // due to function hoisting

  function smix(B, Bi, r, N, V, XY) {
    var Xi = 0;
    var Yi = 128 * r;
    var i;

    B.copy(XY, Xi, Bi, Bi + Yi);

    for (i = 0; i < N; i++) {
      XY.copy(V, i * Yi, Xi, Xi + Yi);
      blockmix_salsa8(XY, Xi, Yi, r);

      if (tickCallback) tickCallback();
    }

    for (i = 0; i < N; i++) {
      var offset = Xi + (2 * r - 1) * 64;
      var j = XY.readUInt32LE(offset) & N - 1;
      blockxor(V, j * Yi, XY, Xi, Yi);
      blockmix_salsa8(XY, Xi, Yi, r);

      if (tickCallback) tickCallback();
    }

    XY.copy(B, Bi, Xi, Xi + Yi);
  }

  function blockmix_salsa8(BY, Bi, Yi, r) {
    var i;

    arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64);

    for (i = 0; i < 2 * r; i++) {
      blockxor(BY, i * 64, _X, 0, 64);
      salsa20_8(_X);
      arraycopy(_X, 0, BY, Yi + i * 64, 64);
    }

    for (i = 0; i < r; i++) {
      arraycopy(BY, Yi + i * 2 * 64, BY, Bi + i * 64, 64);
    }

    for (i = 0; i < r; i++) {
      arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64);
    }
  }

  function R(a, b) {
    return a << b | a >>> 32 - b;
  }

  function salsa20_8(B) {
    var i;

    for (i = 0; i < 16; i++) {
      B32[i] = (B[i * 4 + 0] & 0xff) << 0;
      B32[i] |= (B[i * 4 + 1] & 0xff) << 8;
      B32[i] |= (B[i * 4 + 2] & 0xff) << 16;
      B32[i] |= (B[i * 4 + 3] & 0xff) << 24;
      // B32[i] = B.readUInt32LE(i*4)   <--- this is signficantly slower even in Node.js
    }

    arraycopy(B32, 0, x, 0, 16);

    for (i = 8; i > 0; i -= 2) {
      x[4] ^= R(x[0] + x[12], 7);
      x[8] ^= R(x[4] + x[0], 9);
      x[12] ^= R(x[8] + x[4], 13);
      x[0] ^= R(x[12] + x[8], 18);
      x[9] ^= R(x[5] + x[1], 7);
      x[13] ^= R(x[9] + x[5], 9);
      x[1] ^= R(x[13] + x[9], 13);
      x[5] ^= R(x[1] + x[13], 18);
      x[14] ^= R(x[10] + x[6], 7);
      x[2] ^= R(x[14] + x[10], 9);
      x[6] ^= R(x[2] + x[14], 13);
      x[10] ^= R(x[6] + x[2], 18);
      x[3] ^= R(x[15] + x[11], 7);
      x[7] ^= R(x[3] + x[15], 9);
      x[11] ^= R(x[7] + x[3], 13);
      x[15] ^= R(x[11] + x[7], 18);
      x[1] ^= R(x[0] + x[3], 7);
      x[2] ^= R(x[1] + x[0], 9);
      x[3] ^= R(x[2] + x[1], 13);
      x[0] ^= R(x[3] + x[2], 18);
      x[6] ^= R(x[5] + x[4], 7);
      x[7] ^= R(x[6] + x[5], 9);
      x[4] ^= R(x[7] + x[6], 13);
      x[5] ^= R(x[4] + x[7], 18);
      x[11] ^= R(x[10] + x[9], 7);
      x[8] ^= R(x[11] + x[10], 9);
      x[9] ^= R(x[8] + x[11], 13);
      x[10] ^= R(x[9] + x[8], 18);
      x[12] ^= R(x[15] + x[14], 7);
      x[13] ^= R(x[12] + x[15], 9);
      x[14] ^= R(x[13] + x[12], 13);
      x[15] ^= R(x[14] + x[13], 18);
    }

    for (i = 0; i < 16; ++i) {
      B32[i] = x[i] + B32[i];
    }for (i = 0; i < 16; i++) {
      var bi = i * 4;
      B[bi + 0] = B32[i] >> 0 & 0xff;
      B[bi + 1] = B32[i] >> 8 & 0xff;
      B[bi + 2] = B32[i] >> 16 & 0xff;
      B[bi + 3] = B32[i] >> 24 & 0xff;
      // B.writeInt32LE(B32[i], i*4)  //<--- this is signficantly slower even in Node.js
    }
  }

  // naive approach... going back to loop unrolling may yield additional performance
  function blockxor(S, Si, D, Di, len) {
    for (var i = 0; i < len; i++) {
      D[Di + i] ^= S[Si + i];
    }
  }
}

function arraycopy(src, srcPos, dest, destPos, length) {
  if (Buffer.isBuffer(src) && Buffer.isBuffer(dest)) {
    src.copy(dest, destPos, srcPos, srcPos + length);
  } else {
    while (length--) {
      dest[destPos++] = src[srcPos++];
    }
  }
}

module.exports = scrypt;

}).call(this,require("buffer").Buffer)
},{"buffer":62,"pbkdf2":210}],237:[function(require,module,exports){
'use strict';

module.exports = require('./lib')(require('./lib/elliptic'));

},{"./lib":241,"./lib/elliptic":240}],238:[function(require,module,exports){
(function (Buffer){
'use strict';

var toString = Object.prototype.toString;

// TypeError
exports.isArray = function (value, message) {
  if (!Array.isArray(value)) throw TypeError(message);
};

exports.isBoolean = function (value, message) {
  if (toString.call(value) !== '[object Boolean]') throw TypeError(message);
};

exports.isBuffer = function (value, message) {
  if (!Buffer.isBuffer(value)) throw TypeError(message);
};

exports.isFunction = function (value, message) {
  if (toString.call(value) !== '[object Function]') throw TypeError(message);
};

exports.isNumber = function (value, message) {
  if (toString.call(value) !== '[object Number]') throw TypeError(message);
};

exports.isObject = function (value, message) {
  if (toString.call(value) !== '[object Object]') throw TypeError(message);
};

// RangeError
exports.isBufferLength = function (buffer, length, message) {
  if (buffer.length !== length) throw RangeError(message);
};

exports.isBufferLength2 = function (buffer, length1, length2, message) {
  if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message);
};

exports.isLengthGTZero = function (value, message) {
  if (value.length === 0) throw RangeError(message);
};

exports.isNumberInInterval = function (number, x, y, message) {
  if (number <= x || number >= y) throw RangeError(message);
};

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":161}],239:[function(require,module,exports){
(function (Buffer){
'use strict';

var bip66 = require('bip66');

var EC_PRIVKEY_EXPORT_DER_COMPRESSED = new Buffer([
// begin
0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
// private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// middle
0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
// public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = new Buffer([
// begin
0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
// private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// middle
0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
// public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

var ZERO_BUFFER_32 = new Buffer([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

exports.privateKeyExport = function (privateKey, publicKey, compressed) {
  var result = new Buffer(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
  privateKey.copy(result, compressed ? 8 : 9);
  publicKey.copy(result, compressed ? 181 : 214);
  return result;
};

exports.privateKeyImport = function (privateKey) {
  var length = privateKey.length;

  // sequence header
  var index = 0;
  if (length < index + 1 || privateKey[index] !== 0x30) return;
  index += 1;

  // sequence length constructor
  if (length < index + 1 || !(privateKey[index] & 0x80)) return;

  var lenb = privateKey[index] & 0x7f;
  index += 1;
  if (lenb < 1 || lenb > 2) return;
  if (length < index + lenb) return;

  // sequence length
  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
  index += lenb;
  if (length < index + len) return;

  // sequence element 0: version number (=1)
  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
    return;
  }
  index += 3;

  // sequence element 1: octet string, up to 32 bytes
  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
    return;
  }

  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};

exports.signatureExport = function (sigObj) {
  var r = Buffer.concat([new Buffer([0]), sigObj.r]);
  for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR) {}

  var s = Buffer.concat([new Buffer([0]), sigObj.s]);
  for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS) {}

  return bip66.encode(r.slice(posR), s.slice(posS));
};

exports.signatureImport = function (sig) {
  var r = new Buffer(ZERO_BUFFER_32);
  var s = new Buffer(ZERO_BUFFER_32);

  try {
    var sigObj = bip66.decode(sig);
    if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1);
    if (sigObj.r.length > 32) throw new Error('R length is too long');
    if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1);
    if (sigObj.s.length > 32) throw new Error('S length is too long');
  } catch (err) {
    return;
  }

  sigObj.r.copy(r, 32 - sigObj.r.length);
  sigObj.s.copy(s, 32 - sigObj.s.length);

  return { r: r, s: s };
};

exports.signatureImportLax = function (sig) {
  var r = new Buffer(ZERO_BUFFER_32);
  var s = new Buffer(ZERO_BUFFER_32);

  var length = sig.length;
  var index = 0;

  // sequence tag byte
  if (sig[index++] !== 0x30) return;

  // sequence length byte
  var lenbyte = sig[index++];
  if (lenbyte & 0x80) {
    index += lenbyte - 0x80;
    if (index > length) return;
  }

  // sequence tag byte for r
  if (sig[index++] !== 0x02) return;

  // length for r
  var rlen = sig[index++];
  if (rlen & 0x80) {
    lenbyte = rlen - 0x80;
    if (index + lenbyte > length) return;
    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1) {}
    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
      rlen = (rlen << 8) + sig[index];
    }
  }
  if (rlen > length - index) return;
  var rindex = index;
  index += rlen;

  // sequence tag byte for s
  if (sig[index++] !== 0x02) return;

  // length for s
  var slen = sig[index++];
  if (slen & 0x80) {
    lenbyte = slen - 0x80;
    if (index + lenbyte > length) return;
    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1) {}
    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
      slen = (slen << 8) + sig[index];
    }
  }
  if (slen > length - index) return;
  var sindex = index;
  index += slen;

  // ignore leading zeros in r
  for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1) {}
  // copy r value
  if (rlen > 32) return;
  var rvalue = sig.slice(rindex, rindex + rlen);
  rvalue.copy(r, 32 - rvalue.length);

  // ignore leading zeros in s
  for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1) {}
  // copy s value
  if (slen > 32) return;
  var svalue = sig.slice(sindex, sindex + slen);
  svalue.copy(s, 32 - svalue.length);

  return { r: r, s: s };
};

}).call(this,require("buffer").Buffer)
},{"bip66":29,"buffer":62}],240:[function(require,module,exports){
(function (Buffer){
'use strict';

var createHash = require('create-hash');
var BN = require('bn.js');
var EC = require('elliptic').ec;

var messages = require('../messages.json');

var ec = new EC('secp256k1');
var ecparams = ec.curve;

function loadCompressedPublicKey(first, xBuffer) {
  var x = new BN(xBuffer);

  // overflow
  if (x.cmp(ecparams.p) >= 0) return null;
  x = x.toRed(ecparams.red);

  // compute corresponding Y
  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
  if (first === 0x03 !== y.isOdd()) y = y.redNeg();

  return ec.keyPair({ pub: { x: x, y: y } });
}

function loadUncompressedPublicKey(first, xBuffer, yBuffer) {
  var x = new BN(xBuffer);
  var y = new BN(yBuffer);

  // overflow
  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;

  x = x.toRed(ecparams.red);
  y = y.toRed(ecparams.red);

  // is odd flag
  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null;

  // x*x*x + b = y*y
  var x3 = x.redSqr().redIMul(x);
  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;

  return ec.keyPair({ pub: { x: x, y: y } });
}

function loadPublicKey(publicKey) {
  var first = publicKey[0];
  switch (first) {
    case 0x02:
    case 0x03:
      if (publicKey.length !== 33) return null;
      return loadCompressedPublicKey(first, publicKey.slice(1, 33));
    case 0x04:
    case 0x06:
    case 0x07:
      if (publicKey.length !== 65) return null;
      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65));
    default:
      return null;
  }
}

exports.privateKeyVerify = function (privateKey) {
  var bn = new BN(privateKey);
  return bn.cmp(ecparams.n) < 0 && !bn.isZero();
};

exports.privateKeyExport = function (privateKey, compressed) {
  var d = new BN(privateKey);
  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL);

  return new Buffer(ec.keyFromPrivate(privateKey).getPublic(compressed, true));
};

exports.privateKeyTweakAdd = function (privateKey, tweak) {
  var bn = new BN(tweak);
  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);

  bn.iadd(new BN(privateKey));
  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);

  return bn.toArrayLike(Buffer, 'be', 32);
};

exports.privateKeyTweakMul = function (privateKey, tweak) {
  var bn = new BN(tweak);
  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL);

  bn.imul(new BN(privateKey));
  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n);

  return bn.toArrayLike(Buffer, 'be', 32);
};

exports.publicKeyCreate = function (privateKey, compressed) {
  var d = new BN(privateKey);
  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL);

  return new Buffer(ec.keyFromPrivate(privateKey).getPublic(compressed, true));
};

exports.publicKeyConvert = function (publicKey, compressed) {
  var pair = loadPublicKey(publicKey);
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);

  return new Buffer(pair.getPublic(compressed, true));
};

exports.publicKeyVerify = function (publicKey) {
  return loadPublicKey(publicKey) !== null;
};

exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
  var pair = loadPublicKey(publicKey);
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);

  tweak = new BN(tweak);
  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);

  return new Buffer(ecparams.g.mul(tweak).add(pair.pub).encode(true, compressed));
};

exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
  var pair = loadPublicKey(publicKey);
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);

  tweak = new BN(tweak);
  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL);

  return new Buffer(pair.pub.mul(tweak).encode(true, compressed));
};

exports.publicKeyCombine = function (publicKeys, compressed) {
  var pairs = new Array(publicKeys.length);
  for (var i = 0; i < publicKeys.length; ++i) {
    pairs[i] = loadPublicKey(publicKeys[i]);
    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
  }

  var point = pairs[0].pub;
  for (var j = 1; j < pairs.length; ++j) {
    point = point.add(pairs[j].pub);
  }if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL);

  return new Buffer(point.encode(true, compressed));
};

exports.signatureNormalize = function (signature) {
  var r = new BN(signature.slice(0, 32));
  var s = new BN(signature.slice(32, 64));
  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);

  var result = new Buffer(signature);
  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32);

  return result;
};

exports.signatureExport = function (signature) {
  var r = signature.slice(0, 32);
  var s = signature.slice(32, 64);
  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);

  return { r: r, s: s };
};

exports.signatureImport = function (sigObj) {
  var r = new BN(sigObj.r);
  if (r.cmp(ecparams.n) >= 0) r = new BN(0);

  var s = new BN(sigObj.s);
  if (s.cmp(ecparams.n) >= 0) s = new BN(0);

  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
};

exports.sign = function (message, privateKey, noncefn, data) {
  if (typeof noncefn === 'function') {
    var getNonce = noncefn;
    noncefn = function noncefn(counter) {
      var nonce = getNonce(message, privateKey, null, data, counter);
      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL);

      return new BN(nonce);
    };
  }

  var d = new BN(privateKey);
  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL);

  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data });
  return {
    signature: Buffer.concat([result.r.toArrayLike(Buffer, 'be', 32), result.s.toArrayLike(Buffer, 'be', 32)]),
    recovery: result.recoveryParam
  };
};

exports.verify = function (message, signature, publicKey) {
  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) };

  var sigr = new BN(sigObj.r);
  var sigs = new BN(sigObj.s);
  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);
  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false;

  var pair = loadPublicKey(publicKey);
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);

  return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y });
};

exports.recover = function (message, signature, recovery, compressed) {
  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) };

  var sigr = new BN(sigObj.r);
  var sigs = new BN(sigObj.s);
  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);

  try {
    if (sigr.isZero() || sigs.isZero()) throw new Error();

    var point = ec.recoverPubKey(message, sigObj, recovery);
    return new Buffer(point.encode(true, compressed));
  } catch (err) {
    throw new Error(messages.ECDSA_RECOVER_FAIL);
  }
};

exports.ecdh = function (publicKey, privateKey) {
  var shared = exports.ecdhUnsafe(publicKey, privateKey, true);
  return createHash('sha256').update(shared).digest();
};

exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
  var pair = loadPublicKey(publicKey);
  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);

  var scalar = new BN(privateKey);
  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL);

  return new Buffer(pair.pub.mul(scalar).encode(true, compressed));
};

}).call(this,require("buffer").Buffer)
},{"../messages.json":242,"bn.js":30,"buffer":62,"create-hash":68,"elliptic":85}],241:[function(require,module,exports){
'use strict';

var assert = require('./assert');
var der = require('./der');
var messages = require('./messages.json');

function initCompressedValue(value, defaultValue) {
  if (value === undefined) return defaultValue;

  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID);
  return value;
}

module.exports = function (secp256k1) {
  return {
    privateKeyVerify: function privateKeyVerify(privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey);
    },

    privateKeyExport: function privateKeyExport(privateKey, compressed) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

      compressed = initCompressedValue(compressed, true);
      var publicKey = secp256k1.privateKeyExport(privateKey, compressed);

      return der.privateKeyExport(privateKey, publicKey, compressed);
    },

    privateKeyImport: function privateKeyImport(privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);

      privateKey = der.privateKeyImport(privateKey);
      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey;

      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL);
    },

    privateKeyTweakAdd: function privateKeyTweakAdd(privateKey, tweak) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);

      return secp256k1.privateKeyTweakAdd(privateKey, tweak);
    },

    privateKeyTweakMul: function privateKeyTweakMul(privateKey, tweak) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);

      return secp256k1.privateKeyTweakMul(privateKey, tweak);
    },

    publicKeyCreate: function publicKeyCreate(privateKey, compressed) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

      compressed = initCompressedValue(compressed, true);

      return secp256k1.publicKeyCreate(privateKey, compressed);
    },

    publicKeyConvert: function publicKeyConvert(publicKey, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

      compressed = initCompressedValue(compressed, true);

      return secp256k1.publicKeyConvert(publicKey, compressed);
    },

    publicKeyVerify: function publicKeyVerify(publicKey) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      return secp256k1.publicKeyVerify(publicKey);
    },

    publicKeyTweakAdd: function publicKeyTweakAdd(publicKey, tweak, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);

      compressed = initCompressedValue(compressed, true);

      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed);
    },

    publicKeyTweakMul: function publicKeyTweakMul(publicKey, tweak, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);

      compressed = initCompressedValue(compressed, true);

      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed);
    },

    publicKeyCombine: function publicKeyCombine(publicKeys, compressed) {
      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID);
      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID);
      for (var i = 0; i < publicKeys.length; ++i) {
        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID);
        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
      }

      compressed = initCompressedValue(compressed, true);

      return secp256k1.publicKeyCombine(publicKeys, compressed);
    },

    signatureNormalize: function signatureNormalize(signature) {
      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

      return secp256k1.signatureNormalize(signature);
    },

    signatureExport: function signatureExport(signature) {
      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

      var sigObj = secp256k1.signatureExport(signature);
      return der.signatureExport(sigObj);
    },

    signatureImport: function signatureImport(sig) {
      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

      var sigObj = der.signatureImport(sig);
      if (sigObj) return secp256k1.signatureImport(sigObj);

      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);
    },

    signatureImportLax: function signatureImportLax(sig) {
      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

      var sigObj = der.signatureImportLax(sig);
      if (sigObj) return secp256k1.signatureImport(sigObj);

      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);
    },

    sign: function sign(message, privateKey, options) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);

      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

      var data = null;
      var noncefn = null;
      if (options !== undefined) {
        assert.isObject(options, messages.OPTIONS_TYPE_INVALID);

        if (options.data !== undefined) {
          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID);
          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID);
          data = options.data;
        }

        if (options.noncefn !== undefined) {
          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID);
          noncefn = options.noncefn;
        }
      }

      return secp256k1.sign(message, privateKey, noncefn, data);
    },

    verify: function verify(message, signature, publicKey) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);

      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

      return secp256k1.verify(message, signature, publicKey);
    },

    recover: function recover(message, signature, recovery, compressed) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);

      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID);
      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID);

      compressed = initCompressedValue(compressed, true);

      return secp256k1.recover(message, signature, recovery, compressed);
    },

    ecdh: function ecdh(publicKey, privateKey) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

      return secp256k1.ecdh(publicKey, privateKey);
    },

    ecdhUnsafe: function ecdhUnsafe(publicKey, privateKey, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

      compressed = initCompressedValue(compressed, true);

      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed);
    }
  };
};

},{"./assert":238,"./der":239,"./messages.json":242}],242:[function(require,module,exports){
module.exports={
  "COMPRESSED_TYPE_INVALID": "compressed should be a boolean",
  "EC_PRIVATE_KEY_TYPE_INVALID": "private key should be a Buffer",
  "EC_PRIVATE_KEY_LENGTH_INVALID": "private key length is invalid",
  "EC_PRIVATE_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting private key is invalid",
  "EC_PRIVATE_KEY_TWEAK_MUL_FAIL": "tweak out of range",
  "EC_PRIVATE_KEY_EXPORT_DER_FAIL": "couldn't export to DER format",
  "EC_PRIVATE_KEY_IMPORT_DER_FAIL": "couldn't import from DER format",
  "EC_PUBLIC_KEYS_TYPE_INVALID": "public keys should be an Array",
  "EC_PUBLIC_KEYS_LENGTH_INVALID": "public keys Array should have at least 1 element",
  "EC_PUBLIC_KEY_TYPE_INVALID": "public key should be a Buffer",
  "EC_PUBLIC_KEY_LENGTH_INVALID": "public key length is invalid",
  "EC_PUBLIC_KEY_PARSE_FAIL": "the public key could not be parsed or is invalid",
  "EC_PUBLIC_KEY_CREATE_FAIL": "private was invalid, try again",
  "EC_PUBLIC_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting public key is invalid",
  "EC_PUBLIC_KEY_TWEAK_MUL_FAIL": "tweak out of range",
  "EC_PUBLIC_KEY_COMBINE_FAIL": "the sum of the public keys is not valid",
  "ECDH_FAIL": "scalar was invalid (zero or overflow)",
  "ECDSA_SIGNATURE_TYPE_INVALID": "signature should be a Buffer",
  "ECDSA_SIGNATURE_LENGTH_INVALID": "signature length is invalid",
  "ECDSA_SIGNATURE_PARSE_FAIL": "couldn't parse signature",
  "ECDSA_SIGNATURE_PARSE_DER_FAIL": "couldn't parse DER signature",
  "ECDSA_SIGNATURE_SERIALIZE_DER_FAIL": "couldn't serialize signature to DER format",
  "ECDSA_SIGN_FAIL": "nonce generation function failed or private key is invalid",
  "ECDSA_RECOVER_FAIL": "couldn't recover public key from signature",
  "MSG32_TYPE_INVALID": "message should be a Buffer",
  "MSG32_LENGTH_INVALID": "message length is invalid",
  "OPTIONS_TYPE_INVALID": "options should be an Object",
  "OPTIONS_DATA_TYPE_INVALID": "options.data should be a Buffer",
  "OPTIONS_DATA_LENGTH_INVALID": "options.data length is invalid",
  "OPTIONS_NONCEFN_TYPE_INVALID": "options.noncefn should be a Function",
  "RECOVERY_ID_TYPE_INVALID": "recovery should be a Number",
  "RECOVERY_ID_VALUE_INVALID": "recovery should have value between -1 and 4",
  "TWEAK_TYPE_INVALID": "tweak should be a Buffer",
  "TWEAK_LENGTH_INVALID": "tweak length is invalid"
}

},{}],243:[function(require,module,exports){
(function (process){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

;(function (global) {

	'use strict';

	function semaphore(capacity) {
		var semaphore = {
			capacity: capacity || 1,
			current: 0,
			queue: [],
			firstHere: false,

			take: function take() {
				if (semaphore.firstHere === false) {
					semaphore.current++;
					semaphore.firstHere = true;
					var isFirst = 1;
				} else {
					var isFirst = 0;
				}
				var item = { n: 1 };

				if (typeof arguments[0] == 'function') {
					item.task = arguments[0];
				} else {
					item.n = arguments[0];
				}

				if (arguments.length >= 2) {
					if (typeof arguments[1] == 'function') item.task = arguments[1];else item.n = arguments[1];
				}

				var task = item.task;
				item.task = function () {
					task(semaphore.leave);
				};

				if (semaphore.current + item.n - isFirst > semaphore.capacity) {
					if (isFirst === 1) {
						semaphore.current--;
						semaphore.firstHere = false;
					}
					return semaphore.queue.push(item);
				}

				semaphore.current += item.n - isFirst;
				item.task(semaphore.leave);
				if (isFirst === 1) semaphore.firstHere = false;
			},

			leave: function leave(n) {
				n = n || 1;

				semaphore.current -= n;

				if (!semaphore.queue.length) {
					if (semaphore.current < 0) {
						throw new Error('leave called too many times.');
					}

					return;
				}

				var item = semaphore.queue[0];

				if (item.n + semaphore.current > semaphore.capacity) {
					return;
				}

				semaphore.queue.shift();
				semaphore.current += item.n;

				if (typeof process != 'undefined' && process && typeof process.nextTick == 'function') {
					// node.js and the like
					process.nextTick(item.task);
				} else {
					setTimeout(item.task, 0);
				}
			}
		};

		return semaphore;
	};

	if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
		// node export
		module.exports = semaphore;
	} else if (typeof define === 'function' && define.amd) {
		// amd export
		define(function () {
			return semaphore;
		});
	} else {
		// browser global
		global.semaphore = semaphore;
	}
})(undefined);

}).call(this,require('_process'))
},{"_process":213}],244:[function(require,module,exports){
(function (Buffer){
'use strict';

// prototype class for hash functions
function Hash(blockSize, finalSize) {
  this._block = new Buffer(blockSize);
  this._finalSize = finalSize;
  this._blockSize = blockSize;
  this._len = 0;
  this._s = 0;
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8';
    data = new Buffer(data, enc);
  }

  var l = this._len += data.length;
  var s = this._s || 0;
  var f = 0;
  var buffer = this._block;

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - s % this._blockSize);
    var ch = t - f;

    for (var i = 0; i < ch; i++) {
      buffer[s % this._blockSize + i] = data[i + f];
    }

    s += ch;
    f += ch;

    if (s % this._blockSize === 0) {
      this._update(buffer);
    }
  }
  this._s = s;

  return this;
};

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8;

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80;

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1);

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block);
    this._block.fill(0);
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4);

  var hash = this._update(this._block) || this._hash();

  return enc ? hash.toString(enc) : hash;
};

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass');
};

module.exports = Hash;

}).call(this,require("buffer").Buffer)
},{"buffer":62}],245:[function(require,module,exports){
'use strict';

var _exports = module.exports = function SHA(algorithm) {
  algorithm = algorithm.toLowerCase();

  var Algorithm = _exports[algorithm];
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');

  return new Algorithm();
};

_exports.sha = require('./sha');
_exports.sha1 = require('./sha1');
_exports.sha224 = require('./sha224');
_exports.sha256 = require('./sha256');
_exports.sha384 = require('./sha384');
_exports.sha512 = require('./sha512');

},{"./sha":246,"./sha1":247,"./sha224":248,"./sha256":249,"./sha384":250,"./sha512":251}],246:[function(require,module,exports){
(function (Buffer){
'use strict';

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits');
var Hash = require('./hash');

var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

var W = new Array(80);

function Sha() {
  this.init();
  this._w = W;

  Hash.call(this, 64, 56);
}

inherits(Sha, Hash);

Sha.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;

  return this;
};

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha.prototype._update = function (M) {
  var W = this._w;

  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }for (; i < 80; ++i) {
    W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
  }for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;

    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha.prototype._hash = function () {
  var H = new Buffer(20);

  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);

  return H;
};

module.exports = Sha;

}).call(this,require("buffer").Buffer)
},{"./hash":244,"buffer":62,"inherits":160}],247:[function(require,module,exports){
(function (Buffer){
'use strict';

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits');
var Hash = require('./hash');

var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

var W = new Array(80);

function Sha1() {
  this.init();
  this._w = W;

  Hash.call(this, 64, 56);
}

inherits(Sha1, Hash);

Sha1.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;

  return this;
};

function rotl1(num) {
  return num << 1 | num >>> 31;
}

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha1.prototype._update = function (M) {
  var W = this._w;

  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }for (; i < 80; ++i) {
    W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
  }for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;

    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha1.prototype._hash = function () {
  var H = new Buffer(20);

  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);

  return H;
};

module.exports = Sha1;

}).call(this,require("buffer").Buffer)
},{"./hash":244,"buffer":62,"inherits":160}],248:[function(require,module,exports){
(function (Buffer){
'use strict';

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits');
var Sha256 = require('./sha256');
var Hash = require('./hash');

var W = new Array(64);

function Sha224() {
  this.init();

  this._w = W; // new Array(64)

  Hash.call(this, 64, 56);
}

inherits(Sha224, Sha256);

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8;
  this._b = 0x367cd507;
  this._c = 0x3070dd17;
  this._d = 0xf70e5939;
  this._e = 0xffc00b31;
  this._f = 0x68581511;
  this._g = 0x64f98fa7;
  this._h = 0xbefa4fa4;

  return this;
};

Sha224.prototype._hash = function () {
  var H = new Buffer(28);

  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);

  return H;
};

module.exports = Sha224;

}).call(this,require("buffer").Buffer)
},{"./hash":244,"./sha256":249,"buffer":62,"inherits":160}],249:[function(require,module,exports){
(function (Buffer){
'use strict';

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits');
var Hash = require('./hash');

var K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];

var W = new Array(64);

function Sha256() {
  this.init();

  this._w = W; // new Array(64)

  Hash.call(this, 64, 56);
}

inherits(Sha256, Hash);

Sha256.prototype.init = function () {
  this._a = 0x6a09e667;
  this._b = 0xbb67ae85;
  this._c = 0x3c6ef372;
  this._d = 0xa54ff53a;
  this._e = 0x510e527f;
  this._f = 0x9b05688c;
  this._g = 0x1f83d9ab;
  this._h = 0x5be0cd19;

  return this;
};

function ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0(x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}

function sigma1(x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}

function gamma0(x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}

function gamma1(x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}

Sha256.prototype._update = function (M) {
  var W = this._w;

  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;
  var f = this._f | 0;
  var g = this._g | 0;
  var h = this._h | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }for (; i < 64; ++i) {
    W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
  }for (var j = 0; j < 64; ++j) {
    var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
    var T2 = sigma0(a) + maj(a, b, c) | 0;

    h = g;
    g = f;
    f = e;
    e = d + T1 | 0;
    d = c;
    c = b;
    b = a;
    a = T1 + T2 | 0;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
  this._f = f + this._f | 0;
  this._g = g + this._g | 0;
  this._h = h + this._h | 0;
};

Sha256.prototype._hash = function () {
  var H = new Buffer(32);

  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);
  H.writeInt32BE(this._h, 28);

  return H;
};

module.exports = Sha256;

}).call(this,require("buffer").Buffer)
},{"./hash":244,"buffer":62,"inherits":160}],250:[function(require,module,exports){
(function (Buffer){
'use strict';

var inherits = require('inherits');
var SHA512 = require('./sha512');
var Hash = require('./hash');

var W = new Array(160);

function Sha384() {
  this.init();
  this._w = W;

  Hash.call(this, 128, 112);
}

inherits(Sha384, SHA512);

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d;
  this._bh = 0x629a292a;
  this._ch = 0x9159015a;
  this._dh = 0x152fecd8;
  this._eh = 0x67332667;
  this._fh = 0x8eb44a87;
  this._gh = 0xdb0c2e0d;
  this._hh = 0x47b5481d;

  this._al = 0xc1059ed8;
  this._bl = 0x367cd507;
  this._cl = 0x3070dd17;
  this._dl = 0xf70e5939;
  this._el = 0xffc00b31;
  this._fl = 0x68581511;
  this._gl = 0x64f98fa7;
  this._hl = 0xbefa4fa4;

  return this;
};

Sha384.prototype._hash = function () {
  var H = new Buffer(48);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);

  return H;
};

module.exports = Sha384;

}).call(this,require("buffer").Buffer)
},{"./hash":244,"./sha512":251,"buffer":62,"inherits":160}],251:[function(require,module,exports){
(function (Buffer){
'use strict';

var inherits = require('inherits');
var Hash = require('./hash');

var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

var W = new Array(160);

function Sha512() {
  this.init();
  this._w = W;

  Hash.call(this, 128, 112);
}

inherits(Sha512, Hash);

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667;
  this._bh = 0xbb67ae85;
  this._ch = 0x3c6ef372;
  this._dh = 0xa54ff53a;
  this._eh = 0x510e527f;
  this._fh = 0x9b05688c;
  this._gh = 0x1f83d9ab;
  this._hh = 0x5be0cd19;

  this._al = 0xf3bcc908;
  this._bl = 0x84caa73b;
  this._cl = 0xfe94f82b;
  this._dl = 0x5f1d36f1;
  this._el = 0xade682d1;
  this._fl = 0x2b3e6c1f;
  this._gl = 0xfb41bd6b;
  this._hl = 0x137e2179;

  return this;
};

function Ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0(x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}

function sigma1(x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}

function Gamma0(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}

function Gamma0l(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}

function Gamma1(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}

function Gamma1l(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}

function getCarry(a, b) {
  return a >>> 0 < b >>> 0 ? 1 : 0;
}

Sha512.prototype._update = function (M) {
  var W = this._w;

  var ah = this._ah | 0;
  var bh = this._bh | 0;
  var ch = this._ch | 0;
  var dh = this._dh | 0;
  var eh = this._eh | 0;
  var fh = this._fh | 0;
  var gh = this._gh | 0;
  var hh = this._hh | 0;

  var al = this._al | 0;
  var bl = this._bl | 0;
  var cl = this._cl | 0;
  var dl = this._dl | 0;
  var el = this._el | 0;
  var fl = this._fl | 0;
  var gl = this._gl | 0;
  var hl = this._hl | 0;

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4);
    W[i + 1] = M.readInt32BE(i * 4 + 4);
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2];
    var xl = W[i - 15 * 2 + 1];
    var gamma0 = Gamma0(xh, xl);
    var gamma0l = Gamma0l(xl, xh);

    xh = W[i - 2 * 2];
    xl = W[i - 2 * 2 + 1];
    var gamma1 = Gamma1(xh, xl);
    var gamma1l = Gamma1l(xl, xh);

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2];
    var Wi7l = W[i - 7 * 2 + 1];

    var Wi16h = W[i - 16 * 2];
    var Wi16l = W[i - 16 * 2 + 1];

    var Wil = gamma0l + Wi7l | 0;
    var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
    Wil = Wil + gamma1l | 0;
    Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
    Wil = Wil + Wi16l | 0;
    Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;

    W[i] = Wih;
    W[i + 1] = Wil;
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j];
    Wil = W[j + 1];

    var majh = maj(ah, bh, ch);
    var majl = maj(al, bl, cl);

    var sigma0h = sigma0(ah, al);
    var sigma0l = sigma0(al, ah);
    var sigma1h = sigma1(eh, el);
    var sigma1l = sigma1(el, eh);

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j];
    var Kil = K[j + 1];

    var chh = Ch(eh, fh, gh);
    var chl = Ch(el, fl, gl);

    var t1l = hl + sigma1l | 0;
    var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
    t1l = t1l + chl | 0;
    t1h = t1h + chh + getCarry(t1l, chl) | 0;
    t1l = t1l + Kil | 0;
    t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
    t1l = t1l + Wil | 0;
    t1h = t1h + Wih + getCarry(t1l, Wil) | 0;

    // t2 = sigma0 + maj
    var t2l = sigma0l + majl | 0;
    var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;

    hh = gh;
    hl = gl;
    gh = fh;
    gl = fl;
    fh = eh;
    fl = el;
    el = dl + t1l | 0;
    eh = dh + t1h + getCarry(el, dl) | 0;
    dh = ch;
    dl = cl;
    ch = bh;
    cl = bl;
    bh = ah;
    bl = al;
    al = t1l + t2l | 0;
    ah = t1h + t2h + getCarry(al, t1l) | 0;
  }

  this._al = this._al + al | 0;
  this._bl = this._bl + bl | 0;
  this._cl = this._cl + cl | 0;
  this._dl = this._dl + dl | 0;
  this._el = this._el + el | 0;
  this._fl = this._fl + fl | 0;
  this._gl = this._gl + gl | 0;
  this._hl = this._hl + hl | 0;

  this._ah = this._ah + ah + getCarry(this._al, al) | 0;
  this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
  this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
  this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
  this._eh = this._eh + eh + getCarry(this._el, el) | 0;
  this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
  this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
  this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};

Sha512.prototype._hash = function () {
  var H = new Buffer(64);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);
  writeInt64BE(this._gh, this._gl, 48);
  writeInt64BE(this._hh, this._hl, 56);

  return H;
};

module.exports = Sha512;

}).call(this,require("buffer").Buffer)
},{"./hash":244,"buffer":62,"inherits":160}],252:[function(require,module,exports){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;

// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function (dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }

  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":148,"inherits":160,"readable-stream/duplex.js":222,"readable-stream/passthrough.js":229,"readable-stream/readable.js":230,"readable-stream/transform.js":231,"readable-stream/writable.js":232}],253:[function(require,module,exports){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding || function (encoding) {
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function (encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};

// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function (buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function (buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = buffer.length >= 3 ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function (buffer) {
  var res = '';
  if (buffer && buffer.length) res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":62}],254:[function(require,module,exports){
"use strict";

var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout = exports.clearInterval = function (timeout) {
  timeout.close();
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function () {};
Timeout.prototype.close = function () {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function (fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function (id) {
  delete immediateIds[id];
};

},{"process/browser.js":213}],255:[function(require,module,exports){
(function (global){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*! https://mths.be/utf8js v2.0.0 by @mathias */
;(function (root) {

	// Detect free variables `exports`
	var freeExports = (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) == 'object' && exports;

	// Detect free variable `module`
	var freeModule = (typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module && module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) {
					// low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
		}
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
	}

	function encodeCodePoint(codePoint) {
		if ((codePoint & 0xFFFFFF80) == 0) {
			// 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) {
			// 2-byte sequence
			symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
		} else if ((codePoint & 0xFFFF0000) == 0) {
			// 3-byte sequence
			checkScalarValue(codePoint);
			symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
			symbol += createByte(codePoint, 6);
		} else if ((codePoint & 0xFFE00000) == 0) {
			// 4-byte sequence
			symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
		return symbol;
	}

	function utf8encode(string) {
		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol() {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			var byte2 = readContinuationByte();
			codePoint = (byte1 & 0x1F) << 6 | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;
			if (codePoint >= 0x0800) {
				checkScalarValue(codePoint);
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = (byte1 & 0x0F) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString) {
		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol()) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var utf8 = {
		'version': '2.0.0',
		'encode': utf8encode,
		'decode': utf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {
		define(function () {
			return utf8;
		});
	} else if (freeExports && !freeExports.nodeType) {
		if (freeModule) {
			// in Node.js or RingoJS v0.8.0+
			freeModule.exports = utf8;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in utf8) {
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.utf8 = utf8;
	}
})(undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],256:[function(require,module,exports){
(function (global){
'use strict';

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate(fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config(name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],257:[function(require,module,exports){
arguments[4][160][0].apply(exports,arguments)
},{"dup":160}],258:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

module.exports = function isBuffer(arg) {
  return arg && (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

},{}],259:[function(require,module,exports){
(function (process,global){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function (f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s':
        return String(args[i++]);
      case '%d':
        return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};

// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function (fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function () {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};

var debugs = {};
var debugEnviron;
exports.debuglog = function (set) {
  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function () {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }
  return debugs[set];
};

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};

  array.forEach(function (val, idx) {
    hash[val] = true;
  });

  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) &&
  // Filter out the util module, it's inspect function is special
  value.inspect !== exports.inspect &&
  // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value)) return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function () {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function (origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":258,"_process":213,"inherits":257}],260:[function(require,module,exports){
(function (global){
"use strict";

var rng;

if (global.crypto && crypto.getRandomValues) {
  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
  // Moderately fast, high quality
  var _rnds8 = new Uint8Array(16);
  rng = function whatwgRNG() {
    crypto.getRandomValues(_rnds8);
    return _rnds8;
  };
}

if (!rng) {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var _rnds = new Array(16);
  rng = function rng() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return _rnds;
  };
}

module.exports = rng;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],261:[function(require,module,exports){
'use strict';

//     uuid.js
//
//     Copyright (c) 2010-2012 Robert Kieffer
//     MIT License - http://opensource.org/licenses/mit-license.php

// Unique ID creation requires a high quality random # generator.  We feature
// detect to determine the best RNG source, normalizing to a function that
// returns 128-bits of randomness, since that's what's usually required
var _rng = require('./rng');

// Maps for number <-> hex string conversion
var _byteToHex = [];
var _hexToByte = {};
for (var i = 0; i < 256; i++) {
  _byteToHex[i] = (i + 0x100).toString(16).substr(1);
  _hexToByte[_byteToHex[i]] = i;
}

// **`parse()` - Parse a UUID into it's component bytes**
function parse(s, buf, offset) {
  var i = buf && offset || 0,
      ii = 0;

  buf = buf || [];
  s.toLowerCase().replace(/[0-9a-f]{2}/g, function (oct) {
    if (ii < 16) {
      // Don't overflow!
      buf[i + ii++] = _hexToByte[oct];
    }
  });

  // Zero out remaining bytes if string was short
  while (ii < 16) {
    buf[i + ii++] = 0;
  }

  return buf;
}

// **`unparse()` - Convert UUID byte array (ala parse()) into a string**
function unparse(buf, offset) {
  var i = offset || 0,
      bth = _byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
}

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

// random #'s we need to init node and clockseq
var _seedBytes = _rng();

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
var _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];

// Per 4.2.2, randomize (14 bit) clockseq
var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

// Previous uuid creation time
var _lastMSecs = 0,
    _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};

  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  var node = options.node || _nodeId;
  for (var n = 0; n < 6; n++) {
    b[i + n] = node[n];
  }

  return buf ? buf : unparse(b);
}

// **`v4()` - Generate random UUID**

// See https://github.com/broofa/node-uuid for API details
function v4(options, buf, offset) {
  // Deprecated - 'format' argument, as supported in v1.2
  var i = buf && offset || 0;

  if (typeof options == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || _rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ii++) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || unparse(rnds);
}

// Export public API
var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;
uuid.parse = parse;
uuid.unparse = unparse;

module.exports = uuid;

},{"./rng":260}],262:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var indexOf = require('indexof');

var Object_keys = function Object_keys(obj) {
    if (Object.keys) return Object.keys(obj);else {
        var res = [];
        for (var key in obj) {
            res.push(key);
        }return res;
    }
};

var forEach = function forEach(xs, fn) {
    if (xs.forEach) return xs.forEach(fn);else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = function () {
    try {
        Object.defineProperty({}, '_', {});
        return function (obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            });
        };
    } catch (e) {
        return function (obj, name, value) {
            obj[name] = value;
        };
    }
}();

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function', 'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError', 'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape', 'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript(code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }

    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';

    document.body.appendChild(iframe);

    var win = iframe.contentWindow;
    var wEval = win.eval,
        wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }

    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });

    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);

    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });

    document.body.removeChild(iframe);

    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if ((typeof context === 'undefined' ? 'undefined' : _typeof(context)) === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":159}],263:[function(require,module,exports){
"use strict";

module.exports = extend;

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {};

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }

    return target;
}

},{}],264:[function(require,module,exports){
'use strict';

module.exports = {
  ABI: require('ethereumjs-abi'),
  Account: require('ethereumjs-account'),
  Block: require('ethereumjs-block'),
  Buffer: require('buffer'),
  BN: require('ethereumjs-util').BN,
  ICAP: require('ethereumjs-icap'),
  RLP: require('ethereumjs-util').rlp,
  Trie: require('merkle-patricia-tree'),
  Tx: require('ethereumjs-tx'),
  Units: require('ethereumjs-units'),
  Util: require('ethereumjs-util'),
  VM: require('ethereumjs-vm'),
  Wallet: require('ethereumjs-wallet'),
  WalletHD: require('ethereumjs-wallet/hdkey'),
  WalletThirdparty: require('ethereumjs-wallet/thirdparty')
};

},{"buffer":62,"ethereumjs-abi":107,"ethereumjs-account":109,"ethereumjs-block":111,"ethereumjs-icap":116,"ethereumjs-tx":117,"ethereumjs-units":118,"ethereumjs-util":120,"ethereumjs-vm":121,"ethereumjs-wallet":146,"ethereumjs-wallet/hdkey":145,"ethereumjs-wallet/thirdparty":147,"merkle-patricia-tree":194}]},{},[264])(264)
});